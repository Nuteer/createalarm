{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "b93dcd77e3f4a567a4aacac01b43f145bbdd5efb5e751a87133c8e8293b715b8": {
      "translations": {
        "python": {
          "source": "# Configure log group for short retention\nlog_group = LogGroup(stack, \"LogGroup\",\n    retention=RetentionDays.ONE_WEEK\n)# Configure log group for infinite retention\nlog_group = LogGroup(stack, \"LogGroup\",\n    retention=Infinity\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure log group for short retention\nLogGroup logGroup = new LogGroup(stack, \"LogGroup\", new LogGroupProps {\n    Retention = RetentionDays.ONE_WEEK\n});// Configure log group for infinite retention\nLogGroup logGroup = new LogGroup(stack, \"LogGroup\", new LogGroupProps {\n    Retention = Infinity\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure log group for short retention\nLogGroup logGroup = LogGroup.Builder.create(stack, \"LogGroup\")\n        .retention(RetentionDays.ONE_WEEK)\n        .build();// Configure log group for infinite retention\nLogGroup logGroup = LogGroup.Builder.create(stack, \"LogGroup\")\n        .retention(Infinity)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Configure log group for short retention\nconst logGroup = new LogGroup(stack, 'LogGroup', {\n  retention: RetentionDays.ONE_WEEK,\n});\n// Configure log group for infinite retention\nconst logGroup = new LogGroup(stack, 'LogGroup', {\n  retention: Infinity,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 35
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#ONE_WEEK"
      ],
      "fullSource": "import { Stack } from '@aws-cdk/core';\nimport { LogGroup, RetentionDays } from '../lib';\n\nconst stack = new Stack();\n\nfunction shortLogGroup() {\n  /// !show\n  // Configure log group for short retention\n  const logGroup = new LogGroup(stack, 'LogGroup', {\n    retention: RetentionDays.ONE_WEEK,\n  });\n  /// !hide\n  return logGroup;\n}\n\nfunction infiniteLogGroup() {\n  /// !show\n  // Configure log group for infinite retention\n  const logGroup = new LogGroup(stack, 'LogGroup', {\n    retention: Infinity,\n  });\n  /// !hide\n  return logGroup;\n}\n\n//\n\nArray.isArray(shortLogGroup);\nArray.isArray(infiniteLogGroup);\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "4005ce864799fdd74b5313e19f19414ae2e56ecca5538e4b36466b6db5a8e223"
    },
    "985b5df53091f5f49370710f19c29eb310deb4093e54070a97f1e242623ad2ee": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"LogGroup\")\nlog_group.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"logs:CreateLogStream\", \"logs:PutLogEvents\"],\n    principals=[iam.ServicePrincipal(\"es.amazonaws.com\")],\n    resources=[log_group.log_group_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"LogGroup\");\nlogGroup.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"logs:CreateLogStream\", \"logs:PutLogEvents\" },\n    Principals = new [] { new ServicePrincipal(\"es.amazonaws.com\") },\n    Resources = new [] { logGroup.LogGroupArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"LogGroup\");\nlogGroup.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"logs:CreateLogStream\", \"logs:PutLogEvents\"))\n        .principals(List.of(new ServicePrincipal(\"es.amazonaws.com\")))\n        .resources(List.of(logGroup.getLogGroupArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.addToResourcePolicy(new iam.PolicyStatement({\n    actions: ['logs:CreateLogStream', 'logs:PutLogEvents'],\n    principals: [new iam.ServicePrincipal('es.amazonaws.com')],\n    resources: [logGroup.logGroupArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 65
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroup#logGroupArn"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.addToResourcePolicy(new iam.PolicyStatement({\n    actions: ['logs:CreateLogStream', 'logs:PutLogEvents'],\n    principals: [new iam.ServicePrincipal('es.amazonaws.com')],\n    resources: [logGroup.logGroupArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "28466e338bf0d0c35288120e3aee0f9029e13a464566ee168e04570e7b85976e"
    },
    "3a8fcdb50dbc930d42a30acced3c4886f44813645c1eeaaa3ac4ad6674a201bf": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"LogGroup\")\nlog_group.grant_write(iam.ServicePrincipal(\"es.amazonaws.com\"))",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"LogGroup\");\nlogGroup.GrantWrite(new ServicePrincipal(\"es.amazonaws.com\"));",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"LogGroup\");\nlogGroup.grantWrite(new ServicePrincipal(\"es.amazonaws.com\"));",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.grantWrite(new iam.ServicePrincipal('es.amazonaws.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, 'LogGroup');\nlogGroup.grantWrite(new iam.ServicePrincipal('es.amazonaws.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "1abfefef5badaf7eafcd78b60cdd6b5e2ea7fba8507b675a23c53fb70d6845b0"
    },
    "9c70243a96fbdfb055298a91d88726d122e04fb5da04e12e8b74d35bf4d683e6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_kms as kms\n\n\nlogs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms.Key(self, \"Key\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KMS;\n\n\nnew LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = new Key(this, \"Key\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kms.*;\n\n\nLogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(new Key(this, \"Key\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as kms from '@aws-cdk/aws-kms';\n\nnew logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: new kms.Key(this, 'Key'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as kms from '@aws-cdk/aws-kms';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: new kms.Key(this, 'Key'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "226": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "31d63140373b3c57de5f9aace55241c079dc66121e74115ac4d899c0459756c6"
    },
    "cb2571c517166398accdd86db72c8d603ddfb40d3a126c7614414fbf43206a77": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs_destinations as destinations\n# fn is of type Function\n# log_group is of type LogGroup\n\n\nlogs.SubscriptionFilter(self, \"Subscription\",\n    log_group=log_group,\n    destination=destinations.LambdaDestination(fn),\n    filter_pattern=logs.FilterPattern.all_terms(\"ERROR\", \"MainThread\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs.Destinations;\nFunction fn;\nLogGroup logGroup;\n\n\nnew SubscriptionFilter(this, \"Subscription\", new SubscriptionFilterProps {\n    LogGroup = logGroup,\n    Destination = new LambdaDestination(fn),\n    FilterPattern = FilterPattern.AllTerms(\"ERROR\", \"MainThread\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.destinations.*;\nFunction fn;\nLogGroup logGroup;\n\n\nSubscriptionFilter.Builder.create(this, \"Subscription\")\n        .logGroup(logGroup)\n        .destination(new LambdaDestination(fn))\n        .filterPattern(FilterPattern.allTerms(\"ERROR\", \"MainThread\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 115
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-logs-destinations.LambdaDestination",
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#allTerms",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.ILogSubscriptionDestination",
        "@aws-cdk/aws-logs.SubscriptionFilter",
        "@aws-cdk/aws-logs.SubscriptionFilterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dbf295142ab2e9ba4dcc9327dd7160d5652639d1fc2f2ee87302125bb86e41ea"
    },
    "3e4f9df91c64586fbd3c7276422a7f18175545ca8825131b1a272f7de1dd4abd": {
      "translations": {
        "python": {
          "source": "MetricFilter(self, \"MetricFilter\",\n    log_group=log_group,\n    metric_namespace=\"MyApp\",\n    metric_name=\"Latency\",\n    filter_pattern=FilterPattern.exists(\"$.latency\"),\n    metric_value=\"$.latency\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new MetricFilter(this, \"MetricFilter\", new MetricFilterProps {\n    LogGroup = logGroup,\n    MetricNamespace = \"MyApp\",\n    MetricName = \"Latency\",\n    FilterPattern = FilterPattern.Exists(\"$.latency\"),\n    MetricValue = \"$.latency\"\n});",
          "version": "1"
        },
        "java": {
          "source": "MetricFilter.Builder.create(this, \"MetricFilter\")\n        .logGroup(logGroup)\n        .metricNamespace(\"MyApp\")\n        .metricName(\"Latency\")\n        .filterPattern(FilterPattern.exists(\"$.latency\"))\n        .metricValue(\"$.latency\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 139
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern#exists",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.MetricFilter",
        "@aws-cdk/aws-logs.MetricFilterProps",
        "@aws-cdk/core.RemovalPolicy"
      ],
      "fullSource": "import { App, RemovalPolicy, Stack, StackProps } from '@aws-cdk/core';\nimport { FilterPattern, LogGroup, MetricFilter } from '../lib';\n\nclass MetricFilterIntegStack extends Stack {\n  constructor(scope: App, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const logGroup = new LogGroup(this, 'LogGroup', {\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    /// !show\n    new MetricFilter(this, 'MetricFilter', {\n      logGroup,\n      metricNamespace: 'MyApp',\n      metricName: 'Latency',\n      filterPattern: FilterPattern.exists('$.latency'),\n      metricValue: '$.latency',\n    });\n    /// !hide\n  }\n}\n\nconst app = new App();\nnew MetricFilterIntegStack(app, 'aws-cdk-metricfilter-integ');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "99b1c977e2fc08d5c4d2cc199aec917ddb00998a40fdffc314b947953e3aab86"
    },
    "1055fce4065d6d23483cf42bc5062f7f6ec193d23f877f2a10dfede07e71b759": {
      "translations": {
        "python": {
          "source": "# log_group is of type LogGroup\n\nlog_group.extract_metric(\"$.jsonField\", \"Namespace\", \"MetricName\")",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup;\n\nlogGroup.ExtractMetric(\"$.jsonField\", \"Namespace\", \"MetricName\");",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup;\n\nlogGroup.extractMetric(\"$.jsonField\", \"Namespace\", \"MetricName\");",
          "version": "1"
        },
        "$": {
          "source": "declare const logGroup: logs.LogGroup;\nlogGroup.extractMetric('$.jsonField', 'Namespace', 'MetricName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 155
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const logGroup: logs.LogGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlogGroup.extractMetric('$.jsonField', 'Namespace', 'MetricName');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "286b56ff6fb84fcebe253f25a5a40c01e231a07aa6faf248597c5ab7243f1f6a": {
      "translations": {
        "python": {
          "source": "# log_group is of type LogGroup\n\nmf = logs.MetricFilter(self, \"MetricFilter\",\n    log_group=log_group,\n    metric_namespace=\"MyApp\",\n    metric_name=\"Latency\",\n    filter_pattern=logs.FilterPattern.exists(\"$.latency\"),\n    metric_value=\"$.latency\"\n)\n\n# expose a metric from the metric filter\nmetric = mf.metric()\n\n# you can use the metric to create a new alarm\ncloudwatch.Alarm(self, \"alarm from metric filter\",\n    metric=metric,\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup;\n\nMetricFilter mf = new MetricFilter(this, \"MetricFilter\", new MetricFilterProps {\n    LogGroup = logGroup,\n    MetricNamespace = \"MyApp\",\n    MetricName = \"Latency\",\n    FilterPattern = FilterPattern.Exists(\"$.latency\"),\n    MetricValue = \"$.latency\"\n});\n\n//expose a metric from the metric filter\nMetric metric = mf.Metric();\n\n//you can use the metric to create a new alarm\n//you can use the metric to create a new alarm\nnew Alarm(this, \"alarm from metric filter\", new AlarmProps {\n    Metric = metric,\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup;\n\nMetricFilter mf = MetricFilter.Builder.create(this, \"MetricFilter\")\n        .logGroup(logGroup)\n        .metricNamespace(\"MyApp\")\n        .metricName(\"Latency\")\n        .filterPattern(FilterPattern.exists(\"$.latency\"))\n        .metricValue(\"$.latency\")\n        .build();\n\n//expose a metric from the metric filter\nMetric metric = mf.metric();\n\n//you can use the metric to create a new alarm\n//you can use the metric to create a new alarm\nAlarm.Builder.create(this, \"alarm from metric filter\")\n        .metric(metric)\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const logGroup: logs.LogGroup;\nconst mf = new logs.MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: logs.FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});\n\n//expose a metric from the metric filter\nconst metric = mf.metric();\n\n//you can use the metric to create a new alarm\nnew cloudwatch.Alarm(this, 'alarm from metric filter', {\n  metric,\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 169
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#exists",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.MetricFilter",
        "@aws-cdk/aws-logs.MetricFilter#metric",
        "@aws-cdk/aws-logs.MetricFilterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const logGroup: logs.LogGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst mf = new logs.MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: logs.FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});\n\n//expose a metric from the metric filter\nconst metric = mf.metric();\n\n//you can use the metric to create a new alarm\nnew cloudwatch.Alarm(this, 'alarm from metric filter', {\n  metric,\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 22,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "3e8f05904f8cc459328e8be47e3e2b1ea89ea645ec3de98140fde47a8c0ae9b5"
    },
    "64e5b1c64c310e339119a8a76813d51249bad4471d11ec5074de3eb68096986b": {
      "translations": {
        "python": {
          "source": "# Search for lines that contain both \"ERROR\" and \"MainThread\"\npattern1 = logs.FilterPattern.all_terms(\"ERROR\", \"MainThread\")\n\n# Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n# both \"WARN\" and \"Deadlock\".\npattern2 = logs.FilterPattern.any_term_group([\"ERROR\", \"MainThread\"], [\"WARN\", \"Deadlock\"])",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nIFilterPattern pattern1 = FilterPattern.AllTerms(\"ERROR\", \"MainThread\");\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nIFilterPattern pattern2 = FilterPattern.AnyTermGroup(new [] { \"ERROR\", \"MainThread\" }, new [] { \"WARN\", \"Deadlock\" });",
          "version": "1"
        },
        "java": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nIFilterPattern pattern1 = FilterPattern.allTerms(\"ERROR\", \"MainThread\");\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nIFilterPattern pattern2 = FilterPattern.anyTermGroup(List.of(\"ERROR\", \"MainThread\"), List.of(\"WARN\", \"Deadlock\"));",
          "version": "1"
        },
        "$": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 225
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#allTerms",
        "@aws-cdk/aws-logs.FilterPattern#anyTermGroup",
        "@aws-cdk/aws-logs.IFilterPattern"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "192": 2,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "5ddcc4251313dda0663580d6112e97f9bddb899c9a72ed783f1c1793d4cb1345"
    },
    "5addc27a506797aac2c8825b92273f2c3a8c4e6a249763f9550a313229f0f2b5": {
      "translations": {
        "python": {
          "source": "# Search for all events where the component field is equal to\n# \"HttpServer\" and either error is true or the latency is higher\n# than 1000.\npattern = logs.FilterPattern.all(\n    logs.FilterPattern.string_value(\"$.component\", \"=\", \"HttpServer\"),\n    logs.FilterPattern.any(\n        logs.FilterPattern.boolean_value(\"$.error\", True),\n        logs.FilterPattern.number_value(\"$.latency\", \">\", 1000)))",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nJsonPattern pattern = FilterPattern.All(FilterPattern.StringValue(\"$.component\", \"=\", \"HttpServer\"), FilterPattern.Any(FilterPattern.BooleanValue(\"$.error\", true), FilterPattern.NumberValue(\"$.latency\", \">\", 1000)));",
          "version": "1"
        },
        "java": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nJsonPattern pattern = FilterPattern.all(FilterPattern.stringValue(\"$.component\", \"=\", \"HttpServer\"), FilterPattern.any(FilterPattern.booleanValue(\"$.error\", true), FilterPattern.numberValue(\"$.latency\", \">\", 1000)));",
          "version": "1"
        },
        "$": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 273
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#all",
        "@aws-cdk/aws-logs.FilterPattern#any",
        "@aws-cdk/aws-logs.FilterPattern#booleanValue",
        "@aws-cdk/aws-logs.FilterPattern#numberValue",
        "@aws-cdk/aws-logs.FilterPattern#stringValue",
        "@aws-cdk/aws-logs.JsonPattern"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 16,
        "106": 1,
        "194": 10,
        "196": 5,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "376fef3a73421cf7caf246b30cb963333eece753706ca50895d7c6c968c15d82"
    },
    "1f4ef47e33b7a9dce036335150bdbab991d9e3002577933b44ebe9bc66776980": {
      "translations": {
        "python": {
          "source": "# Search for all events where the component is \"HttpServer\" and the\n# result code is not equal to 200.\npattern = logs.FilterPattern.space_delimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").where_string(\"component\", \"=\", \"HttpServer\").where_number(\"result_code\", \"!=\", 200)",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nSpaceDelimitedTextPattern pattern = FilterPattern.SpaceDelimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").WhereString(\"component\", \"=\", \"HttpServer\").WhereNumber(\"result_code\", \"!=\", 200);",
          "version": "1"
        },
        "java": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nSpaceDelimitedTextPattern pattern = FilterPattern.spaceDelimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").whereString(\"component\", \"=\", \"HttpServer\").whereNumber(\"result_code\", \"!=\", 200);",
          "version": "1"
        },
        "$": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-logs"
        },
        "field": {
          "field": "markdown",
          "line": 314
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#spaceDelimited",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern#whereNumber",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern#whereString"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 6,
        "194": 4,
        "196": 3,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "21704a18ecdb7086d532c7467ee18fdfac540eb28f25941afb0687fc7d123836"
    },
    "bfad21d47988f4e3b5e9456c95d86fe7a5c8588743e4cab7dbbc6b154f23ca7d": {
      "translations": {
        "python": {
          "source": "# Search for lines that contain both \"ERROR\" and \"MainThread\"\npattern1 = logs.FilterPattern.all_terms(\"ERROR\", \"MainThread\")\n\n# Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n# both \"WARN\" and \"Deadlock\".\npattern2 = logs.FilterPattern.any_term_group([\"ERROR\", \"MainThread\"], [\"WARN\", \"Deadlock\"])",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nIFilterPattern pattern1 = FilterPattern.AllTerms(\"ERROR\", \"MainThread\");\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nIFilterPattern pattern2 = FilterPattern.AnyTermGroup(new [] { \"ERROR\", \"MainThread\" }, new [] { \"WARN\", \"Deadlock\" });",
          "version": "1"
        },
        "java": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nIFilterPattern pattern1 = FilterPattern.allTerms(\"ERROR\", \"MainThread\");\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nIFilterPattern pattern2 = FilterPattern.anyTermGroup(List.of(\"ERROR\", \"MainThread\"), List.of(\"WARN\", \"Deadlock\"));",
          "version": "1"
        },
        "$": {
          "source": "// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.FilterPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#allTerms",
        "@aws-cdk/aws-logs.FilterPattern#anyTermGroup",
        "@aws-cdk/aws-logs.IFilterPattern"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for lines that contain both \"ERROR\" and \"MainThread\"\nconst pattern1 = logs.FilterPattern.allTerms('ERROR', 'MainThread');\n\n// Search for lines that either contain both \"ERROR\" and \"MainThread\", or\n// both \"WARN\" and \"Deadlock\".\nconst pattern2 = logs.FilterPattern.anyTermGroup(\n  ['ERROR', 'MainThread'],\n  ['WARN', 'Deadlock'],\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 8,
        "192": 2,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "5ddcc4251313dda0663580d6112e97f9bddb899c9a72ed783f1c1793d4cb1345"
    },
    "3109921ac331d04e9934bcbafb0a134eba409bb56047de196c29f44d084e63c2": {
      "translations": {
        "python": {
          "source": "# Search for all events where the component field is equal to\n# \"HttpServer\" and either error is true or the latency is higher\n# than 1000.\npattern = logs.FilterPattern.all(\n    logs.FilterPattern.string_value(\"$.component\", \"=\", \"HttpServer\"),\n    logs.FilterPattern.any(\n        logs.FilterPattern.boolean_value(\"$.error\", True),\n        logs.FilterPattern.number_value(\"$.latency\", \">\", 1000)))",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nJsonPattern pattern = FilterPattern.All(FilterPattern.StringValue(\"$.component\", \"=\", \"HttpServer\"), FilterPattern.Any(FilterPattern.BooleanValue(\"$.error\", true), FilterPattern.NumberValue(\"$.latency\", \">\", 1000)));",
          "version": "1"
        },
        "java": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nJsonPattern pattern = FilterPattern.all(FilterPattern.stringValue(\"$.component\", \"=\", \"HttpServer\"), FilterPattern.any(FilterPattern.booleanValue(\"$.error\", true), FilterPattern.numberValue(\"$.latency\", \">\", 1000)));",
          "version": "1"
        },
        "$": {
          "source": "// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.JsonPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#all",
        "@aws-cdk/aws-logs.FilterPattern#any",
        "@aws-cdk/aws-logs.FilterPattern#booleanValue",
        "@aws-cdk/aws-logs.FilterPattern#numberValue",
        "@aws-cdk/aws-logs.FilterPattern#stringValue",
        "@aws-cdk/aws-logs.JsonPattern"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for all events where the component field is equal to\n// \"HttpServer\" and either error is true or the latency is higher\n// than 1000.\nconst pattern = logs.FilterPattern.all(\n  logs.FilterPattern.stringValue('$.component', '=', 'HttpServer'),\n  logs.FilterPattern.any(\n    logs.FilterPattern.booleanValue('$.error', true),\n    logs.FilterPattern.numberValue('$.latency', '>', 1000),\n  ),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 16,
        "106": 1,
        "194": 10,
        "196": 5,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "376fef3a73421cf7caf246b30cb963333eece753706ca50895d7c6c968c15d82"
    },
    "2e4d864fe45cc9533baf3455e79f1a141ff59f5a55a6f08ea67d948781b7927a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"Log Group\")\nlog_bucket = s3.Bucket(self, \"S3 Bucket\")\n\ntasks.EmrContainersStartJobRun(self, \"EMR Containers Start Job Run\",\n    virtual_cluster=tasks.VirtualClusterInput.from_virtual_cluster_id(\"de92jdei2910fwedz\"),\n    release_label=tasks.ReleaseLabel.EMR_6_2_0,\n    job_driver=tasks.JobDriver(\n        spark_submit_job_driver=tasks.SparkSubmitJobDriver(\n            entry_point=sfn.TaskInput.from_text(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            spark_submit_parameters=\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        )\n    ),\n    monitoring=tasks.Monitoring(\n        log_group=log_group,\n        log_bucket=log_bucket\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"Log Group\");\nBucket logBucket = new Bucket(this, \"S3 Bucket\");\n\nnew EmrContainersStartJobRun(this, \"EMR Containers Start Job Run\", new EmrContainersStartJobRunProps {\n    VirtualCluster = VirtualClusterInput.FromVirtualClusterId(\"de92jdei2910fwedz\"),\n    ReleaseLabel = ReleaseLabel.EMR_6_2_0,\n    JobDriver = new JobDriver {\n        SparkSubmitJobDriver = new SparkSubmitJobDriver {\n            EntryPoint = TaskInput.FromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"),\n            SparkSubmitParameters = \"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\"\n        }\n    },\n    Monitoring = new Monitoring {\n        LogGroup = logGroup,\n        LogBucket = logBucket\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"Log Group\");\nBucket logBucket = new Bucket(this, \"S3 Bucket\");\n\nEmrContainersStartJobRun.Builder.create(this, \"EMR Containers Start Job Run\")\n        .virtualCluster(VirtualClusterInput.fromVirtualClusterId(\"de92jdei2910fwedz\"))\n        .releaseLabel(ReleaseLabel.EMR_6_2_0)\n        .jobDriver(JobDriver.builder()\n                .sparkSubmitJobDriver(SparkSubmitJobDriver.builder()\n                        .entryPoint(TaskInput.fromText(\"local:///usr/lib/spark/examples/src/main/python/pi.py\"))\n                        .sparkSubmitParameters(\"--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1\")\n                        .build())\n                .build())\n        .monitoring(Monitoring.builder()\n                .logGroup(logGroup)\n                .logBucket(logBucket)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'Log Group');\nconst logBucket = new s3.Bucket(this, 'S3 Bucket')\n\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logGroup: logGroup,\n    logBucket: logBucket,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.LogGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRun",
        "@aws-cdk/aws-stepfunctions-tasks.EmrContainersStartJobRunProps",
        "@aws-cdk/aws-stepfunctions-tasks.JobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.Monitoring",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel",
        "@aws-cdk/aws-stepfunctions-tasks.ReleaseLabel#EMR_6_2_0",
        "@aws-cdk/aws-stepfunctions-tasks.SparkSubmitJobDriver",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput",
        "@aws-cdk/aws-stepfunctions-tasks.VirtualClusterInput#fromVirtualClusterId",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromText"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'Log Group');\nconst logBucket = new s3.Bucket(this, 'S3 Bucket')\n\nnew tasks.EmrContainersStartJobRun(this, 'EMR Containers Start Job Run', {\n  virtualCluster: tasks.VirtualClusterInput.fromVirtualClusterId('de92jdei2910fwedz'),\n  releaseLabel: tasks.ReleaseLabel.EMR_6_2_0,\n  jobDriver: {\n    sparkSubmitJobDriver: {\n      entryPoint: sfn.TaskInput.fromText('local:///usr/lib/spark/examples/src/main/python/pi.py'),\n      sparkSubmitParameters: '--conf spark.executor.instances=2 --conf spark.executor.memory=2G --conf spark.executor.cores=2 --conf spark.driver.cores=1',\n    },\n  },\n  monitoring: {\n    logGroup: logGroup,\n    logBucket: logBucket,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 29,
        "104": 3,
        "193": 4,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "813e4069f66429c4783293e9836733a1b71fd193e50106236a5ce64857ad0c82"
    },
    "ee9f1229de2f756f18135cc1ef31d8546321dd0899e71c7662f6ab417797fa8e": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.LogGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8d9aa7878e46d11babf63058b4914dffe453638399f6cc589b797fdeeec9366"
    },
    "6bca5d2cf393278ce8fd8b084186acfd088f4f9e2a2e5d93b87c0ed8962d82ec": {
      "translations": {
        "python": {
          "source": "MetricFilter(self, \"MetricFilter\",\n    log_group=log_group,\n    metric_namespace=\"MyApp\",\n    metric_name=\"Latency\",\n    filter_pattern=FilterPattern.exists(\"$.latency\"),\n    metric_value=\"$.latency\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new MetricFilter(this, \"MetricFilter\", new MetricFilterProps {\n    LogGroup = logGroup,\n    MetricNamespace = \"MyApp\",\n    MetricName = \"Latency\",\n    FilterPattern = FilterPattern.Exists(\"$.latency\"),\n    MetricValue = \"$.latency\"\n});",
          "version": "1"
        },
        "java": {
          "source": "MetricFilter.Builder.create(this, \"MetricFilter\")\n        .logGroup(logGroup)\n        .metricNamespace(\"MyApp\")\n        .metricName(\"Latency\")\n        .filterPattern(FilterPattern.exists(\"$.latency\"))\n        .metricValue(\"$.latency\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.MetricFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern#exists",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.MetricFilter",
        "@aws-cdk/aws-logs.MetricFilterProps",
        "@aws-cdk/core.RemovalPolicy"
      ],
      "fullSource": "import { App, RemovalPolicy, Stack, StackProps } from '@aws-cdk/core';\nimport { FilterPattern, LogGroup, MetricFilter } from '../lib';\n\nclass MetricFilterIntegStack extends Stack {\n  constructor(scope: App, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const logGroup = new LogGroup(this, 'LogGroup', {\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    /// !show\n    new MetricFilter(this, 'MetricFilter', {\n      logGroup,\n      metricNamespace: 'MyApp',\n      metricName: 'Latency',\n      filterPattern: FilterPattern.exists('$.latency'),\n      metricValue: '$.latency',\n    });\n    /// !hide\n  }\n}\n\nconst app = new App();\nnew MetricFilterIntegStack(app, 'aws-cdk-metricfilter-integ');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "99b1c977e2fc08d5c4d2cc199aec917ddb00998a40fdffc314b947953e3aab86"
    },
    "49a7b1c30c296767dec741736c7217978e0125e6e3a30094175387766a5ac969": {
      "translations": {
        "python": {
          "source": "MetricFilter(self, \"MetricFilter\",\n    log_group=log_group,\n    metric_namespace=\"MyApp\",\n    metric_name=\"Latency\",\n    filter_pattern=FilterPattern.exists(\"$.latency\"),\n    metric_value=\"$.latency\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new MetricFilter(this, \"MetricFilter\", new MetricFilterProps {\n    LogGroup = logGroup,\n    MetricNamespace = \"MyApp\",\n    MetricName = \"Latency\",\n    FilterPattern = FilterPattern.Exists(\"$.latency\"),\n    MetricValue = \"$.latency\"\n});",
          "version": "1"
        },
        "java": {
          "source": "MetricFilter.Builder.create(this, \"MetricFilter\")\n        .logGroup(logGroup)\n        .metricNamespace(\"MyApp\")\n        .metricName(\"Latency\")\n        .filterPattern(FilterPattern.exists(\"$.latency\"))\n        .metricValue(\"$.latency\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new MetricFilter(this, 'MetricFilter', {\n  logGroup,\n  metricNamespace: 'MyApp',\n  metricName: 'Latency',\n  filterPattern: FilterPattern.exists('$.latency'),\n  metricValue: '$.latency',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.MetricFilterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern#exists",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.MetricFilter",
        "@aws-cdk/aws-logs.MetricFilterProps",
        "@aws-cdk/core.RemovalPolicy"
      ],
      "fullSource": "import { App, RemovalPolicy, Stack, StackProps } from '@aws-cdk/core';\nimport { FilterPattern, LogGroup, MetricFilter } from '../lib';\n\nclass MetricFilterIntegStack extends Stack {\n  constructor(scope: App, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const logGroup = new LogGroup(this, 'LogGroup', {\n      removalPolicy: RemovalPolicy.DESTROY,\n    });\n\n    /// !show\n    new MetricFilter(this, 'MetricFilter', {\n      logGroup,\n      metricNamespace: 'MyApp',\n      metricName: 'Latency',\n      filterPattern: FilterPattern.exists('$.latency'),\n      metricValue: '$.latency',\n    });\n    /// !hide\n  }\n}\n\nconst app = new App();\nnew MetricFilterIntegStack(app, 'aws-cdk-metricfilter-integ');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "99b1c977e2fc08d5c4d2cc199aec917ddb00998a40fdffc314b947953e3aab86"
    },
    "8fb110add046eb766530d0d6d8253fc55534ec3c2697b56e998fc0b777ced6a9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n# my_logs_publishing_role is of type Role\n# vpc is of type Vpc\n\n\n# Exporting logs from a cluster\ncluster = rds.DatabaseCluster(self, \"Database\",\n    engine=rds.DatabaseClusterEngine.aurora(\n        version=rds.AuroraEngineVersion.VER_1_17_9\n    ),\n    instance_props=rds.InstanceProps(\n        vpc=vpc\n    ),\n    cloudwatch_logs_exports=[\"error\", \"general\", \"slowquery\", \"audit\"],  # Export all available MySQL-based logs\n    cloudwatch_logs_retention=logs.RetentionDays.THREE_MONTHS,  # Optional - default is to never expire logs\n    cloudwatch_logs_retention_role=my_logs_publishing_role\n)\n\n# Exporting logs from an instance\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.postgres(\n        version=rds.PostgresEngineVersion.VER_12_3\n    ),\n    vpc=vpc,\n    cloudwatch_logs_exports=[\"postgresql\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = new DatabaseCluster(this, \"Database\", new DatabaseClusterProps {\n    Engine = DatabaseClusterEngine.Aurora(new AuroraClusterEngineProps {\n        Version = AuroraEngineVersion.VER_1_17_9\n    }),\n    InstanceProps = new InstanceProps {\n        Vpc = vpc\n    },\n    CloudwatchLogsExports = new [] { \"error\", \"general\", \"slowquery\", \"audit\" },  // Export all available MySQL-based logs\n    CloudwatchLogsRetention = RetentionDays.THREE_MONTHS,  // Optional - default is to never expire logs\n    CloudwatchLogsRetentionRole = myLogsPublishingRole\n});\n\n// Exporting logs from an instance\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps {\n        Version = PostgresEngineVersion.VER_12_3\n    }),\n    Vpc = vpc,\n    CloudwatchLogsExports = new [] { \"postgresql\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\nRole myLogsPublishingRole;\nVpc vpc;\n\n\n// Exporting logs from a cluster\nDatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Database\")\n        .engine(DatabaseClusterEngine.aurora(AuroraClusterEngineProps.builder()\n                .version(AuroraEngineVersion.VER_1_17_9)\n                .build()))\n        .instanceProps(InstanceProps.builder()\n                .vpc(vpc)\n                .build())\n        .cloudwatchLogsExports(List.of(\"error\", \"general\", \"slowquery\", \"audit\")) // Export all available MySQL-based logs\n        .cloudwatchLogsRetention(RetentionDays.THREE_MONTHS) // Optional - default is to never expire logs\n        .cloudwatchLogsRetentionRole(myLogsPublishingRole)\n        .build();\n\n// Exporting logs from an instance\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder()\n                .version(PostgresEngineVersion.VER_12_3)\n                .build()))\n        .vpc(vpc)\n        .cloudwatchLogsExports(List.of(\"postgresql\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.RetentionDays"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-logs.RetentionDays",
        "@aws-cdk/aws-logs.RetentionDays#THREE_MONTHS",
        "@aws-cdk/aws-rds.AuroraClusterEngineProps",
        "@aws-cdk/aws-rds.AuroraEngineVersion",
        "@aws-cdk/aws-rds.AuroraEngineVersion#VER_1_17_9",
        "@aws-cdk/aws-rds.DatabaseCluster",
        "@aws-cdk/aws-rds.DatabaseClusterEngine",
        "@aws-cdk/aws-rds.DatabaseClusterEngine#aurora",
        "@aws-cdk/aws-rds.DatabaseClusterProps",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IClusterEngine",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.InstanceProps",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\ndeclare const myLogsPublishingRole: iam.Role;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Exporting logs from a cluster\nconst cluster = new rds.DatabaseCluster(this, 'Database', {\n  engine: rds.DatabaseClusterEngine.aurora({\n    version: rds.AuroraEngineVersion.VER_1_17_9, // different version class for each engine type\n  }),\n  instanceProps: {\n    vpc,\n  },\n  cloudwatchLogsExports: ['error', 'general', 'slowquery', 'audit'], // Export all available MySQL-based logs\n  cloudwatchLogsRetention: logs.RetentionDays.THREE_MONTHS, // Optional - default is to never expire logs\n  cloudwatchLogsRetentionRole: myLogsPublishingRole, // Optional - a role will be created if not provided\n  // ...\n});\n\n// Exporting logs from an instance\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.postgres({\n    version: rds.PostgresEngineVersion.VER_12_3,\n  }),\n  vpc,\n  cloudwatchLogsExports: ['postgresql'], // Export the PostgreSQL logs\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 40,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 5,
        "194": 12,
        "196": 2,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7b22067f1c51a10776fca49fabe6937336837796f42569e7e9299baebe430b3c"
    },
    "e3100cecd66104e8c90f3c8abe1721f33d9cb3982c7ecf3f2d5cdcf1e70fe36f": {
      "translations": {
        "python": {
          "source": "# Search for all events where the component is \"HttpServer\" and the\n# result code is not equal to 200.\npattern = logs.FilterPattern.space_delimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").where_string(\"component\", \"=\", \"HttpServer\").where_number(\"result_code\", \"!=\", 200)",
          "version": "1"
        },
        "csharp": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nSpaceDelimitedTextPattern pattern = FilterPattern.SpaceDelimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").WhereString(\"component\", \"=\", \"HttpServer\").WhereNumber(\"result_code\", \"!=\", 200);",
          "version": "1"
        },
        "java": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nSpaceDelimitedTextPattern pattern = FilterPattern.spaceDelimited(\"time\", \"component\", \"...\", \"result_code\", \"latency\").whereString(\"component\", \"=\", \"HttpServer\").whereNumber(\"result_code\", \"!=\", 200);",
          "version": "1"
        },
        "$": {
          "source": "// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.SpaceDelimitedTextPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#spaceDelimited",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern#whereNumber",
        "@aws-cdk/aws-logs.SpaceDelimitedTextPattern#whereString"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Search for all events where the component is \"HttpServer\" and the\n// result code is not equal to 200.\nconst pattern = logs.FilterPattern.spaceDelimited('time', 'component', '...', 'result_code', 'latency')\n  .whereString('component', '=', 'HttpServer')\n  .whereNumber('result_code', '!=', 200);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 6,
        "194": 4,
        "196": 3,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "21704a18ecdb7086d532c7467ee18fdfac540eb28f25941afb0687fc7d123836"
    },
    "380b31ec0a233180313e60f5d51f507fd42710460fa2993ce5008cec7ac1be7d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs_destinations as destinations\n# fn is of type Function\n# log_group is of type LogGroup\n\n\nlogs.SubscriptionFilter(self, \"Subscription\",\n    log_group=log_group,\n    destination=destinations.LambdaDestination(fn),\n    filter_pattern=logs.FilterPattern.all_terms(\"ERROR\", \"MainThread\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs.Destinations;\nFunction fn;\nLogGroup logGroup;\n\n\nnew SubscriptionFilter(this, \"Subscription\", new SubscriptionFilterProps {\n    LogGroup = logGroup,\n    Destination = new LambdaDestination(fn),\n    FilterPattern = FilterPattern.AllTerms(\"ERROR\", \"MainThread\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.destinations.*;\nFunction fn;\nLogGroup logGroup;\n\n\nSubscriptionFilter.Builder.create(this, \"Subscription\")\n        .logGroup(logGroup)\n        .destination(new LambdaDestination(fn))\n        .filterPattern(FilterPattern.allTerms(\"ERROR\", \"MainThread\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.SubscriptionFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-logs-destinations.LambdaDestination",
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#allTerms",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.ILogSubscriptionDestination",
        "@aws-cdk/aws-logs.SubscriptionFilter",
        "@aws-cdk/aws-logs.SubscriptionFilterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dbf295142ab2e9ba4dcc9327dd7160d5652639d1fc2f2ee87302125bb86e41ea"
    },
    "04aa8e9c2b277707d61a1ea8be222cf8e5631335b5135e9219c9d3fe23ad886a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs_destinations as destinations\n# fn is of type Function\n# log_group is of type LogGroup\n\n\nlogs.SubscriptionFilter(self, \"Subscription\",\n    log_group=log_group,\n    destination=destinations.LambdaDestination(fn),\n    filter_pattern=logs.FilterPattern.all_terms(\"ERROR\", \"MainThread\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs.Destinations;\nFunction fn;\nLogGroup logGroup;\n\n\nnew SubscriptionFilter(this, \"Subscription\", new SubscriptionFilterProps {\n    LogGroup = logGroup,\n    Destination = new LambdaDestination(fn),\n    FilterPattern = FilterPattern.AllTerms(\"ERROR\", \"MainThread\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.destinations.*;\nFunction fn;\nLogGroup logGroup;\n\n\nSubscriptionFilter.Builder.create(this, \"Subscription\")\n        .logGroup(logGroup)\n        .destination(new LambdaDestination(fn))\n        .filterPattern(FilterPattern.allTerms(\"ERROR\", \"MainThread\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-logs.SubscriptionFilterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-logs-destinations.LambdaDestination",
        "@aws-cdk/aws-logs.FilterPattern",
        "@aws-cdk/aws-logs.FilterPattern#allTerms",
        "@aws-cdk/aws-logs.IFilterPattern",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.ILogSubscriptionDestination",
        "@aws-cdk/aws-logs.SubscriptionFilter",
        "@aws-cdk/aws-logs.SubscriptionFilterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as destinations from '@aws-cdk/aws-logs-destinations';\ndeclare const fn: lambda.Function;\ndeclare const logGroup: logs.LogGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as logs from '@aws-cdk/aws-logs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew logs.SubscriptionFilter(this, 'Subscription', {\n  logGroup,\n  destination: new destinations.LambdaDestination(fn),\n  filterPattern: logs.FilterPattern.allTerms(\"ERROR\", \"MainThread\"),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dbf295142ab2e9ba4dcc9327dd7160d5652639d1fc2f2ee87302125bb86e41ea"
    }
  }
}
