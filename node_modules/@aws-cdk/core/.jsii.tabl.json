{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "dbbc7d38963743dd30456a59fe3451669202bc7e99cd3bc44bafdda154f4d496": {
      "translations": {
        "python": {
          "source": "class MyNestedStack(cfn.NestedStack):\n    def __init__(self, scope, id, *, parameters=None, timeout=None, notifications=None):\n        super().__init__(scope, id, parameters=parameters, timeout=timeout, notifications=notifications)\n\n        s3.Bucket(self, \"NestedBucket\")\n\nclass MyParentStack(Stack):\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        MyNestedStack(self, \"Nested1\")\n        MyNestedStack(self, \"Nested2\")",
          "version": "1"
        },
        "csharp": {
          "source": "class MyNestedStack : NestedStack\n{\n    public MyNestedStack(Construct scope, string id, NestedStackProps? props=null) : base(scope, id, props)\n    {\n\n        new Bucket(this, \"NestedBucket\");\n    }\n}\n\nclass MyParentStack : Stack\n{\n    public MyParentStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        new MyNestedStack(this, \"Nested1\");\n        new MyNestedStack(this, \"Nested2\");\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyNestedStack extends NestedStack {\n    public MyNestedStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyNestedStack(Construct scope, String id, NestedStackProps props) {\n        super(scope, id, props);\n\n        new Bucket(this, \"NestedBucket\");\n    }\n}\n\npublic class MyParentStack extends Stack {\n    public MyParentStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyParentStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        new MyNestedStack(this, \"Nested1\");\n        new MyNestedStack(this, \"Nested2\");\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyNestedStack extends cfn.NestedStack {\n  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {\n    super(scope, id, props);\n\n    new s3.Bucket(this, 'NestedBucket');\n  }\n}\n\nclass MyParentStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    new MyNestedStack(this, 'Nested1');\n    new MyNestedStack(this, 'Nested2');\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudformation.NestedStack",
        "@aws-cdk/aws-cloudformation.NestedStackProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyNestedStack extends cfn.NestedStack {\n  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {\n    super(scope, id, props);\n\n    new s3.Bucket(this, 'NestedBucket');\n  }\n}\n\nclass MyParentStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    new MyNestedStack(this, 'Nested1');\n    new MyNestedStack(this, 'Nested2');\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "57": 2,
        "75": 26,
        "102": 2,
        "104": 3,
        "143": 2,
        "153": 1,
        "156": 6,
        "162": 2,
        "169": 4,
        "194": 2,
        "196": 2,
        "197": 3,
        "216": 2,
        "223": 2,
        "226": 5,
        "245": 2,
        "279": 2
      },
      "fqnsFingerprint": "ef6fe19015617304dbc0c3e0d8e46fd478fa4f9a0a0625bbd497c696da5455d4"
    },
    "d4a0182d304e985a737bb1666f67d9d8300d9921c6ee00d7c5425b90da98f2fb": {
      "translations": {
        "python": {
          "source": "prod = {\"account\": \"123456789012\", \"region\": \"us-east-1\"}\n\nstack1 = StackThatProvidesABucket(app, \"Stack1\", env=prod)\n\n# stack2 will take a property { bucket: IBucket }\nstack2 = StackThatExpectsABucket(app, \"Stack2\",\n    bucket=stack1.bucket,\n    env=prod\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, string> prod = new Dictionary<string, string> { { \"account\", \"123456789012\" }, { \"region\", \"us-east-1\" } };\n\nStackThatProvidesABucket stack1 = new StackThatProvidesABucket(app, \"Stack1\", new StackProps { Env = prod });\n\n// stack2 will take a property { bucket: IBucket }\nStackThatExpectsABucket stack2 = new StackThatExpectsABucket(app, \"Stack2\", new StackThatExpectsABucketProps {\n    Bucket = stack1.Bucket,\n    Env = prod\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, String> prod = Map.of(\"account\", \"123456789012\", \"region\", \"us-east-1\");\n\nStackThatProvidesABucket stack1 = StackThatProvidesABucket.Builder.create(app, \"Stack1\").env(prod).build();\n\n// stack2 will take a property { bucket: IBucket }\nStackThatExpectsABucket stack2 = new StackThatExpectsABucket(app, \"Stack2\", new StackThatExpectsABucketProps()\n        .bucket(stack1.getBucket())\n        .env(prod)\n        );",
          "version": "1"
        },
        "$": {
          "source": "const prod = { account: '123456789012', region: 'us-east-1' };\n\nconst stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });\n\n// stack2 will take a property { bucket: IBucket }\nconst stack2 = new StackThatExpectsABucket(app, 'Stack2', {\n  bucket: stack1.bucket,\n  env: prod\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 104
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst prod = { account: '123456789012', region: 'us-east-1' };\n\nconst stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });\n\n// stack2 will take a property { bucket: IBucket }\nconst stack2 = new StackThatExpectsABucket(app, 'Stack2', {\n  bucket: stack1.bucket,\n  env: prod\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "193": 3,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "b86faafe2db08a858e4907fe8e9acd8d58b2f4af55ebed50bc951c46d97f7fe0"
    },
    "af8931250b0afe2fe6d6ebfb99df783afd5755d4fe262dd6415b9e2cfa12a395": {
      "translations": {
        "python": {
          "source": "Duration.seconds(300) # 5 minutes\nDuration.minutes(5) # 5 minutes\nDuration.hours(1) # 1 hour\nDuration.days(7) # 7 days\nDuration.parse(\"PT5M\")",
          "version": "1"
        },
        "csharp": {
          "source": "Duration.Seconds(300); // 5 minutes\nDuration.Minutes(5); // 5 minutes\nDuration.Hours(1); // 1 hour\nDuration.Days(7); // 7 days\nDuration.Parse(\"PT5M\");",
          "version": "1"
        },
        "java": {
          "source": "Duration.seconds(300); // 5 minutes\nDuration.minutes(5); // 5 minutes\nDuration.hours(1); // 1 hour\nDuration.days(7); // 7 days\nDuration.parse(\"PT5M\");",
          "version": "1"
        },
        "$": {
          "source": "Duration.seconds(300)   // 5 minutes\nDuration.minutes(5)     // 5 minutes\nDuration.hours(1)       // 1 hour\nDuration.days(7)        // 7 days\nDuration.parse('PT5M')  // 5 minutes",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 167
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#parse",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nDuration.seconds(300)   // 5 minutes\nDuration.minutes(5)     // 5 minutes\nDuration.hours(1)       // 1 hour\nDuration.days(7)        // 7 days\nDuration.parse('PT5M')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 1,
        "75": 10,
        "194": 5,
        "196": 5,
        "226": 5
      },
      "fqnsFingerprint": "ff4742cb220491e100ad89c1948ba01e31a7aff25edb0b26771254838ca8759c"
    },
    "0be2b0739fc41d887958acb059bcf02de34ba83c5ee4799fa709d099cbccff1e": {
      "translations": {
        "python": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)) # 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10))",
          "version": "1"
        },
        "csharp": {
          "source": "Duration.Minutes(1).Plus(Duration.Seconds(60)); // 2 minutes\nDuration.Minutes(5).Minus(Duration.Seconds(10));",
          "version": "1"
        },
        "java": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10));",
          "version": "1"
        },
        "$": {
          "source": "Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10)); // 290 secondes",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minus",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#plus",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nDuration.minutes(1).plus(Duration.seconds(60)); // 2 minutes\nDuration.minutes(5).minus(Duration.seconds(10));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "75": 10,
        "194": 6,
        "196": 6,
        "226": 2
      },
      "fqnsFingerprint": "e68309ac09be14e9bdd94bf3f0b7f835c410d21502d9ff7df51d1282a6f3d8b4"
    },
    "3d663a29fb56a1af9050019b75e3131800983e2ab294d1dce138a4a3d6ca63e5": {
      "translations": {
        "python": {
          "source": "Size.kibibytes(200) # 200 KiB\nSize.mebibytes(5) # 5 MiB\nSize.gibibytes(40) # 40 GiB\nSize.tebibytes(200) # 200 TiB\nSize.pebibytes(3)",
          "version": "1"
        },
        "csharp": {
          "source": "Size.Kibibytes(200); // 200 KiB\nSize.Mebibytes(5); // 5 MiB\nSize.Gibibytes(40); // 40 GiB\nSize.Tebibytes(200); // 200 TiB\nSize.Pebibytes(3);",
          "version": "1"
        },
        "java": {
          "source": "Size.kibibytes(200); // 200 KiB\nSize.mebibytes(5); // 5 MiB\nSize.gibibytes(40); // 40 GiB\nSize.tebibytes(200); // 200 TiB\nSize.pebibytes(3);",
          "version": "1"
        },
        "$": {
          "source": "Size.kibibytes(200) // 200 KiB\nSize.mebibytes(5)   // 5 MiB\nSize.gibibytes(40)  // 40 GiB\nSize.tebibytes(200) // 200 TiB\nSize.pebibytes(3)   // 3 PiB",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 189
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#gibibytes",
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#pebibytes",
        "@aws-cdk/core.Size#tebibytes"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.kibibytes(200) // 200 KiB\nSize.mebibytes(5)   // 5 MiB\nSize.gibibytes(40)  // 40 GiB\nSize.tebibytes(200) // 200 TiB\nSize.pebibytes(3)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 5,
        "75": 10,
        "194": 5,
        "196": 5,
        "226": 5
      },
      "fqnsFingerprint": "51bcc7b7bf81c13904df8520083ce24ace8a6585271d79caada5e3a772e7bace"
    },
    "3aa29e66a94ca0a2d22a7d1d1b4a6a287e5644f586c6d0ee1a848056b44264b2": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "1"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 201
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "ce57db5f62b71ba749a47894a5780dcb8a442e5248c97f04746bff62d40a979c": {
      "translations": {
        "python": {
          "source": "secret = SecretValue.secrets_manager(\"secretId\",\n    json_field=\"password\",  # optional: key of a JSON field to retrieve (defaults to all content),\n    version_id=\"id\",  # optional: id of the version (default AWSCURRENT)\n    version_stage=\"stage\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SecretValue secret = SecretValue.SecretsManager(\"secretId\", new SecretsManagerSecretOptions {\n    JsonField = \"password\",  // optional: key of a JSON field to retrieve (defaults to all content),\n    VersionId = \"id\",  // optional: id of the version (default AWSCURRENT)\n    VersionStage = \"stage\"\n});",
          "version": "1"
        },
        "java": {
          "source": "SecretValue secret = SecretValue.secretsManager(\"secretId\", SecretsManagerSecretOptions.builder()\n        .jsonField(\"password\") // optional: key of a JSON field to retrieve (defaults to all content),\n        .versionId(\"id\") // optional: id of the version (default AWSCURRENT)\n        .versionStage(\"stage\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 214
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "8caa62eb9852331b491204219bfac72ec5a73996ebf0731e8fd4de94adbbc066"
    },
    "f9640aa5487b60508b7324c9e92bd77ddfc75bb4af3b4ea673cb59afeb204772": {
      "translations": {
        "python": {
          "source": "# stack is of type Stack\n\n\n# Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.format_arn(\n    service=\"lambda\",\n    resource=\"function\",\n    sep=\":\",\n    resource_name=\"MyFunction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Stack stack;\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.FormatArn(new ArnComponents {\n    Service = \"lambda\",\n    Resource = \"function\",\n    Sep = \":\",\n    ResourceName = \"MyFunction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn(ArnComponents.builder()\n        .service(\"lambda\")\n        .resource(\"function\")\n        .sep(\":\")\n        .resourceName(\"MyFunction\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn({\n  service: 'lambda',\n  resource: 'function',\n  sep: ':',\n  resourceName: 'MyFunction'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 239
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Builds \"arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction\"\nstack.formatArn({\n  service: 'lambda',\n  resource: 'function',\n  sep: ':',\n  resourceName: 'MyFunction'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "015c8b459b86dfc3b3ca68c238dc13ade82d23f489cb227b4e6b0d06d3f0db2b"
    },
    "b42c2173b8b5183131dfc7443cb345300700304bee0228d1bc42e667fe08f34a": {
      "translations": {
        "python": {
          "source": "# stack is of type Stack\n\n\n# Extracts the function name out of an AWS Lambda Function ARN\narn_components = stack.parse_arn(arn, \":\")\nfunction_name = arn_components.resource_name",
          "version": "1"
        },
        "csharp": {
          "source": "Stack stack;\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nArnComponents arnComponents = stack.ParseArn(arn, \":\");\nstring? functionName = arnComponents.ResourceName;",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nArnComponents arnComponents = stack.parseArn(arn, \":\");\nString functionName = arnComponents.getResourceName();",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\n// Extracts the function name out of an AWS Lambda Function ARN\nconst arnComponents = stack.parseArn(arn, ':');\nconst functionName = arnComponents.resourceName;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 256
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.ArnComponents#resourceName",
        "@aws-cdk/core.Stack#parseArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Extracts the function name out of an AWS Lambda Function ARN\nconst arnComponents = stack.parseArn(arn, ':');\nconst functionName = arnComponents.resourceName;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "7852039a7c079e71b0d00f2360fb9523a9b0346061ef34420d3c93251d66f016"
    },
    "13db432093922f2eb52ad4486d8ce81dbd857de38aa4bdb394593d5cc75ba05e": {
      "translations": {
        "python": {
          "source": "# Declare the dependable object\nb_and_c = ConcreteDependable()\nb_and_c.add(construct_b)\nb_and_c.add(construct_c)\n\n# Take the dependency\nconstruct_a.node.add_dependency(b_and_c)",
          "version": "1"
        },
        "csharp": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.Add(constructB);\nbAndC.Add(constructC);\n\n// Take the dependency\nconstructA.Node.AddDependency(bAndC);",
          "version": "1"
        },
        "java": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "1"
        },
        "$": {
          "source": "// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 296
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ConcreteDependable",
        "@aws-cdk/core.ConcreteDependable#add",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "60d52b6e9453e9d2f97f3bd2b82d67fb90fcf8574c15d8c796edc3756c818647"
    },
    "7bfac950863d76e256d55f51f26816dd3a6c65abd2a22a0032d37d635be8211f": {
      "translations": {
        "python": {
          "source": "CustomResource(self, \"MyMagicalResource\",\n    resource_type=\"Custom::MyCustomResource\",  # must start with 'Custom::'\n\n    # the resource properties\n    properties={\n        \"Property1\": \"foo\",\n        \"Property2\": \"bar\"\n    },\n\n    # the ARN of the provider (SNS/Lambda) which handles\n    # CREATE, UPDATE or DELETE events for this resource type\n    # see next section for details\n    service_token=\"ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CustomResource(this, \"MyMagicalResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResource\",  // must start with 'Custom::'\n\n    // the resource properties\n    Properties = new Dictionary<string, object> {\n        { \"Property1\", \"foo\" },\n        { \"Property2\", \"bar\" }\n    },\n\n    // the ARN of the provider (SNS/Lambda) which handles\n    // CREATE, UPDATE or DELETE events for this resource type\n    // see next section for details\n    ServiceToken = \"ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResource.Builder.create(this, \"MyMagicalResource\")\n        .resourceType(\"Custom::MyCustomResource\") // must start with 'Custom::'\n\n        // the resource properties\n        .properties(Map.of(\n                \"Property1\", \"foo\",\n                \"Property2\", \"bar\"))\n\n        // the ARN of the provider (SNS/Lambda) which handles\n        // CREATE, UPDATE or DELETE events for this resource type\n        // see next section for details\n        .serviceToken(\"ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CustomResource(this, 'MyMagicalResource', {\n  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'\n\n  // the resource properties\n  properties: {\n    Property1: 'foo',\n    Property2: 'bar'\n  },\n\n  // the ARN of the provider (SNS/Lambda) which handles\n  // CREATE, UPDATE or DELETE events for this resource type\n  // see next section for details\n  serviceToken: 'ARN'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 333
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CustomResource(this, 'MyMagicalResource', {\n  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'\n\n  // the resource properties\n  properties: {\n    Property1: 'foo',\n    Property2: 'bar'\n  },\n\n  // the ARN of the provider (SNS/Lambda) which handles\n  // CREATE, UPDATE or DELETE events for this resource type\n  // see next section for details\n  serviceToken: 'ARN'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 6,
        "104": 1,
        "193": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "e4d682ab193fe7a66d268763b69f8ba741b647990f740e33b36ae9a182b32672"
    },
    "4b6d78a2884fc95e889c812badefd467152e95a67155dedec5738058d99e8a9d": {
      "translations": {
        "python": {
          "source": "def get_or_create(self, scope):\n    stack = Stack.of(scope)\n    uniqueid = \"GloballyUniqueIdForSingleton\" # For example, a UUID from `uuidgen`\n    existing = stack.node.try_find_child(uniqueid)\n    if existing:\n        return existing\n    return sns.Topic(stack, uniqueid)",
          "version": "1"
        },
        "csharp": {
          "source": "public Topic GetOrCreate(Construct scope)\n{\n    Stack stack = Stack.Of(scope);\n    string uniqueid = \"GloballyUniqueIdForSingleton\"; // For example, a UUID from `uuidgen`\n    IConstruct? existing = stack.Node.TryFindChild(uniqueid);\n    if (existing)\n    {\n        return (Topic)existing;\n    }\n    return new Topic(stack, uniqueid);\n}",
          "version": "1"
        },
        "java": {
          "source": "public Topic getOrCreate(Construct scope) {\n    Stack stack = Stack.of(scope);\n    String uniqueid = \"GloballyUniqueIdForSingleton\"; // For example, a UUID from `uuidgen`\n    IConstruct existing = stack.node.tryFindChild(uniqueid);\n    if (existing) {\n        return (Topic)existing;\n    }\n    return new Topic(stack, uniqueid);\n}",
          "version": "1"
        },
        "$": {
          "source": "function getOrCreate(scope: Construct): sns.Topic {\n  const stack = Stack.of(scope);\n  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`\n  const existing = stack.node.tryFindChild(uniqueid);\n  if (existing) {\n    return existing as sns.Topic;\n  }\n  return new sns.Topic(stack, uniqueid);\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 386
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#tryFindChild",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nfunction getOrCreate(scope: Construct): sns.Topic {\n  const stack = Stack.of(scope);\n  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`\n  const existing = stack.node.tryFindChild(uniqueid);\n  if (existing) {\n    return existing as sns.Topic;\n  }\n  return new sns.Topic(stack, uniqueid);\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 23,
        "153": 2,
        "156": 1,
        "169": 3,
        "194": 4,
        "196": 2,
        "197": 1,
        "217": 1,
        "223": 2,
        "225": 3,
        "227": 1,
        "235": 2,
        "242": 3,
        "243": 3,
        "244": 1
      },
      "fqnsFingerprint": "33e7ea8ffce7d1ef0db76df6d42ac53c22c07851e0f4ddf1210a721b8ca091b0"
    },
    "be47c7c07511bebc07c9e2f14a82021b81d683024c7c877b4943e2d7d8d07539": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"MyProvider\")\n\nCustomResource(self, \"MyResource\",\n    service_token=topic.topic_arn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"MyProvider\");\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = topic.TopicArn\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"MyProvider\");\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(topic.getTopicArn())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'MyProvider');\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: topic.topicArn\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 407
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'MyProvider');\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: topic.topicArn\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "3beb3b140719d85535dc3e0fb49234e82e2be6c7ced645c8c2ee491fcddfadcf"
    },
    "b2724ba8ef515275d6786b65a9dc76c28423b8e18d6687dd032fbfdc2b6ce718": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyProvider\", function_props)\n\nCustomResource(self, \"MyResource\",\n    service_token=fn.function_arn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyProvider\", functionProps);\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = fn.FunctionArn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = new Function(this, \"MyProvider\", functionProps);\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(fn.getFunctionArn())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyProvider', functionProps);\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: fn.functionArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 423
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#functionArn",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyProvider', functionProps);\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: fn.functionArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "0391e1c9ef5d0e6ded5d6c0ecfc34849650b88c674bdde139b216f66c66f9545"
    },
    "3b8a94725b7326d2dcf69af2574a6ec1d996a695154a38d7f469533276fd343a": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 444
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4483cc035a40f5ed1fd0d0c0c5bf416b047e78f3bb1c9daad0b78cdf34bf8797"
    },
    "e13c9c048bd1c7530da02f128576ca22fea53a6b901756167df2d9a8088372bc": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Construct, CustomResource, CustomResourceProvider, CustomResourceProviderRuntime, Token\n\nclass Sum(Construct):\n\n    def __init__(self, scope, id, *, lhs, rhs):\n        super().__init__(scope, id)\n\n        resource_type = \"Custom::Sum\"\n        service_token = CustomResourceProvider.get_or_create(self, resource_type,\n            code_directory=f\"{__dirname}/sum-handler\",\n            runtime=CustomResourceProviderRuntime.NODEJS_12_X\n        )\n\n        resource = CustomResource(self, \"Resource\",\n            resource_type=resource_type,\n            service_token=service_token,\n            properties={\n                \"lhs\": lhs,\n                \"rhs\": rhs\n            }\n        )\n\n        self.result = Token.as_number(resource.get_att(\"Result\"))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\nclass SumProps\n{\n    public int Lhs { get; set; }\n    public int Rhs { get; set; }\n}\n\nclass Sum : Construct\n{\n    public int Result { get; }\n\n    public Sum(Construct scope, string id, SumProps props) : base(scope, id)\n    {\n\n        string resourceType = \"Custom::Sum\";\n        string serviceToken = CustomResourceProvider.GetOrCreate(this, resourceType, new CustomResourceProviderProps {\n            CodeDirectory = $\"{__dirname}/sum-handler\",\n            Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n        });\n\n        CustomResource resource = new CustomResource(this, \"Resource\", new CustomResourceProps {\n            ResourceType = resourceType,\n            ServiceToken = serviceToken,\n            Properties = new Dictionary<string, object> {\n                { \"lhs\", props.Lhs },\n                { \"rhs\", props.Rhs }\n            }\n        });\n\n        Result = Token.AsNumber(resource.GetAtt(\"Result\"));\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Construct;\nimport software.amazon.awscdk.core.CustomResource;\nimport software.amazon.awscdk.core.CustomResourceProvider;\nimport software.amazon.awscdk.core.CustomResourceProviderRuntime;\nimport software.amazon.awscdk.core.Token;\n\npublic class SumProps {\n    private Number lhs;\n    public Number getLhs() {\n        return this.lhs;\n    }\n    public SumProps lhs(Number lhs) {\n        this.lhs = lhs;\n        return this;\n    }\n    private Number rhs;\n    public Number getRhs() {\n        return this.rhs;\n    }\n    public SumProps rhs(Number rhs) {\n        this.rhs = rhs;\n        return this;\n    }\n}\n\npublic class Sum extends Construct {\n    public final Number result;\n\n    public Sum(Construct scope, String id, SumProps props) {\n        super(scope, id);\n\n        String resourceType = \"Custom::Sum\";\n        String serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, CustomResourceProviderProps.builder()\n                .codeDirectory(String.format(\"%s/sum-handler\", __dirname))\n                .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n                .build());\n\n        CustomResource resource = CustomResource.Builder.create(this, \"Resource\")\n                .resourceType(resourceType)\n                .serviceToken(serviceToken)\n                .properties(Map.of(\n                        \"lhs\", props.getLhs(),\n                        \"rhs\", props.getRhs()))\n                .build();\n\n        this.result = Token.asNumber(resource.getAtt(\"Result\"));\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import {\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  Token,\n} from '@aws-cdk/core';\n\nexport interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\n\nexport class Sum extends Construct {\n  public readonly result: number;\n\n  constructor(scope: Construct, id: string, props: SumProps) {\n    super(scope, id);\n\n    const resourceType = 'Custom::Sum';\n    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {\n      codeDirectory: `${__dirname}/sum-handler`,\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: resourceType,\n      serviceToken: serviceToken,\n      properties: {\n        lhs: props.lhs,\n        rhs: props.rhs\n      }\n    });\n\n    this.result = Token.asNumber(resource.getAtt('Result'));\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 519
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResource#getAtt",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X",
        "@aws-cdk/core.Token#asNumber"
      ],
      "fullSource": "import {\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  Token,\n} from '@aws-cdk/core';\n\nexport interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\n\nexport class Sum extends Construct {\n  public readonly result: number;\n\n  constructor(scope: Construct, id: string, props: SumProps) {\n    super(scope, id);\n\n    const resourceType = 'Custom::Sum';\n    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {\n      codeDirectory: `${__dirname}/sum-handler`,\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n    });\n\n    const resource = new CustomResource(this, 'Resource', {\n      resourceType: resourceType,\n      serviceToken: serviceToken,\n      properties: {\n        lhs: props.lhs,\n        rhs: props.rhs\n      }\n    });\n\n    this.result = Token.asNumber(resource.getAtt('Result'));\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "62": 1,
        "75": 46,
        "89": 2,
        "102": 1,
        "104": 3,
        "119": 1,
        "138": 3,
        "140": 3,
        "143": 1,
        "156": 3,
        "158": 2,
        "159": 1,
        "162": 1,
        "169": 2,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 1,
        "209": 1,
        "211": 1,
        "216": 1,
        "221": 1,
        "223": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "245": 1,
        "246": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 5,
        "279": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "96f2198e57d42c7ab87447598c1a7601444c942ade6f982be9876a97c90d8c2f"
    },
    "954c0bf18f9e3f2693c3bb9a78982f419c03294b0b3aa317b03423c5e68c95ab": {
      "translations": {
        "python": {
          "source": "sum = Sum(self, \"MySum\", lhs=40, rhs=2)\nCfnOutput(self, \"Result\", value=Token.as_string(sum.result))",
          "version": "1"
        },
        "csharp": {
          "source": "Sum sum = new Sum(this, \"MySum\", new SumProps { Lhs = 40, Rhs = 2 });\nnew CfnOutput(this, \"Result\", new CfnOutputProps { Value = Token.AsString(sum.Result) });",
          "version": "1"
        },
        "java": {
          "source": "Sum sum = new Sum(this, \"MySum\", new SumProps().lhs(40).rhs(2));\nCfnOutput.Builder.create(this, \"Result\").value(Token.asString(sum.getResult())).build();",
          "version": "1"
        },
        "$": {
          "source": "const sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });\nnew CfnOutput(this, 'Result', { value: Token.asString(sum.result) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 561
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Token#asString"
      ],
      "fullSource": "import { CfnOutput, Construct, Token } from '@aws-cdk/core';\n\ndeclare interface SumProps {\n  readonly lhs: number;\n  readonly rhs: number;\n}\ndeclare class Sum extends Construct {\n  public readonly result: number;\n  constructor(scope: Construct, id: string, props: SumProps);\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });\nnew CfnOutput(this, 'Result', { value: Token.asString(sum.result) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 10,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "0f9a864b270610b5abef0d3637630bbb297263ef01f61770fb3bb4b639136732"
    },
    "d2c649add2ba7ba9c8e59002769222d324235c7c758f020c491ea55603a5105a": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X\n)\n\nrole_arn = provider.role_arn",
          "version": "1"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n});\n\nstring roleArn = provider.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .build());\n\nString roleArn = provider.getRoleArn();",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 569
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProvider#roleArn",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "cdf4e7f993a01fe098b8d3069dbe4fc87f0e80605bf20d98d7403c4f2076926d"
    },
    "6df06107f412d50cc6d9deae0961bf09bd25b1bd32fd70f5bf103e9e6a9e5772": {
      "translations": {
        "python": {
          "source": "provider = customresources.Provider(self, \"MyProvider\",\n    on_event_handler=on_event_handler,\n    is_complete_handler=is_complete_handler\n)\n\nCustomResource(self, \"MyResource\",\n    service_token=provider.service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Provider provider = new Provider(this, \"MyProvider\", new ProviderProps {\n    OnEventHandler = onEventHandler,\n    IsCompleteHandler = isCompleteHandler\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = provider.ServiceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "Provider provider = Provider.Builder.create(this, \"MyProvider\")\n        .onEventHandler(onEventHandler)\n        .isCompleteHandler(isCompleteHandler)\n        .build();\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(provider.getServiceToken())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new customresources.Provider(this, 'MyProvider', {\n  onEventHandler,\n  isCompleteHandler, // optional async waiter\n});\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: provider.serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 595
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/custom-resources.Provider",
        "@aws-cdk/custom-resources.Provider#serviceToken",
        "@aws-cdk/custom-resources.ProviderProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new customresources.Provider(this, 'MyProvider', {\n  onEventHandler,\n  isCompleteHandler, // optional async waiter\n});\n\nnew CustomResource(this, 'MyResource', {\n  serviceToken: provider.serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 2
      },
      "fqnsFingerprint": "f09844a6851851d3a0d04094fcc3cd7bbc49740d032be638baf1eac49058a951"
    },
    "aea36e487ba712adcdb1e51c9d87e469a6eb49d056ce8fc94b3fc6c18ba4e2cf": {
      "translations": {
        "python": {
          "source": "CfnOutput(self, \"OutputName\",\n    value=my_bucket.bucket_name,\n    description=\"The name of an S3 bucket\",  # Optional\n    export_name=\"TheAwesomeBucket\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnOutput(this, \"OutputName\", new CfnOutputProps {\n    Value = myBucket.BucketName,\n    Description = \"The name of an S3 bucket\",  // Optional\n    ExportName = \"TheAwesomeBucket\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnOutput.Builder.create(this, \"OutputName\")\n        .value(myBucket.getBucketName())\n        .description(\"The name of an S3 bucket\") // Optional\n        .exportName(\"TheAwesomeBucket\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnOutput(this, 'OutputName', {\n  value: myBucket.bucketName,\n  description: 'The name of an S3 bucket', // Optional\n  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named \"TheAwesomeBucket\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 619
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.IBucket#bucketName",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnOutput(this, 'OutputName', {\n  value: myBucket.bucketName,\n  description: 'The name of an S3 bucket', // Optional\n  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named \"TheAwesomeBucket\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "a7a61afab11fc84b2be043543a096c617c0d3ad69e617496916a16bd1b06264a"
    },
    "2379d36955183b01533c028bef82419cc5f787a768624bb59dc27bb426025c08": {
      "translations": {
        "python": {
          "source": "CfnParameter(self, \"MyParameter\",\n    type=\"Number\",\n    default=1337\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnParameter(this, \"MyParameter\", new CfnParameterProps {\n    Type = \"Number\",\n    Default = 1337\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter.Builder.create(this, \"MyParameter\")\n        .type(\"Number\")\n        .default(1337)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 640
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "6517917b0dba1a6a23c787503caa181b7b9df842b617845d8e83180764de5f3c"
    },
    "45cb4ebe46150ce88985af3a01c5a439791d8cf3eb770d191d5f298913cf93e8": {
      "translations": {
        "python": {
          "source": "param = CfnParameter(self, \"ParameterName\")\n\n# If the parameter is a String\nparam.value_as_string\n\n# If the parameter is a Number\nparam.value_as_number\n\n# If the parameter is a List\nparam.value_as_list",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter param = new CfnParameter(this, \"ParameterName\", new CfnParameterProps { });\n\n// If the parameter is a String\nparam.ValueAsString;\n\n// If the parameter is a Number\nparam.ValueAsNumber;\n\n// If the parameter is a List\nparam.ValueAsList;",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter param = CfnParameter.Builder.create(this, \"ParameterName\").build();\n\n// If the parameter is a String\nparam.getValueAsString();\n\n// If the parameter is a Number\nparam.getValueAsNumber();\n\n// If the parameter is a List\nparam.getValueAsList();",
          "version": "1"
        },
        "$": {
          "source": "const param = new CfnParameter(this, 'ParameterName', { /* config */ });\n\n// If the parameter is a String\nparam.valueAsString;\n\n// If the parameter is a Number\nparam.valueAsNumber;\n\n// If the parameter is a List\nparam.valueAsList;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 653
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst param = new CfnParameter(this, 'ParameterName', { /* config */ });\n\n// If the parameter is a String\nparam.valueAsString;\n\n// If the parameter is a Number\nparam.valueAsNumber;\n\n// If the parameter is a List\nparam.valueAsList;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "6517917b0dba1a6a23c787503caa181b7b9df842b617845d8e83180764de5f3c"
    },
    "43348eebfa275f04900ac01c31394a3af0d9ec7002719f988a3f7c5a27418c5d": {
      "translations": {
        "python": {
          "source": "# \"this\" is the current construct\nstack = Stack.of(self)\n\nstack.account # Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region # Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition",
          "version": "1"
        },
        "csharp": {
          "source": "// \"this\" is the current construct\nStack stack = Stack.Of(this);\n\nstack.Account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.Region; // Returns the AWS::Region for this stack (or the literal value if known)\nstack.Partition;",
          "version": "1"
        },
        "java": {
          "source": "// \"this\" is the current construct\nStack stack = Stack.of(this);\n\nstack.getAccount(); // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.getRegion(); // Returns the AWS::Region for this stack (or the literal value if known)\nstack.getPartition();",
          "version": "1"
        },
        "$": {
          "source": "// \"this\" is the current construct\nconst stack = Stack.of(this);\n\nstack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region;  // Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 678
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// \"this\" is the current construct\nconst stack = Stack.of(this);\n\nstack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)\nstack.region;  // Returns the AWS::Region for this stack (or the literal value if known)\nstack.partition;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "104": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "c38040bb1b04fbbe73a5073e2bb5ece7a177e7d561850e6c43543be4943d175f"
    },
    "743a3474ce7a780d6fc19b006fd88ead76eae9ab838dbdcfb71f2b9aa21410c1": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "1"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 695
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "6f32ba0d2347add5195e6ba699a4644500ab4881627f0b9d39eebbc4b50d2466"
    },
    "a574d1d7bb4c0588e68522be72e12fc084d25ef9e41de5213ee53e9ec8af1abc": {
      "translations": {
        "python": {
          "source": "resource_a = CfnResource(self, \"ResourceA\", resource_props)\nresource_b = CfnResource(self, \"ResourceB\", resource_props)\n\nresource_b.add_depends_on(resource_a)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnResource resourceA = new CfnResource(this, \"ResourceA\", resourceProps);\nCfnResource resourceB = new CfnResource(this, \"ResourceB\", resourceProps);\n\nresourceB.AddDependsOn(resourceA);",
          "version": "1"
        },
        "java": {
          "source": "CfnResource resourceA = new CfnResource(this, \"ResourceA\", resourceProps);\nCfnResource resourceB = new CfnResource(this, \"ResourceB\", resourceProps);\n\nresourceB.addDependsOn(resourceA);",
          "version": "1"
        },
        "$": {
          "source": "const resourceA = new CfnResource(this, 'ResourceA', resourceProps);\nconst resourceB = new CfnResource(this, 'ResourceB', resourceProps);\n\nresourceB.addDependsOn(resourceA);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 710
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#addDependsOn",
        "@aws-cdk/core.CfnResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst resourceA = new CfnResource(this, 'ResourceA', resourceProps);\nconst resourceB = new CfnResource(this, 'ResourceB', resourceProps);\n\nresourceB.addDependsOn(resourceA);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "db74136e6e2a63e8e772aeaad2012b3e257a138b06165e6f13af1c5768db8ee4"
    },
    "f00fce89f15f7de0a573335fb5c1757419246feccb22834f900709e305ddeb57": {
      "translations": {
        "python": {
          "source": "# To use Fn::Base64\nFn.base64(\"SGVsbG8gQ0RLIQo=\")\n\n# To compose condition expressions:\nenvironment_parameter = CfnParameter(self, \"Environment\")\nFn.condition_and(\n    # The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n    Fn.condition_equals(\"Production\", environment_parameter),\n    # The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n    Fn.condition_not(Fn.condition_equals(\"us-east-1\", Aws.REGION)))",
          "version": "1"
        },
        "csharp": {
          "source": "// To use Fn::Base64\nFn.Base64(\"SGVsbG8gQ0RLIQo=\");\n\n// To compose condition expressions:\nCfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nFn.ConditionAnd(Fn.ConditionEquals(\"Production\", environmentParameter), Fn.ConditionNot(Fn.ConditionEquals(\"us-east-1\", Aws.REGION)));",
          "version": "1"
        },
        "java": {
          "source": "// To use Fn::Base64\nFn.base64(\"SGVsbG8gQ0RLIQo=\");\n\n// To compose condition expressions:\nCfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nFn.conditionAnd(Fn.conditionEquals(\"Production\", environmentParameter), Fn.conditionNot(Fn.conditionEquals(\"us-east-1\", Aws.REGION)));",
          "version": "1"
        },
        "$": {
          "source": "// To use Fn::Base64\nFn.base64('SGVsbG8gQ0RLIQo=');\n\n// To compose condition expressions:\nconst environmentParameter = new CfnParameter(this, 'Environment');\nFn.conditionAnd(\n  // The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n  Fn.conditionEquals('Production', environmentParameter),\n  // The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 725
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.Fn#base64",
        "@aws-cdk/core.Fn#conditionAnd",
        "@aws-cdk/core.Fn#conditionEquals",
        "@aws-cdk/core.Fn#conditionNot",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// To use Fn::Base64\nFn.base64('SGVsbG8gQ0RLIQo=');\n\n// To compose condition expressions:\nconst environmentParameter = new CfnParameter(this, 'Environment');\nFn.conditionAnd(\n  // The \"Environment\" CloudFormation template parameter evaluates to \"Production\"\n  Fn.conditionEquals('Production', environmentParameter),\n  // The AWS::Region pseudo-parameter value is NOT equal to \"us-east-1\"\n  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 1,
        "194": 6,
        "196": 5,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "8d33c6f67aac2c83025bf9246c93dbc7b4a574afec97d47f2156ae54737e0a5b"
    },
    "f9e3865082204cd22c77e1512bd97ba84daf98a82869fac80355681118eeef54": {
      "translations": {
        "python": {
          "source": "environment_parameter = CfnParameter(self, \"Environment\")\nis_prod = CfnCondition(self, \"IsProduction\",\n    expression=Fn.condition_equals(\"Production\", environment_parameter)\n)\n\n# Configuration value that is a different string based on IsProduction\nstage = Fn.condition_if(is_prod.logical_id, \"Beta\", \"Prod\").to_string()\n\n# Make Bucket creation condition to IsProduction by accessing\n# and overriding the CloudFormation resource\nbucket = s3.Bucket(self, \"Bucket\")\ncfn_bucket = my_bucket.node.default_child\ncfn_bucket.cfn_options.condition = is_prod",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nCfnCondition isProd = new CfnCondition(this, \"IsProduction\", new CfnConditionProps {\n    Expression = Fn.ConditionEquals(\"Production\", environmentParameter)\n});\n\n// Configuration value that is a different string based on IsProduction\nstring stage = Fn.ConditionIf(isProd.LogicalId, \"Beta\", \"Prod\").ToString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nBucket bucket = new Bucket(this, \"Bucket\");\nCfnBucket cfnBucket = (CfnBucket)myBucket.Node.DefaultChild;\ncfnBucket.CfnOptions.Condition = isProd;",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter environmentParameter = new CfnParameter(this, \"Environment\");\nCfnCondition isProd = CfnCondition.Builder.create(this, \"IsProduction\")\n        .expression(Fn.conditionEquals(\"Production\", environmentParameter))\n        .build();\n\n// Configuration value that is a different string based on IsProduction\nString stage = Fn.conditionIf(isProd.logicalId, \"Beta\", \"Prod\").toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nBucket bucket = new Bucket(this, \"Bucket\");\nCfnBucket cfnBucket = (CfnBucket)myBucket.getNode().getDefaultChild();\ncfnBucket.getCfnOptions().getCondition() = isProd;",
          "version": "1"
        },
        "$": {
          "source": "const environmentParameter = new CfnParameter(this, 'Environment');\nconst isProd = new CfnCondition(this, 'IsProduction', {\n  expression: Fn.conditionEquals('Production', environmentParameter),\n});\n\n// Configuration value that is a different string based on IsProduction\nconst stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nconst bucket = new s3.Bucket(this, 'Bucket');\nconst cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;\ncfnBucket.cfnOptions.condition = isProd;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 745
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnElement#logicalId",
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Fn#conditionEquals",
        "@aws-cdk/core.Fn#conditionIf",
        "@aws-cdk/core.ICfnConditionExpression",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.IConstruct#node",
        "@aws-cdk/core.IResolvable#toString"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst environmentParameter = new CfnParameter(this, 'Environment');\nconst isProd = new CfnCondition(this, 'IsProduction', {\n  expression: Fn.conditionEquals('Production', environmentParameter),\n});\n\n// Configuration value that is a different string based on IsProduction\nconst stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();\n\n// Make Bucket creation condition to IsProduction by accessing\n// and overriding the CloudFormation resource\nconst bucket = new s3.Bucket(this, 'Bucket');\nconst cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;\ncfnBucket.cfnOptions.condition = isProd;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "62": 1,
        "75": 27,
        "104": 3,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 3,
        "197": 3,
        "209": 1,
        "217": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "281": 1
      },
      "fqnsFingerprint": "c124cf64cce35e6838e1eefd82b2dffeb55270d1a516f8d3fc30690f5b857f68"
    },
    "26740b928affc7221c8036d5547e6f169f2cd6ef18c4f549891a1e1febcd715a": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 768
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "26a2bc83992017c2f176465240b8296cca640111948fc56ea56c47ce2c40cc92"
    },
    "1186f91c8d3e58dd113dc451d044c32513fcf9ad338c7379f0d14ecb71a0be18": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    },\n    lazy=True\n)\n\nregion_table.find_in_map(\"us-east-2\", \"regionName\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    },\n    Lazy = true\n});\n\nregionTable.FindInMap(\"us-east-2\", \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .lazy(true)\n        .build();\n\nregionTable.findInMap(\"us-east-2\", \"regionName\");",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n    },\n  },\n  lazy: true,\n});\n\nregionTable.findInMap('us-east-2', 'regionName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 806
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n    },\n  },\n  lazy: true,\n});\n\nregionTable.findInMap('us-east-2', 'regionName');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 4,
        "194": 1,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "39b34f371cd60ba3090a4cad7034b2a4cbb52d18738e36e57e84297c7a51f9b1"
    },
    "8f3054278b516b2c4fbb09affeaf75ac3f95a0b825a4c08372cb669337dc9014": {
      "translations": {
        "python": {
          "source": "# region_table is of type CfnMapping\n\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnMapping regionTable;\n\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable;\n\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "$": {
          "source": "declare const regionTable: CfnMapping;\n\nregionTable.findInMap(Aws.REGION, 'regionName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 826
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping#findInMap"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const regionTable: CfnMapping;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nregionTable.findInMap(Aws.REGION, 'regionName');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "130": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "23a518dfddb77a9405baee4b90414ef94913d4f2cf1c348f54d4ca99201ce8ae"
    },
    "b11ec1fc09d40bf3e2a16bdee344c7d39cded5a2f582a6521479634b3ddbf3b1": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 840
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "03f28ddd4e16b976d8b39d1028002210bb91ea6398d9ee5793aa123cbcc17614"
    },
    "45cb2eeb92ba296ae65e732c2ddce191a17423b83e03af36e40fd63742efbc9d": {
      "translations": {
        "python": {
          "source": "stack = Stack(app, \"StackName\")\n\nstack.template_options.description = \"This will appear in the AWS console\"\nstack.template_options.transforms = [\"AWS::Serverless-2016-10-31\"]\nstack.template_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "1"
        },
        "csharp": {
          "source": "Stack stack = new Stack(app, \"StackName\");\n\nstack.TemplateOptions.Description = \"This will appear in the AWS console\";\nstack.TemplateOptions.Transforms = new [] { \"AWS::Serverless-2016-10-31\" };\nstack.TemplateOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "Stack stack = new Stack(app, \"StackName\");\n\nstack.getTemplateOptions().getDescription() = \"This will appear in the AWS console\";\nstack.getTemplateOptions().getTransforms() = List.of(\"AWS::Serverless-2016-10-31\");\nstack.getTemplateOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "$": {
          "source": "const stack = new Stack(app, 'StackName');\n\nstack.templateOptions.description = 'This will appear in the AWS console';\nstack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];\nstack.templateOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 855
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ITemplateOptions#description",
        "@aws-cdk/core.ITemplateOptions#metadata",
        "@aws-cdk/core.ITemplateOptions#transforms",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stack#templateOptions"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stack = new Stack(app, 'StackName');\n\nstack.templateOptions.description = 'This will appear in the AWS console';\nstack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];\nstack.templateOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "62": 3,
        "75": 13,
        "192": 1,
        "193": 1,
        "194": 6,
        "197": 1,
        "209": 3,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "cbc5f955593d90afea3f6cb4a56b6b3af8162afe0bb2b0a38c79f56726ecd610"
    },
    "84588283cb998e1bff9452e6f0c66c58aef39819825b2cd75155d3c40cf4a20b": {
      "translations": {
        "python": {
          "source": "CfnResource(self, \"ResourceId\",\n    type=\"AWS::S3::Bucket\",\n    properties={\n        \"BucketName\": \"bucket-name\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnResource(this, \"ResourceId\", new CfnResourceProps {\n    Type = \"AWS::S3::Bucket\",\n    Properties = new Dictionary<string, object> {\n        { \"BucketName\", \"bucket-name\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnResource.Builder.create(this, \"ResourceId\")\n        .type(\"AWS::S3::Bucket\")\n        .properties(Map.of(\n                \"BucketName\", \"bucket-name\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnResource(this, 'ResourceId', {\n  type: 'AWS::S3::Bucket',\n  properties: {\n    BucketName: 'bucket-name'\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 872
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnResource(this, 'ResourceId', {\n  type: 'AWS::S3::Bucket',\n  properties: {\n    BucketName: 'bucket-name'\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "104": 1,
        "193": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "e02608ecfa77c8a6195fa3b5d064f7bf3c4a004547cca58cc883f1ad60338364"
    },
    "a87f0e34089cf78a2be78018e5d34d7fd1aa460d051c6832afca7aa707580b6d": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 893
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "1c2c5ee14041a73f46051ab8ba6efec3f35003868b026aa9b20ec584b6ae2f88"
    },
    "0c89447566dbdf5f2cb3a4c9fe1b34c79a1bbfa59507d70a2d1b7c5752195371": {
      "translations": {
        "python": {
          "source": "stack = Stack(app, \"StackName\",\n    termination_protection=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Stack stack = new Stack(app, \"StackName\", new StackProps {\n    TerminationProtection = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack stack = Stack.Builder.create(app, \"StackName\")\n        .terminationProtection(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stack = new Stack(app, 'StackName', {\n  terminationProtection: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 917
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stack = new Stack(app, 'StackName', {\n  terminationProtection: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "106": 1,
        "193": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4b20b6788092980ee7a05681aef26c0ec4322912592cc11072ba5a279de40434"
    },
    "d30f5fd73724c9ff9b0edda28f54ae303c538bcabc9c7980ff45761d2226702d": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        f\"aws:PrincipalTag/{tagParam.valueAsString}\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/core"
        },
        "field": {
          "field": "markdown",
          "line": 938
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "3a0621f2dc036636a5a92262d11858a53f6da4be9816d8f8593c0b1254866ab7"
    },
    "7d532eb28565fa46e73f8d0c3f23eef1656c787ac5d0cf27fd5820346bf7f770": {
      "translations": {
        "python": {
          "source": "cfn_resource.add_override(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", [\"myattribute\"])\ncfn_resource.add_override(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\")",
          "version": "1"
        },
        "csharp": {
          "source": "cfnResource.AddOverride(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", new [] { \"myattribute\" });\ncfnResource.AddOverride(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\");",
          "version": "1"
        },
        "java": {
          "source": "cfnResource.addOverride(\"Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes\", List.of(\"myattribute\"));\ncfnResource.addOverride(\"Properties.GlobalSecondaryIndexes.1.ProjectionType\", \"INCLUDE\");",
          "version": "1"
        },
        "$": {
          "source": "cfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CfnResource",
          "memberName": "addOverride"
        },
        "field": {
          "field": "markdown",
          "line": 13
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource#addOverride"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes', ['myattribute']);\ncfnResource.addOverride('Properties.GlobalSecondaryIndexes.1.ProjectionType', 'INCLUDE');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 4,
        "192": 1,
        "194": 2,
        "196": 2,
        "226": 2
      },
      "fqnsFingerprint": "773a1f90ec17b9cca6d996fdd482df98993d9fc853a4ef6ad2f0bda8bbc1f03f"
    },
    "0855523367d38e9afafb80db1a1c0d894d6ce1dc049423737e09adb8e6fbd14f": {
      "translations": {
        "python": {
          "source": "# use the provider framework from aws-cdk/custom-resources:\nprovider = customresources.Provider(self, \"ResourceProvider\",\n    on_event_handler=on_event_handler,\n    is_complete_handler=is_complete_handler\n)\n\nCustomResource(self, \"MyResource\",\n    service_token=provider.service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nProvider provider = new Provider(this, \"ResourceProvider\", new ProviderProps {\n    OnEventHandler = onEventHandler,\n    IsCompleteHandler = isCompleteHandler\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = provider.ServiceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nProvider provider = Provider.Builder.create(this, \"ResourceProvider\")\n        .onEventHandler(onEventHandler)\n        .isCompleteHandler(isCompleteHandler)\n        .build();\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(provider.getServiceToken())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// use the provider framework from aws-cdk/custom-resources:\nconst provider = new customresources.Provider(this, 'ResourceProvider', {\n   onEventHandler,\n   isCompleteHandler, // optional\n});\n\nnew CustomResource(this, 'MyResource', {\n   serviceToken: provider.serviceToken,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 11
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/custom-resources.Provider",
        "@aws-cdk/custom-resources.Provider#serviceToken",
        "@aws-cdk/custom-resources.ProviderProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// use the provider framework from aws-cdk/custom-resources:\nconst provider = new customresources.Provider(this, 'ResourceProvider', {\n   onEventHandler,\n   isCompleteHandler, // optional\n});\n\nnew CustomResource(this, 'MyResource', {\n   serviceToken: provider.serviceToken,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 2
      },
      "fqnsFingerprint": "f09844a6851851d3a0d04094fcc3cd7bbc49740d032be638baf1eac49058a951"
    },
    "1927d220dff00bb95bc1ea2785c092e0dde23ea85e9ee8ea97e2c08461c177b3": {
      "translations": {
        "python": {
          "source": "# invoke an AWS Lambda function when a lifecycle event occurs:\nCustomResource(self, \"MyResource\",\n    service_token=my_function.function_arn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\n// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = myFunction.FunctionArn\n});",
          "version": "1"
        },
        "java": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\n// invoke an AWS Lambda function when a lifecycle event occurs:\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(myFunction.getFunctionArn())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myFunction.functionArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction#functionArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// invoke an AWS Lambda function when a lifecycle event occurs:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myFunction.functionArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "145bccb9596e6c6de7e4985437b356777104204edcd028ab2f2776bcf5408f66"
    },
    "6a859a8e127f4af9cacf207b2c3c6d57ea68834eec0ca5cbb04fd9182ddc8013": {
      "translations": {
        "python": {
          "source": "# publish lifecycle events to an SNS topic:\nCustomResource(self, \"MyResource\",\n    service_token=my_topic.topic_arn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// publish lifecycle events to an SNS topic:\n// publish lifecycle events to an SNS topic:\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ServiceToken = myTopic.TopicArn\n});",
          "version": "1"
        },
        "java": {
          "source": "// publish lifecycle events to an SNS topic:\n// publish lifecycle events to an SNS topic:\nCustomResource.Builder.create(this, \"MyResource\")\n        .serviceToken(myTopic.getTopicArn())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// publish lifecycle events to an SNS topic:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myTopic.topicArn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProps",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic#topicArn",
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// publish lifecycle events to an SNS topic:\nnew CustomResource(this, 'MyResource', {\n   serviceToken: myTopic.topicArn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "cfde79031a5067bd04a9fa1bb34b5c1e7c007ea116c5193194c4233bcf9fb99e"
    },
    "ca43214c03e78cde8a28fc746b3ab5e35f27ce7f22109589295c4540647d2488": {
      "translations": {
        "python": {
          "source": "# my_provider is of type CustomResourceProvider\n\n\nCustomResource(self, \"MyCustomResource\",\n    service_token=my_provider.service_token,\n    properties={\n        \"my_property_one\": \"one\",\n        \"my_property_two\": \"two\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CustomResourceProvider myProvider;\n\n\nnew CustomResource(this, \"MyCustomResource\", new CustomResourceProps {\n    ServiceToken = myProvider.ServiceToken,\n    Properties = new Dictionary<string, object> {\n        { \"myPropertyOne\", \"one\" },\n        { \"myPropertyTwo\", \"two\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider myProvider;\n\n\nCustomResource.Builder.create(this, \"MyCustomResource\")\n        .serviceToken(myProvider.getServiceToken())\n        .properties(Map.of(\n                \"myPropertyOne\", \"one\",\n                \"myPropertyTwo\", \"two\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myProvider: CustomResourceProvider;\n\nnew CustomResource(this, 'MyCustomResource', {\n  serviceToken: myProvider.serviceToken,\n  properties: {\n    myPropertyOne: 'one',\n    myPropertyTwo: 'two',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProvider",
          "memberName": "serviceToken"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#serviceToken"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myProvider: CustomResourceProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew CustomResource(this, 'MyCustomResource', {\n  serviceToken: myProvider.serviceToken,\n  properties: {\n    myPropertyOne: 'one',\n    myPropertyTwo: 'two',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 1,
        "130": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b726b6fda1bf6bc29a0a064548bfd26e94f5a807b7e01b00bffc6dd2b37bcfbe"
    },
    "53ae76e6421f7890cf1b91455cfad40e58236d5bc9888a399cb42929d83cd7a2": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    policy_statements=[{\n        \"Effect\": \"Allow\",\n        \"Action\": \"s3:PutObject*\",\n        \"Resource\": \"*\"\n    }\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    PolicyStatements = new [] { new Dictionary<string, string> {\n        { \"Effect\", \"Allow\" },\n        { \"Action\", \"s3:PutObject*\" },\n        { \"Resource\", \"*\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .policyStatements(List.of(Map.of(\n                \"Effect\", \"Allow\",\n                \"Action\", \"s3:PutObject*\",\n                \"Resource\", \"*\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  policyStatements: [\n    {\n      Effect: 'Allow',\n      Action: 's3:PutObject*',\n      Resource: '*',\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.CustomResourceProviderProps",
          "memberName": "policyStatements"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  policyStatements: [\n    {\n      Effect: 'Allow',\n      Action: 's3:PutObject*',\n      Resource: '*',\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "1e94d5a418d573f78df011225513e7e2e20035b9920c4b5865cfc7644cfb2a10"
    },
    "dbdeb7be4aafc4dd0eec6cd0eb988d1dbc50446e001163d811fdc177c022df71": {
      "translations": {
        "python": {
          "source": "# Usage\nroots = DependableTrait.get(construct).dependency_roots\n\n# Definition\nclass TraitImplementation(DependableTrait):\n    def __init__(self):\n        self.dependency_roots = [construct_a, construct_b, construct_c]\nDependableTrait.implement(construct, TraitImplementation())",
          "version": "1"
        },
        "csharp": {
          "source": "// Usage\nIConstruct[] roots = DependableTrait.Get(construct).DependencyRoots;\n\n// Definition\nclass TraitImplementation : DependableTrait\n{\n    public IConstruct[] DependencyRoots { get; }\n    public TraitImplementation()\n    {\n        DependencyRoots = new [] { constructA, constructB, constructC };\n    }\n}\nDependableTrait.Implement(construct, new TraitImplementation());",
          "version": "1"
        },
        "java": {
          "source": "// Usage\nIConstruct[] roots = DependableTrait.get(construct).getDependencyRoots();\n\n// Definition\npublic class TraitImplementation implements DependableTrait {\n    public final IConstruct[] dependencyRoots;\n    public TraitImplementation() {\n        this.dependencyRoots = List.of(constructA, constructB, constructC);\n    }\n}\nDependableTrait.implement(construct, new TraitImplementation());",
          "version": "1"
        },
        "$": {
          "source": "// Usage\nconst roots = DependableTrait.get(construct).dependencyRoots;\n\n// Definition\nclass TraitImplementation implements DependableTrait {\n  public readonly dependencyRoots: IConstruct[];\n  constructor() {\n    this.dependencyRoots = [constructA, constructB, constructC];\n  }\n}\nDependableTrait.implement(construct, new TraitImplementation());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DependableTrait"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DependableTrait",
        "@aws-cdk/core.DependableTrait#dependencyRoots",
        "@aws-cdk/core.DependableTrait#get",
        "@aws-cdk/core.DependableTrait#implement",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Usage\nconst roots = DependableTrait.get(construct).dependencyRoots;\n\n// Definition\nclass TraitImplementation implements DependableTrait {\n  public readonly dependencyRoots: IConstruct[];\n  constructor() {\n    this.dependencyRoots = [constructA, constructB, constructC];\n  }\n}\nDependableTrait.implement(construct, new TraitImplementation());\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "62": 1,
        "75": 17,
        "104": 1,
        "119": 1,
        "138": 1,
        "159": 1,
        "162": 1,
        "169": 1,
        "174": 1,
        "192": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "245": 1,
        "279": 1
      },
      "fqnsFingerprint": "5ca1fd44a8ec49d2fa250053e90b53c206be2702432d82e1f61780205abef4a2"
    },
    "dce1e949469a6822566640da7fa1dce4c41100f83826e81dcd6e977e15c21183": {
      "translations": {
        "python": {
          "source": "sqs.Queue(self, \"MyQueue\",\n    queue_name=Fn.condition_if(\"Condition\", \"Hello\", \"World\").to_string()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Queue(this, \"MyQueue\", new QueueProps {\n    QueueName = Fn.ConditionIf(\"Condition\", \"Hello\", \"World\").ToString()\n});",
          "version": "1"
        },
        "java": {
          "source": "Queue.Builder.create(this, \"MyQueue\")\n        .queueName(Fn.conditionIf(\"Condition\", \"Hello\", \"World\").toString())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new sqs.Queue(this, 'MyQueue', {\n   queueName: Fn.conditionIf('Condition', 'Hello', 'World').toString()\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ICfnConditionExpression"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-sqs.QueueProps",
        "@aws-cdk/core.Fn#conditionIf",
        "@aws-cdk/core.IResolvable#toString"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew sqs.Queue(this, 'MyQueue', {\n   queueName: Fn.conditionIf('Condition', 'Hello', 'World').toString()\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "5d62516996a81a9f20791d77a248b3b1cd3723b746174081b7fd24b8a88014d7"
    },
    "e4132c00341fc293d613acbada1251bd6ba39b7cd969297aae97da2daa411200": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\ncfn_bucket = bucket.node.find_child(\"Resource\")\ncfn_bucket.apply_removal_policy(RemovalPolicy.DESTROY)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.Node.FindChild(\"Resource\");\ncfnBucket.ApplyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.node.findChild(\"Resource\");\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemovalPolicy"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#applyRemovalPolicy",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#findChild",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 2,
        "194": 4,
        "196": 2,
        "217": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "0488b3d1c276cea114398c0cbb8e9341bcd0e6754f665a58062c1f829a481b68"
    },
    "0c4f6bdd9f442fe72c1b7e4d09512c5cc3ede92f1585a19d35669a4ce6e7ea88": {
      "translations": {
        "python": {
          "source": "# stack is of type Stack\n\n\nstack.add_transform(\"AWS::Serverless-2016-10-31\")",
          "version": "1"
        },
        "csharp": {
          "source": "Stack stack;\n\n\nstack.AddTransform(\"AWS::Serverless-2016-10-31\");",
          "version": "1"
        },
        "java": {
          "source": "Stack stack;\n\n\nstack.addTransform(\"AWS::Serverless-2016-10-31\");",
          "version": "1"
        },
        "$": {
          "source": "declare const stack: Stack;\n\nstack.addTransform('AWS::Serverless-2016-10-31')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.Stack",
          "memberName": "addTransform"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack#addTransform"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stack: Stack;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nstack.addTransform('AWS::Serverless-2016-10-31')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "130": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "0ce9cfd4f87e6a047f4f40ba0b13ef34282fab04277d5313e39ceac680cceb9a"
    },
    "f94c8fa5d42d4203db08553db3b7b8d07dfa6b18a04eccc1c2967e7825f93058": {
      "translations": {
        "python": {
          "source": "# After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\"",
          "version": "1"
        },
        "csharp": {
          "source": "// After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\";",
          "version": "1"
        },
        "java": {
          "source": "// After resolving, looks like\n\"arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123\";",
          "version": "1"
        },
        "$": {
          "source": "// After resolving, looks like\n'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.Stack",
          "memberName": "stackId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// After resolving, looks like\n'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "63a21408918dc3dc453eb3e7e87d481a2376ff9c89579318f0a7d3c671b10b36": {
      "translations": {
        "python": {
          "source": "# Use a concrete account and region to deploy this stack to:\n# `.account` and `.region` will simply return these values.\nStack(app, \"Stack1\",\n    env=Environment(\n        account=\"123456789012\",\n        region=\"us-east-1\"\n    )\n)\n\n# Use the CLI's current credentials to determine the target environment:\n# `.account` and `.region` will reflect the account+region the CLI\n# is configured to use (based on the user CLI credentials)\nStack(app, \"Stack2\",\n    env=Environment(\n        account=process.env.CDK_DEFAULT_ACCOUNT,\n        region=process.env.CDK_DEFAULT_REGION\n    )\n)\n\n# Define multiple stacks stage associated with an environment\nmy_stage = Stage(app, \"MyStage\",\n    env=Environment(\n        account=\"123456789012\",\n        region=\"us-east-1\"\n    )\n)\n\n# both of these stacks will use the stage's account/region:\n# `.account` and `.region` will resolve to the concrete values as above\nMyStack(my_stage, \"Stack1\")\nYourStack(my_stage, \"Stack2\")\n\n# Define an environment-agnostic stack:\n# `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n# which will only resolve to actual values by CloudFormation during deployment.\nMyStack(app, \"Stack1\")",
          "version": "1"
        },
        "csharp": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, \"Stack1\", new StackProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"us-east-1\"\n    }\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, \"Stack2\", new StackProps {\n    Env = new Environment {\n        Account = process.Env.CDK_DEFAULT_ACCOUNT,\n        Region = process.Env.CDK_DEFAULT_REGION\n    }\n});\n\n// Define multiple stacks stage associated with an environment\nStage myStage = new Stage(app, \"MyStage\", new StageProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"us-east-1\"\n    }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, \"Stack1\");\nnew YourStack(myStage, \"Stack2\");\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, \"Stack1\");",
          "version": "1"
        },
        "java": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nStack.Builder.create(app, \"Stack1\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"us-east-1\")\n                .build())\n        .build();\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nStack.Builder.create(app, \"Stack2\")\n        .env(Environment.builder()\n                .account(process.getEnv().getCDK_DEFAULT_ACCOUNT())\n                .region(process.getEnv().getCDK_DEFAULT_REGION())\n                .build())\n        .build();\n\n// Define multiple stacks stage associated with an environment\nStage myStage = Stage.Builder.create(app, \"MyStage\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"us-east-1\")\n                .build())\n        .build();\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, \"Stack1\");\nnew YourStack(myStage, \"Stack2\");\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, \"Stack1\");",
          "version": "1"
        },
        "$": {
          "source": "// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, 'Stack1', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  },\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, 'Stack2', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION\n  },\n});\n\n// Define multiple stacks stage associated with an environment\nconst myStage = new Stage(app, 'MyStage', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, 'Stack1');\nnew YourStack(myStage, 'Stack2');\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, 'Stack1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.StackProps",
          "memberName": "env"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Use a concrete account and region to deploy this stack to:\n// `.account` and `.region` will simply return these values.\nnew Stack(app, 'Stack1', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  },\n});\n\n// Use the CLI's current credentials to determine the target environment:\n// `.account` and `.region` will reflect the account+region the CLI\n// is configured to use (based on the user CLI credentials)\nnew Stack(app, 'Stack2', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_DEFAULT_REGION\n  },\n});\n\n// Define multiple stacks stage associated with an environment\nconst myStage = new Stage(app, 'MyStage', {\n  env: {\n    account: '123456789012',\n    region: 'us-east-1'\n  }\n});\n\n// both of these stacks will use the stage's account/region:\n// `.account` and `.region` will resolve to the concrete values as above\nnew MyStack(myStage, 'Stack1');\nnew YourStack(myStage, 'Stack2');\n\n// Define an environment-agnostic stack:\n// `.account` and `.region` will resolve to `{ \"Ref\": \"AWS::AccountId\" }` and `{ \"Ref\": \"AWS::Region\" }` respectively.\n// which will only resolve to actual values by CloudFormation during deployment.\nnew MyStack(app, 'Stack1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 28,
        "193": 6,
        "194": 4,
        "197": 6,
        "225": 1,
        "226": 5,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "e2a270e0331187e875b6669bc6a6ad8ca10bbfe5d1d81158660dd9f3c766b325"
    },
    "69adbb9ee1d79dddb3a5c58adb96665e73ae3eef243e110e793cb2f9f94460a7": {
      "translations": {
        "python": {
          "source": "# Use a concrete account and region to deploy this Stage to\nStage(app, \"Stage1\",\n    env=Environment(account=\"123456789012\", region=\"us-east-1\")\n)\n\n# Use the CLI's current credentials to determine the target environment\nStage(app, \"Stage2\",\n    env=Environment(account=process.env.CDK_DEFAULT_ACCOUNT, region=process.env.CDK_DEFAULT_REGION)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Use a concrete account and region to deploy this Stage to\n// Use a concrete account and region to deploy this Stage to\nnew Stage(app, \"Stage1\", new StageProps {\n    Env = new Environment { Account = \"123456789012\", Region = \"us-east-1\" }\n});\n\n// Use the CLI's current credentials to determine the target environment\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, \"Stage2\", new StageProps {\n    Env = new Environment { Account = process.Env.CDK_DEFAULT_ACCOUNT, Region = process.Env.CDK_DEFAULT_REGION }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Use a concrete account and region to deploy this Stage to\n// Use a concrete account and region to deploy this Stage to\nStage.Builder.create(app, \"Stage1\")\n        .env(Environment.builder().account(\"123456789012\").region(\"us-east-1\").build())\n        .build();\n\n// Use the CLI's current credentials to determine the target environment\n// Use the CLI's current credentials to determine the target environment\nStage.Builder.create(app, \"Stage2\")\n        .env(Environment.builder().account(process.getEnv().getCDK_DEFAULT_ACCOUNT()).region(process.getEnv().getCDK_DEFAULT_REGION()).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Use a concrete account and region to deploy this Stage to\nnew Stage(app, 'Stage1', {\n  env: { account: '123456789012', region: 'us-east-1' },\n});\n\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, 'Stage2', {\n  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/core.StageProps",
          "memberName": "env"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Use a concrete account and region to deploy this Stage to\nnew Stage(app, 'Stage1', {\n  env: { account: '123456789012', region: 'us-east-1' },\n});\n\n// Use the CLI's current credentials to determine the target environment\nnew Stage(app, 'Stage2', {\n  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "193": 4,
        "194": 4,
        "197": 2,
        "226": 2,
        "281": 6
      },
      "fqnsFingerprint": "2177e6f949bd14e3780e73ed56d4e0ecb19232d495ad96cdf253d2ba568e3aa1"
    },
    "88f862b6234b20d2634012d113dd72dd45927e432577e96aff00b243b0173ecf": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagManager"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f632faf8bbec3b8855f7e0618895e089ad458048370bfdf0c1e0112e26a45c4b"
    },
    "8b4573c852a6f031d6d6ce3ae793c3e52ba0743a0636c52698798e7502df61bc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_lambda as lambda_\n\n#\n# Stack verification steps:\n# aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n# has a minCapacity of 3 and maxCapacity of 50\n#\nclass TestStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        fn = lambda_.Function(self, \"MyLambda\",\n            code=lambda_.InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            handler=\"index.handler\",\n            runtime=lambda_.Runtime.NODEJS_10_X\n        )\n\n        version = fn.current_version\n\n        alias = lambda_.Alias(self, \"Alias\",\n            alias_name=\"prod\",\n            version=version\n        )\n\n        scaling_target = alias.add_auto_scaling(min_capacity=3, max_capacity=50)\n\n        scaling_target.scale_on_utilization(\n            utilization_target=0.5\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleUpInTheMorning\",\n            schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n            min_capacity=20\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleDownAtNight\",\n            schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n            max_capacity=20\n        )\n\n        cdk.CfnOutput(self, \"FunctionName\",\n            value=fn.function_name\n        )\n\napp = cdk.App()\n\nTestStack(app, \"aws-lambda-autoscaling\")\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ApplicationAutoScaling;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.Lambda;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack : Stack\n{\n    public TestStack(App scope, string id) : base(scope, id)\n    {\n\n        Function fn = new Function(this, \"MyLambda\", new FunctionProps {\n            Code = new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            Handler = \"index.handler\",\n            Runtime = Runtime.NODEJS_10_X\n        });\n\n        Version version = fn.CurrentVersion;\n\n        Alias alias = new Alias(this, \"Alias\", new AliasProps {\n            AliasName = \"prod\",\n            Version = version\n        });\n\n        IScalableFunctionAttribute scalingTarget = alias.AddAutoScaling(new AutoScalingOptions { MinCapacity = 3, MaxCapacity = 50 });\n\n        scalingTarget.ScaleOnUtilization(new UtilizationScalingOptions {\n            UtilizationTarget = 0.5\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n            MinCapacity = 20\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleDownAtNight\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n            MaxCapacity = 20\n        });\n\n        new CfnOutput(this, \"FunctionName\", new CfnOutputProps {\n            Value = fn.FunctionName\n        });\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.applicationautoscaling.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\npublic class TestStack extends Stack {\n    public TestStack(App scope, String id) {\n        super(scope, id);\n\n        Function fn = Function.Builder.create(this, \"MyLambda\")\n                .code(new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"))\n                .handler(\"index.handler\")\n                .runtime(Runtime.NODEJS_10_X)\n                .build();\n\n        Version version = fn.getCurrentVersion();\n\n        Alias alias = Alias.Builder.create(this, \"Alias\")\n                .aliasName(\"prod\")\n                .version(version)\n                .build();\n\n        IScalableFunctionAttribute scalingTarget = alias.addAutoScaling(AutoScalingOptions.builder().minCapacity(3).maxCapacity(50).build());\n\n        scalingTarget.scaleOnUtilization(UtilizationScalingOptions.builder()\n                .utilizationTarget(0.5)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n                .minCapacity(20)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleDownAtNight\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n                .maxCapacity(20)\n                .build());\n\n        CfnOutput.Builder.create(this, \"FunctionName\")\n                .value(fn.getFunctionName())\n                .build();\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.App"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#functionName",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 16,
        "75": 69,
        "102": 1,
        "104": 3,
        "143": 1,
        "153": 1,
        "156": 2,
        "162": 1,
        "169": 1,
        "193": 9,
        "194": 19,
        "196": 8,
        "197": 6,
        "216": 1,
        "223": 1,
        "225": 5,
        "226": 7,
        "242": 5,
        "243": 5,
        "245": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "279": 1,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a5f037339b3827bd819f602a6c889990a8581d30b09ec1934b13a4efc474b7ee"
    },
    "a3805f94114690245e7829ed9d9a828af499b727c2bc304242e03aa4848e49e1": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ArnComponents"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "67d8156ceb803b361c9f77f34401b0835dc9f4ac0014a9729a0c9c88a03630b4"
    },
    "d544dfb9fa54974f6562b43d7f4ddcca549db8a1c506fc7d7f9f1588e939960c": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(\"/path/to/handler\",\n        bundling=BundlingOptions(\n            image=DockerImage.from_build(\"/path/to/dir/with/DockerFile\",\n                build_args={\n                    \"ARG1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(\"/path/to/handler\", new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = DockerImage.FromBuild(\"/path/to/dir/with/DockerFile\", new DockerBuildOptions {\n                BuildArgs = new Dictionary<string, string> {\n                    { \"ARG1\", \"value1\" }\n                }\n            }),\n            Command = new [] { \"my\", \"cool\", \"command\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(\"/path/to/handler\", AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(DockerImage.fromBuild(\"/path/to/dir/with/DockerFile\", DockerBuildOptions.builder()\n                                .buildArgs(Map.of(\n                                        \"ARG1\", \"value1\"))\n                                .build()))\n                        .command(List.of(\"my\", \"cool\", \"command\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.BundlingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerBuildOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "ac494382a019b3cfe552cdf6c19284577ff21942849276f4544d267b6ed26e27"
    },
    "2a8dd00888257444bfb3e72213d541822459cff52d3cefb8860e404f5b12c800": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\n# mutating the hook\n# my_role is of type Role\n\nhook = cfn_template.get_hook(\"MyOutput\")\ncode_deploy_hook = hook\ncode_deploy_hook.service_role = my_role.role_arn",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.GetHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.ServiceRole = myRole.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.getHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.getServiceRole() = myRole.getRoleArn();",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\n\n// mutating the hook\ndeclare const myRole: iam.Role;\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCodeDeployBlueGreenHook"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Role#roleArn",
        "@aws-cdk/cloudformation-include.CfnInclude#getHook",
        "@aws-cdk/core.CfnCodeDeployBlueGreenHook",
        "@aws-cdk/core.CfnHook"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the hook\ndeclare const myRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "62": 1,
        "75": 19,
        "130": 2,
        "153": 4,
        "169": 4,
        "194": 3,
        "196": 1,
        "209": 1,
        "217": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "abdf1ce0ef8de20ec69715ad783e1042f6d35872bbb2120e8aac2805b41b0929"
    },
    "45e7c0dc02f9ad0299544c90e35823b438641dce6719f05950c0d93f6b6efdca": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "1"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "6f32ba0d2347add5195e6ba699a4644500ab4881627f0b9d39eebbc4b50d2466"
    },
    "51321fc081b7604dad80762a655a7f1cf1320ac7c4a412b1b8f34d7aa02ebef1": {
      "translations": {
        "python": {
          "source": "raw_bucket = s3.CfnBucket(self, \"Bucket\")\n# -or-\nraw_bucket_alt = my_bucket.node.default_child\n\n# then\nraw_bucket.cfn_options.condition = CfnCondition(self, \"EnableBucket\")\nraw_bucket.cfn_options.metadata = {\n    \"metadata_key\": \"MetadataValue\"\n}",
          "version": "1"
        },
        "csharp": {
          "source": "CfnBucket rawBucket = new CfnBucket(this, \"Bucket\", new CfnBucketProps { });\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.Node.DefaultChild;\n\n// then\nrawBucket.CfnOptions.Condition = new CfnCondition(this, \"EnableBucket\", new CfnConditionProps { });\nrawBucket.CfnOptions.Metadata = new Dictionary<string, object> {\n    { \"metadataKey\", \"MetadataValue\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "CfnBucket rawBucket = CfnBucket.Builder.create(this, \"Bucket\").build();\n// -or-\nCfnBucket rawBucketAlt = (CfnBucket)myBucket.getNode().getDefaultChild();\n\n// then\nrawBucket.getCfnOptions().getCondition() = CfnCondition.Builder.create(this, \"EnableBucket\").build();\nrawBucket.getCfnOptions().getMetadata() = Map.of(\n        \"metadataKey\", \"MetadataValue\");",
          "version": "1"
        },
        "$": {
          "source": "const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnConditionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.CfnBucketProps",
        "@aws-cdk/core.CfnCondition",
        "@aws-cdk/core.CfnConditionProps",
        "@aws-cdk/core.CfnResource#cfnOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.ICfnResourceOptions#condition",
        "@aws-cdk/core.ICfnResourceOptions#metadata",
        "@aws-cdk/core.IConstruct#node"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });\n// -or-\nconst rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;\n\n// then\nrawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });\nrawBucket.cfnOptions.metadata = {\n  metadataKey: 'MetadataValue',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "62": 2,
        "75": 17,
        "104": 2,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "197": 2,
        "209": 2,
        "217": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "6f32ba0d2347add5195e6ba699a4644500ab4881627f0b9d39eebbc4b50d2466"
    },
    "7b222a0ad75f038003924731e14afc71602c89adc7f070d4b8d3d78bda116dde": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnDynamicReference"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "03f28ddd4e16b976d8b39d1028002210bb91ea6398d9ee5793aa123cbcc17614"
    },
    "528cf9d0437909e775d7445c27c1693aefb343b74384b71c7ea1487fd4ed22d9": {
      "translations": {
        "python": {
          "source": "CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\")",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "java": {
          "source": "new CfnDynamicReference(CfnDynamicReferenceService.SECRETS_MANAGER, \"secret-id:secret-string:json-key:version-stage:version-id\");",
          "version": "1"
        },
        "$": {
          "source": "new CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnDynamicReferenceService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnDynamicReference",
        "@aws-cdk/core.CfnDynamicReferenceService",
        "@aws-cdk/core.CfnDynamicReferenceService#SECRETS_MANAGER"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnDynamicReference(\n  CfnDynamicReferenceService.SECRETS_MANAGER,\n  'secret-id:secret-string:json-key:version-stage:version-id',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "03f28ddd4e16b976d8b39d1028002210bb91ea6398d9ee5793aa123cbcc17614"
    },
    "1a9cd4bb7606a5accee9029793ec25362afb699d63864f63601c2125f0438a55": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\n# mutating the hook\n# my_role is of type Role\n\nhook = cfn_template.get_hook(\"MyOutput\")\ncode_deploy_hook = hook\ncode_deploy_hook.service_role = my_role.role_arn",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.GetHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.ServiceRole = myRole.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the hook\nRole myRole;\n\nCfnHook hook = cfnTemplate.getHook(\"MyOutput\");\nCfnCodeDeployBlueGreenHook codeDeployHook = (CfnCodeDeployBlueGreenHook)hook;\ncodeDeployHook.getServiceRole() = myRole.getRoleArn();",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\n\n// mutating the hook\ndeclare const myRole: iam.Role;\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnHook"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Role#roleArn",
        "@aws-cdk/cloudformation-include.CfnInclude#getHook",
        "@aws-cdk/core.CfnCodeDeployBlueGreenHook",
        "@aws-cdk/core.CfnHook"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the hook\ndeclare const myRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst hook: core.CfnHook = cfnTemplate.getHook('MyOutput');\nconst codeDeployHook = hook as core.CfnCodeDeployBlueGreenHook;\ncodeDeployHook.serviceRole = myRole.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "62": 1,
        "75": 19,
        "130": 2,
        "153": 4,
        "169": 4,
        "194": 3,
        "196": 1,
        "209": 1,
        "217": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "abdf1ce0ef8de20ec69715ad783e1042f6d35872bbb2120e8aac2805b41b0929"
    },
    "cec3e729561793c8742e25dfe7aaa78dff862b013be765462b9c81da47a59280": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnInclude"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "1c2c5ee14041a73f46051ab8ba6efec3f35003868b026aa9b20ec584b6ae2f88"
    },
    "73c18fa5a53cf43b45679c6fafae698a13f2cedffc8a335ea84cc03c0e0bbba0": {
      "translations": {
        "python": {
          "source": "CfnInclude(self, \"ID\",\n    template={\n        \"Resources\": {\n            \"Bucket\": {\n                \"Type\": \"AWS::S3::Bucket\",\n                \"Properties\": {\n                    \"BucketName\": \"my-shiny-bucket\"\n                }\n            }\n        }\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnInclude(this, \"ID\", new CfnIncludeProps {\n    Template = new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n        { \"Resources\", new Struct {\n            Bucket = new Struct {\n                Type = \"AWS::S3::Bucket\",\n                Properties = new Struct {\n                    BucketName = \"my-shiny-bucket\"\n                }\n            }\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude.Builder.create(this, \"ID\")\n        .template(Map.of(\n                \"Resources\", Map.of(\n                        \"Bucket\", Map.of(\n                                \"Type\", \"AWS::S3::Bucket\",\n                                \"Properties\", Map.of(\n                                        \"BucketName\", \"my-shiny-bucket\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnIncludeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnInclude",
        "@aws-cdk/core.CfnIncludeProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnInclude(this, 'ID', {\n  template: {\n    Resources: {\n      Bucket: {\n        Type: 'AWS::S3::Bucket',\n        Properties: {\n          BucketName: 'my-shiny-bucket'\n        }\n      }\n    }\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 5,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "1c2c5ee14041a73f46051ab8ba6efec3f35003868b026aa9b20ec584b6ae2f88"
    },
    "cbddba650e24e7dd7bd6865d1695ecd072880e58723df961bd54ad4a469578a9": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        f\"aws:PrincipalTag/{tagParam.valueAsString}\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnJson"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "3a0621f2dc036636a5a92262d11858a53f6da4be9816d8f8593c0b1254866ab7"
    },
    "f654db7aa2ea7c8ede2d0a9bc66b6786e3eae83cdd5a78254aa1086d5fe3e523": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        f\"aws:PrincipalTag/{tagParam.valueAsString}\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnJsonProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "3a0621f2dc036636a5a92262d11858a53f6da4be9816d8f8593c0b1254866ab7"
    },
    "16620fd80635ebdd5251c70805825778c3397c7a483754dfb4c0be5dc1dbaf57": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "26a2bc83992017c2f176465240b8296cca640111948fc56ea56c47ce2c40cc92"
    },
    "dec2a46f6b9aa4d15b6c70f3a0355dc63446f29f27bf81d934a0f5c71118919b": {
      "translations": {
        "python": {
          "source": "region_table = CfnMapping(self, \"RegionTable\",\n    mapping={\n        \"us-east-1\": {\n            \"region_name\": \"US East (N. Virginia)\"\n        },\n        \"us-east-2\": {\n            \"region_name\": \"US East (Ohio)\"\n        }\n    }\n)\n\nregion_table.find_in_map(Aws.REGION, \"regionName\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnMapping regionTable = new CfnMapping(this, \"RegionTable\", new CfnMappingProps {\n    Mapping = new Dictionary<string, IDictionary<string, object>> {\n        { \"us-east-1\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (N. Virginia)\" }\n        } },\n        { \"us-east-2\", new Dictionary<string, object> {\n            { \"regionName\", \"US East (Ohio)\" }\n        } }\n    }\n});\n\nregionTable.FindInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "java": {
          "source": "CfnMapping regionTable = CfnMapping.Builder.create(this, \"RegionTable\")\n        .mapping(Map.of(\n                \"us-east-1\", Map.of(\n                        \"regionName\", \"US East (N. Virginia)\"),\n                \"us-east-2\", Map.of(\n                        \"regionName\", \"US East (Ohio)\")))\n        .build();\n\nregionTable.findInMap(Aws.REGION, \"regionName\");",
          "version": "1"
        },
        "$": {
          "source": "const regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnMappingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Aws#REGION",
        "@aws-cdk/core.CfnMapping",
        "@aws-cdk/core.CfnMapping#findInMap",
        "@aws-cdk/core.CfnMappingProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst regionTable = new CfnMapping(this, 'RegionTable', {\n  mapping: {\n    'us-east-1': {\n      regionName: 'US East (N. Virginia)',\n      // ...\n    },\n    'us-east-2': {\n      regionName: 'US East (Ohio)',\n      // ...\n    },\n    // ...\n  }\n});\n\nregionTable.findInMap(Aws.REGION, 'regionName')\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "193": 4,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "26a2bc83992017c2f176465240b8296cca640111948fc56ea56c47ce2c40cc92"
    },
    "1584528071b4c63dd4e0ef12b8d834b4d9e522ffb2fb4790ec514f903d126b74": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n# add service account\nservice_account = cluster.add_service_account(\"MyServiceAccount\")\n\nbucket = s3.Bucket(self, \"Bucket\")\nbucket.grant_read_write(service_account)\n\nmypod = cluster.add_manifest(\"mypod\", {\n    \"api_version\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\"name\": \"mypod\"},\n    \"spec\": {\n        \"service_account_name\": service_account.service_account_name,\n        \"containers\": [{\n            \"name\": \"hello\",\n            \"image\": \"paulbouwer/hello-kubernetes:1.5\",\n            \"ports\": [{\"container_port\": 8080}]\n        }\n        ]\n    }\n})\n\n# create the resource after the service account.\nmypod.node.add_dependency(service_account)\n\n# print the IAM role arn for this service account\nCfnOutput(self, \"ServiceAccountIamRole\", value=service_account.role.role_arn)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.AddServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.GrantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.AddManifest(\"mypod\", new Dictionary<string, object> {\n    { \"apiVersion\", \"v1\" },\n    { \"kind\", \"Pod\" },\n    { \"metadata\", new Dictionary<string, string> { { \"name\", \"mypod\" } } },\n    { \"spec\", new Dictionary<string, object> {\n        { \"serviceAccountName\", serviceAccount.ServiceAccountName },\n        { \"containers\", new [] { new Struct {\n            Name = \"hello\",\n            Image = \"paulbouwer/hello-kubernetes:1.5\",\n            Ports = new [] { new Struct { ContainerPort = 8080 } }\n        } } }\n    } }\n});\n\n// create the resource after the service account.\nmypod.Node.AddDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nnew CfnOutput(this, \"ServiceAccountIamRole\", new CfnOutputProps { Value = serviceAccount.Role.RoleArn });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// add service account\nServiceAccount serviceAccount = cluster.addServiceAccount(\"MyServiceAccount\");\n\nBucket bucket = new Bucket(this, \"Bucket\");\nbucket.grantReadWrite(serviceAccount);\n\nKubernetesManifest mypod = cluster.addManifest(\"mypod\", Map.of(\n        \"apiVersion\", \"v1\",\n        \"kind\", \"Pod\",\n        \"metadata\", Map.of(\"name\", \"mypod\"),\n        \"spec\", Map.of(\n                \"serviceAccountName\", serviceAccount.getServiceAccountName(),\n                \"containers\", List.of(Map.of(\n                        \"name\", \"hello\",\n                        \"image\", \"paulbouwer/hello-kubernetes:1.5\",\n                        \"ports\", List.of(Map.of(\"containerPort\", 8080)))))));\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\n// print the IAM role arn for this service account\nCfnOutput.Builder.create(this, \"ServiceAccountIamRole\").value(serviceAccount.getRole().getRoleArn()).build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnOutput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-eks.KubernetesManifest",
        "@aws-cdk/aws-eks.ServiceAccount",
        "@aws-cdk/aws-eks.ServiceAccount#role",
        "@aws-cdk/aws-eks.ServiceAccount#serviceAccountName",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IRole#roleArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#grantReadWrite",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// add service account\nconst serviceAccount = cluster.addServiceAccount('MyServiceAccount');\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nbucket.grantReadWrite(serviceAccount);\n\nconst mypod = cluster.addManifest('mypod', {\n  apiVersion: 'v1',\n  kind: 'Pod',\n  metadata: { name: 'mypod' },\n  spec: {\n    serviceAccountName: serviceAccount.serviceAccountName,\n    containers: [\n      {\n        name: 'hello',\n        image: 'paulbouwer/hello-kubernetes:1.5',\n        ports: [ { containerPort: 8080 } ],\n      },\n    ],\n  },\n});\n\n// create the resource after the service account.\nmypod.node.addDependency(serviceAccount);\n\n// print the IAM role arn for this service account\nnew CfnOutput(this, 'ServiceAccountIamRole', { value: serviceAccount.role.roleArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 9,
        "196": 4,
        "197": 2,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "fb7205381fe1e04661918685710481f084d9f1a5ba4839b2701f88544c29dc17"
    },
    "5b15bee57b5567b09c24636ddd922b219e303ffa5d54b2b41498a08f5667afa2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2_targets as targets\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as patterns\n\n# vpc is of type Vpc\n\n\ntask = ecs.FargateTaskDefinition(self, \"Task\", cpu=256, memory_limit_mi_b=512)\ntask.add_container(\"nginx\",\n    image=ecs.ContainerImage.from_registry(\"public.ecr.aws/nginx/nginx:latest\"),\n    port_mappings=[ecs.PortMapping(container_port=80)]\n)\n\nsvc = patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    vpc=vpc,\n    task_definition=task,\n    public_load_balancer=False\n)\n\nnlb = elbv2.NetworkLoadBalancer(self, \"Nlb\",\n    vpc=vpc,\n    cross_zone_enabled=True,\n    internet_facing=True\n)\n\nlistener = nlb.add_listener(\"listener\", port=80)\n\nlistener.add_targets(\"Targets\",\n    targets=[targets.AlbTarget(svc.load_balancer, 80)],\n    port=80\n)\n\nCfnOutput(self, \"NlbEndpoint\", value=f\"http://{nlb.loadBalancerDnsName}\")",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nVpc vpc;\n\n\nFargateTaskDefinition task = new FargateTaskDefinition(this, \"Task\", new FargateTaskDefinitionProps { Cpu = 256, MemoryLimitMiB = 512 });\ntask.AddContainer(\"nginx\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"public.ecr.aws/nginx/nginx:latest\"),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } }\n});\n\nApplicationLoadBalancedFargateService svc = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Vpc = vpc,\n    TaskDefinition = task,\n    PublicLoadBalancer = false\n});\n\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"Nlb\", new NetworkLoadBalancerProps {\n    Vpc = vpc,\n    CrossZoneEnabled = true,\n    InternetFacing = true\n});\n\nNetworkListener listener = nlb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\n\nlistener.AddTargets(\"Targets\", new AddNetworkTargetsProps {\n    Targets = new [] { new AlbTarget(svc.LoadBalancer, 80) },\n    Port = 80\n});\n\nnew CfnOutput(this, \"NlbEndpoint\", new CfnOutputProps { Value = $\"http://{nlb.loadBalancerDnsName}\" });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.targets.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nVpc vpc;\n\n\nFargateTaskDefinition task = FargateTaskDefinition.Builder.create(this, \"Task\").cpu(256).memoryLimitMiB(512).build();\ntask.addContainer(\"nginx\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"public.ecr.aws/nginx/nginx:latest\"))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .build());\n\nApplicationLoadBalancedFargateService svc = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .taskDefinition(task)\n        .publicLoadBalancer(false)\n        .build();\n\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"Nlb\")\n        .vpc(vpc)\n        .crossZoneEnabled(true)\n        .internetFacing(true)\n        .build();\n\nNetworkListener listener = nlb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\n\nlistener.addTargets(\"Targets\", AddNetworkTargetsProps.builder()\n        .targets(List.of(new AlbTarget(svc.getLoadBalancer(), 80)))\n        .port(80)\n        .build());\n\nCfnOutput.Builder.create(this, \"NlbEndpoint\").value(String.format(\"http://%s\", nlb.getLoadBalancerDnsName())).build();",
          "version": "1"
        },
        "$": {
          "source": "import * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const vpc: ec2.Vpc;\n\nconst task = new ecs.FargateTaskDefinition(this, 'Task', { cpu: 256, memoryLimitMiB: 512 });\ntask.addContainer('nginx', {\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest'),\n  portMappings: [{ containerPort: 80 }],\n});\n\nconst svc = new patterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  taskDefinition: task,\n  publicLoadBalancer: false,\n});\n\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'Nlb', {\n  vpc,\n  crossZoneEnabled: true,\n  internetFacing: true,\n});\n\nconst listener = nlb.addListener('listener', { port: 80 });\n\nlistener.addTargets('Targets', {\n  targets: [new targets.AlbTarget(svc.loadBalancer, 80)],\n  port: 80,\n});\n\nnew CfnOutput(this, 'NlbEndpoint', { value: `http://${nlb.loadBalancerDnsName}`})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnOutputProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-elasticloadbalancingv2-targets.AlbTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst task = new ecs.FargateTaskDefinition(this, 'Task', { cpu: 256, memoryLimitMiB: 512 });\ntask.addContainer('nginx', {\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest'),\n  portMappings: [{ containerPort: 80 }],\n});\n\nconst svc = new patterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  taskDefinition: task,\n  publicLoadBalancer: false,\n});\n\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'Nlb', {\n  vpc,\n  crossZoneEnabled: true,\n  internetFacing: true,\n});\n\nconst listener = nlb.addListener('listener', { port: 80 });\n\nlistener.addTargets('Targets', {\n  targets: [new targets.AlbTarget(svc.loadBalancer, 80)],\n  port: 80,\n});\n\nnew CfnOutput(this, 'NlbEndpoint', { value: `http://${nlb.loadBalancerDnsName}`})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 11,
        "15": 1,
        "17": 1,
        "75": 48,
        "91": 1,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 8,
        "194": 11,
        "196": 4,
        "197": 5,
        "211": 1,
        "221": 1,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 13,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "0ef8c3a77adf73de2ba615fbb6f7396ffd7141f9a0fd8ab966be151b9c9b6717"
    },
    "dba6144a170203598a7ba9a2de3d0539a1058ee06bf7be38c69043836418f203": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nurl = CfnParameter(self, \"url-param\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(url.value_as_string))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.AddSubscription(new UrlSubscription(url.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.addSubscription(new UrlSubscription(url.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnParameter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "dda7884fbf1c1d2f10d83a513dd6d01c8aa3ef98a5fda4174da7d9f7e5184a88"
    },
    "a5573e5a1b13ecca687a0615f01f51a1cd7dd9c6598bd0174ebbc355aee61979": {
      "translations": {
        "python": {
          "source": "CfnParameter(self, \"MyParameter\",\n    type=\"Number\",\n    default=1337\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new CfnParameter(this, \"MyParameter\", new CfnParameterProps {\n    Type = \"Number\",\n    Default = 1337\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter.Builder.create(this, \"MyParameter\")\n        .type(\"Number\")\n        .default(1337)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnParameterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnParameter",
        "@aws-cdk/core.CfnParameterProps"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew CfnParameter(this, 'MyParameter', {\n  type: 'Number',\n  default: 1337,\n  // See the API reference for more configuration props\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "6517917b0dba1a6a23c787503caa181b7b9df842b617845d8e83180764de5f3c"
    },
    "4245905f1487d9fac13e69b3b04e22881fba3f0fa1ed906d6ee13f4bc2d8c322": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\ncfn_bucket = bucket.node.find_child(\"Resource\")\ncfn_bucket.apply_removal_policy(RemovalPolicy.DESTROY)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.Node.FindChild(\"Resource\");\ncfnBucket.ApplyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nCfnResource cfnBucket = (CfnResource)bucket.node.findChild(\"Resource\");\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResource#applyRemovalPolicy",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#findChild",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cfnBucket = bucket.node.findChild('Resource') as CfnResource;\ncfnBucket.applyRemovalPolicy(RemovalPolicy.DESTROY);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 2,
        "194": 4,
        "196": 2,
        "217": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "0488b3d1c276cea114398c0cbb8e9341bcd0e6754f665a58062c1f829a481b68"
    },
    "8f4a20593178eab818e1a2ca98eef6e7ea0bca9dd40b09300fff001deeb086d2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f632faf8bbec3b8855f7e0618895e089ad458048370bfdf0c1e0112e26a45c4b"
    },
    "db5678463e4256baa691c7ff3c18affd17cd995f7c8308569325110bd598b171": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\n# mutating the rule\n# my_parameter is of type CfnParameter\n\nrule = cfn_template.get_rule(\"MyRule\")\nrule.add_assertion(core.Fn.condition_contains([\"m1.small\"], my_parameter.value_as_string), \"MyParameter has to be m1.small\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.GetRule(\"MyRule\");\nrule.AddAssertion(Fn.ConditionContains(new [] { \"m1.small\" }, myParameter.ValueAsString), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.getRule(\"MyRule\");\nrule.addAssertion(Fn.conditionContains(List.of(\"m1.small\"), myParameter.getValueAsString()), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CfnRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/cloudformation-include.CfnInclude#getRule",
        "@aws-cdk/core.CfnRule",
        "@aws-cdk/core.CfnRule#addAssertion",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#conditionContains",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "194": 5,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "05db6ec3d401cd4849714779d5b4f34628079e712ad40aa2ed4c76cbb7801f4d"
    },
    "95d159ca458aa3ec849523175fb85b2b6b54fe8a5c990a29f2f92c8e4589bca1": {
      "translations": {
        "python": {
          "source": "# Declare the dependable object\nb_and_c = ConcreteDependable()\nb_and_c.add(construct_b)\nb_and_c.add(construct_c)\n\n# Take the dependency\nconstruct_a.node.add_dependency(b_and_c)",
          "version": "1"
        },
        "csharp": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.Add(constructB);\nbAndC.Add(constructC);\n\n// Take the dependency\nconstructA.Node.AddDependency(bAndC);",
          "version": "1"
        },
        "java": {
          "source": "// Declare the dependable object\nConcreteDependable bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "1"
        },
        "$": {
          "source": "// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.ConcreteDependable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.ConcreteDependable",
        "@aws-cdk/core.ConcreteDependable#add",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.IDependable"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Declare the dependable object\nconst bAndC = new ConcreteDependable();\nbAndC.add(constructB);\nbAndC.add(constructC);\n\n// Take the dependency\nconstructA.node.addDependency(bAndC);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "60d52b6e9453e9d2f97f3bd2b82d67fb90fcf8574c15d8c796edc3756c818647"
    },
    "87eb727fbb8ec182cc7a7a0a8d35c4734fb0975e41f6ebe3be6c6001c32a60f4": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Construct"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c075e9d0b0f9e1c63e939af74d437fbd47c5782f71f051e11fdf47289ca7fd5a"
    },
    "2bf55bf67f19eadd2e449b5f2c77b1bf1be96b271562d4b593271c8ebeab3c0c": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4483cc035a40f5ed1fd0d0c0c5bf416b047e78f3bb1c9daad0b78cdf34bf8797"
    },
    "c65e88c7e325ca7540d7965c86290eca1d9e903e90fac4dc4d5ed11b03598e95": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4483cc035a40f5ed1fd0d0c0c5bf416b047e78f3bb1c9daad0b78cdf34bf8797"
    },
    "f70050e59a2a49fb5ac6390981da21b0b5b0814f1851988d769f752a2d56ae51": {
      "translations": {
        "python": {
          "source": "provider = CustomResourceProvider.get_or_create_provider(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X\n)\n\nrole_arn = provider.role_arn",
          "version": "1"
        },
        "csharp": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.GetOrCreateProvider(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X\n});\n\nstring roleArn = provider.RoleArn;",
          "version": "1"
        },
        "java": {
          "source": "CustomResourceProvider provider = CustomResourceProvider.getOrCreateProvider(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .build());\n\nString roleArn = provider.getRoleArn();",
          "version": "1"
        },
        "$": {
          "source": "const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResourceProvider",
        "@aws-cdk/core.CustomResourceProvider#getOrCreateProvider",
        "@aws-cdk/core.CustomResourceProvider#roleArn",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n});\n\nconst roleArn = provider.roleArn;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "cdf4e7f993a01fe098b8d3069dbe4fc87f0e80605bf20d98d7403c4f2076926d"
    },
    "542540be3e6612911d63bd3dcf4438e8e6bb9b29b19b12a018501be370af6744": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4483cc035a40f5ed1fd0d0c0c5bf416b047e78f3bb1c9daad0b78cdf34bf8797"
    },
    "c97b7fb7573114cb9852840ab0ed42ad9ea7cbd7cb01e6e7be1e42dfd4fe8473": {
      "translations": {
        "python": {
          "source": "service_token = CustomResourceProvider.get_or_create(self, \"Custom::MyCustomResourceType\",\n    code_directory=f\"{__dirname}/my-handler\",\n    runtime=CustomResourceProviderRuntime.NODEJS_12_X,\n    description=\"Lambda function created by the custom resource provider\"\n)\n\nCustomResource(self, \"MyResource\",\n    resource_type=\"Custom::MyCustomResourceType\",\n    service_token=service_token\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string serviceToken = CustomResourceProvider.GetOrCreate(this, \"Custom::MyCustomResourceType\", new CustomResourceProviderProps {\n    CodeDirectory = $\"{__dirname}/my-handler\",\n    Runtime = CustomResourceProviderRuntime.NODEJS_12_X,\n    Description = \"Lambda function created by the custom resource provider\"\n});\n\nnew CustomResource(this, \"MyResource\", new CustomResourceProps {\n    ResourceType = \"Custom::MyCustomResourceType\",\n    ServiceToken = serviceToken\n});",
          "version": "1"
        },
        "java": {
          "source": "String serviceToken = CustomResourceProvider.getOrCreate(this, \"Custom::MyCustomResourceType\", CustomResourceProviderProps.builder()\n        .codeDirectory(String.format(\"%s/my-handler\", __dirname))\n        .runtime(CustomResourceProviderRuntime.NODEJS_12_X)\n        .description(\"Lambda function created by the custom resource provider\")\n        .build());\n\nCustomResource.Builder.create(this, \"MyResource\")\n        .resourceType(\"Custom::MyCustomResourceType\")\n        .serviceToken(serviceToken)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.CustomResourceProviderRuntime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CustomResource",
        "@aws-cdk/core.CustomResourceProps",
        "@aws-cdk/core.CustomResourceProvider#getOrCreate",
        "@aws-cdk/core.CustomResourceProviderProps",
        "@aws-cdk/core.CustomResourceProviderRuntime",
        "@aws-cdk/core.CustomResourceProviderRuntime#NODEJS_12_X"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {\n  codeDirectory: `${__dirname}/my-handler`,\n  runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n  description: \"Lambda function created by the custom resource provider\",\n});\n\nnew CustomResource(this, 'MyResource', {\n  resourceType: 'Custom::MyCustomResourceType',\n  serviceToken: serviceToken\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "15": 1,
        "17": 1,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "4483cc035a40f5ed1fd0d0c0c5bf416b047e78f3bb1c9daad0b78cdf34bf8797"
    },
    "f6a2dcdab188611ba0673c04abd10c454ed293b5a4c8501de1c6d57f0579db41": {
      "translations": {
        "python": {
          "source": "Stack(self, \"MyStack\",\n    # Update this qualifier to match the one used above.\n    synthesizer=cdk.DefaultStackSynthesizer(\n        qualifier=\"randchars1234\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Stack(this, \"MyStack\", new StackProps {\n    // Update this qualifier to match the one used above.\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        Qualifier = \"randchars1234\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack.Builder.create(this, \"MyStack\")\n        // Update this qualifier to match the one used above.\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .qualifier(\"randchars1234\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DefaultStackSynthesizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "7a172f0f298708bec450bd91cc6c9d81a87ef7284fbadb6acf78aa25c3beb417"
    },
    "83448fd91c8a2fc31893f3488d514c0c9c8f9f26d2fe89b47aa27e789c5597f2": {
      "translations": {
        "python": {
          "source": "Stack(self, \"MyStack\",\n    # Update this qualifier to match the one used above.\n    synthesizer=cdk.DefaultStackSynthesizer(\n        qualifier=\"randchars1234\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Stack(this, \"MyStack\", new StackProps {\n    // Update this qualifier to match the one used above.\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        Qualifier = \"randchars1234\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack.Builder.create(this, \"MyStack\")\n        // Update this qualifier to match the one used above.\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .qualifier(\"randchars1234\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DefaultStackSynthesizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "7a172f0f298708bec450bd91cc6c9d81a87ef7284fbadb6acf78aa25c3beb417"
    },
    "9318aff28769a00bbbb023ccf07d2e531989080e055bd9e4d9d1a765693a8c72": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(\"/path/to/handler\",\n        bundling=BundlingOptions(\n            image=DockerImage.from_build(\"/path/to/dir/with/DockerFile\",\n                build_args={\n                    \"ARG1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(\"/path/to/handler\", new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = DockerImage.FromBuild(\"/path/to/dir/with/DockerFile\", new DockerBuildOptions {\n                BuildArgs = new Dictionary<string, string> {\n                    { \"ARG1\", \"value1\" }\n                }\n            }),\n            Command = new [] { \"my\", \"cool\", \"command\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(\"/path/to/handler\", AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(DockerImage.fromBuild(\"/path/to/dir/with/DockerFile\", DockerBuildOptions.builder()\n                                .buildArgs(Map.of(\n                                        \"ARG1\", \"value1\"))\n                                .build()))\n                        .command(List.of(\"my\", \"cool\", \"command\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerBuildOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerBuildOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "ac494382a019b3cfe552cdf6c19284577ff21942849276f4544d267b6ed26e27"
    },
    "0cdbd10cabfb7b5f52bd1d78a59c74713b5aeb090dfb1c041ebd9a8c3d22062a": {
      "translations": {
        "python": {
          "source": "asset = assets.Asset(self, \"BundledAsset\",\n    path=path.join(__dirname, \"markdown-asset\"),  # /asset-input and working directory in the container\n    bundling=BundlingOptions(\n        image=DockerImage.from_build(path.join(__dirname, \"alpine-markdown\")),  # Build an image\n        command=[\"sh\", \"-c\", \"\"\"\n                        markdown index.md > /asset-output/index.html\n                      \"\"\"\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Asset asset = new Asset(this, \"BundledAsset\", new AssetProps {\n    Path = Join(__dirname, \"markdown-asset\"),  // /asset-input and working directory in the container\n    Bundling = new BundlingOptions {\n        Image = DockerImage.FromBuild(Join(__dirname, \"alpine-markdown\")),  // Build an image\n        Command = new [] { \"sh\", \"-c\", @\"\n                        markdown index.md > /asset-output/index.html\n                      \" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Asset asset = Asset.Builder.create(this, \"BundledAsset\")\n        .path(join(__dirname, \"markdown-asset\")) // /asset-input and working directory in the container\n        .bundling(BundlingOptions.builder()\n                .image(DockerImage.fromBuild(join(__dirname, \"alpine-markdown\"))) // Build an image\n                .command(List.of(\"sh\", \"-c\", \"\\n            markdown index.md > /asset-output/index.html\\n          \"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const asset = new assets.Asset(this, 'BundledAsset', {\n  path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n  bundling: {\n    image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n    command: [\n      'sh', '-c', `\n        markdown index.md > /asset-output/index.html\n      `,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.DockerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "import * as path from 'path';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { App, DockerImage, Stack, StackProps } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as assets from '../lib';\n\nclass TestStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    const asset = new assets.Asset(this, 'BundledAsset', {\n      path: path.join(__dirname, 'markdown-asset'), // /asset-input and working directory in the container\n      bundling: {\n        image: DockerImage.fromBuild(path.join(__dirname, 'alpine-markdown')), // Build an image\n        command: [\n          'sh', '-c', `\n            markdown index.md > /asset-output/index.html\n          `,\n        ],\n      },\n    });\n    /// !hide\n\n    const user = new iam.User(this, 'MyUser');\n    asset.grantRead(user);\n  }\n}\n\nconst app = new App();\nnew TestStack(app, 'cdk-integ-assets-bundling');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "14": 1,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "e700cc7db00e28f95c081b18e1139e92ca93b35973ce419f3d18e1c57280b945"
    },
    "956955c1b3d0eb46677062dddecc93ae0cad94522a25572c0defbf1c6f13b54c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Duration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "9a69650e4049481b8731f33ae3e5f20969820485deaec08f06efe57d4e9e93c7": {
      "translations": {
        "python": {
          "source": "# Passing a replication bucket created in a different stack.\napp = App()\nreplication_stack = Stack(app, \"ReplicationStack\",\n    env=Environment(\n        region=\"us-west-1\"\n    )\n)\nkey = kms.Key(replication_stack, \"ReplicationKey\")\nreplication_bucket = s3.Bucket(replication_stack, \"ReplicationBucket\",\n    # like was said above - replication buckets need a set physical name\n    bucket_name=PhysicalName.GENERATE_IF_NEEDED,\n    encryption_key=key\n)\n\n# later...\ncodepipeline.Pipeline(replication_stack, \"Pipeline\",\n    cross_region_replication_buckets={\n        \"us-west-1\": replication_bucket\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = new Stack(app, \"ReplicationStack\", new StackProps {\n    Env = new Environment {\n        Region = \"us-west-1\"\n    }\n});\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = new Bucket(replicationStack, \"ReplicationBucket\", new BucketProps {\n    // like was said above - replication buckets need a set physical name\n    BucketName = PhysicalName.GENERATE_IF_NEEDED,\n    EncryptionKey = key\n});\n\n// later...\n// later...\nnew Pipeline(replicationStack, \"Pipeline\", new PipelineProps {\n    CrossRegionReplicationBuckets = new Dictionary<string, IBucket> {\n        { \"us-west-1\", replicationBucket }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = Stack.Builder.create(app, \"ReplicationStack\")\n        .env(Environment.builder()\n                .region(\"us-west-1\")\n                .build())\n        .build();\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = Bucket.Builder.create(replicationStack, \"ReplicationBucket\")\n        // like was said above - replication buckets need a set physical name\n        .bucketName(PhysicalName.GENERATE_IF_NEEDED)\n        .encryptionKey(key)\n        .build();\n\n// later...\n// later...\nPipeline.Builder.create(replicationStack, \"Pipeline\")\n        .crossRegionReplicationBuckets(Map.of(\n                \"us-west-1\", replicationBucket))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Environment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "193": 5,
        "194": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 6
      },
      "fqnsFingerprint": "39c90f67c53cb41443baee258af71d2a0c5821f0c8aeed90002de1610b1e3ecb"
    },
    "058b21ae454a8038250750030cae68437ba50e658e03e3db32027e7a22fe24f6": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\n# mutating the rule\n# my_parameter is of type CfnParameter\n\nrule = cfn_template.get_rule(\"MyRule\")\nrule.add_assertion(core.Fn.condition_contains([\"m1.small\"], my_parameter.value_as_string), \"MyParameter has to be m1.small\")",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.GetRule(\"MyRule\");\nrule.AddAssertion(Fn.ConditionContains(new [] { \"m1.small\" }, myParameter.ValueAsString), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// mutating the rule\nCfnParameter myParameter;\n\nCfnRule rule = cfnTemplate.getRule(\"MyRule\");\nrule.addAssertion(Fn.conditionContains(List.of(\"m1.small\"), myParameter.getValueAsString()), \"MyParameter has to be m1.small\");",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Fn"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/cloudformation-include.CfnInclude#getRule",
        "@aws-cdk/core.CfnRule",
        "@aws-cdk/core.CfnRule#addAssertion",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#conditionContains",
        "@aws-cdk/core.ICfnConditionExpression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// mutating the rule\ndeclare const myParameter: core.CfnParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule: core.CfnRule = cfnTemplate.getRule('MyRule');\nrule.addAssertion(core.Fn.conditionContains(['m1.small'], myParameter.valueAsString),\n  'MyParameter has to be m1.small');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "194": 5,
        "196": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "05db6ec3d401cd4849714779d5b4f34628079e712ad40aa2ed4c76cbb7801f4d"
    },
    "39afe8263a6687b6e8e8d1dca2f82f29749e517ffe1bff5494509341c553591f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.NestedStack"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "684d7cadc8d7451c5165008ff56a4576cfb2b2c4c46d8ece716a1473f80ea5aa"
    },
    "589259d50b09f3c2d57e0834429320c0ca60b170189a8febe4b381d85a52ff3d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.NestedStackProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "684d7cadc8d7451c5165008ff56a4576cfb2b2c4c46d8ece716a1473f80ea5aa"
    },
    "e245cfaf38a1d88333695b084984b3f9442503eb3c015f4f220334c35c9ea6c3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticsearch as es\n\n# api is of type GraphqlApi\n\n\nuser = iam.User(self, \"User\")\ndomain = es.Domain(self, \"Domain\",\n    version=es.ElasticsearchVersion.V7_1,\n    removal_policy=RemovalPolicy.DESTROY,\n    fine_grained_access_control=es.AdvancedSecurityOptions(master_user_arn=user.user_arn),\n    encryption_at_rest=es.EncryptionAtRestOptions(enabled=True),\n    node_to_node_encryption=True,\n    enforce_https=True\n)\nds = api.add_elasticsearch_data_source(\"ds\", domain)\n\nds.create_resolver(\n    type_name=\"Query\",\n    field_name=\"getTests\",\n    request_mapping_template=appsync.MappingTemplate.from_string(JSON.stringify({\n        \"version\": \"2017-02-28\",\n        \"operation\": \"GET\",\n        \"path\": \"/id/post/_search\",\n        \"params\": {\n            \"headers\": {},\n            \"query_string\": {},\n            \"body\": {\"from\": 0, \"size\": 50}\n        }\n    })),\n    response_mapping_template=appsync.MappingTemplate.from_string(\"\"\"[\n            #foreach($entry in $context.result.hits.hits)\n            #if( $velocityCount > 1 ) , #end\n            $utils.toJson($entry.get(\"_source\"))\n            #end\n          ]\"\"\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Elasticsearch;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = ElasticsearchVersion.V7_1,\n    RemovalPolicy = RemovalPolicy.DESTROY,\n    FineGrainedAccessControl = new AdvancedSecurityOptions { MasterUserArn = user.UserArn },\n    EncryptionAtRest = new EncryptionAtRestOptions { Enabled = true },\n    NodeToNodeEncryption = true,\n    EnforceHttps = true\n});\nElasticsearchDataSource ds = api.AddElasticsearchDataSource(\"ds\", domain);\n\nds.CreateResolver(new BaseResolverProps {\n    TypeName = \"Query\",\n    FieldName = \"getTests\",\n    RequestMappingTemplate = MappingTemplate.FromString(JSON.Stringify(new Dictionary<string, object> {\n        { \"version\", \"2017-02-28\" },\n        { \"operation\", \"GET\" },\n        { \"path\", \"/id/post/_search\" },\n        { \"params\", new Struct {\n            Headers = new Struct { },\n            QueryString = new Struct { },\n            Body = new Struct { From = 0, Size = 50 }\n        } }\n    })),\n    ResponseMappingTemplate = MappingTemplate.FromString(@\"[\n        #foreach($entry in $context.result.hits.hits)\n        #if( $velocityCount > 1 ) , #end\n        $utils.toJson($entry.get(\"\"_source\"\"))\n        #end\n      ]\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticsearch.*;\n\nGraphqlApi api;\n\n\nUser user = new User(this, \"User\");\nDomain domain = Domain.Builder.create(this, \"Domain\")\n        .version(ElasticsearchVersion.V7_1)\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .fineGrainedAccessControl(AdvancedSecurityOptions.builder().masterUserArn(user.getUserArn()).build())\n        .encryptionAtRest(EncryptionAtRestOptions.builder().enabled(true).build())\n        .nodeToNodeEncryption(true)\n        .enforceHttps(true)\n        .build();\nElasticsearchDataSource ds = api.addElasticsearchDataSource(\"ds\", domain);\n\nds.createResolver(BaseResolverProps.builder()\n        .typeName(\"Query\")\n        .fieldName(\"getTests\")\n        .requestMappingTemplate(MappingTemplate.fromString(JSON.stringify(Map.of(\n                \"version\", \"2017-02-28\",\n                \"operation\", \"GET\",\n                \"path\", \"/id/post/_search\",\n                \"params\", Map.of(\n                        \"headers\", Map.of(),\n                        \"queryString\", Map.of(),\n                        \"body\", Map.of(\"from\", 0, \"size\", 50))))))\n        .responseMappingTemplate(MappingTemplate.fromString(\"[\\n    #foreach($entry in $context.result.hits.hits)\\n    #if( $velocityCount > 1 ) , #end\\n    $utils.toJson($entry.get(\\\"_source\\\"))\\n    #end\\n  ]\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as es from '@aws-cdk/aws-elasticsearch';\n\nconst user = new iam.User(this, 'User');\nconst domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_1,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addElasticsearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.RemovalPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appsync.BaseDataSource#createResolver",
        "@aws-cdk/aws-appsync.BaseResolverProps",
        "@aws-cdk/aws-appsync.ElasticsearchDataSource",
        "@aws-cdk/aws-appsync.GraphqlApiBase#addElasticsearchDataSource",
        "@aws-cdk/aws-appsync.MappingTemplate",
        "@aws-cdk/aws-appsync.MappingTemplate#fromString",
        "@aws-cdk/aws-elasticsearch.AdvancedSecurityOptions",
        "@aws-cdk/aws-elasticsearch.Domain",
        "@aws-cdk/aws-elasticsearch.DomainProps",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion#V7_1",
        "@aws-cdk/aws-elasticsearch.EncryptionAtRestOptions",
        "@aws-cdk/aws-elasticsearch.IDomain",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#userArn",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as es from '@aws-cdk/aws-elasticsearch';\n\ndeclare const api: appsync.GraphqlApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';\nimport appsync = require('@aws-cdk/aws-appsync');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\nimport rds = require('@aws-cdk/aws-rds');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst user = new iam.User(this, 'User');\nconst domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_1,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\nconst ds = api.addElasticsearchDataSource('ds', domain);\n\nds.createResolver({\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "75": 52,
        "104": 2,
        "106": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 9,
        "194": 13,
        "196": 5,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "2b629c106d327f07e97303dc11afff8d46bf7cee42876cb20258fd2390e2f3ca"
    },
    "a29205759290cb1d2f674192b7e70b5275eacc2e83e1b62f9aba8ca0c7f9ecb5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Resource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f632faf8bbec3b8855f7e0618895e089ad458048370bfdf0c1e0112e26a45c4b"
    },
    "9daf5f99b8a5016acf279f8576d3f6d717812b3d50a9ab020218adc650eb5c7d": {
      "translations": {
        "python": {
          "source": "# Read the secret from Secrets Manager\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.GitHubSourceAction(\n    action_name=\"GitHub_Source\",\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    oauth_token=SecretValue.secrets_manager(\"my-github-token\"),\n    output=source_output,\n    branch=\"develop\"\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[source_action]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = new GitHubSourceAction(new GitHubSourceActionProps {\n    ActionName = \"GitHub_Source\",\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    OauthToken = SecretValue.SecretsManager(\"my-github-token\"),\n    Output = sourceOutput,\n    Branch = \"develop\"\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { sourceAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Read the secret from Secrets Manager\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact sourceOutput = new Artifact();\nGitHubSourceAction sourceAction = GitHubSourceAction.Builder.create()\n        .actionName(\"GitHub_Source\")\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .oauthToken(SecretValue.secretsManager(\"my-github-token\"))\n        .output(sourceOutput)\n        .branch(\"develop\")\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(sourceAction))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SecretValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceAction",
        "@aws-cdk/aws-codepipeline-actions.GitHubSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Read the secret from Secrets Manager\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.GitHubSourceAction({\n  actionName: 'GitHub_Source',\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  oauthToken: SecretValue.secretsManager('my-github-token'),\n  output: sourceOutput,\n  branch: 'develop', // default: 'master'\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [sourceAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 23,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8
      },
      "fqnsFingerprint": "471e1aa6be30f0fcac8cdb866fe3b5560813a05d5ee9001c8306405796616e4a"
    },
    "34201348bee7d4d249511d55c805ab2511e7334fd33319495e7dee7aefb358f6": {
      "translations": {
        "python": {
          "source": "secret = SecretValue.secrets_manager(\"secretId\",\n    json_field=\"password\",  # optional: key of a JSON field to retrieve (defaults to all content),\n    version_id=\"id\",  # optional: id of the version (default AWSCURRENT)\n    version_stage=\"stage\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SecretValue secret = SecretValue.SecretsManager(\"secretId\", new SecretsManagerSecretOptions {\n    JsonField = \"password\",  // optional: key of a JSON field to retrieve (defaults to all content),\n    VersionId = \"id\",  // optional: id of the version (default AWSCURRENT)\n    VersionStage = \"stage\"\n});",
          "version": "1"
        },
        "java": {
          "source": "SecretValue secret = SecretValue.secretsManager(\"secretId\", SecretsManagerSecretOptions.builder()\n        .jsonField(\"password\") // optional: key of a JSON field to retrieve (defaults to all content),\n        .versionId(\"id\") // optional: id of the version (default AWSCURRENT)\n        .versionStage(\"stage\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SecretsManagerSecretOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id',       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "8caa62eb9852331b491204219bfac72ec5a73996ebf0731e8fd4de94adbbc066"
    },
    "5b4bdaef1b642934294077003dec1ccd6de3a0c9ac06eb46f81a615ac6077363": {
      "translations": {
        "python": {
          "source": "tasks.SageMakerCreateTrainingJob(self, \"TrainSagemaker\",\n    training_job_name=sfn.JsonPath.string_at(\"$.JobName\"),\n    algorithm_specification=tasks.AlgorithmSpecification(\n        algorithm_name=\"BlazingText\",\n        training_input_mode=tasks.InputMode.FILE\n    ),\n    input_data_config=[tasks.Channel(\n        channel_name=\"train\",\n        data_source=tasks.DataSource(\n            s3_data_source=tasks.S3DataSource(\n                s3_data_type=tasks.S3DataType.S3_PREFIX,\n                s3_location=tasks.S3Location.from_json_expression(\"$.S3Bucket\")\n            )\n        )\n    )],\n    output_data_config=tasks.OutputDataConfig(\n        s3_output_location=tasks.S3Location.from_bucket(s3.Bucket.from_bucket_name(self, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    ),\n    resource_config=tasks.ResourceConfig(\n        instance_count=1,\n        instance_type=ec2.InstanceType(sfn.JsonPath.string_at(\"$.InstanceType\")),\n        volume_size=Size.gibibytes(50)\n    ),  # optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    stopping_condition=tasks.StoppingCondition(\n        max_runtime=Duration.hours(2)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new SageMakerCreateTrainingJob(this, \"TrainSagemaker\", new SageMakerCreateTrainingJobProps {\n    TrainingJobName = JsonPath.StringAt(\"$.JobName\"),\n    AlgorithmSpecification = new AlgorithmSpecification {\n        AlgorithmName = \"BlazingText\",\n        TrainingInputMode = InputMode.FILE\n    },\n    InputDataConfig = new [] { new Channel {\n        ChannelName = \"train\",\n        DataSource = new DataSource {\n            S3DataSource = new S3DataSource {\n                S3DataType = S3DataType.S3_PREFIX,\n                S3Location = S3Location.FromJsonExpression(\"$.S3Bucket\")\n            }\n        }\n    } },\n    OutputDataConfig = new OutputDataConfig {\n        S3OutputLocation = S3Location.FromBucket(Bucket.FromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\")\n    },\n    ResourceConfig = new ResourceConfig {\n        InstanceCount = 1,\n        InstanceType = new InstanceType(JsonPath.StringAt(\"$.InstanceType\")),\n        VolumeSize = Size.Gibibytes(50)\n    },  // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n    StoppingCondition = new StoppingCondition {\n        MaxRuntime = Duration.Hours(2)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "SageMakerCreateTrainingJob.Builder.create(this, \"TrainSagemaker\")\n        .trainingJobName(JsonPath.stringAt(\"$.JobName\"))\n        .algorithmSpecification(AlgorithmSpecification.builder()\n                .algorithmName(\"BlazingText\")\n                .trainingInputMode(InputMode.FILE)\n                .build())\n        .inputDataConfig(List.of(Channel.builder()\n                .channelName(\"train\")\n                .dataSource(DataSource.builder()\n                        .s3DataSource(S3DataSource.builder()\n                                .s3DataType(S3DataType.S3_PREFIX)\n                                .s3Location(S3Location.fromJsonExpression(\"$.S3Bucket\"))\n                                .build())\n                        .build())\n                .build()))\n        .outputDataConfig(OutputDataConfig.builder()\n                .s3OutputLocation(S3Location.fromBucket(Bucket.fromBucketName(this, \"Bucket\", \"mybucket\"), \"myoutputpath\"))\n                .build())\n        .resourceConfig(ResourceConfig.builder()\n                .instanceCount(1)\n                .instanceType(new InstanceType(JsonPath.stringAt(\"$.InstanceType\")))\n                .volumeSize(Size.gibibytes(50))\n                .build()) // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n        .stoppingCondition(StoppingCondition.builder()\n                .maxRuntime(Duration.hours(2))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Size"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-stepfunctions-tasks.AlgorithmSpecification",
        "@aws-cdk/aws-stepfunctions-tasks.DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode",
        "@aws-cdk/aws-stepfunctions-tasks.InputMode#FILE",
        "@aws-cdk/aws-stepfunctions-tasks.OutputDataConfig",
        "@aws-cdk/aws-stepfunctions-tasks.ResourceConfig",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataSource",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType",
        "@aws-cdk/aws-stepfunctions-tasks.S3DataType#S3_PREFIX",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromBucket",
        "@aws-cdk/aws-stepfunctions-tasks.S3Location#fromJsonExpression",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJob",
        "@aws-cdk/aws-stepfunctions-tasks.SageMakerCreateTrainingJobProps",
        "@aws-cdk/aws-stepfunctions-tasks.StoppingCondition",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew tasks.SageMakerCreateTrainingJob(this, 'TrainSagemaker', {\n  trainingJobName: sfn.JsonPath.stringAt('$.JobName'),\n  algorithmSpecification: {\n    algorithmName: 'BlazingText',\n    trainingInputMode: tasks.InputMode.FILE,\n  },\n  inputDataConfig: [{\n    channelName: 'train',\n    dataSource: {\n      s3DataSource: {\n        s3DataType: tasks.S3DataType.S3_PREFIX,\n        s3Location: tasks.S3Location.fromJsonExpression('$.S3Bucket'),\n      },\n    },\n  }],\n  outputDataConfig: {\n    s3OutputLocation: tasks.S3Location.fromBucket(s3.Bucket.fromBucketName(this, 'Bucket', 'mybucket'), 'myoutputpath'),\n  },\n  resourceConfig: {\n    instanceCount: 1,\n    instanceType: new ec2.InstanceType(sfn.JsonPath.stringAt('$.InstanceType')),\n    volumeSize: Size.gibibytes(50),\n  }, // optional: default is 1 instance of EC2 `M4.XLarge` with `10GB` volume\n  stoppingCondition: {\n    maxRuntime: Duration.hours(2),\n  }, // optional: default is 1 hour\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 9,
        "75": 47,
        "104": 2,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 7,
        "197": 2,
        "226": 1,
        "281": 18
      },
      "fqnsFingerprint": "69577d6b2b6952aac3556379c26538c2711339b1a34c5d0416f5a368338cf003"
    },
    "502e82dc9cc75f7cbd4636a91bbe32e5f74e9bd44c5fac58321464cf27b0eae3": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "1"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SizeConversionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "c3fb617ddec83bb8967f289657cfab558918922b5086238c97f8e973ca24e04e": {
      "translations": {
        "python": {
          "source": "Size.mebibytes(2).to_kibibytes() # yields 2048\nSize.kibibytes(2050).to_mebibytes(rounding=SizeRoundingBehavior.FLOOR)",
          "version": "1"
        },
        "csharp": {
          "source": "Size.Mebibytes(2).ToKibibytes(); // yields 2048\nSize.Kibibytes(2050).ToMebibytes(new SizeConversionOptions { Rounding = SizeRoundingBehavior.FLOOR });",
          "version": "1"
        },
        "java": {
          "source": "Size.mebibytes(2).toKibibytes(); // yields 2048\nSize.kibibytes(2050).toMebibytes(SizeConversionOptions.builder().rounding(SizeRoundingBehavior.FLOOR).build());",
          "version": "1"
        },
        "$": {
          "source": "Size.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.SizeRoundingBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Size#kibibytes",
        "@aws-cdk/core.Size#mebibytes",
        "@aws-cdk/core.Size#toKibibytes",
        "@aws-cdk/core.Size#toMebibytes",
        "@aws-cdk/core.SizeConversionOptions",
        "@aws-cdk/core.SizeRoundingBehavior",
        "@aws-cdk/core.SizeRoundingBehavior#FLOOR"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nSize.mebibytes(2).toKibibytes()                                             // yields 2048\nSize.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 9,
        "193": 1,
        "194": 5,
        "196": 4,
        "226": 2,
        "281": 1
      },
      "fqnsFingerprint": "52730944b088bfd2f3305386e138513bac525fffc6e200f9965ffb94c9fe50ec"
    },
    "04131828f58367bb1451f26763512a95def6bd0a1ce0726549a466d7c319277d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Stack"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    },
    "e18b8a0c996fb8b41626a9b28f015df0640e3b7faf3cc252076394abcb6d6393": {
      "translations": {
        "python": {
          "source": "#\n# Stack1 creates the VPC\n#\nclass Stack1(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        self.vpc = ec2.Vpc(self, \"VPC\")\n\n#\n# Stack2 consumes the VPC\n#\nclass Stack2(cdk.Stack):\n    def __init__(self, scope, id, *, vpc, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, vpc=vpc, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # Pass the VPC to a construct that needs it\n        ConstructThatTakesAVpc(self, \"Construct\",\n            vpc=vpc\n        )\n\nstack1 = Stack1(app, \"Stack1\")\nstack2 = Stack2(app, \"Stack2\",\n    vpc=stack1.vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 : Stack\n{\n    public Vpc Vpc { get; }\n\n    public Stack1(App scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        Vpc = new Vpc(this, \"VPC\");\n    }\n}\n\nclass Stack2Props : StackProps\n{\n    public IVpc Vpc { get; set; }\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 : Stack\n{\n    public Stack2(App scope, string id, Stack2Props props) : base(scope, id, props)\n    {\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps {\n            Vpc = props.Vpc\n        });\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props {\n    Vpc = stack1.Vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * Stack1 creates the VPC\n */\npublic class Stack1 extends Stack {\n    public final Vpc vpc;\n\n    public Stack1(App scope, String id) {\n        this(scope, id, null);\n    }\n\n    public Stack1(App scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        this.vpc = new Vpc(this, \"VPC\");\n    }\n}\n\npublic class Stack2Props extends StackProps {\n    private IVpc vpc;\n    public IVpc getVpc() {\n        return this.vpc;\n    }\n    public Stack2Props vpc(IVpc vpc) {\n        this.vpc = vpc;\n        return this;\n    }\n}\n\n/**\n * Stack2 consumes the VPC\n */\npublic class Stack2 extends Stack {\n    public Stack2(App scope, String id, Stack2Props props) {\n        super(scope, id, props);\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps()\n                .vpc(props.getVpc())\n                );\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props()\n        .vpc(stack1.getVpc())\n        );",
          "version": "1"
        },
        "$": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StackProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport * as ec2 from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nconst app = new cdk.App();\n\ninterface ConstructThatTakesAVpcProps {\n  vpc: ec2.IVpc;\n}\n\nclass ConstructThatTakesAVpc extends Construct {\n  constructor(scope: constructs.Construct, id: string, _props: ConstructThatTakesAVpcProps) {\n    super(scope, id);\n\n    // new ec2.CfnInstance(this, 'Instance', {\n    //   subnetId: props.vpc.privateSubnets[0].subnetId,\n    //   imageId: new ec2.AmazonLinuxImage().getImage(this).imageId,\n    // });\n  }\n}\n\n/// !show\n/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});\n/// !hide\n\nArray.isArray(stack2);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "57": 1,
        "62": 1,
        "75": 50,
        "102": 2,
        "104": 3,
        "119": 1,
        "138": 1,
        "143": 2,
        "153": 5,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 4,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 2
      },
      "fqnsFingerprint": "2d634f0f54bbe74508454abfa6660e41ab7fcb17c3f39fd01623dc9064289605"
    },
    "be05006243a00b7902440cc0367b2a1c81b243c7c9fb160abcb50ff3f875d489": {
      "translations": {
        "python": {
          "source": "# pipeline is of type CodePipeline\nclass MyOutputStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.load_balancer_address = CfnOutput(self, \"Output\", value=\"value\")\n\nlb_app = MyOutputStage(self, \"MyApp\")\npipeline.add_stage(lb_app,\n    post=[\n        pipelines.ShellStep(\"HitEndpoint\",\n            env_from_cfn_outputs={\n                # Make the load balancer address available as $URL inside the commands\n                \"URL\": lb_app.load_balancer_address\n            },\n            commands=[\"curl -Ssf $URL\"]\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyOutputStage : Stage\n{\n    public CfnOutput LoadBalancerAddress { get; }\n\n    public MyOutputStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        LoadBalancerAddress = new CfnOutput(this, \"Output\", new CfnOutputProps { Value = \"value\" });\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.AddStage(lbApp, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"HitEndpoint\", new ShellStepProps {\n            EnvFromCfnOutputs = new Dictionary<string, CfnOutput> {\n                // Make the load balancer address available as $URL inside the commands\n                { \"URL\", lbApp.LoadBalancerAddress }\n            },\n            Commands = new [] { \"curl -Ssf $URL\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyOutputStage extends Stage {\n    public final CfnOutput loadBalancerAddress;\n\n    public MyOutputStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyOutputStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.loadBalancerAddress = CfnOutput.Builder.create(this, \"Output\").value(\"value\").build();\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.addStage(lbApp, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"HitEndpoint\")\n                    .envFromCfnOutputs(Map.of(\n                            // Make the load balancer address available as $URL inside the commands\n                            \"URL\", lbApp.getLoadBalancerAddress()))\n                    .commands(List.of(\"curl -Ssf $URL\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "class MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\ndeclare const pipeline: pipelines.CodePipeline;\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Stage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "57": 1,
        "62": 1,
        "75": 31,
        "102": 1,
        "104": 3,
        "119": 1,
        "130": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 1,
        "162": 1,
        "169": 4,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 2,
        "197": 3,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e09950e2753f456275b0c47d4d4e4ebb80bb5ca71b63862d165b752d629a1967"
    },
    "14a3c44e75e88a4d89eeb51e0b73318aa756f7772b3050b40a49d5a27cb09f14": {
      "translations": {
        "python": {
          "source": "# pipeline is of type CodePipeline\nclass MyOutputStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.load_balancer_address = CfnOutput(self, \"Output\", value=\"value\")\n\nlb_app = MyOutputStage(self, \"MyApp\")\npipeline.add_stage(lb_app,\n    post=[\n        pipelines.ShellStep(\"HitEndpoint\",\n            env_from_cfn_outputs={\n                # Make the load balancer address available as $URL inside the commands\n                \"URL\": lb_app.load_balancer_address\n            },\n            commands=[\"curl -Ssf $URL\"]\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyOutputStage : Stage\n{\n    public CfnOutput LoadBalancerAddress { get; }\n\n    public MyOutputStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        LoadBalancerAddress = new CfnOutput(this, \"Output\", new CfnOutputProps { Value = \"value\" });\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.AddStage(lbApp, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"HitEndpoint\", new ShellStepProps {\n            EnvFromCfnOutputs = new Dictionary<string, CfnOutput> {\n                // Make the load balancer address available as $URL inside the commands\n                { \"URL\", lbApp.LoadBalancerAddress }\n            },\n            Commands = new [] { \"curl -Ssf $URL\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyOutputStage extends Stage {\n    public final CfnOutput loadBalancerAddress;\n\n    public MyOutputStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyOutputStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.loadBalancerAddress = CfnOutput.Builder.create(this, \"Output\").value(\"value\").build();\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.addStage(lbApp, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"HitEndpoint\")\n                    .envFromCfnOutputs(Map.of(\n                            // Make the load balancer address available as $URL inside the commands\n                            \"URL\", lbApp.getLoadBalancerAddress()))\n                    .commands(List.of(\"curl -Ssf $URL\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "class MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\ndeclare const pipeline: pipelines.CodePipeline;\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.StageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "57": 1,
        "62": 1,
        "75": 31,
        "102": 1,
        "104": 3,
        "119": 1,
        "130": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 1,
        "162": 1,
        "169": 4,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 2,
        "197": 3,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "e09950e2753f456275b0c47d4d4e4ebb80bb5ca71b63862d165b752d629a1967"
    },
    "20c7b7dc589639f035f857055b9e97c5b015356f043c7680c9a6def4fac0d75c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\n\n\nclass MyConstruct(cdk.Resourcecdk.ITaggable):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        cdk.CfnResource(self, \"Resource\",\n            type=\"Whatever::The::Type\",\n            properties={\n                # ...\n                \"Tags\": self.tags.rendered_tags\n            }\n        )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\n\n\nclass MyConstruct : Resource, ITaggable\n{\n    public readonly void Tags = new TagManager(TagType.KEY_VALUE, \"Whatever::The::Type\");\n\n    public MyConstruct(Construct scope, string id) : base(scope, id)\n    {\n\n        new CfnResource(this, \"Resource\", new CfnResourceProps {\n            Type = \"Whatever::The::Type\",\n            Properties = new Dictionary<string, object> {\n                // ...\n                { \"Tags\", Tags.RenderedTags }\n            }\n        });\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\n\n\npublic class MyConstruct extends Resource implements ITaggable {\n    public final Object tags;\n\n    public MyConstruct(Construct scope, String id) {\n        super(scope, id);\n\n        CfnResource.Builder.create(this, \"Resource\")\n                .type(\"Whatever::The::Type\")\n                .properties(Map.of(\n                        // ...\n                        \"Tags\", this.tags.getRenderedTags()))\n                .build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.TagType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnResource",
        "@aws-cdk/core.CfnResourceProps",
        "@aws-cdk/core.Resource",
        "@aws-cdk/core.TagManager",
        "@aws-cdk/core.TagManager#renderedTags",
        "@aws-cdk/core.TagType",
        "@aws-cdk/core.TagType#KEY_VALUE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nclass MyConstruct extends cdk.Resource implements cdk.ITaggable {\npublic readonly tags = new cdk.TagManager(cdk.TagType.KEY_VALUE, 'Whatever::The::Type');\n\nconstructor(scope: cdk.Construct, id: string) {\nsuper(scope, id);\n\nnew cdk.CfnResource(this, 'Resource', {\ntype: 'Whatever::The::Type',\nproperties: {\n// ...\nTags: this.tags.renderedTags,\n},\n});\n}\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "102": 1,
        "104": 2,
        "119": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 2,
        "159": 1,
        "162": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 1,
        "197": 2,
        "216": 2,
        "223": 1,
        "226": 2,
        "245": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f632faf8bbec3b8855f7e0618895e089ad458048370bfdf0c1e0112e26a45c4b"
    },
    "baa523ac412000e7bdbc86c153a4980635a4aacd64692d5d55ac9c6745391b32": {
      "translations": {
        "python": {
          "source": "# mesh is of type Mesh\n# service is of type Service\n\n\nnode = appmesh.VirtualNode(self, \"node\",\n    mesh=mesh,\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        port=8080,\n        health_check=appmesh.HealthCheck.http(\n            healthy_threshold=3,\n            interval=cdk.Duration.seconds(5),\n            path=\"/ping\",\n            timeout=cdk.Duration.seconds(2),\n            unhealthy_threshold=2\n        ),\n        timeout=appmesh.HttpTimeout(\n            idle=cdk.Duration.seconds(5)\n        )\n    )],\n    backend_defaults=appmesh.BackendDefaults(\n        tls_client_policy=appmesh.TlsClientPolicy(\n            validation=appmesh.TlsValidation(\n                trust=appmesh.TlsValidationTrust.file(\"/keys/local_cert_chain.pem\")\n            )\n        )\n    ),\n    access_log=appmesh.AccessLog.from_file_path(\"/dev/stdout\")\n)\n\ncdk.Tags.of(node).add(\"Environment\", \"Dev\")",
          "version": "1"
        },
        "csharp": {
          "source": "Mesh mesh;\nService service;\n\n\nVirtualNode node = new VirtualNode(this, \"node\", new VirtualNodeProps {\n    Mesh = mesh,\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        Port = 8080,\n        HealthCheck = HealthCheck.Http(new HttpHealthCheckOptions {\n            HealthyThreshold = 3,\n            Interval = Duration.Seconds(5),\n            Path = \"/ping\",\n            Timeout = Duration.Seconds(2),\n            UnhealthyThreshold = 2\n        }),\n        Timeout = new HttpTimeout {\n            Idle = Duration.Seconds(5)\n        }\n    }) },\n    BackendDefaults = new BackendDefaults {\n        TlsClientPolicy = new TlsClientPolicy {\n            Validation = new TlsValidation {\n                Trust = TlsValidationTrust.File(\"/keys/local_cert_chain.pem\")\n            }\n        }\n    },\n    AccessLog = AccessLog.FromFilePath(\"/dev/stdout\")\n});\n\nTags.Of(node).Add(\"Environment\", \"Dev\");",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\nService service;\n\n\nVirtualNode node = VirtualNode.Builder.create(this, \"node\")\n        .mesh(mesh)\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .port(8080)\n                .healthCheck(HealthCheck.http(HttpHealthCheckOptions.builder()\n                        .healthyThreshold(3)\n                        .interval(Duration.seconds(5))\n                        .path(\"/ping\")\n                        .timeout(Duration.seconds(2))\n                        .unhealthyThreshold(2)\n                        .build()))\n                .timeout(HttpTimeout.builder()\n                        .idle(Duration.seconds(5))\n                        .build())\n                .build())))\n        .backendDefaults(BackendDefaults.builder()\n                .tlsClientPolicy(TlsClientPolicy.builder()\n                        .validation(TlsValidation.builder()\n                                .trust(TlsValidationTrust.file(\"/keys/local_cert_chain.pem\"))\n                                .build())\n                        .build())\n                .build())\n        .accessLog(AccessLog.fromFilePath(\"/dev/stdout\"))\n        .build();\n\nTags.of(node).add(\"Environment\", \"Dev\");",
          "version": "1"
        },
        "$": {
          "source": "declare const mesh: appmesh.Mesh;\ndeclare const service: cloudmap.Service;\n\nconst node = new appmesh.VirtualNode(this, 'node', {\n  mesh,\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    port: 8080,\n    healthCheck: appmesh.HealthCheck.http({\n      healthyThreshold: 3,\n      interval: cdk.Duration.seconds(5),\n      path: '/ping',\n      timeout: cdk.Duration.seconds(2),\n      unhealthyThreshold: 2,\n    }),\n    timeout: {\n      idle: cdk.Duration.seconds(5),\n    },\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      validation: {\n        trust: appmesh.TlsValidationTrust.file('/keys/local_cert_chain.pem'),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n});\n\ncdk.Tags.of(node).add('Environment', 'Dev');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/core.Tags"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.AccessLog",
        "@aws-cdk/aws-appmesh.AccessLog#fromFilePath",
        "@aws-cdk/aws-appmesh.BackendDefaults",
        "@aws-cdk/aws-appmesh.HealthCheck",
        "@aws-cdk/aws-appmesh.HealthCheck#http",
        "@aws-cdk/aws-appmesh.HttpHealthCheckOptions",
        "@aws-cdk/aws-appmesh.HttpTimeout",
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.IMesh",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.TlsClientPolicy",
        "@aws-cdk/aws-appmesh.TlsValidation",
        "@aws-cdk/aws-appmesh.TlsValidationTrust",
        "@aws-cdk/aws-appmesh.TlsValidationTrust#file",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-appmesh.VirtualNodeProps",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.IConstruct",
        "@aws-cdk/core.Tags",
        "@aws-cdk/core.Tags#add",
        "@aws-cdk/core.Tags#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mesh: appmesh.Mesh;\ndeclare const service: cloudmap.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst node = new appmesh.VirtualNode(this, 'node', {\n  mesh,\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    port: 8080,\n    healthCheck: appmesh.HealthCheck.http({\n      healthyThreshold: 3,\n      interval: cdk.Duration.seconds(5),\n      path: '/ping',\n      timeout: cdk.Duration.seconds(2),\n      unhealthyThreshold: 2,\n    }),\n    timeout: {\n      idle: cdk.Duration.seconds(5),\n    },\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      validation: {\n        trust: appmesh.TlsValidationTrust.file('/keys/local_cert_chain.pem'),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n});\n\ncdk.Tags.of(node).add('Environment', 'Dev');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 6,
        "75": 56,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 7,
        "194": 20,
        "196": 10,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "99dd2c1f93cbeae9f890f5e102114a8db9a3e7ce8e60023d0f15f1b08292bb8b"
    }
  }
}
