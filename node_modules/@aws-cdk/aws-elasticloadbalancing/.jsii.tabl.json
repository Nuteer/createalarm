{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "c6a402bf3b9844ab612c11494917fab2eddeb7530551974ed789664143aaf0af": {
      "translations": {
        "python": {
          "source": "lb = elb.LoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    health_check={\n        \"port\": 80\n    }\n)\n\nlb.add_target(my_auto_scaling_group)\nlb.add_listener(\n    external_port=80\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var lb = new elb.LoadBalancer(this, \"LB\", new Struct {\n    Vpc = vpc,\n    InternetFacing = true,\n    HealthCheck = new Struct {\n        Port = 80\n    }\n});\n\nlb.AddTarget(myAutoScalingGroup);\nlb.AddListener(new Struct {\n    ExternalPort = 80\n});",
          "version": "1"
        },
        "java": {
          "source": "Object lb = LoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .healthCheck(Map.of(\n                \"port\", 80))\n        .build();\n\nlb.addTarget(myAutoScalingGroup);\nlb.addListener(Map.of(\n        \"externalPort\", 80));",
          "version": "1"
        },
        "$": {
          "source": "const lb = new elb.LoadBalancer(this, 'LB', {\n    vpc,\n    internetFacing: true,\n    healthCheck: {\n        port: 80\n    },\n});\n\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n    externalPort: 80,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancing"
        },
        "field": {
          "field": "markdown",
          "line": 23
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const lb = new elb.LoadBalancer(this, 'LB', {\n    vpc,\n    internetFacing: true,\n    healthCheck: {\n        port: 80\n    },\n});\n\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n    externalPort: 80,\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 13,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "3d5150ba908746bce0bd311e00f068cdcd237aa1165b5f6352f95868516187a2": {
      "translations": {
        "python": {
          "source": "lb.add_listener(\n    external_port=80,\n    allow_connections_from=[my_security_group]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "lb.AddListener(new Struct {\n    ExternalPort = 80,\n    AllowConnectionsFrom = new [] { mySecurityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "lb.addListener(Map.of(\n        \"externalPort\", 80,\n        \"allowConnectionsFrom\", List.of(mySecurityGroup)));",
          "version": "1"
        },
        "$": {
          "source": "lb.addListener({\n    externalPort: 80,\n    allowConnectionsFrom: [mySecurityGroup]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancing"
        },
        "field": {
          "field": "markdown",
          "line": 41
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "lb.addListener({\n    externalPort: 80,\n    allowConnectionsFrom: [mySecurityGroup]\n});",
      "syntaxKindCounter": {
        "8": 1,
        "75": 5,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "af4dc3ae6e45eab9dd6de5ec6fe1edf901cd22ffabd0f26373c2e5abb5f5efb5": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e11440a9f02f8c2b47bbb5ba3cefe882b94f27aa70c6d1eb6cb5e9755552aa47"
    },
    "2f818958dc3df056c06251119f04f9f868edec17b4f0b6ba237a202dc950dd7a": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e11440a9f02f8c2b47bbb5ba3cefe882b94f27aa70c6d1eb6cb5e9755552aa47"
    },
    "5484b75efe57ee9b9b1373314dd04ba100eca02e2c5df4bfbdff6564a09cfa73": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e11440a9f02f8c2b47bbb5ba3cefe882b94f27aa70c6d1eb6cb5e9755552aa47"
    }
  }
}
