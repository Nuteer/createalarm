{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.137.0",
    "@aws-cdk/core": "1.137.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::ElasticLoadBalancing",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.47.0 (build 86d2c33)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "elasticloadbalancing"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "@aws-cdk/aws-elasticloadbalancing",
  "readme": {
    "markdown": "# Amazon Elastic Load Balancing Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-elasticloadbalancing` package provides constructs for configuring\nclassic load balancers.\n\n## Configuring a Load Balancer\n\nLoad balancers send traffic to one or more AutoScalingGroups. Create a load\nbalancer, set up listeners and a health check, and supply the fleet(s) you want\nto load balance to in the `targets` property.\n\n```ts\nconst lb = new elb.LoadBalancer(this, 'LB', {\n    vpc,\n    internetFacing: true,\n    healthCheck: {\n        port: 80\n    },\n});\n\nlb.addTarget(myAutoScalingGroup);\nlb.addListener({\n    externalPort: 80,\n});\n```\n\nThe load balancer allows all connections by default. If you want to change that,\npass the `allowConnectionsFrom` property while setting up the listener:\n\n```ts\nlb.addListener({\n    externalPort: 80,\n    allowConnectionsFrom: [mySecurityGroup]\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-elasticloadbalancing",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
      "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
    },
    "java": {
      "maven": {
        "artifactId": "elasticloadbalancing",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.elasticloadbalancing"
    },
    "js": {
      "npm": "@aws-cdk/aws-elasticloadbalancing"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-elasticloadbalancing",
      "module": "aws_cdk.aws_elasticloadbalancing"
    }
  },
  "types": {
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ElasticLoadBalancing::LoadBalancer",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "A CloudFormation `AWS::ElasticLoadBalancing::LoadBalancer`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n\nconst cfnLoadBalancer = new elb.CfnLoadBalancer(this, 'MyCfnLoadBalancer', {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ElasticLoadBalancing::LoadBalancer`."
        },
        "locationInModule": {
          "filename": "lib/elasticloadbalancing.generated.ts",
          "line": 367
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 214
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 400
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 426
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnLoadBalancer",
      "properties": [
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 274
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 280
          },
          "name": "appCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "CanonicalHostedZoneName"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 242
          },
          "name": "attrCanonicalHostedZoneName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "CanonicalHostedZoneNameID"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 247
          },
          "name": "attrCanonicalHostedZoneNameId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "DNSName"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 252
          },
          "name": "attrDnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "SourceSecurityGroup.GroupName"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 257
          },
          "name": "attrSourceSecurityGroupGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "SourceSecurityGroup.OwnerAlias"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 262
          },
          "name": "attrSourceSecurityGroupOwnerAlias",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AvailabilityZones`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 286
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 218
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 405
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 292
          },
          "name": "connectionDrainingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 298
          },
          "name": "connectionSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.CrossZone`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 304
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 310
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Instances`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 316
          },
          "name": "instances",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 322
          },
          "name": "lbCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Listeners`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 268
          },
          "name": "listeners",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.LoadBalancerName`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 328
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Policies`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 334
          },
          "name": "policies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Scheme`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 340
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.SecurityGroups`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 346
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Subnets`."
          },
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 352
          },
          "name": "subnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 358
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst accessLoggingPolicyProperty: elb.CfnLoadBalancer.AccessLoggingPolicyProperty = {\n  enabled: false,\n  s3BucketName: 's3BucketName',\n\n  // the properties below are optional\n  emitInterval: 123,\n  s3BucketPrefix: 's3BucketPrefix',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 436
      },
      "name": "AccessLoggingPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-emitinterval"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AccessLoggingPolicyProperty.EmitInterval`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 441
          },
          "name": "emitInterval",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-enabled"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AccessLoggingPolicyProperty.Enabled`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 446
          },
          "name": "enabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketname"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AccessLoggingPolicyProperty.S3BucketName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 451
          },
          "name": "s3BucketName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-accessloggingpolicy.html#cfn-elb-accessloggingpolicy-s3bucketprefix"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AccessLoggingPolicyProperty.S3BucketPrefix`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 456
          },
          "name": "s3BucketPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.AccessLoggingPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst appCookieStickinessPolicyProperty: elb.CfnLoadBalancer.AppCookieStickinessPolicyProperty = {\n  cookieName: 'cookieName',\n  policyName: 'policyName',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 524
      },
      "name": "AppCookieStickinessPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-cookiename"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AppCookieStickinessPolicyProperty.CookieName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 529
          },
          "name": "cookieName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-AppCookieStickinessPolicy.html#cfn-elb-appcookiestickinesspolicy-policyname"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.AppCookieStickinessPolicyProperty.PolicyName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 534
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.AppCookieStickinessPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst connectionDrainingPolicyProperty: elb.CfnLoadBalancer.ConnectionDrainingPolicyProperty = {\n  enabled: false,\n\n  // the properties below are optional\n  timeout: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 596
      },
      "name": "ConnectionDrainingPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-enabled"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ConnectionDrainingPolicyProperty.Enabled`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 601
          },
          "name": "enabled",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectiondrainingpolicy.html#cfn-elb-connectiondrainingpolicy-timeout"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ConnectionDrainingPolicyProperty.Timeout`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 606
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ConnectionDrainingPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst connectionSettingsProperty: elb.CfnLoadBalancer.ConnectionSettingsProperty = {\n  idleTimeout: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 667
      },
      "name": "ConnectionSettingsProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-connectionsettings.html#cfn-elb-connectionsettings-idletimeout"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ConnectionSettingsProperty.IdleTimeout`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 672
          },
          "name": "idleTimeout",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ConnectionSettingsProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst healthCheckProperty: elb.CfnLoadBalancer.HealthCheckProperty = {\n  healthyThreshold: 'healthyThreshold',\n  interval: 'interval',\n  target: 'target',\n  timeout: 'timeout',\n  unhealthyThreshold: 'unhealthyThreshold',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 730
      },
      "name": "HealthCheckProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-healthythreshold"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.HealthCheckProperty.HealthyThreshold`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 735
          },
          "name": "healthyThreshold",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-interval"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.HealthCheckProperty.Interval`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 740
          },
          "name": "interval",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-target"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.HealthCheckProperty.Target`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 745
          },
          "name": "target",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-timeout"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.HealthCheckProperty.Timeout`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 750
          },
          "name": "timeout",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-health-check.html#cfn-elb-healthcheck-unhealthythreshold"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.HealthCheckProperty.UnhealthyThreshold`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 755
          },
          "name": "unhealthyThreshold",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.HealthCheckProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst lBCookieStickinessPolicyProperty: elb.CfnLoadBalancer.LBCookieStickinessPolicyProperty = {\n  cookieExpirationPeriod: 'cookieExpirationPeriod',\n  policyName: 'policyName',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 829
      },
      "name": "LBCookieStickinessPolicyProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-cookieexpirationperiod"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.LBCookieStickinessPolicyProperty.CookieExpirationPeriod`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 834
          },
          "name": "cookieExpirationPeriod",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-LBCookieStickinessPolicy.html#cfn-elb-lbcookiestickinesspolicy-policyname"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.LBCookieStickinessPolicyProperty.PolicyName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 839
          },
          "name": "policyName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.LBCookieStickinessPolicyProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\nconst listenersProperty: elb.CfnLoadBalancer.ListenersProperty = {\n  instancePort: 'instancePort',\n  loadBalancerPort: 'loadBalancerPort',\n  protocol: 'protocol',\n\n  // the properties below are optional\n  instanceProtocol: 'instanceProtocol',\n  policyNames: ['policyNames'],\n  sslCertificateId: 'sslCertificateId',\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 899
      },
      "name": "ListenersProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceport"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.InstancePort`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 904
          },
          "name": "instancePort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-instanceprotocol"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.InstanceProtocol`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 909
          },
          "name": "instanceProtocol",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-loadbalancerport"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.LoadBalancerPort`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 914
          },
          "name": "loadBalancerPort",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-policynames"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.PolicyNames`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 919
          },
          "name": "policyNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-protocol"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.Protocol`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 924
          },
          "name": "protocol",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-listener.html#cfn-ec2-elb-listener-sslcertificateid"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.ListenersProperty.SSLCertificateId`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 929
          },
          "name": "sslCertificateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.ListenersProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n\nconst policiesProperty: elb.CfnLoadBalancer.PoliciesProperty = {\n  attributes: [attributes],\n  policyName: 'policyName',\n  policyType: 'policyType',\n\n  // the properties below are optional\n  instancePorts: ['instancePorts'],\n  loadBalancerPorts: ['loadBalancerPorts'],\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 1004
      },
      "name": "PoliciesProperty",
      "namespace": "CfnLoadBalancer",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-attributes"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.PoliciesProperty.Attributes`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1009
          },
          "name": "attributes",
          "type": {
            "union": {
              "types": [
                {
                  "collection": {
                    "elementtype": {
                      "primitive": "any"
                    },
                    "kind": "array"
                  }
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-instanceports"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.PoliciesProperty.InstancePorts`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1014
          },
          "name": "instancePorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-loadbalancerports"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.PoliciesProperty.LoadBalancerPorts`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1019
          },
          "name": "loadBalancerPorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policyname"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.PoliciesProperty.PolicyName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1024
          },
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb-policy.html#cfn-ec2-elb-policy-policytype"
            },
            "stability": "external",
            "summary": "`CfnLoadBalancer.PoliciesProperty.PolicyType`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 1029
          },
          "name": "policyType",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancer.PoliciesProperty"
    },
    "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `AWS::ElasticLoadBalancing::LoadBalancer`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const attributes: any;\n\nconst cfnLoadBalancerProps: elb.CfnLoadBalancerProps = {\n  listeners: [{\n    instancePort: 'instancePort',\n    loadBalancerPort: 'loadBalancerPort',\n    protocol: 'protocol',\n\n    // the properties below are optional\n    instanceProtocol: 'instanceProtocol',\n    policyNames: ['policyNames'],\n    sslCertificateId: 'sslCertificateId',\n  }],\n\n  // the properties below are optional\n  accessLoggingPolicy: {\n    enabled: false,\n    s3BucketName: 's3BucketName',\n\n    // the properties below are optional\n    emitInterval: 123,\n    s3BucketPrefix: 's3BucketPrefix',\n  },\n  appCookieStickinessPolicy: [{\n    cookieName: 'cookieName',\n    policyName: 'policyName',\n  }],\n  availabilityZones: ['availabilityZones'],\n  connectionDrainingPolicy: {\n    enabled: false,\n\n    // the properties below are optional\n    timeout: 123,\n  },\n  connectionSettings: {\n    idleTimeout: 123,\n  },\n  crossZone: false,\n  healthCheck: {\n    healthyThreshold: 'healthyThreshold',\n    interval: 'interval',\n    target: 'target',\n    timeout: 'timeout',\n    unhealthyThreshold: 'unhealthyThreshold',\n  },\n  instances: ['instances'],\n  lbCookieStickinessPolicy: [{\n    cookieExpirationPeriod: 'cookieExpirationPeriod',\n    policyName: 'policyName',\n  }],\n  loadBalancerName: 'loadBalancerName',\n  policies: [{\n    attributes: [attributes],\n    policyName: 'policyName',\n    policyType: 'policyType',\n\n    // the properties below are optional\n    instancePorts: ['instancePorts'],\n    loadBalancerPorts: ['loadBalancerPorts'],\n  }],\n  scheme: 'scheme',\n  securityGroups: ['securityGroups'],\n  subnets: ['subnets'],\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/elasticloadbalancing.generated.ts",
        "line": 17
      },
      "name": "CfnLoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-accessloggingpolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AccessLoggingPolicy`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 29
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-appcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AppCookieStickinessPolicy`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 35
          },
          "name": "appCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AppCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-availabilityzones"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.AvailabilityZones`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 41
          },
          "name": "availabilityZones",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectiondrainingpolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.ConnectionDrainingPolicy`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 47
          },
          "name": "connectionDrainingPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionDrainingPolicyProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-connectionsettings"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.ConnectionSettings`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 53
          },
          "name": "connectionSettings",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ConnectionSettingsProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-crosszone"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.CrossZone`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 59
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-healthcheck"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.HealthCheck`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 65
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.HealthCheckProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-instances"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Instances`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 71
          },
          "name": "instances",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-lbcookiestickinesspolicy"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.LBCookieStickinessPolicy`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 77
          },
          "name": "lbCookieStickinessPolicy",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.LBCookieStickinessPolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-listeners"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Listeners`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 23
          },
          "name": "listeners",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.ListenersProperty"
                          },
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-elbname"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.LoadBalancerName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 83
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-policies"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Policies`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 89
          },
          "name": "policies",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.PoliciesProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-scheme"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Scheme`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 95
          },
          "name": "scheme",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-securitygroups"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.SecurityGroups`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 101
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-ec2-elb-subnets"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Subnets`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 107
          },
          "name": "subnets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html#cfn-elasticloadbalancing-loadbalancer-tags"
            },
            "stability": "external",
            "summary": "`AWS::ElasticLoadBalancing::LoadBalancer.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/elasticloadbalancing.generated.ts",
            "line": 113
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/elasticloadbalancing.generated:CfnLoadBalancerProps"
    },
    "@aws-cdk/aws-elasticloadbalancing.HealthCheck": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Describe the health check to a load balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\nimport * as cdk from '@aws-cdk/core';\n\nconst healthCheck: elb.HealthCheck = {\n  port: 123,\n\n  // the properties below are optional\n  healthyThreshold: 123,\n  interval: cdk.Duration.minutes(30),\n  path: 'path',\n  protocol: elb.LoadBalancingProtocol.TCP,\n  timeout: cdk.Duration.minutes(30),\n  unhealthyThreshold: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.HealthCheck",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 90
      },
      "name": "HealthCheck",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "stability": "stable",
            "summary": "After how many successful checks is an instance considered healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 120
          },
          "name": "healthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(30)",
            "stability": "stable",
            "summary": "Number of seconds between health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 134
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "\"/\"",
            "remarks": "For SSL and TCP health checks, accepting connections is enough to be considered\nhealthy.",
            "stability": "stable",
            "summary": "What path to use for HTTP or HTTPS health check (must return 200)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 113
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "What port number to health check on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 94
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatic",
            "remarks": "The protocol is automatically determined from the port if it's not supplied.",
            "stability": "stable",
            "summary": "What protocol to use for health checking."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 103
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(5)",
            "stability": "stable",
            "summary": "Health check timeout."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 141
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5",
            "stability": "stable",
            "summary": "After how many unsuccessful checks is an instance considered unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 127
          },
          "name": "unhealthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/load-balancer:HealthCheck"
    },
    "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "stability": "stable",
        "summary": "Interface that is going to be implemented by constructs that you can load balance to."
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 147
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Attach load-balanced target to a classic ELB."
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 152
          },
          "name": "attachToClassicLB",
          "parameters": [
            {
              "docs": {
                "summary": "[disable-awslint:ref-via-interface] The load balancer to attach the target to."
              },
              "name": "loadBalancer",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer"
              }
            }
          ]
        }
      ],
      "name": "ILoadBalancerTarget",
      "symbolId": "lib/load-balancer:ILoadBalancerTarget"
    },
    "@aws-cdk/aws-elasticloadbalancing.ListenerPort": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "remarks": "This implements IConnectable with a default port (the port that an ELB\nlistener was just created on) for a given security group so that it can be\nconveniently used just like any Connectable. E.g:\n\n    const listener = elb.addListener(...);\n\n    listener.connections.allowDefaultPortFromAnyIPv4();\n    // or\n    instance.connections.allowToDefaultPort(listener);",
        "stability": "stable",
        "summary": "Reference to a listener's port just created.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const port: ec2.Port;\ndeclare const securityGroup: ec2.SecurityGroup;\n\nconst listenerPort = new elb.ListenerPort(securityGroup, port);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/load-balancer.ts",
          "line": 419
        },
        "parameters": [
          {
            "name": "securityGroup",
            "type": {
              "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
            }
          },
          {
            "name": "defaultPort",
            "type": {
              "fqn": "@aws-cdk/aws-ec2.Port"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 416
      },
      "name": "ListenerPort",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The network connections associated with this resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 417
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        }
      ],
      "symbolId": "lib/load-balancer:ListenerPort"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancer": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
        "remarks": "Routes to a fleet of of instances in a VPC.",
        "stability": "stable",
        "summary": "A load balancer with a single listener."
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/load-balancer.ts",
          "line": 255
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-ec2.IConnectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 237
      },
      "methods": [
        {
          "docs": {
            "returns": "A ListenerPort object that controls connections to the listener port",
            "stability": "stable",
            "summary": "Add a backend to the load balancer."
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 289
          },
          "name": "addListener",
          "parameters": [
            {
              "name": "listener",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 324
          },
          "name": "addTarget",
          "parameters": [
            {
              "name": "target",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
              }
            }
          ]
        }
      ],
      "name": "LoadBalancer",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Control all connections from and to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 241
          },
          "name": "connections",
          "overrides": "@aws-cdk/aws-ec2.IConnectable",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.Connections"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "An object controlling specifically the connections for each listener added to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 246
          },
          "name": "listenerPorts",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ListenerPort"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 347
          },
          "name": "loadBalancerCanonicalHostedZoneName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 340
          },
          "name": "loadBalancerCanonicalHostedZoneNameId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 354
          },
          "name": "loadBalancerDnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 333
          },
          "name": "loadBalancerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 361
          },
          "name": "loadBalancerSourceSecurityGroupGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 368
          },
          "name": "loadBalancerSourceSecurityGroupOwnerAlias",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancer"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
        "stability": "stable",
        "summary": "Add a backend to the load balancer."
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 158
      },
      "name": "LoadBalancerListener",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Anywhere",
            "remarks": "By default, connections will be allowed from anywhere. Set this to an empty list\nto deny connections, or supply a custom list of peers to allow connections from\n(IP ranges or security groups).",
            "stability": "stable",
            "summary": "Allow connections to the load balancer from the given set of connection peers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 222
          },
          "name": "allowConnectionsFrom",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.IConnectable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "External listening port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 162
          },
          "name": "externalPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Either 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the external port is either 80 or 443.",
            "stability": "stable",
            "summary": "What public protocol to use for load balancing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 171
          },
          "name": "externalProtocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "externalPort",
            "remarks": "Same as the externalPort if not specified.",
            "stability": "stable",
            "summary": "Instance listening port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 180
          },
          "name": "internalPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Either 'tcp', 'ssl', 'http' or 'https'.\n\nMay be omitted if the internal port is either 80 or 443.\n\nThe instance protocol is 'tcp' if the front-end protocol\nis 'tcp' or 'ssl', the instance protocol is 'http' if the\nfront-end protocol is 'https'.",
            "stability": "stable",
            "summary": "What public protocol to use for load balancing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 193
          },
          "name": "internalProtocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "SSL policy names."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 198
          },
          "name": "policyNames",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "the ARN of the SSL certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 211
          },
          "name": "sslCertificateArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "- use sslCertificateArn instead",
            "stability": "deprecated",
            "summary": "the ARN of the SSL certificate."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 204
          },
          "name": "sslCertificateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancerListener"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
        "stability": "stable",
        "summary": "Construction properties for a LoadBalancer."
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 12
      },
      "name": "LoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "stability": "stable",
            "summary": "Enable Loadbalancer access logs Can be used to avoid manual work as aws console Required S3 bucket name , enabled flag Can add interval for pushing log Can set bucket prefix in order to provide folder name inside bucket."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 83
          },
          "name": "accessLoggingPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.CfnLoadBalancer.AccessLoggingPolicyProperty"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This controls whether the load balancer evenly distributes requests\nacross each availability zone",
            "stability": "stable",
            "summary": "Whether cross zone load balancing is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 63
          },
          "name": "crossZone",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None.",
            "remarks": "Not required but recommended.",
            "stability": "stable",
            "summary": "Health check settings for the load balancing targets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 53
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancing.HealthCheck"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This controls whether the LB has a public IP address assigned. It does\nnot open up the Load Balancer's security groups to public internet access.",
            "stability": "stable",
            "summary": "Whether this is an internet-facing Load Balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 26
          },
          "name": "internetFacing",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-",
            "remarks": "Can also be added by .addListener()",
            "stability": "stable",
            "summary": "What listeners to set up for the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 35
          },
          "name": "listeners",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if internetFacing, Private subnets otherwise",
            "remarks": "Can be used to define a specific set of subnets to deploy the load balancer to.\nUseful multiple public or private subnets are covering the same availability zone.",
            "stability": "stable",
            "summary": "Which subnets to deploy the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 73
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None.",
            "remarks": "Can also be added by .addTarget()",
            "stability": "stable",
            "summary": "What targets to load balance to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 44
          },
          "name": "targets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "VPC network of the fleet instances."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/load-balancer.ts",
            "line": 16
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/load-balancer:LoadBalancerProps"
    },
    "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol": {
      "assembly": "@aws-cdk/aws-elasticloadbalancing",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-elasticloadbalancing.LoadBalancingProtocol",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/load-balancer.ts",
        "line": 225
      },
      "members": [
        {
          "docs": {
            "stability": "stable"
          },
          "name": "HTTP"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "HTTPS"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "SSL"
        },
        {
          "docs": {
            "stability": "stable"
          },
          "name": "TCP"
        }
      ],
      "name": "LoadBalancingProtocol",
      "symbolId": "lib/load-balancer:LoadBalancingProtocol"
    }
  },
  "version": "1.137.0",
  "fingerprint": "**********"
}
