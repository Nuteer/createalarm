{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "11456e209c91165a7990453b66a26e73b2e291e1f8498a57dd5a6a4b74cd97fa": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\",\n    display_name=\"Customer subscription topic\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\", new TopicProps {\n    DisplayName = \"Customer subscription topic\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = Topic.Builder.create(this, \"Topic\")\n        .displayName(\"Customer subscription topic\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic', {\n  displayName: 'Customer subscription topic',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic', {\n  displayName: 'Customer subscription topic',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "733921ec2346b92b3cefc2f0ae08fd0a785193969db4f998120bf24493ed2c1e"
    },
    "63ea91479ea8eee3b4ae4e3d7442ae0bb6cdd57a67a6d6076e3ff174b66fbb9e": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\",\n    content_based_deduplication=True,\n    display_name=\"Customer subscription topic\",\n    fifo=True,\n    topic_name=\"customerTopic\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\", new TopicProps {\n    ContentBasedDeduplication = true,\n    DisplayName = \"Customer subscription topic\",\n    Fifo = true,\n    TopicName = \"customerTopic\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = Topic.Builder.create(this, \"Topic\")\n        .contentBasedDeduplication(true)\n        .displayName(\"Customer subscription topic\")\n        .fifo(true)\n        .topicName(\"customerTopic\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic', {\n  contentBasedDeduplication: true,\n  displayName: 'Customer subscription topic',\n  fifo: true,\n  topicName: 'customerTopic',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic', {\n  contentBasedDeduplication: true,\n  displayName: 'Customer subscription topic',\n  fifo: true,\n  topicName: 'customerTopic',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "106": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "733921ec2346b92b3cefc2f0ae08fd0a785193969db4f998120bf24493ed2c1e"
    },
    "863f6bbdab734ea82c0e1e4cb0494383a9c3a95ffa62e7355b1a8e1199091878": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(\"https://foobar.com/\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4790130202d560a6dfc5b9a2860e8da5968c146b50a73489c53b1be46084b284"
    },
    "53fffb34c72a3672456f47381144f288c91679a869222644449ebd5174bc9653": {
      "translations": {
        "python": {
          "source": "# queue is of type Queue\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.SqsSubscription(queue))",
          "version": "1"
        },
        "csharp": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "java": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "$": {
          "source": "declare const queue: sqs.Queue;\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 52
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const queue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "38ca28e7ac935e96db8742e22aaa58b69ca9c8733cb141e4629d5a0977d0f786"
    },
    "f9b8ca442f7f2acf42e482100100b83c099ae2770a741ca7186809001ce49f23": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 68
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "663b42d337578ca889e690c8e13095007958c79706c3e738f83e3fd0dda84c2a": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kinesisfirehose import DeliveryStream\n# stream is of type DeliveryStream\n\n\ntopic = sns.Topic(self, \"Topic\")\n\nsns.Subscription(self, \"Subscription\",\n    topic=topic,\n    endpoint=stream.delivery_stream_arn,\n    protocol=sns.SubscriptionProtocol.FIREHOSE,\n    subscription_role_arn=\"SAMPLE_ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KinesisFirehose;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Topic = topic,\n    Endpoint = stream.DeliveryStreamArn,\n    Protocol = SubscriptionProtocol.FIREHOSE,\n    SubscriptionRoleArn = \"SAMPLE_ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesisfirehose.DeliveryStream;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nSubscription.Builder.create(this, \"Subscription\")\n        .topic(topic)\n        .endpoint(stream.getDeliveryStreamArn())\n        .protocol(SubscriptionProtocol.FIREHOSE)\n        .subscriptionRoleArn(\"SAMPLE_ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\n\nconst topic = new sns.Topic(this, 'Topic');\ndeclare const stream: DeliveryStream;\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream#deliveryStreamArn",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#FIREHOSE",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\ndeclare const stream: DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d1679801914bd5e8b96015ec2d2bfae1d511458ae4b158031f83885955ace617"
    },
    "4eb6072d96f57bac71f5664991456cbbaf004874c9647d81686760e3259dc71c": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ndl_queue = sqs.Queue(self, \"DeadLetterQueue\",\n    queue_name=\"MySubscription_DLQ\",\n    retention_period=Duration.days(14)\n)\n\nsns.Subscription(self, \"Subscription\",\n    endpoint=\"endpoint\",\n    protocol=sns.SubscriptionProtocol.LAMBDA,\n    topic=topic,\n    dead_letter_queue=dl_queue\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nQueue dlQueue = new Queue(this, \"DeadLetterQueue\", new QueueProps {\n    QueueName = \"MySubscription_DLQ\",\n    RetentionPeriod = Duration.Days(14)\n});\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Endpoint = \"endpoint\",\n    Protocol = SubscriptionProtocol.LAMBDA,\n    Topic = topic,\n    DeadLetterQueue = dlQueue\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nQueue dlQueue = Queue.Builder.create(this, \"DeadLetterQueue\")\n        .queueName(\"MySubscription_DLQ\")\n        .retentionPeriod(Duration.days(14))\n        .build();\n\nSubscription.Builder.create(this, \"Subscription\")\n        .endpoint(\"endpoint\")\n        .protocol(SubscriptionProtocol.LAMBDA)\n        .topic(topic)\n        .deadLetterQueue(dlQueue)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst dlQueue = new sqs.Queue(this, 'DeadLetterQueue', {\n  queueName: 'MySubscription_DLQ',\n  retentionPeriod: Duration.days(14),\n});\n\nnew sns.Subscription(this, 'Subscription', {\n  endpoint: 'endpoint',\n  protocol: sns.SubscriptionProtocol.LAMBDA,\n  topic,\n  deadLetterQueue: dlQueue,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 120
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#LAMBDA",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-sqs.QueueProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst dlQueue = new sqs.Queue(this, 'DeadLetterQueue', {\n  queueName: 'MySubscription_DLQ',\n  retentionPeriod: Duration.days(14),\n});\n\nnew sns.Subscription(this, 'Subscription', {\n  endpoint: 'endpoint',\n  protocol: sns.SubscriptionProtocol.LAMBDA,\n  topic,\n  deadLetterQueue: dlQueue,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "55cee005d2d77b863dd0978fc92e614a1cb638b7e80a1d9a1dbc20136494e95e"
    },
    "263458834c4bfb9e84808fc4d88292cfcf09e3d5ff8fd5007eb9a8992cba025d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\n# repo is of type Repository\n\nmy_topic = sns.Topic(self, \"Topic\")\n\nrepo.on_commit(\"OnCommit\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new SnsTopic(myTopic))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 141
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b1faa2c36daec384c26165606bc9c4d0b36d39d31f6b73ecb0330cf36c5516b8"
    },
    "ab0ca3f16c539c8b1f51f84e971979e2c8afeac6dd97c3bcab47de9fefe54522": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 162
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "840c208a299d65d82962b6a99b0303133dba1cecc5e1d145d4e11052e8917a54": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\npolicy_document = iam.PolicyDocument(\n    assign_sids=True,\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"sns:Subscribe\"],\n            principals=[iam.AnyPrincipal()],\n            resources=[topic.topic_arn]\n        )\n    ]\n)\n\ntopic_policy = sns.TopicPolicy(self, \"Policy\",\n    topics=[topic],\n    policy_document=policy_document\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nPolicyDocument policyDocument = new PolicyDocument(new PolicyDocumentProps {\n    AssignSids = true,\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"sns:Subscribe\" },\n            Principals = new [] { new AnyPrincipal() },\n            Resources = new [] { topic.TopicArn }\n        }) }\n});\n\nTopicPolicy topicPolicy = new TopicPolicy(this, \"Policy\", new TopicPolicyProps {\n    Topics = new [] { topic },\n    PolicyDocument = policyDocument\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nPolicyDocument policyDocument = PolicyDocument.Builder.create()\n        .assignSids(true)\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"sns:Subscribe\"))\n                    .principals(List.of(new AnyPrincipal()))\n                    .resources(List.of(topic.getTopicArn()))\n                    .build()))\n        .build();\n\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"Policy\")\n        .topics(List.of(topic))\n        .policyDocument(policyDocument)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst policyDocument = new iam.PolicyDocument({\n  assignSids: true,\n  statements: [\n    new iam.PolicyStatement({\n      actions: [\"sns:Subscribe\"],\n      principals: [new iam.AnyPrincipal()],\n      resources: [topic.topicArn],\n    }),\n  ],\n});\n\nconst topicPolicy = new sns.TopicPolicy(this, 'Policy', {\n  topics: [topic],\n  policyDocument,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-iam.PolicyDocumentProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst policyDocument = new iam.PolicyDocument({\n  assignSids: true,\n  statements: [\n    new iam.PolicyStatement({\n      actions: [\"sns:Subscribe\"],\n      principals: [new iam.AnyPrincipal()],\n      resources: [topic.topicArn],\n    }),\n  ],\n});\n\nconst topicPolicy = new sns.TopicPolicy(this, 'Policy', {\n  topics: [topic],\n  policyDocument,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "106": 1,
        "192": 5,
        "193": 3,
        "194": 6,
        "197": 5,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "f6d159aa0e494f378c65c55f6b2b17c09ae5180af09dea1a13c2baafc3ed8d36"
    },
    "8f158853734d0a55d516a8361eb0be7f186b4f6b0cf0f055cc4a070a5a422111": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.BetweenCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "522037a7b5219b1d22d1989898cf6a471412dda8b9c7aefb5a70435aeffe9595": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.NumericConditions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "87cde21a762c40c2eee8026fa61d60f94443b85f721a562633fb47cfb0fe5be3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.StringConditions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "09da8fc9b5f91845f94248af9bc77e880a8333c8e1f006aaccaa6b8b0f0abe0f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kinesisfirehose import DeliveryStream\n# stream is of type DeliveryStream\n\n\ntopic = sns.Topic(self, \"Topic\")\n\nsns.Subscription(self, \"Subscription\",\n    topic=topic,\n    endpoint=stream.delivery_stream_arn,\n    protocol=sns.SubscriptionProtocol.FIREHOSE,\n    subscription_role_arn=\"SAMPLE_ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KinesisFirehose;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Topic = topic,\n    Endpoint = stream.DeliveryStreamArn,\n    Protocol = SubscriptionProtocol.FIREHOSE,\n    SubscriptionRoleArn = \"SAMPLE_ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesisfirehose.DeliveryStream;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nSubscription.Builder.create(this, \"Subscription\")\n        .topic(topic)\n        .endpoint(stream.getDeliveryStreamArn())\n        .protocol(SubscriptionProtocol.FIREHOSE)\n        .subscriptionRoleArn(\"SAMPLE_ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\n\nconst topic = new sns.Topic(this, 'Topic');\ndeclare const stream: DeliveryStream;\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.Subscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream#deliveryStreamArn",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#FIREHOSE",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\ndeclare const stream: DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d1679801914bd5e8b96015ec2d2bfae1d511458ae4b158031f83885955ace617"
    },
    "7c8d1a93047c3e3f44226fdd5051ed9e3e8aeaf651eaf54bba37b17a05b83cec": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.SubscriptionFilter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "b95b03008d544a3f5caada734c9413bd883f21b44d38f7fd00a6b07931e45f0c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kinesisfirehose import DeliveryStream\n# stream is of type DeliveryStream\n\n\ntopic = sns.Topic(self, \"Topic\")\n\nsns.Subscription(self, \"Subscription\",\n    topic=topic,\n    endpoint=stream.delivery_stream_arn,\n    protocol=sns.SubscriptionProtocol.FIREHOSE,\n    subscription_role_arn=\"SAMPLE_ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KinesisFirehose;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Topic = topic,\n    Endpoint = stream.DeliveryStreamArn,\n    Protocol = SubscriptionProtocol.FIREHOSE,\n    SubscriptionRoleArn = \"SAMPLE_ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesisfirehose.DeliveryStream;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nSubscription.Builder.create(this, \"Subscription\")\n        .topic(topic)\n        .endpoint(stream.getDeliveryStreamArn())\n        .protocol(SubscriptionProtocol.FIREHOSE)\n        .subscriptionRoleArn(\"SAMPLE_ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\n\nconst topic = new sns.Topic(this, 'Topic');\ndeclare const stream: DeliveryStream;\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.SubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream#deliveryStreamArn",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#FIREHOSE",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\ndeclare const stream: DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d1679801914bd5e8b96015ec2d2bfae1d511458ae4b158031f83885955ace617"
    },
    "8a47b04cd03548c188fecc312f27a6c1b8f49d0946a631b32e88b353440db0c7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kinesisfirehose import DeliveryStream\n# stream is of type DeliveryStream\n\n\ntopic = sns.Topic(self, \"Topic\")\n\nsns.Subscription(self, \"Subscription\",\n    topic=topic,\n    endpoint=stream.delivery_stream_arn,\n    protocol=sns.SubscriptionProtocol.FIREHOSE,\n    subscription_role_arn=\"SAMPLE_ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KinesisFirehose;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Topic = topic,\n    Endpoint = stream.DeliveryStreamArn,\n    Protocol = SubscriptionProtocol.FIREHOSE,\n    SubscriptionRoleArn = \"SAMPLE_ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesisfirehose.DeliveryStream;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nSubscription.Builder.create(this, \"Subscription\")\n        .topic(topic)\n        .endpoint(stream.getDeliveryStreamArn())\n        .protocol(SubscriptionProtocol.FIREHOSE)\n        .subscriptionRoleArn(\"SAMPLE_ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\n\nconst topic = new sns.Topic(this, 'Topic');\ndeclare const stream: DeliveryStream;\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.SubscriptionProtocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream#deliveryStreamArn",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#FIREHOSE",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\ndeclare const stream: DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d1679801914bd5e8b96015ec2d2bfae1d511458ae4b158031f83885955ace617"
    },
    "b052c53e012ec8a1902be4c1bf4b656ee22f17dbb984733fd53abe3e23ff8ec2": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_kinesisfirehose import DeliveryStream\n# stream is of type DeliveryStream\n\n\ntopic = sns.Topic(self, \"Topic\")\n\nsns.Subscription(self, \"Subscription\",\n    topic=topic,\n    endpoint=stream.delivery_stream_arn,\n    protocol=sns.SubscriptionProtocol.FIREHOSE,\n    subscription_role_arn=\"SAMPLE_ARN\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KinesisFirehose;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nnew Subscription(this, \"Subscription\", new SubscriptionProps {\n    Topic = topic,\n    Endpoint = stream.DeliveryStreamArn,\n    Protocol = SubscriptionProtocol.FIREHOSE,\n    SubscriptionRoleArn = \"SAMPLE_ARN\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesisfirehose.DeliveryStream;\nDeliveryStream stream;\n\n\nTopic topic = new Topic(this, \"Topic\");\n\nSubscription.Builder.create(this, \"Subscription\")\n        .topic(topic)\n        .endpoint(stream.getDeliveryStreamArn())\n        .protocol(SubscriptionProtocol.FIREHOSE)\n        .subscriptionRoleArn(\"SAMPLE_ARN\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\n\nconst topic = new sns.Topic(this, 'Topic');\ndeclare const stream: DeliveryStream;\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.Topic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesisfirehose.DeliveryStream#deliveryStreamArn",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Subscription",
        "@aws-cdk/aws-sns.SubscriptionProps",
        "@aws-cdk/aws-sns.SubscriptionProtocol",
        "@aws-cdk/aws-sns.SubscriptionProtocol#FIREHOSE",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { DeliveryStream } from '@aws-cdk/aws-kinesisfirehose';\ndeclare const stream: DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\n\nnew sns.Subscription(this, 'Subscription', {\n  topic,\n  endpoint: stream.deliveryStreamArn,\n  protocol: sns.SubscriptionProtocol.FIREHOSE,\n  subscriptionRoleArn: \"SAMPLE_ARN\", //role with permissions to send messages to a firehose delivery stream\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d1679801914bd5e8b96015ec2d2bfae1d511458ae4b158031f83885955ace617"
    },
    "cffcb206eeb9af5570b62f2e08be9399643de07090b6e884fcb893aacfb6d634": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.TopicPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "037362824fb58a2acf09cb0ac1166f4f75af549395f90c395135dd177ac3c717": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.TopicPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "a14856be58ad3cc8b9d69dbfdbbf42a27de76de17b39e0df5982f483f652aed3": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\",\n    display_name=\"Customer subscription topic\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\", new TopicProps {\n    DisplayName = \"Customer subscription topic\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = Topic.Builder.create(this, \"Topic\")\n        .displayName(\"Customer subscription topic\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic', {\n  displayName: 'Customer subscription topic',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns.TopicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic', {\n  displayName: 'Customer subscription topic',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "733921ec2346b92b3cefc2f0ae08fd0a785193969db4f998120bf24493ed2c1e"
    }
  }
}
