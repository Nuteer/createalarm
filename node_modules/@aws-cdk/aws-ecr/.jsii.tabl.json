{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "4823475de19078521a896e9702ecf039f0a3b37445401c96018f77c51fcd7a8d": {
      "translations": {
        "python": {
          "source": "repository = ecr.Repository(self, \"Repository\")",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository = new Repository(this, \"Repository\");",
          "version": "1"
        },
        "java": {
          "source": "Repository repository = new Repository(this, \"Repository\");",
          "version": "1"
        },
        "$": {
          "source": "const repository = new ecr.Repository(this, 'Repository');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 21
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.Repository"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst repository = new ecr.Repository(this, 'Repository');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "8e8105d7864cdc84667bde4156b7dc9d5990d1bc10d55be52741be36b6d1fe2b"
    },
    "8bf5fcdff556b6a85cf447a53acbfa121e6514c0d254686885e5936ca5140278": {
      "translations": {
        "python": {
          "source": "repository = ecr.Repository(self, \"Repo\",\n    image_scan_on_push=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository = new Repository(this, \"Repo\", new RepositoryProps {\n    ImageScanOnPush = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repository = Repository.Builder.create(this, \"Repo\")\n        .imageScanOnPush(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const repository = new ecr.Repository(this, 'Repo', {\n  imageScanOnPush: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 29
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst repository = new ecr.Repository(this, 'Repo', {\n  imageScanOnPush: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "32a23678c1fbc332c6e4886a49cb75b200a45c5dffe7a25d80e2e48a28398d0e"
    },
    "bfa1aa04610375f1ab35afab5a32906ea939efca37b42eaebefaec29a97c452c": {
      "translations": {
        "python": {
          "source": "# repository is of type Repository\n# target is of type SomeTarget\n\n\nrepository.on_image_scan_completed(\"ImageScanComplete\").add_target(target)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository;\nSomeTarget target;\n\n\nrepository.OnImageScanCompleted(\"ImageScanComplete\").AddTarget(target);",
          "version": "1"
        },
        "java": {
          "source": "Repository repository;\nSomeTarget target;\n\n\nrepository.onImageScanCompleted(\"ImageScanComplete\").addTarget(target);",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: ecr.Repository;\ndeclare const target: SomeTarget;\n\nrepository.onImageScanCompleted('ImageScanComplete')\n  .addTarget(target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.RepositoryBase#onImageScanCompleted",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: ecr.Repository;\ndeclare const target: SomeTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nrepository.onImageScanCompleted('ImageScanComplete')\n  .addTarget(target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 2,
        "153": 1,
        "169": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "a7bac40e2c5d20fca75a3846f778ccf2ea886fb170af26ba9fc01aa74e441649"
    },
    "29538a22f39fa661a37302612ba8d50d2b578ce3c059a1ffb67e286f571d3fe9": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"User\")\necr.AuthorizationToken.grant_read(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\");\nAuthorizationToken.GrantRead(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"User\");\nAuthorizationToken.grantRead(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'User');\necr.AuthorizationToken.grantRead(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 55
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.AuthorizationToken",
        "@aws-cdk/aws-ecr.AuthorizationToken#grantRead",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'User');\necr.AuthorizationToken.grantRead(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "a192be12603fce6b85506b05d47eeeff423512d785f39de408479cc758c9b880"
    },
    "adbb4ee0637f10dc4ed379761c7aff09e0d6365e4b4ce12f4e0db6054ad083aa": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"User\")\necr.PublicGalleryAuthorizationToken.grant_read(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\");\nPublicGalleryAuthorizationToken.GrantRead(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"User\");\nPublicGalleryAuthorizationToken.grantRead(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'User');\necr.PublicGalleryAuthorizationToken.grantRead(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 67
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken",
        "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken#grantRead",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'User');\necr.PublicGalleryAuthorizationToken.grantRead(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "7fd92ca7e693f1ab2c6f703f4cb9b776d32a4b233278d4f013e1d3ed4c9ac80f"
    },
    "51211ad8e85330839860d3d701adfe184bb31c82b63341b7b16280a54d2152b8": {
      "translations": {
        "python": {
          "source": "ecr.Repository(self, \"Repo\", image_tag_mutability=ecr.TagMutability.IMMUTABLE)",
          "version": "1"
        },
        "csharp": {
          "source": "new Repository(this, \"Repo\", new RepositoryProps { ImageTagMutability = TagMutability.IMMUTABLE });",
          "version": "1"
        },
        "java": {
          "source": "Repository.Builder.create(this, \"Repo\").imageTagMutability(TagMutability.IMMUTABLE).build();",
          "version": "1"
        },
        "$": {
          "source": "new ecr.Repository(this, 'Repo', { imageTagMutability: ecr.TagMutability.IMMUTABLE });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryProps",
        "@aws-cdk/aws-ecr.TagMutability",
        "@aws-cdk/aws-ecr.TagMutability#IMMUTABLE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ecr.Repository(this, 'Repo', { imageTagMutability: ecr.TagMutability.IMMUTABLE });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "ba7883537343bd0331707432cee3e36a3632c1b5c0ec9350334e5ed67361b4c5"
    },
    "cb5d77680fe0c9711e66d6e8fb2b0f52b8dc6fec52fa4bd121486f5e7e5e3fc4": {
      "translations": {
        "python": {
          "source": "# repository is of type Repository\n\nrepository.add_lifecycle_rule(tag_prefix_list=[\"prod\"], max_image_count=9999)\nrepository.add_lifecycle_rule(max_image_age=Duration.days(30))",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository;\n\nrepository.AddLifecycleRule(new LifecycleRule { TagPrefixList = new [] { \"prod\" }, MaxImageCount = 9999 });\nrepository.AddLifecycleRule(new LifecycleRule { MaxImageAge = Duration.Days(30) });",
          "version": "1"
        },
        "java": {
          "source": "Repository repository;\n\nrepository.addLifecycleRule(LifecycleRule.builder().tagPrefixList(List.of(\"prod\")).maxImageCount(9999).build());\nrepository.addLifecycleRule(LifecycleRule.builder().maxImageAge(Duration.days(30)).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: ecr.Repository;\nrepository.addLifecycleRule({ tagPrefixList: ['prod'], maxImageCount: 9999 });\nrepository.addLifecycleRule({ maxImageAge: Duration.days(30) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecr"
        },
        "field": {
          "field": "markdown",
          "line": 90
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.LifecycleRule",
        "@aws-cdk/aws-ecr.Repository#addLifecycleRule",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nrepository.addLifecycleRule({ tagPrefixList: ['prod'], maxImageCount: 9999 });\nrepository.addLifecycleRule({ maxImageAge: Duration.days(30) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b84e37f0bc65cac2085fd8a603be77f6723a93851501057a74032e616c614ab0"
    },
    "a6d4340431fd6d78632e6a7d282ba459d6bec5f792f53ed45050cb0fd192d42f": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"User\")\necr.AuthorizationToken.grant_read(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\");\nAuthorizationToken.GrantRead(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"User\");\nAuthorizationToken.grantRead(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'User');\necr.AuthorizationToken.grantRead(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.AuthorizationToken"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.AuthorizationToken",
        "@aws-cdk/aws-ecr.AuthorizationToken#grantRead",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'User');\necr.AuthorizationToken.grantRead(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "a192be12603fce6b85506b05d47eeeff423512d785f39de408479cc758c9b880"
    },
    "53ab48ac4869f5b23c26d4d6525b5e1042a3e40efe7a6890dc284df70e503900": {
      "translations": {
        "python": {
          "source": "# repository is of type Repository\n\nrepository.add_lifecycle_rule(tag_prefix_list=[\"prod\"], max_image_count=9999)\nrepository.add_lifecycle_rule(max_image_age=Duration.days(30))",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository;\n\nrepository.AddLifecycleRule(new LifecycleRule { TagPrefixList = new [] { \"prod\" }, MaxImageCount = 9999 });\nrepository.AddLifecycleRule(new LifecycleRule { MaxImageAge = Duration.Days(30) });",
          "version": "1"
        },
        "java": {
          "source": "Repository repository;\n\nrepository.addLifecycleRule(LifecycleRule.builder().tagPrefixList(List.of(\"prod\")).maxImageCount(9999).build());\nrepository.addLifecycleRule(LifecycleRule.builder().maxImageAge(Duration.days(30)).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: ecr.Repository;\nrepository.addLifecycleRule({ tagPrefixList: ['prod'], maxImageCount: 9999 });\nrepository.addLifecycleRule({ maxImageAge: Duration.days(30) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.LifecycleRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.LifecycleRule",
        "@aws-cdk/aws-ecr.Repository#addLifecycleRule",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nrepository.addLifecycleRule({ tagPrefixList: ['prod'], maxImageCount: 9999 });\nrepository.addLifecycleRule({ maxImageAge: Duration.days(30) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b84e37f0bc65cac2085fd8a603be77f6723a93851501057a74032e616c614ab0"
    },
    "f7e0f5542e98a9e177e937980148850a01a6d50dd54c819c9c8bae626e55e36f": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"User\")\necr.PublicGalleryAuthorizationToken.grant_read(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"User\");\nPublicGalleryAuthorizationToken.GrantRead(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"User\");\nPublicGalleryAuthorizationToken.grantRead(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'User');\necr.PublicGalleryAuthorizationToken.grantRead(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken",
        "@aws-cdk/aws-ecr.PublicGalleryAuthorizationToken#grantRead",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'User');\necr.PublicGalleryAuthorizationToken.grantRead(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "7fd92ca7e693f1ab2c6f703f4cb9b776d32a4b233278d4f013e1d3ed4c9ac80f"
    },
    "ab1c736d2646b357e75bae5346cd0ce3034e2f10ae49482337c3dacd358816e9": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\ncustom_reg_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"CRSecret\", \"arn:aws:...\")\nrepo1 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\")\nrepo2 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\")\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    docker_credentials=[\n        pipelines.DockerCredential.docker_hub(docker_hub_secret),\n        pipelines.DockerCredential.custom_registry(\"dockerregistry.example.com\", custom_reg_secret),\n        pipelines.DockerCredential.ecr([repo1, repo2])\n    ],\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.FromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    DockerCredentials = new [] { DockerCredential.DockerHub(dockerHubSecret), DockerCredential.CustomRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.Ecr(new [] { repo1, repo2 }) },\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.fromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .dockerCredentials(List.of(DockerCredential.dockerHub(dockerHubSecret), DockerCredential.customRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.ecr(List.of(repo1, repo2))))\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.Repository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryArn",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#customRegistry",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredential#ecr",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 17,
        "75": 42,
        "104": 5,
        "192": 3,
        "193": 3,
        "194": 18,
        "196": 8,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "209d5edbeb8ac3b866b2745c77743548529ab8cdfac68fdf32c50aba200c31c8"
    },
    "2fa607d573e204191f0174c636b65ef6b952ba669fad0abb7521f53623ba0974": {
      "translations": {
        "python": {
          "source": "repository = ecr.Repository(self, \"Repo\",\n    image_scan_on_push=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repository = new Repository(this, \"Repo\", new RepositoryProps {\n    ImageScanOnPush = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repository = Repository.Builder.create(this, \"Repo\")\n        .imageScanOnPush(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const repository = new ecr.Repository(this, 'Repo', {\n  imageScanOnPush: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.RepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst repository = new ecr.Repository(this, 'Repo', {\n  imageScanOnPush: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "32a23678c1fbc332c6e4886a49cb75b200a45c5dffe7a25d80e2e48a28398d0e"
    },
    "161d00499302016863cddb91edb6aa817b576206ebc9e69af5bd14ff9e168233": {
      "translations": {
        "python": {
          "source": "ecr.Repository(self, \"Repo\", image_tag_mutability=ecr.TagMutability.IMMUTABLE)",
          "version": "1"
        },
        "csharp": {
          "source": "new Repository(this, \"Repo\", new RepositoryProps { ImageTagMutability = TagMutability.IMMUTABLE });",
          "version": "1"
        },
        "java": {
          "source": "Repository.Builder.create(this, \"Repo\").imageTagMutability(TagMutability.IMMUTABLE).build();",
          "version": "1"
        },
        "$": {
          "source": "new ecr.Repository(this, 'Repo', { imageTagMutability: ecr.TagMutability.IMMUTABLE });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecr.TagMutability"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryProps",
        "@aws-cdk/aws-ecr.TagMutability",
        "@aws-cdk/aws-ecr.TagMutability#IMMUTABLE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as events from '@aws-cdk/aws-events';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass SomeTarget implements events.IRuleTarget {\n  public bind(): events.RuleTargetConfig {\n    return {\n      arn: 'ARN1',\n    };\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ecr.Repository(this, 'Repo', { imageTagMutability: ecr.TagMutability.IMMUTABLE });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "ba7883537343bd0331707432cee3e36a3632c1b5c0ec9350334e5ed67361b4c5"
    }
  }
}
