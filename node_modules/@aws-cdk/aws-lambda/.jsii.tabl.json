{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "f4925b22dbbfb735961c87e223f4073779a60029a56274f30eba0095bc097fa0": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "9681ed597e28f77242be73d1cb5aaa597c5320d328bbd0b204b84bc145254726"
    },
    "956a5491479f307809150bcef5a697bd2c328809fc658ca8037c97e4d0b37dfb": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyLambda\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"my-lambda-handler\")),\n    handler=\"index.main\",\n    runtime=lambda_.Runtime.PYTHON_3_6\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"MyLambda\", new FunctionProps {\n    Code = Code.FromAsset(Join(__dirname, \"my-lambda-handler\")),\n    Handler = \"index.main\",\n    Runtime = Runtime.PYTHON_3_6\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyLambda\")\n        .code(Code.fromAsset(join(__dirname, \"my-lambda-handler\")))\n        .handler(\"index.main\")\n        .runtime(Runtime.PYTHON_3_6)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyLambda', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),\n  handler: 'index.main',\n  runtime: lambda.Runtime.PYTHON_3_6,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 43
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_6"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    /// !show\n    new lambda.Function(this, 'MyLambda', {\n      code: lambda.Code.fromAsset(path.join(__dirname, 'my-lambda-handler')),\n      handler: 'index.main',\n      runtime: lambda.Runtime.PYTHON_3_6,\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'lambda-test-assets');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "6dfed7b89d9163824f3b0997146ece86e00e20b3f12f92adb7aa07c1a197b4c8"
    },
    "7748f4af8fd67a5b77e92a0ddec70e0961daf728bf9fb2f8ab1fe168edea17fa": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e1bfbee243dee4b1af2c6adc810d28da548dd31eab550d449d09de96c9e2cd51"
    },
    "b24cf7b88b324429253bbade38ef24fc8463e433b84361792b498fd355f08828": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\nrepo = ecr.Repository(self, \"Repository\")\n\nlambda_.DockerImageFunction(self, \"ECRFunction\",\n    code=lambda_.DockerImageCode.from_ecr(repo)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\nRepository repo = new Repository(this, \"Repository\");\n\nnew DockerImageFunction(this, \"ECRFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromEcr(repo)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\nRepository repo = new Repository(this, \"Repository\");\n\nDockerImageFunction.Builder.create(this, \"ECRFunction\")\n        .code(DockerImageCode.fromEcr(repo))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\nconst repo = new ecr.Repository(this, 'Repository');\n\nnew lambda.DockerImageFunction(this, 'ECRFunction', {\n  code: lambda.DockerImageCode.fromEcr(repo),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromEcr",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst repo = new ecr.Repository(this, 'Repository');\n\nnew lambda.DockerImageFunction(this, 'ECRFunction', {\n  code: lambda.DockerImageCode.fromEcr(repo),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "43fe66c36796fac46f94b2b5605291a99625decaeffb32dedd709436510b10a1"
    },
    "d3707865c9ee954d9bcabc52f452ffa4f994ba2bbcf7f38fbd043710c0b5c39d": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nrole = fn.role",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nIRole? role = fn.Role;",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nIRole role = fn.getRole();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nconst role = fn.role; // the Role",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 98
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#role",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nconst role = fn.role;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "adcf8b266899d32701ed80eb4805cc3a7ba1865c28e6e2deaa39cc4432ec3f02"
    },
    "4b9974a6dbfe00af8e55da9485b24b7045a94af169b299f901282b5d2f65e68f": {
      "translations": {
        "python": {
          "source": "my_role = iam.Role(self, \"My Role\",\n    assumed_by=iam.ServicePrincipal(\"sns.amazonaws.com\")\n)\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    role=my_role\n)\n\nmy_role.add_managed_policy(iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AWSLambdaBasicExecutionRole\"))\nmy_role.add_managed_policy(iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AWSLambdaVPCAccessExecutionRole\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Role myRole = new Role(this, \"My Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"sns.amazonaws.com\")\n});\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Role = myRole\n});\n\nmyRole.AddManagedPolicy(ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.AddManagedPolicy(ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));",
          "version": "1"
        },
        "java": {
          "source": "Role myRole = Role.Builder.create(this, \"My Role\")\n        .assumedBy(new ServicePrincipal(\"sns.amazonaws.com\"))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .role(myRole)\n        .build();\n\nmyRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));",
          "version": "1"
        },
        "$": {
          "source": "const myRole = new iam.Role(this, 'My Role', {\n  assumedBy: new iam.ServicePrincipal('sns.amazonaws.com'),\n});\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  role: myRole, // user-provided role\n});\n\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\")); // only required if your function lives in a VPC",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#addManagedPolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myRole = new iam.Role(this, 'My Role', {\n  assumedBy: new iam.ServicePrincipal('sns.amazonaws.com'),\n});\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  role: myRole, // user-provided role\n});\n\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaBasicExecutionRole\"));\nmyRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AWSLambdaVPCAccessExecutionRole\"));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 33,
        "104": 2,
        "193": 2,
        "194": 14,
        "196": 6,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "282159221d3be7aa525ae2a98202a04e13e3c7ad5bae4cb823023797850023b7"
    },
    "5745c4c52d1a30a8a5e834645bdf0d3139112c56aee56082d83dfea25c2b75df": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionBase#metricDuration",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4e157b0c27f216e958a9e8508782c1447531156363e0117c16cb95d5be46d7bb"
    },
    "70d685ca2ff9c04554cdbd5058dd695c759892464447a9a89769d240d909723b": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\nprincipal = iam.ServicePrincipal(\"my-service\")\n\nfn.grant_invoke(principal)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=principal\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.GrantInvoke(principal);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = principal\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(principal)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 169
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9e0ab73e365ed35e41260a6781de5e5517554d59ac3dfedec4b3f6c175d4058c"
    },
    "2ce6c34323c6139f7a972858b30282908e9f6784e8a6cf634cdda83104087e52": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\nservice_principal = iam.ServicePrincipal(\"my-service\")\nsource_arn = \"arn:aws:s3:::my-bucket\"\nsource_account = \"111122223333\"\nservice_principal_with_conditions = service_principal.with_conditions({\n    \"ArnLike\": {\n        \"aws:_source_arn\": source_arn\n    },\n    \"StringEquals\": {\n        \"aws:_source_account\": source_account\n    }\n})\n\nfn.grant_invoke(service_principal_with_conditions)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=service_principal,\n    source_arn=source_arn,\n    source_account=source_account\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal servicePrincipal = new ServicePrincipal(\"my-service\");\nstring sourceArn = \"arn:aws:s3:::my-bucket\";\nstring sourceAccount = \"111122223333\";\nPrincipalBase servicePrincipalWithConditions = servicePrincipal.WithConditions(new Dictionary<string, object> {\n    { \"ArnLike\", new Dictionary<string, string> {\n        { \"aws:SourceArn\", sourceArn }\n    } },\n    { \"StringEquals\", new Dictionary<string, string> {\n        { \"aws:SourceAccount\", sourceAccount }\n    } }\n});\n\nfn.GrantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = servicePrincipal,\n    SourceArn = sourceArn,\n    SourceAccount = sourceAccount\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal servicePrincipal = new ServicePrincipal(\"my-service\");\nString sourceArn = \"arn:aws:s3:::my-bucket\";\nString sourceAccount = \"111122223333\";\nPrincipalBase servicePrincipalWithConditions = servicePrincipal.withConditions(Map.of(\n        \"ArnLike\", Map.of(\n                \"aws:SourceArn\", sourceArn),\n        \"StringEquals\", Map.of(\n                \"aws:SourceAccount\", sourceAccount)));\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(servicePrincipal)\n        .sourceArn(sourceArn)\n        .sourceAccount(sourceAccount)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst servicePrincipal = new iam.ServicePrincipal('my-service');\nconst sourceArn = 'arn:aws:s3:::my-bucket';\nconst sourceAccount = '111122223333';\nconst servicePrincipalWithConditions = servicePrincipal.withConditions({\n  ArnLike: {\n    'aws:SourceArn': sourceArn,\n  },\n  StringEquals: {\n    'aws:SourceAccount': sourceAccount,\n  },\n});\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: servicePrincipal,\n  sourceArn: sourceArn,\n  sourceAccount: sourceAccount,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 192
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst servicePrincipal = new iam.ServicePrincipal('my-service');\nconst sourceArn = 'arn:aws:s3:::my-bucket';\nconst sourceAccount = '111122223333';\nconst servicePrincipalWithConditions = servicePrincipal.withConditions({\n  ArnLike: {\n    'aws:SourceArn': sourceArn,\n  },\n  StringEquals: {\n    'aws:SourceAccount': sourceAccount,\n  },\n});\n\nfn.grantInvoke(servicePrincipalWithConditions);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: servicePrincipal,\n  sourceArn: sourceArn,\n  sourceAccount: sourceAccount,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "f5ada27c5555a883a671dc82ae1951c47c05ef0c6d0c17e644d3c7b6f61fd19b"
    },
    "76c01c9e755f109e5e2c0575cf6fbb95c82f7eea52566395f4f31833e4f51c8c": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\nversion = lambda_.Version(self, \"MyVersion\",\n    lambda_=fn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nVersion version = new Version(this, \"MyVersion\", new VersionProps {\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nVersion version = Version.Builder.create(this, \"MyVersion\")\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 233
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/aws-lambda.VersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ff1e897d2b95235bb0e0eb677fdc1d151f519bb0a15621cb365cb1c5958bcf36"
    },
    "0cac5bf5e753ae6ba42be03f947edf0bdfa449a5678838faae18963250da7422": {
      "translations": {
        "python": {
          "source": "code_version = \"stringOrMethodToGetCodeVersion\"\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    environment={\n        \"CodeVersionString\": code_version\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string codeVersion = \"stringOrMethodToGetCodeVersion\";\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Environment = new Dictionary<string, string> {\n        { \"CodeVersionString\", codeVersion }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "String codeVersion = \"stringOrMethodToGetCodeVersion\";\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .environment(Map.of(\n                \"CodeVersionString\", codeVersion))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const codeVersion = \"stringOrMethodToGetCodeVersion\";\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  environment: {\n    'CodeVersionString': codeVersion,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 249
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst codeVersion = \"stringOrMethodToGetCodeVersion\";\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  environment: {\n    'CodeVersionString': codeVersion,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "9681ed597e28f77242be73d1cb5aaa597c5320d328bbd0b204b84bc145254726"
    },
    "9e27dd2e30a46506a6e2d0fd7fdcd7b6596f2cc42c75191a63c4f8dbd4b472e8": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    current_version_options=lambda.VersionOptions(\n        removal_policy=RemovalPolicy.RETAIN,  # retain old versions\n        retry_attempts=1\n    ),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nfn.current_version.add_alias(\"live\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    CurrentVersionOptions = new VersionOptions {\n        RemovalPolicy = RemovalPolicy.RETAIN,  // retain old versions\n        RetryAttempts = 1\n    },\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nfn.CurrentVersion.AddAlias(\"live\");",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .currentVersionOptions(VersionOptions.builder()\n                .removalPolicy(RemovalPolicy.RETAIN) // retain old versions\n                .retryAttempts(1)\n                .build())\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nfn.currentVersion.addAlias(\"live\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 334
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version#addAlias",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "104": 1,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "e83976d4145d4d6eddd8bfba75d663b1fc582c5c6f6b9adee15270db06961a08"
    },
    "958d3251331faa1c2f94b89de8c31f4c683bceaf9e64653ccf5a70759c1d41f0": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 353
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "8d7b7ef26cc612f7a19875030389ab19965e354a734a11137c1dca6cffa463f2"
    },
    "47e08a09fa24c12f73fb5c44dbc5f26f14d5f6343a94ddc98fbb9e79ea5ef3da": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 379
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b9bc8765662b6b291d15e67743e3ddf72209ec6dfd09a978df3f382e1bec1ccb"
    },
    "77111847c9344b4f2cfdbdb9e6e0ef1ab4fbe09fcbc8f7b34a87de3865b88dd5": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    architecture=lambda_.Architecture.ARM_64\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Architecture = Architecture.ARM_64\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .architecture(Architecture.ARM_64)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  architecture: lambda.Architecture.ARM_64,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 395
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  architecture: lambda.Architecture.ARM_64,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "4626c574479461a6e30b5e018ca0f9d5e8f884c22beaaf8c16b77ec0eefc42f0"
    },
    "01abbccfa35e2671a7fb38c04b14664d9485f034bdc92d9db4f7bef749b4286b": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 406
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "eb1f9408c3f84866487b4d434bf5737ec2f47113d2290317709c884cea1b3d48"
    },
    "61e843ddfb60bfad8fae5fa22d23a387dc15f845cf52294d0e3aede61f6353d1": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.VERSION_1_0_98_0\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.VERSION_1_0_98_0\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.VERSION_1_0_98_0)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_98_0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 419
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#VERSION_1_0_98_0",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_98_0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "a8f99a14fc361744a0f9d04977861a4fb08730a5d532a48005d3f598af5c4da2"
    },
    "315abcd34e29b92c623fdc386eaa70fc9caf462919254e2f09843cc4a5cdb3db": {
      "translations": {
        "python": {
          "source": "layer_arn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\"\nlambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.from_insight_version_arn(layer_arn)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nnew Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.FromInsightVersionArn(layerArn)\n});",
          "version": "1"
        },
        "java": {
          "source": "String layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.fromInsightVersionArn(layerArn))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 430
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#fromInsightVersionArn",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "648dd527224d9f766968c2e4e54b87dbfbc772020072e557f160d8d920d2caf5"
    },
    "ffc7b3d75141169598e013d7af17a0f5cc70a43e57f002d96be1c830fec420fd": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    architecture=lambda_.Architecture.ARM_64,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.VERSION_1_0_119_0\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Architecture = Architecture.ARM_64,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.VERSION_1_0_119_0\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .architecture(Architecture.ARM_64)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.VERSION_1_0_119_0)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  architecture: lambda.Architecture.ARM_64,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_119_0,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 443
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#VERSION_1_0_119_0",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  architecture: lambda.Architecture.ARM_64,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.VERSION_1_0_119_0,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "104": 1,
        "193": 1,
        "194": 10,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "4ff30967c7ced5764e8a0d3c53a7a83278aa02cf7ab12de4b4cf3cef2b8a78da"
    },
    "06a8f853f52e2226bcd156fe473ebd9e3386cf1984a6ea0f4d20f1d9ba37fed8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn is of type Function\n\nrule = events.Rule(self, \"Schedule Rule\",\n    schedule=events.Schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.LambdaFunction(fn))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nFunction fn;\n\nRule rule = new Rule(this, \"Schedule Rule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" })\n});\nrule.AddTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nFunction fn;\n\nRule rule = Rule.Builder.create(this, \"Schedule Rule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .build();\nrule.addTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 458
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d30d17b2c1e25e62ef3bc58d202d862bfd6262a07fbcc411b0f0fcb7feb8f9f6"
    },
    "7ce2d2437f02397aa1005231e23b0e07f05060483f4688acae1740f826ae2369": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_sqs as sqs\n\n# fn is of type Function\n\nqueue = sqs.Queue(self, \"Queue\")\nfn.add_event_source(eventsources.SqsEventSource(queue))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.SQS;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"Queue\");\nfn.AddEventSource(new SqsEventSource(queue));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.sqs.*;\n\nFunction fn;\n\nQueue queue = new Queue(this, \"Queue\");\nfn.addEventSource(new SqsEventSource(queue));",
          "version": "1"
        },
        "$": {
          "source": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const fn: lambda.Function;\nconst queue = new sqs.Queue(this, 'Queue');\nfn.addEventSource(new eventsources.SqsEventSource(queue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 484
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.SqsEventSource",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst queue = new sqs.Queue(this, 'Queue');\nfn.addEventSource(new eventsources.SqsEventSource(queue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "ebd3dc339a30c328471384a4efab39590b68c4c0763c8cccb21102a83643ca63"
    },
    "c300e2cf1561e835e3998d27f763e33de1b3369f8085e831e0b2c963f9395168": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda_event_sources as eventsources\nimport aws_cdk.aws_s3 as s3\n\n# fn is of type Function\n\nbucket = s3.Bucket(self, \"Bucket\")\nfn.add_event_source(eventsources.S3EventSource(bucket,\n    events=[s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED],\n    filters=[s3.NotificationKeyFilter(prefix=\"subdir/\")]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda.EventSources;\nusing Amazon.CDK.AWS.S3;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.AddEventSource(new S3EventSource(bucket, new S3EventSourceProps {\n    Events = new [] { EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED },\n    Filters = new [] { new NotificationKeyFilter { Prefix = \"subdir/\" } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.eventsources.*;\nimport software.amazon.awscdk.services.s3.*;\n\nFunction fn;\n\nBucket bucket = new Bucket(this, \"Bucket\");\nfn.addEventSource(S3EventSource.Builder.create(bucket)\n        .events(List.of(EventType.OBJECT_CREATED, EventType.OBJECT_REMOVED))\n        .filters(List.of(NotificationKeyFilter.builder().prefix(\"subdir/\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 495
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.S3EventSource",
        "@aws-cdk/aws-lambda-event-sources.S3EventSourceProps",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.EventType",
        "@aws-cdk/aws-s3.EventType#OBJECT_CREATED",
        "@aws-cdk/aws-s3.EventType#OBJECT_REMOVED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as eventsources from '@aws-cdk/aws-lambda-event-sources';\nimport * as s3 from '@aws-cdk/aws-s3';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucket = new s3.Bucket(this, 'Bucket');\nfn.addEventSource(new eventsources.S3EventSource(bucket, {\n  events: [ s3.EventType.OBJECT_CREATED, s3.EventType.OBJECT_REMOVED ],\n  filters: [ { prefix: 'subdir/' } ] // optional\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f792c591de17eadac95adf1dd845ddeaad5dd30dc5b1a577bb1f01b5a33c008a"
    },
    "5530989c64aa6a91436209ea7e72de178f7cee48527c8164b9c62c28cc418e21": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue_enabled=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    DeadLetterQueueEnabled = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .deadLetterQueueEnabled(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueueEnabled: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 514
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueueEnabled: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "e0e0a777149abbbb7b3bca0a5d609a828d3a4c0de8b7ce463bf593f084bda848"
    },
    "f0ce2b656496c6cbec7efa041f2690a690478ddd0a6527659574e55c01f76cef": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_sqs as sqs\n\n\ndlq = sqs.Queue(self, \"DLQ\")\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    dead_letter_queue=dlq\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SQS;\n\n\nQueue dlq = new Queue(this, \"DLQ\");\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    DeadLetterQueue = dlq\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.sqs.*;\n\n\nQueue dlq = new Queue(this, \"DLQ\");\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .deadLetterQueue(dlq)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as sqs from '@aws-cdk/aws-sqs';\n\nconst dlq = new sqs.Queue(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueue: dlq,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 525
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as sqs from '@aws-cdk/aws-sqs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst dlq = new sqs.Queue(this, 'DLQ');\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  deadLetterQueue: dlq,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9210d2894c00232ded8ce3ea0c6f44b7e2ee89378b1a7c00e3b39d88fb158b2a"
    },
    "3f8ae0208a8357a1726348c5f0a4d2de285ace98b712dd56e2fbb0a11ff5ab9e": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    tracing=lambda_.Tracing.ACTIVE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    Tracing = Tracing.ACTIVE\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .tracing(Tracing.ACTIVE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 542
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "f1d74399eac82b5d305f3bce24e33ce4817e7da2e4a0d865a2b8d2ea08891058"
    },
    "a56d0a5e17b987476dacdcb67f08d1fd152eb99b5280e83671938407d65b2d3c": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_6,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(\"lambda-handler\"),\n    profiling=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_6,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(\"lambda-handler\"),\n    Profiling = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_6)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(\"lambda-handler\"))\n        .profiling(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_6,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset('lambda-handler'),\n  profiling: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 559
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_6"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_6,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset('lambda-handler'),\n  profiling: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "6dfed7b89d9163824f3b0997146ece86e00e20b3f12f92adb7aa07c1a197b4c8"
    },
    "5b97b945da88c4dd7ef5466e8733a1959f174b5fd9f3649cc2ad1a2f8dc60549": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    reserved_concurrent_executions=100\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    ReservedConcurrentExecutions = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .reservedConcurrentExecutions(100)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  reservedConcurrentExecutions: 100,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 577
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  reservedConcurrentExecutions: 100,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "e0e0a777149abbbb7b3bca0a5d609a828d3a4c0de8b7ce463bf593f084bda848"
    },
    "ace5233c7cc05789c1b72f4a254a5359f8b9fae3e91f074b5d9814f593af1212": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 593
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "058b0cd0b78a6dc09b2f789c9d4f64dff2acd90c859b2c29df1f875137c504d7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_applicationautoscaling as appscaling\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_lambda as lambda_\n\n#\n# Stack verification steps:\n# aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n# has a minCapacity of 3 and maxCapacity of 50\n#\nclass TestStack(cdk.Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n\n        fn = lambda_.Function(self, \"MyLambda\",\n            code=lambda_.InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            handler=\"index.handler\",\n            runtime=lambda_.Runtime.NODEJS_10_X\n        )\n\n        version = fn.current_version\n\n        alias = lambda_.Alias(self, \"Alias\",\n            alias_name=\"prod\",\n            version=version\n        )\n\n        scaling_target = alias.add_auto_scaling(min_capacity=3, max_capacity=50)\n\n        scaling_target.scale_on_utilization(\n            utilization_target=0.5\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleUpInTheMorning\",\n            schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n            min_capacity=20\n        )\n\n        scaling_target.scale_on_schedule(\"ScaleDownAtNight\",\n            schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n            max_capacity=20\n        )\n\n        cdk.CfnOutput(self, \"FunctionName\",\n            value=fn.function_name\n        )\n\napp = cdk.App()\n\nTestStack(app, \"aws-lambda-autoscaling\")\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ApplicationAutoScaling;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.Lambda;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack : Stack\n{\n    public TestStack(App scope, string id) : base(scope, id)\n    {\n\n        Function fn = new Function(this, \"MyLambda\", new FunctionProps {\n            Code = new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"),\n            Handler = \"index.handler\",\n            Runtime = Runtime.NODEJS_10_X\n        });\n\n        Version version = fn.CurrentVersion;\n\n        Alias alias = new Alias(this, \"Alias\", new AliasProps {\n            AliasName = \"prod\",\n            Version = version\n        });\n\n        IScalableFunctionAttribute scalingTarget = alias.AddAutoScaling(new AutoScalingOptions { MinCapacity = 3, MaxCapacity = 50 });\n\n        scalingTarget.ScaleOnUtilization(new UtilizationScalingOptions {\n            UtilizationTarget = 0.5\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n            MinCapacity = 20\n        });\n\n        scalingTarget.ScaleOnSchedule(\"ScaleDownAtNight\", new ScalingSchedule {\n            Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n            MaxCapacity = 20\n        });\n\n        new CfnOutput(this, \"FunctionName\", new CfnOutputProps {\n            Value = fn.FunctionName\n        });\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.applicationautoscaling.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\npublic class TestStack extends Stack {\n    public TestStack(App scope, String id) {\n        super(scope, id);\n\n        Function fn = Function.Builder.create(this, \"MyLambda\")\n                .code(new InlineCode(\"exports.handler = async () => { console.log('hello world'); };\"))\n                .handler(\"index.handler\")\n                .runtime(Runtime.NODEJS_10_X)\n                .build();\n\n        Version version = fn.getCurrentVersion();\n\n        Alias alias = Alias.Builder.create(this, \"Alias\")\n                .aliasName(\"prod\")\n                .version(version)\n                .build();\n\n        IScalableFunctionAttribute scalingTarget = alias.addAutoScaling(AutoScalingOptions.builder().minCapacity(3).maxCapacity(50).build());\n\n        scalingTarget.scaleOnUtilization(UtilizationScalingOptions.builder()\n                .utilizationTarget(0.5)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n                .minCapacity(20)\n                .build());\n\n        scalingTarget.scaleOnSchedule(\"ScaleDownAtNight\", ScalingSchedule.builder()\n                .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n                .maxCapacity(20)\n                .build());\n\n        CfnOutput.Builder.create(this, \"FunctionName\")\n                .value(fn.getFunctionName())\n                .build();\n    }\n}\n\nApp app = new App();\n\nnew TestStack(app, \"aws-lambda-autoscaling\");\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 617
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#functionName",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\n/**\n* Stack verification steps:\n* aws application-autoscaling describe-scalable-targets --service-namespace lambda --resource-ids function:<function name>:prod\n* has a minCapacity of 3 and maxCapacity of 50\n*/\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const fn = new lambda.Function(this, 'MyLambda', {\n      code: new lambda.InlineCode('exports.handler = async () => { console.log(\\'hello world\\'); };'),\n      handler: 'index.handler',\n      runtime: lambda.Runtime.NODEJS_10_X,\n    });\n\n    const version = fn.currentVersion;\n\n    const alias = new lambda.Alias(this, 'Alias', {\n      aliasName: 'prod',\n      version,\n    });\n\n    const scalingTarget = alias.addAutoScaling({ minCapacity: 3, maxCapacity: 50 });\n\n    scalingTarget.scaleOnUtilization({\n      utilizationTarget: 0.5,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleUpInTheMorning', {\n      schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n      minCapacity: 20,\n    });\n\n    scalingTarget.scaleOnSchedule('ScaleDownAtNight', {\n      schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n      maxCapacity: 20,\n    });\n\n    new cdk.CfnOutput(this, 'FunctionName', {\n      value: fn.functionName,\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'aws-lambda-autoscaling');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 16,
        "75": 69,
        "102": 1,
        "104": 3,
        "143": 1,
        "153": 1,
        "156": 2,
        "162": 1,
        "169": 1,
        "193": 9,
        "194": 19,
        "196": 8,
        "197": 6,
        "216": 1,
        "223": 1,
        "225": 5,
        "226": 7,
        "242": 5,
        "243": 5,
        "245": 1,
        "254": 3,
        "255": 3,
        "256": 3,
        "279": 1,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a5f037339b3827bd819f602a6c889990a8581d30b09ec1934b13a4efc474b7ee"
    },
    "0613cf9674fbe6cb00bf2dabb6a2e13114e4ce9523122a6d9b3c29a36ffcf678": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 705
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "aabbd369bf2d81352ca546961deed8d10ef565b7638f4b3c3945c8d990e6aa0b"
    },
    "436f966bf6ba90a9b41b2254430721c127c8912403ef5ab749d5cfdcddc1ef23": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"my-python-handler\"),\n        bundling=BundlingOptions(\n            image=lambda_.Runtime.PYTHON_3_9.bundling_image,\n            command=[\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"\n            ]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(Join(__dirname, \"my-python-handler\"), new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = Runtime.PYTHON_3_9.BundlingImage,\n            Command = new [] { \"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(join(__dirname, \"my-python-handler\"), AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(Runtime.PYTHON_3_9.getBundlingImage())\n                        .command(List.of(\"bash\", \"-c\", \"pip install -r requirements.txt -t /asset-output && cp -au . /asset-output\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 766
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-lambda.Runtime#bundlingImage",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerImage"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'my-python-handler'), {\n    bundling: {\n      image: lambda.Runtime.PYTHON_3_9.bundlingImage,\n      command: [\n        'bash', '-c',\n        'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output'\n      ],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "ab2b7156e4178674d67610e4cad35ce2877d0ccd1375cfa3730106a6bcfc04ff"
    },
    "65fc65716b52cda7d1348dea823694cb7d50007af7b05452348681177d6ed8a6": {
      "translations": {
        "python": {
          "source": "lambda_.Function(self, \"Function\",\n    code=lambda_.Code.from_asset(\"/path/to/handler\",\n        bundling=BundlingOptions(\n            image=DockerImage.from_build(\"/path/to/dir/with/DockerFile\",\n                build_args={\n                    \"ARG1\": \"value1\"\n                }\n            ),\n            command=[\"my\", \"cool\", \"command\"]\n        )\n    ),\n    runtime=lambda_.Runtime.PYTHON_3_9,\n    handler=\"index.handler\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Function(this, \"Function\", new FunctionProps {\n    Code = Code.FromAsset(\"/path/to/handler\", new AssetOptions {\n        Bundling = new BundlingOptions {\n            Image = DockerImage.FromBuild(\"/path/to/dir/with/DockerFile\", new DockerBuildOptions {\n                BuildArgs = new Dictionary<string, string> {\n                    { \"ARG1\", \"value1\" }\n                }\n            }),\n            Command = new [] { \"my\", \"cool\", \"command\" }\n        }\n    }),\n    Runtime = Runtime.PYTHON_3_9,\n    Handler = \"index.handler\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function.Builder.create(this, \"Function\")\n        .code(Code.fromAsset(\"/path/to/handler\", AssetOptions.builder()\n                .bundling(BundlingOptions.builder()\n                        .image(DockerImage.fromBuild(\"/path/to/dir/with/DockerFile\", DockerBuildOptions.builder()\n                                .buildArgs(Map.of(\n                                        \"ARG1\", \"value1\"))\n                                .build()))\n                        .command(List.of(\"my\", \"cool\", \"command\"))\n                        .build())\n                .build()))\n        .runtime(Runtime.PYTHON_3_9)\n        .handler(\"index.handler\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 787
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_9",
        "@aws-cdk/aws-s3-assets.AssetOptions",
        "@aws-cdk/core.BundlingOptions",
        "@aws-cdk/core.DockerBuildOptions",
        "@aws-cdk/core.DockerImage",
        "@aws-cdk/core.DockerImage#fromBuild"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.Function(this, 'Function', {\n  code: lambda.Code.fromAsset('/path/to/handler', {\n    bundling: {\n      image: DockerImage.fromBuild('/path/to/dir/with/DockerFile', {\n        buildArgs: {\n          ARG1: 'value1',\n        },\n      }),\n      command: ['my', 'cool', 'command'],\n    },\n  }),\n  runtime: lambda.Runtime.PYTHON_3_9,\n  handler: 'index.handler',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 18,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 8
      },
      "fqnsFingerprint": "ac494382a019b3cfe552cdf6c19284577ff21942849276f4544d267b6ed26e27"
    },
    "78084157d4a4d8efc93c77e9878a2242eba8703a03c52d1e19bb9973e91c44e7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-lambda"
        },
        "field": {
          "field": "markdown",
          "line": 818
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "62e6950dcd07774cfe4cf8abf28152267da5bbe0776680f8c740c2e6b6d8135a"
    },
    "fb50a91c2248adb39e0527ffebb02cca22af8f9f425da333f7b2e8d50d133368": {
      "translations": {
        "python": {
          "source": "lambda_code = lambda_.Code.from_cfn_parameters()\nfunc = lambda_.Function(self, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n# used to make sure each CDK synthesis produces a different Version\nversion = func.add_version(\"NewVersion\")\nalias = lambda_.Alias(self, \"LambdaAlias\",\n    alias_name=\"Prod\",\n    version=version\n)\n\ncodedeploy.LambdaDeploymentGroup(self, \"DeploymentGroup\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParametersCode lambdaCode = Code.FromCfnParameters();\nFunction func = new Function(this, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.AddVersion(\"NewVersion\");\nAlias alias = new Alias(this, \"LambdaAlias\", new AliasProps {\n    AliasName = \"Prod\",\n    Version = version\n});\n\nnew LambdaDeploymentGroup(this, \"DeploymentGroup\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction func = Function.Builder.create(this, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.addVersion(\"NewVersion\");\nAlias alias = Alias.Builder.create(this, \"LambdaAlias\")\n        .aliasName(\"Prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Alias"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 29,
        "104": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2
      },
      "fqnsFingerprint": "bc0e57eb8eff7a57121828a0bacf47300c5183978d8ab7667ead6932da3cb005"
    },
    "b507c6a7c3afe9a2f72059832e520478e0dcea1b82f7649c96648f1600ee6483": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AliasProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "6a9a990447f685ee660672e1576645f73bc5ddfd1c50276d261ba2d618d85bef": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Architecture"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "eb1f9408c3f84866487b4d434bf5737ec2f47113d2290317709c884cea1b3d48"
    },
    "fe0066d4b3c81b48f43aeac2fd5751eb113322a6ad1767d7355a200ab067ca0d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AssetCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 50,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 3,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 2,
        "257": 2,
        "258": 6,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5154c7228628acb7d6f76269d351c28075c2af342114eaa5ae63f0db00695227"
    },
    "0412280ff2ab630e6730d8a483f41bbd3f5c96c2f97989af96f849cb85a48d4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.AutoScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "7a1be7456df601a16c182db0d6fa4d2e47188d488a1cb77b988ed1b76ee0c4ca": {
      "translations": {
        "python": {
          "source": "lambda_stack = cdk.Stack(app, \"LambdaStack\")\nlambda_code = lambda_.Code.from_cfn_parameters()\nlambda_.Function(lambda_stack, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X\n)\n# other resources that your Lambda needs, added to the lambdaStack...\n\npipeline_stack = cdk.Stack(app, \"PipelineStack\")\npipeline = codepipeline.Pipeline(pipeline_stack, \"Pipeline\")\n\n# add the source code repository containing this code to your Pipeline,\n# and the source code of the Lambda Function, if they're separate\ncdk_source_output = codepipeline.Artifact()\ncdk_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"CdkCodeRepo\",\n        repository_name=\"CdkCodeRepo\"\n    ),\n    action_name=\"CdkCode_Source\",\n    output=cdk_source_output\n)\nlambda_source_output = codepipeline.Artifact()\nlambda_source_action = codepipeline_actions.CodeCommitSourceAction(\n    repository=codecommit.Repository(pipeline_stack, \"LambdaCodeRepo\",\n        repository_name=\"LambdaCodeRepo\"\n    ),\n    action_name=\"LambdaCode_Source\",\n    output=lambda_source_output\n)\npipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[cdk_source_action, lambda_source_action]\n)\n\n# synthesize the Lambda CDK template, using CodeBuild\n# the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n# adjust the build environment and/or commands accordingly\ncdk_build_project = codebuild.Project(pipeline_stack, \"CdkBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": [\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"files\": \"LambdaStack.template.yaml\"\n        }\n    })\n)\ncdk_build_output = codepipeline.Artifact()\ncdk_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CDK_Build\",\n    project=cdk_build_project,\n    input=cdk_source_output,\n    outputs=[cdk_build_output]\n)\n\n# build your Lambda code, using CodeBuild\n# again, this example assumes your Lambda is written in TypeScript/JavaScript -\n# make sure to adjust the build environment and/or commands if they don't match your specific situation\nlambda_build_project = codebuild.Project(pipeline_stack, \"LambdaBuildProject\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    ),\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"install\": {\n                \"commands\": \"npm install\"\n            },\n            \"build\": {\n                \"commands\": \"npm run build\"\n            }\n        },\n        \"artifacts\": {\n            \"files\": [\"index.js\", \"node_modules/**/*\"\n            ]\n        }\n    })\n)\nlambda_build_output = codepipeline.Artifact()\nlambda_build_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Lambda_Build\",\n    project=lambda_build_project,\n    input=lambda_source_output,\n    outputs=[lambda_build_output]\n)\n\npipeline.add_stage(\n    stage_name=\"Build\",\n    actions=[cdk_build_action, lambda_build_action]\n)\n\n# finally, deploy your Lambda Stack\npipeline.add_stage(\n    stage_name=\"Deploy\",\n    actions=[\n        codepipeline_actions.CloudFormationCreateUpdateStackAction(\n            action_name=\"Lambda_CFN_Deploy\",\n            template_path=cdk_build_output.at_path(\"LambdaStack.template.yaml\"),\n            stack_name=\"LambdaStackDeployedName\",\n            admin_permissions=True,\n            parameter_overrides=lambda_code.assign(lambda_build_output.s3_location),\n            extra_inputs=[lambda_build_output\n            ]\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.FromCfnParameters();\nnew Function(lambdaStack, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"CdkCodeRepo\", new RepositoryProps {\n        RepositoryName = \"CdkCodeRepo\"\n    }),\n    ActionName = \"CdkCode_Source\",\n    Output = cdkSourceOutput\n});\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    Repository = new Repository(pipelineStack, \"LambdaCodeRepo\", new RepositoryProps {\n        RepositoryName = \"LambdaCodeRepo\"\n    }),\n    ActionName = \"LambdaCode_Source\",\n    Output = lambdaSourceOutput\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] { cdkSourceAction, lambdaSourceAction }\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = new Project(pipelineStack, \"CdkBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = new [] { \"npm run build\", \"npm run cdk synth LambdaStack -- -o .\" }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string> {\n            { \"files\", \"LambdaStack.template.yaml\" }\n        } }\n    })\n});\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CDK_Build\",\n    Project = cdkBuildProject,\n    Input = cdkSourceOutput,\n    Outputs = new [] { cdkBuildOutput }\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = new Project(pipelineStack, \"LambdaBuildProject\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0\n    },\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n            { \"install\", new Struct {\n                Commands = \"npm install\"\n            } },\n            { \"build\", new Struct {\n                Commands = \"npm run build\"\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, string[]> {\n            { \"files\", new [] { \"index.js\", \"node_modules/**/*\" } }\n        } }\n    })\n});\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Lambda_Build\",\n    Project = lambdaBuildProject,\n    Input = lambdaSourceOutput,\n    Outputs = new [] { lambdaBuildOutput }\n});\n\npipeline.AddStage(new StageOptions {\n    StageName = \"Build\",\n    Actions = new [] { cdkBuildAction, lambdaBuildAction }\n});\n\n// finally, deploy your Lambda Stack\npipeline.AddStage(new StageOptions {\n    StageName = \"Deploy\",\n    Actions = new [] {\n        new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n            ActionName = \"Lambda_CFN_Deploy\",\n            TemplatePath = cdkBuildOutput.AtPath(\"LambdaStack.template.yaml\"),\n            StackName = \"LambdaStackDeployedName\",\n            AdminPermissions = true,\n            ParameterOverrides = lambdaCode.Assign(lambdaBuildOutput.S3Location),\n            ExtraInputs = new [] { lambdaBuildOutput }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack lambdaStack = new Stack(app, \"LambdaStack\");\nCfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction.Builder.create(lambdaStack, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .build();\n// other resources that your Lambda needs, added to the lambdaStack...\n\nStack pipelineStack = new Stack(app, \"PipelineStack\");\nPipeline pipeline = new Pipeline(pipelineStack, \"Pipeline\");\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nArtifact cdkSourceOutput = new Artifact();\nCodeCommitSourceAction cdkSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"CdkCodeRepo\")\n                .repositoryName(\"CdkCodeRepo\")\n                .build())\n        .actionName(\"CdkCode_Source\")\n        .output(cdkSourceOutput)\n        .build();\nArtifact lambdaSourceOutput = new Artifact();\nCodeCommitSourceAction lambdaSourceAction = CodeCommitSourceAction.Builder.create()\n        .repository(Repository.Builder.create(pipelineStack, \"LambdaCodeRepo\")\n                .repositoryName(\"LambdaCodeRepo\")\n                .build())\n        .actionName(\"LambdaCode_Source\")\n        .output(lambdaSourceOutput)\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of(cdkSourceAction, lambdaSourceAction))\n        .build());\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nProject cdkBuildProject = Project.Builder.create(pipelineStack, \"CdkBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"npm run build\", \"npm run cdk synth LambdaStack -- -o .\"))),\n                \"artifacts\", Map.of(\n                        \"files\", \"LambdaStack.template.yaml\"))))\n        .build();\nArtifact cdkBuildOutput = new Artifact();\nCodeBuildAction cdkBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CDK_Build\")\n        .project(cdkBuildProject)\n        .input(cdkSourceOutput)\n        .outputs(List.of(cdkBuildOutput))\n        .build();\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nProject lambdaBuildProject = Project.Builder.create(pipelineStack, \"LambdaBuildProject\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0)\n                .build())\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"install\", Map.of(\n                                \"commands\", \"npm install\"),\n                        \"build\", Map.of(\n                                \"commands\", \"npm run build\")),\n                \"artifacts\", Map.of(\n                        \"files\", List.of(\"index.js\", \"node_modules/**/*\")))))\n        .build();\nArtifact lambdaBuildOutput = new Artifact();\nCodeBuildAction lambdaBuildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Lambda_Build\")\n        .project(lambdaBuildProject)\n        .input(lambdaSourceOutput)\n        .outputs(List.of(lambdaBuildOutput))\n        .build();\n\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Build\")\n        .actions(List.of(cdkBuildAction, lambdaBuildAction))\n        .build());\n\n// finally, deploy your Lambda Stack\npipeline.addStage(StageOptions.builder()\n        .stageName(\"Deploy\")\n        .actions(List.of(\n            CloudFormationCreateUpdateStackAction.Builder.create()\n                    .actionName(\"Lambda_CFN_Deploy\")\n                    .templatePath(cdkBuildOutput.atPath(\"LambdaStack.template.yaml\"))\n                    .stackName(\"LambdaStackDeployedName\")\n                    .adminPermissions(true)\n                    .parameterOverrides(lambdaCode.assign(lambdaBuildOutput.getS3Location()))\n                    .extraInputs(List.of(lambdaBuildOutput))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CfnParametersCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#UBUNTU_14_04_NODEJS_10_1_0",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.CfnParametersCode#assign",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X",
        "@aws-cdk/aws-s3.Location",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ PipelineStack\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as cdk from '@aws-cdk/core';\nimport * as codepipeline_actions from '../lib';\n\nconst app = new cdk.App();\n\n/// !show\nconst lambdaStack = new cdk.Stack(app, 'LambdaStack');\nconst lambdaCode = lambda.Code.fromCfnParameters();\nnew lambda.Function(lambdaStack, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n});\n// other resources that your Lambda needs, added to the lambdaStack...\n\nconst pipelineStack = new cdk.Stack(app, 'PipelineStack');\nconst pipeline = new codepipeline.Pipeline(pipelineStack, 'Pipeline');\n\n// add the source code repository containing this code to your Pipeline,\n// and the source code of the Lambda Function, if they're separate\nconst cdkSourceOutput = new codepipeline.Artifact();\nconst cdkSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'CdkCodeRepo', {\n    repositoryName: 'CdkCodeRepo',\n  }),\n  actionName: 'CdkCode_Source',\n  output: cdkSourceOutput,\n});\nconst lambdaSourceOutput = new codepipeline.Artifact();\nconst lambdaSourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  repository: new codecommit.Repository(pipelineStack, 'LambdaCodeRepo', {\n    repositoryName: 'LambdaCodeRepo',\n  }),\n  actionName: 'LambdaCode_Source',\n  output: lambdaSourceOutput,\n});\npipeline.addStage({\n  stageName: 'Source',\n  actions: [cdkSourceAction, lambdaSourceAction],\n});\n\n// synthesize the Lambda CDK template, using CodeBuild\n// the below values are just examples, assuming your CDK code is in TypeScript/JavaScript -\n// adjust the build environment and/or commands accordingly\nconst cdkBuildProject = new codebuild.Project(pipelineStack, 'CdkBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: [\n          'npm run build',\n          'npm run cdk synth LambdaStack -- -o .',\n        ],\n      },\n    },\n    artifacts: {\n      files: 'LambdaStack.template.yaml',\n    },\n  }),\n});\nconst cdkBuildOutput = new codepipeline.Artifact();\nconst cdkBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CDK_Build',\n  project: cdkBuildProject,\n  input: cdkSourceOutput,\n  outputs: [cdkBuildOutput],\n});\n\n// build your Lambda code, using CodeBuild\n// again, this example assumes your Lambda is written in TypeScript/JavaScript -\n// make sure to adjust the build environment and/or commands if they don't match your specific situation\nconst lambdaBuildProject = new codebuild.Project(pipelineStack, 'LambdaBuildProject', {\n  environment: {\n    buildImage: codebuild.LinuxBuildImage.UBUNTU_14_04_NODEJS_10_1_0,\n  },\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      install: {\n        commands: 'npm install',\n      },\n      build: {\n        commands: 'npm run build',\n      },\n    },\n    artifacts: {\n      files: [\n        'index.js',\n        'node_modules/**/*',\n      ],\n    },\n  }),\n});\nconst lambdaBuildOutput = new codepipeline.Artifact();\nconst lambdaBuildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Lambda_Build',\n  project: lambdaBuildProject,\n  input: lambdaSourceOutput,\n  outputs: [lambdaBuildOutput],\n});\n\npipeline.addStage({\n  stageName: 'Build',\n  actions: [cdkBuildAction, lambdaBuildAction],\n});\n\n// finally, deploy your Lambda Stack\npipeline.addStage({\n  stageName: 'Deploy',\n  actions: [\n    new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n      actionName: 'Lambda_CFN_Deploy',\n      templatePath: cdkBuildOutput.atPath('LambdaStack.template.yaml'),\n      stackName: 'LambdaStackDeployedName',\n      adminPermissions: true,\n      parameterOverrides: lambdaCode.assign(lambdaBuildOutput.s3Location),\n      extraInputs: [\n        lambdaBuildOutput,\n      ],\n    }),\n  ],\n});\n",
      "syntaxKindCounter": {
        "10": 31,
        "75": 153,
        "106": 1,
        "192": 8,
        "193": 25,
        "194": 35,
        "196": 8,
        "197": 17,
        "225": 14,
        "226": 4,
        "242": 14,
        "243": 14,
        "281": 53
      },
      "fqnsFingerprint": "8340e408f710b8740d004014052ebc1e3b4c6b30ba801a024ea77876df61e4d2"
    },
    "dd332b9a1ad88dd2aa01f0d96cba7c1ba15b5566633f53437396c65ce74fffcc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Code"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "7497c65bd8f57f9bf5d459a663cd9a1bfbf81c9e2f320f31c969e54df6aca2e2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeSigningConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "62e6950dcd07774cfe4cf8abf28152267da5bbe0776680f8c740c2e6b6d8135a"
    },
    "108bdf2d955b14e04b38b45de37800c87fa32969de2836b70589f359c2b6f130": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_signer as signer\n\n\nsigning_profile = signer.SigningProfile(self, \"SigningProfile\",\n    platform=signer.Platform.AWS_LAMBDA_SHA384_ECDSA\n)\n\ncode_signing_config = lambda_.CodeSigningConfig(self, \"CodeSigningConfig\",\n    signing_profiles=[signing_profile]\n)\n\nlambda_.Function(self, \"Function\",\n    code_signing_config=code_signing_config,\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Signer;\n\n\nSigningProfile signingProfile = new SigningProfile(this, \"SigningProfile\", new SigningProfileProps {\n    Platform = Platform.AWS_LAMBDA_SHA384_ECDSA\n});\n\nCodeSigningConfig codeSigningConfig = new CodeSigningConfig(this, \"CodeSigningConfig\", new CodeSigningConfigProps {\n    SigningProfiles = new [] { signingProfile }\n});\n\nnew Function(this, \"Function\", new FunctionProps {\n    CodeSigningConfig = codeSigningConfig,\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.signer.*;\n\n\nSigningProfile signingProfile = SigningProfile.Builder.create(this, \"SigningProfile\")\n        .platform(Platform.AWS_LAMBDA_SHA384_ECDSA)\n        .build();\n\nCodeSigningConfig codeSigningConfig = CodeSigningConfig.Builder.create(this, \"CodeSigningConfig\")\n        .signingProfiles(List.of(signingProfile))\n        .build();\n\nFunction.Builder.create(this, \"Function\")\n        .codeSigningConfig(codeSigningConfig)\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as signer from '@aws-cdk/aws-signer';\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.CodeSigningConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.CodeSigningConfig",
        "@aws-cdk/aws-lambda.CodeSigningConfigProps",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.ICodeSigningConfig",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-signer.Platform",
        "@aws-cdk/aws-signer.Platform#AWS_LAMBDA_SHA384_ECDSA",
        "@aws-cdk/aws-signer.SigningProfile",
        "@aws-cdk/aws-signer.SigningProfileProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as signer from '@aws-cdk/aws-signer';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst signingProfile = new signer.SigningProfile(this, 'SigningProfile', {\n  platform: signer.Platform.AWS_LAMBDA_SHA384_ECDSA,\n});\n\nconst codeSigningConfig = new lambda.CodeSigningConfig(this, 'CodeSigningConfig', {\n  signingProfiles: [signingProfile],\n});\n\nnew lambda.Function(this, 'Function', {\n  codeSigningConfig,\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "62e6950dcd07774cfe4cf8abf28152267da5bbe0776680f8c740c2e6b6d8135a"
    },
    "9724c8e7504616c03cad4a200ffd67e7be26a3231660f90652fe9c89eb4983d6": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e1bfbee243dee4b1af2c6adc810d28da548dd31eab550d449d09de96c9e2cd51"
    },
    "2139d3adbe7c3c8cc485fdef4372aa38d2239aaba784813a00d6c1b6d95ea25d": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e1bfbee243dee4b1af2c6adc810d28da548dd31eab550d449d09de96c9e2cd51"
    },
    "30205a7ffb64ff6bb3bf672ff9535e9835fca09e052c91daf37d4c5be193b484": {
      "translations": {
        "python": {
          "source": "lambda_.DockerImageFunction(self, \"AssetFunction\",\n    code=lambda_.DockerImageCode.from_image_asset(path.join(__dirname, \"docker-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new DockerImageFunction(this, \"AssetFunction\", new DockerImageFunctionProps {\n    Code = DockerImageCode.FromImageAsset(Join(__dirname, \"docker-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "DockerImageFunction.Builder.create(this, \"AssetFunction\")\n        .code(DockerImageCode.fromImageAsset(join(__dirname, \"docker-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.DockerImageFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.DockerImageCode",
        "@aws-cdk/aws-lambda.DockerImageCode#fromImageAsset",
        "@aws-cdk/aws-lambda.DockerImageFunction",
        "@aws-cdk/aws-lambda.DockerImageFunctionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.DockerImageFunction(this, 'AssetFunction', {\n  code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, 'docker-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e1bfbee243dee4b1af2c6adc810d28da548dd31eab550d449d09de96c9e2cd51"
    },
    "ac8712ae460d0bde01939295a5bf24dc2c1771089d20c96c9891f4295513934c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "aabbd369bf2d81352ca546961deed8d10ef565b7638f4b3c3945c8d990e6aa0b"
    },
    "40ef8fc0c6283171936005604f89ef2aebdae11f5749a5a78a0b02e6346e7f13": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Function"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "e659ef2544adac3061360d17e634888d56a23d587f1f6f44d3dd05f830379530": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.FunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "3ccebff19fc1165c109b07d3f62c529e45a952b393a30c8513725e987522375d": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.InlineCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "8d7b7ef26cc612f7a19875030389ab19965e354a734a11137c1dca6cffa463f2"
    },
    "40d5c58065b5d861191e7ecdbfd4f6450f5eb94c79f49296f34937208e33af95": {
      "translations": {
        "python": {
          "source": "layer_arn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\"\nlambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    insights_version=lambda_.LambdaInsightsVersion.from_insight_version_arn(layer_arn)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nnew Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    InsightsVersion = LambdaInsightsVersion.FromInsightVersionArn(layerArn)\n});",
          "version": "1"
        },
        "java": {
          "source": "String layerArn = \"arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14\";\nFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .insightsVersion(LambdaInsightsVersion.fromInsightVersionArn(layerArn))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LambdaInsightsVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion",
        "@aws-cdk/aws-lambda.LambdaInsightsVersion#fromInsightVersionArn",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst layerArn = 'arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14';\nnew lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  insightsVersion: lambda.LambdaInsightsVersion.fromInsightVersionArn(layerArn),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "104": 1,
        "193": 1,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "648dd527224d9f766968c2e4e54b87dbfbc772020072e557f160d8d920d2caf5"
    },
    "fdc90c8c6ccee536bd7d75cc5d9900a1c05805308bae33fe87cac0c85b4e8a59": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "eb1f9408c3f84866487b4d434bf5737ec2f47113d2290317709c884cea1b3d48"
    },
    "60c509fc00a1ee5f830c1f4c3fa957ae7d13e01d9b93552de92c7d9842abddde": {
      "translations": {
        "python": {
          "source": "layer = lambda_.LayerVersion(stack, \"MyLayer\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"layer-code\")),\n    compatible_runtimes=[lambda_.Runtime.NODEJS_10_X],\n    license=\"Apache-2.0\",\n    description=\"A layer to test the L2 construct\"\n)\n\n# To grant usage by other AWS accounts\nlayer.add_permission(\"remote-account-grant\", account_id=aws_account_id)\n\n# To grant usage to all accounts in some AWS Ogranization\n# layer.grantUsage({ accountId: '*', organizationId });\n\nlambda_.Function(stack, \"MyLayeredLambda\",\n    code=lambda_.InlineCode(\"foo\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_10_X,\n    layers=[layer]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LayerVersion layer = new LayerVersion(stack, \"MyLayer\", new LayerVersionProps {\n    Code = Code.FromAsset(Join(__dirname, \"layer-code\")),\n    CompatibleRuntimes = new [] { Runtime.NODEJS_10_X },\n    License = \"Apache-2.0\",\n    Description = \"A layer to test the L2 construct\"\n});\n\n// To grant usage by other AWS accounts\nlayer.AddPermission(\"remote-account-grant\", new LayerVersionPermission { AccountId = awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nnew Function(stack, \"MyLayeredLambda\", new FunctionProps {\n    Code = new InlineCode(\"foo\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_10_X,\n    Layers = new [] { layer }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion layer = LayerVersion.Builder.create(stack, \"MyLayer\")\n        .code(Code.fromAsset(join(__dirname, \"layer-code\")))\n        .compatibleRuntimes(List.of(Runtime.NODEJS_10_X))\n        .license(\"Apache-2.0\")\n        .description(\"A layer to test the L2 construct\")\n        .build();\n\n// To grant usage by other AWS accounts\nlayer.addPermission(\"remote-account-grant\", LayerVersionPermission.builder().accountId(awsAccountId).build());\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\nFunction.Builder.create(stack, \"MyLayeredLambda\")\n        .code(new InlineCode(\"foo\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_10_X)\n        .layers(List.of(layer))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionPermission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.InlineCode",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionPermission",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_10_X"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as lambda from '../lib';\n\nconst app = new cdk.App();\n\nconst stack = new cdk.Stack(app, 'aws-cdk-layer-version-1');\n\n// Just for the example - granting to the current account is not necessary.\nconst awsAccountId = stack.account;\n\n/// !show\nconst layer = new lambda.LayerVersion(stack, 'MyLayer', {\n  code: lambda.Code.fromAsset(path.join(__dirname, 'layer-code')),\n  compatibleRuntimes: [lambda.Runtime.NODEJS_10_X],\n  license: 'Apache-2.0',\n  description: 'A layer to test the L2 construct',\n});\n\n// To grant usage by other AWS accounts\nlayer.addPermission('remote-account-grant', { accountId: awsAccountId });\n\n// To grant usage to all accounts in some AWS Ogranization\n// layer.grantUsage({ accountId: '*', organizationId });\n\nnew lambda.Function(stack, 'MyLayeredLambda', {\n  code: new lambda.InlineCode('foo'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_10_X,\n  layers: [layer],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "192": 2,
        "193": 3,
        "194": 11,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 9
      },
      "fqnsFingerprint": "8d7b7ef26cc612f7a19875030389ab19965e354a734a11137c1dca6cffa463f2"
    },
    "551599136aa96644468bdd9eb668a734ef18ea26987f7c3eece82834dba5da8b": {
      "translations": {
        "python": {
          "source": "lambda_.LayerVersion(self, \"MyLayer\",\n    removal_policy=RemovalPolicy.RETAIN,\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    compatible_architectures=[lambda_.Architecture.X86_64, lambda_.Architecture.ARM_64]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new LayerVersion(this, \"MyLayer\", new LayerVersionProps {\n    RemovalPolicy = RemovalPolicy.RETAIN,\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    CompatibleArchitectures = new [] { Architecture.X86_64, Architecture.ARM_64 }\n});",
          "version": "1"
        },
        "java": {
          "source": "LayerVersion.Builder.create(this, \"MyLayer\")\n        .removalPolicy(RemovalPolicy.RETAIN)\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .compatibleArchitectures(List.of(Architecture.X86_64, Architecture.ARM_64))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.LayerVersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Architecture",
        "@aws-cdk/aws-lambda.Architecture#ARM_64",
        "@aws-cdk/aws-lambda.Architecture#X86_64",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.LayerVersion",
        "@aws-cdk/aws-lambda.LayerVersionProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew lambda.LayerVersion(this, 'MyLayer', {\n  removalPolicy: RemovalPolicy.RETAIN,\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  compatibleArchitectures: [lambda.Architecture.X86_64, lambda.Architecture.ARM_64],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 9,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "eb1f9408c3f84866487b4d434bf5737ec2f47113d2290317709c884cea1b3d48"
    },
    "c76133ec5bcfda751b72f45626f595f0a02ef3e3970ff6d1281c4dc87ac39698": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\nprincipal = iam.ServicePrincipal(\"my-service\")\n\nfn.grant_invoke(principal)\n\n# Equivalent to:\nfn.add_permission(\"my-service Invocation\",\n    principal=principal\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.GrantInvoke(principal);\n\n// Equivalent to:\nfn.AddPermission(\"my-service Invocation\", new Permission {\n    Principal = principal\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nServicePrincipal principal = new ServicePrincipal(\"my-service\");\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission(\"my-service Invocation\", Permission.builder()\n        .principal(principal)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Permission"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-lambda.FunctionBase#addPermission",
        "@aws-cdk/aws-lambda.FunctionBase#grantInvoke",
        "@aws-cdk/aws-lambda.Permission"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst principal = new iam.ServicePrincipal('my-service');\n\nfn.grantInvoke(principal);\n\n// Equivalent to:\nfn.addPermission('my-service Invocation', {\n  principal: principal,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9e0ab73e365ed35e41260a6781de5e5517554d59ac3dfedec4b3f6c175d4058c"
    },
    "510511db25e73e3b6bab8f1311eaa082a8bd19135c0f2c8d396fbd82c8e22d27": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Runtime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "94a70f17abb7e861361c41c72fae3e4ffb5058a27bf076a4bfabdd3748e44aae": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_secretsmanager import Secret\nfrom aws_cdk.aws_lambda_event_sources import SelfManagedKafkaEventSource\n\n# The secret that allows access to your self hosted Kafka cluster\n# secret is of type Secret\n\n# my_function is of type Function\n\n\n# The list of Kafka brokers\nbootstrap_servers = [\"kafka-broker:9092\"]\n\n# The Kafka topic you want to subscribe to\ntopic = \"some-cool-topic\"\nmy_function.add_event_source(SelfManagedKafkaEventSource(\n    bootstrap_servers=bootstrap_servers,\n    topic=topic,\n    secret=secret,\n    batch_size=100,  # default\n    starting_position=lambda_.StartingPosition.TRIM_HORIZON\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;\nusing Amazon.CDK.AWS.Lambda.EventSources;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nstring[] bootstrapServers = new [] { \"kafka-broker:9092\" };\n\n// The Kafka topic you want to subscribe to\nstring topic = \"some-cool-topic\";\nmyFunction.AddEventSource(new SelfManagedKafkaEventSource(new SelfManagedKafkaEventSourceProps {\n    BootstrapServers = bootstrapServers,\n    Topic = topic,\n    Secret = secret,\n    BatchSize = 100,  // default\n    StartingPosition = StartingPosition.TRIM_HORIZON\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.Secret;\nimport software.amazon.awscdk.services.lambda.eventsources.SelfManagedKafkaEventSource;\n\n// The secret that allows access to your self hosted Kafka cluster\nSecret secret;\n\nFunction myFunction;\n\n\n// The list of Kafka brokers\nString[] bootstrapServers = List.of(\"kafka-broker:9092\");\n\n// The Kafka topic you want to subscribe to\nString topic = \"some-cool-topic\";\nmyFunction.addEventSource(SelfManagedKafkaEventSource.Builder.create()\n        .bootstrapServers(bootstrapServers)\n        .topic(topic)\n        .secret(secret)\n        .batchSize(100) // default\n        .startingPosition(StartingPosition.TRIM_HORIZON)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.StartingPosition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSource",
        "@aws-cdk/aws-lambda-event-sources.SelfManagedKafkaEventSourceProps",
        "@aws-cdk/aws-lambda.FunctionBase#addEventSource",
        "@aws-cdk/aws-lambda.IEventSource",
        "@aws-cdk/aws-lambda.StartingPosition",
        "@aws-cdk/aws-lambda.StartingPosition#TRIM_HORIZON",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Secret } from '@aws-cdk/aws-secretsmanager';\nimport { SelfManagedKafkaEventSource } from '@aws-cdk/aws-lambda-event-sources';\n\n// The secret that allows access to your self hosted Kafka cluster\ndeclare const secret: Secret;\n\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sqs from '@aws-cdk/aws-sqs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// The list of Kafka brokers\nconst bootstrapServers = ['kafka-broker:9092'];\n\n// The Kafka topic you want to subscribe to\nconst topic = 'some-cool-topic';\nmyFunction.addEventSource(new SelfManagedKafkaEventSource({\n  bootstrapServers: bootstrapServers,\n  topic: topic,\n  secret: secret,\n  batchSize: 100, // default\n  startingPosition: lambda.StartingPosition.TRIM_HORIZON,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8b5fca06071024358b50c52f66dae30bcf88a3c2dc4b97a8803ea164b945c2e3"
    },
    "69c78d8f67ec20076d54ffdd942f45b0ff3b73c1333e0c41a3f254ae93fb5822": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    tracing=lambda_.Tracing.ACTIVE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"),\n    Tracing = Tracing.ACTIVE\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = function(event, ctx, cb) { return cb(null, \\\"hi\\\"); }\"))\n        .tracing(Tracing.ACTIVE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Tracing"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Tracing",
        "@aws-cdk/aws-lambda.Tracing#ACTIVE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline('exports.handler = function(event, ctx, cb) { return cb(null, \"hi\"); }'),\n  tracing: lambda.Tracing.ACTIVE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 1,
        "193": 1,
        "194": 7,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "f1d74399eac82b5d305f3bce24e33ce4817e7da2e4a0d865a2b8d2ea08891058"
    },
    "180367490e0f9035516b53d1b5c30a5251b2cac4110038f51a7f63e1c3d894bb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.UtilizationScalingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "9afe4bcc5658991e0b6533c4f8ffa5a3e8a5d232cb26ec96c862ed074df547e6": {
      "translations": {
        "python": {
          "source": "lambda_code = lambda_.Code.from_cfn_parameters()\nfunc = lambda_.Function(self, \"Lambda\",\n    code=lambda_code,\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n# used to make sure each CDK synthesis produces a different Version\nversion = func.add_version(\"NewVersion\")\nalias = lambda_.Alias(self, \"LambdaAlias\",\n    alias_name=\"Prod\",\n    version=version\n)\n\ncodedeploy.LambdaDeploymentGroup(self, \"DeploymentGroup\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParametersCode lambdaCode = Code.FromCfnParameters();\nFunction func = new Function(this, \"Lambda\", new FunctionProps {\n    Code = lambdaCode,\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.AddVersion(\"NewVersion\");\nAlias alias = new Alias(this, \"LambdaAlias\", new AliasProps {\n    AliasName = \"Prod\",\n    Version = version\n});\n\nnew LambdaDeploymentGroup(this, \"DeploymentGroup\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnParametersCode lambdaCode = Code.fromCfnParameters();\nFunction func = Function.Builder.create(this, \"Lambda\")\n        .code(lambdaCode)\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n// used to make sure each CDK synthesis produces a different Version\nVersion version = func.addVersion(\"NewVersion\");\nAlias alias = Alias.Builder.create(this, \"LambdaAlias\")\n        .aliasName(\"Prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.Version"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.CfnParametersCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromCfnParameters",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaCode = lambda.Code.fromCfnParameters();\nconst func = new lambda.Function(this, 'Lambda', {\n  code: lambdaCode,\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n// used to make sure each CDK synthesis produces a different Version\nconst version = func.addVersion('NewVersion');\nconst alias = new lambda.Alias(this, 'LambdaAlias', {\n  aliasName: 'Prod',\n  version,\n});\n\nnew codedeploy.LambdaDeploymentGroup(this, 'DeploymentGroup', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 29,
        "104": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "282": 2
      },
      "fqnsFingerprint": "bc0e57eb8eff7a57121828a0bacf47300c5183978d8ab7667ead6932da3cb005"
    },
    "3fe74ed1d13df4f0355e1ede672bf301b9b6c034a6de3e6c823cb49ad2c71a67": {
      "translations": {
        "python": {
          "source": "fn = lambda_.Function(self, \"MyFunction\",\n    current_version_options=lambda.VersionOptions(\n        removal_policy=RemovalPolicy.RETAIN,  # retain old versions\n        retry_attempts=1\n    ),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\n\nfn.current_version.add_alias(\"live\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn = new Function(this, \"MyFunction\", new FunctionProps {\n    CurrentVersionOptions = new VersionOptions {\n        RemovalPolicy = RemovalPolicy.RETAIN,  // retain old versions\n        RetryAttempts = 1\n    },\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\n\nfn.CurrentVersion.AddAlias(\"live\");",
          "version": "1"
        },
        "java": {
          "source": "Function fn = Function.Builder.create(this, \"MyFunction\")\n        .currentVersionOptions(VersionOptions.builder()\n                .removalPolicy(RemovalPolicy.RETAIN) // retain old versions\n                .retryAttempts(1)\n                .build())\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\n\nfn.currentVersion.addAlias(\"live\");",
          "version": "1"
        },
        "$": {
          "source": "const fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-lambda.Version#addAlias",
        "@aws-cdk/aws-lambda.VersionOptions",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#RETAIN"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fn = new lambda.Function(this, 'MyFunction', {\n  currentVersionOptions: {\n    removalPolicy: RemovalPolicy.RETAIN, // retain old versions\n    retryAttempts: 1,                   // async retry attempts\n  },\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\nfn.currentVersion.addAlias('live');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 23,
        "104": 1,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "e83976d4145d4d6eddd8bfba75d663b1fc582c5c6f6b9adee15270db06961a08"
    },
    "a30764a08c9b420dcf017f8500c3ea2053e13f94064727131521eecca4c7334d": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\nversion = lambda_.Version(self, \"MyVersion\",\n    lambda_=fn\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nVersion version = new Version(this, \"MyVersion\", new VersionProps {\n    Lambda = fn\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nVersion version = Version.Builder.create(this, \"MyVersion\")\n        .lambda(fn)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-lambda.VersionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/aws-lambda.VersionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = new lambda.Version(this, 'MyVersion', {\n  lambda: fn,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ff1e897d2b95235bb0e0eb677fdc1d151f519bb0a15621cb365cb1c5958bcf36"
    }
  }
}
