{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "7cf49f40f663c44c6234d9e5bf65b18c13a6e7329610df601d01a65a8bccd5d7": {
      "translations": {
        "python": {
          "source": "# repo is of type Repository\n# project is of type Project\n\n\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project),\n    branches=[\"master\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository repo;\nProject project;\n\n\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository repo;\nProject project;\n\n\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const repo: codecommit.Repository;\ndeclare const project: codebuild.Project;\n\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master']\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repo: codecommit.Repository;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n  branches: ['master']\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7836c55dd508d8d12107bc65d3a1f00cd9a3cf2e785bd10f38710dd51275faad"
    },
    "0ff6e72a22dbd36dacd690373116c162c1bd2b4ff43d7d01218d1ac6811c0ab7": {
      "translations": {
        "python": {
          "source": "# on_commit_rule is of type Rule\n# topic is of type Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_text(f\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromText($\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromText(String.format(\"A commit was pushed to the repository %s on branch %s\", ReferenceEvent.getRepositoryName(), ReferenceEvent.getReferenceName())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromText",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "211": 1,
        "221": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cd59e1ea8abe3917c3c05f3d8a4e12b6275c66039dd638271185a739309ba2ce"
    },
    "8acd9a78f8d185adde2917387febff93e5528fbbc486f4e4718724eadc295dca": {
      "translations": {
        "python": {
          "source": "# on_commit_rule is of type Rule\n# topic is of type Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_object({\n        \"DataType\": f\"custom_{events.EventField.fromPath('$.detail-type')}\"\n    })\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromObject(new Dictionary<string, string> {\n        { \"DataType\", $\"custom_{events.EventField.fromPath('$.detail-type')}\" }\n    })\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromObject(Map.of(\n                \"DataType\", String.format(\"custom_%s\", EventField.fromPath(\"$.detail-type\")))))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromObject(\n    {\n      DataType: `custom_${events.EventField.fromPath('$.detail-type')}`\n    }\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromObject(\n    {\n      DataType: `custom_${events.EventField.fromPath('$.detail-type')}`\n    }\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "15": 1,
        "17": 1,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "211": 1,
        "221": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7cde233234aa8a0454b964d8c9228358ea574ea1a31ca07cd2f87c94b161fee0"
    },
    "eccf9afcaf8de6691b31152d3661bc14dc7cee02f8010f72354b48b5fa5ed3d8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# role is of type Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 111
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ccb2f08773275c8f39e980fe2b46b2e17c2a26e79da3f05081f5623aa5528260"
    },
    "fc9533bb39108e00dfa980b5b1c40dfe71ad2e992477c5bac2208bf6ca78c9d5": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# role is of type Role\n\n\nplatform_version = ecs.FargatePlatformVersion.VERSION1_4\necs_task_target = targets.EcsTask(cluster=cluster, task_definition=task_definition, role=role, platform_version=platform_version)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nFargatePlatformVersion platformVersion = FargatePlatformVersion.VERSION1_4;\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role, PlatformVersion = platformVersion });",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nFargatePlatformVersion platformVersion = FargatePlatformVersion.VERSION1_4;\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).platformVersion(platformVersion).build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const role: iam.Role;\n\nconst platformVersion = ecs.FargatePlatformVersion.VERSION1_4;\nconst ecsTaskTarget = new targets.EcsTask({ cluster, taskDefinition, role, platformVersion });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 131
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#VERSION1_4",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst platformVersion = ecs.FargatePlatformVersion.VERSION1_4;\nconst ecsTaskTarget = new targets.EcsTask({ cluster, taskDefinition, role, platformVersion });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "5df1b71733aad212e5d61a4262be89550943644d7ee3e4f0c13eb1da461f3bf6"
    },
    "cb3ed42d1e89aa602607c9052cd892132b3e488d3a8a51142ae4d813b3e1bcc7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Environment, Environment\nfrom aws_cdk.core import App, Stack\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\napp = App()\n\naccount1 = \"11111111111\"\naccount2 = \"22222222222\"\n\nstack1 = Stack(app, \"Stack1\", env=Environment(account=account1, region=\"us-west-1\"))\nrepo = codecommit.Repository(stack1, \"Repository\",\n    repository_name=\"myrepository\"\n)\n\nstack2 = Stack(app, \"Stack2\", env=Environment(account=account2, region=\"us-east-1\"))\nproject = codebuild.Project(stack2, \"Project\")\n\nrepo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nApp app = new App();\n\nstring account1 = \"11111111111\";\nstring account2 = \"22222222222\";\n\nStack stack1 = new Stack(app, \"Stack1\", new StackProps { Env = new Environment { Account = account1, Region = \"us-west-1\" } });\nRepository repo = new Repository(stack1, \"Repository\", new RepositoryProps {\n    RepositoryName = \"myrepository\"\n});\n\nStack stack2 = new Stack(app, \"Stack2\", new StackProps { Env = new Environment { Account = account2, Region = \"us-east-1\" } });\nProject project = new Project(stack2, \"Project\", new ProjectProps { });\n\nrepo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nApp app = new App();\n\nString account1 = \"11111111111\";\nString account2 = \"22222222222\";\n\nStack stack1 = Stack.Builder.create(app, \"Stack1\").env(Environment.builder().account(account1).region(\"us-west-1\").build()).build();\nRepository repo = Repository.Builder.create(stack1, \"Repository\")\n        .repositoryName(\"myrepository\")\n        .build();\n\nStack stack2 = Stack.Builder.create(app, \"Stack2\").env(Environment.builder().account(account2).region(\"us-east-1\").build()).build();\nProject project = Project.Builder.create(stack2, \"Project\").build();\n\nrepo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { App, Stack } from '@aws-cdk/core';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\nconst app = new App();\n\nconst account1 = '11111111111';\nconst account2 = '22222222222';\n\nconst stack1 = new Stack(app, 'Stack1', { env: { account: account1, region: 'us-west-1' } });\nconst repo = new codecommit.Repository(stack1, 'Repository', {\n  repositoryName: 'myrepository',\n});\n\nconst stack2 = new Stack(app, 'Stack2', { env: { account: account2, region: 'us-east-1' } });\nconst project = new codebuild.Project(stack2, 'Project', {\n  // ...\n});\n\nrepo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 161
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import { App, Stack } from '@aws-cdk/core';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\nconst app = new App();\n\nconst account1 = '11111111111';\nconst account2 = '22222222222';\n\nconst stack1 = new Stack(app, 'Stack1', { env: { account: account1, region: 'us-west-1' } });\nconst repo = new codecommit.Repository(stack1, 'Repository', {\n  repositoryName: 'myrepository',\n});\n\nconst stack2 = new Stack(app, 'Stack2', { env: { account: account2, region: 'us-east-1' } });\nconst project = new codebuild.Project(stack2, 'Project', {\n  // ...\n});\n\nrepo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
      "syntaxKindCounter": {
        "10": 14,
        "75": 38,
        "193": 7,
        "194": 4,
        "196": 1,
        "197": 6,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "254": 4,
        "255": 4,
        "256": 3,
        "257": 1,
        "258": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "70c1eb52b0c292ebd218f76e656f4cbfddbc143b8547c69d49da0054115eafa4"
    },
    "9b906e679698ac5a36a82dbffb362b7397ae5c64753e3a4b41310b70c1be19a7": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 202
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "ef2de0f3d9653a88d51d0718b93870bc1784e389ec8b1ad6c7f77e0c00aa7088"
    },
    "8b5cf83c5bb4b90175ce2c38aaa59de642928ef4d0c277ccebc7f0e17d8196fa": {
      "translations": {
        "python": {
          "source": "# lambda_function is of type Function\n\n\nevent_bus = events.EventBus.from_event_bus_arn(self, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\")\n\n# now you can just call methods on the eventbus\nevent_bus.grant_put_events_to(lambda_function)",
          "version": "1"
        },
        "csharp": {
          "source": "Function lambdaFunction;\n\n\nIEventBus eventBus = EventBus.FromEventBusArn(this, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\");\n\n// now you can just call methods on the eventbus\neventBus.GrantPutEventsTo(lambdaFunction);",
          "version": "1"
        },
        "java": {
          "source": "Function lambdaFunction;\n\n\nIEventBus eventBus = EventBus.fromEventBusArn(this, \"ImportedEventBus\", \"arn:aws:events:us-east-1:111111111:event-bus/my-event-bus\");\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);",
          "version": "1"
        },
        "$": {
          "source": "declare const lambdaFunction: lambda.Function;\n\nconst eventBus = events.EventBus.fromEventBusArn(this, 'ImportedEventBus', 'arn:aws:events:us-east-1:111111111:event-bus/my-event-bus');\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events"
        },
        "field": {
          "field": "markdown",
          "line": 224
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IEventBus#grantPutEventsTo",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const lambdaFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst eventBus = events.EventBus.fromEventBusArn(this, 'ImportedEventBus', 'arn:aws:events:us-east-1:111111111:event-bus/my-event-bus');\n\n// now you can just call methods on the eventbus\neventBus.grantPutEventsTo(lambdaFunction);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "5ebaeeb0e0b9919f40f6be52f9abaece537321c57f9ae9e3d76c7d55b662ee5e"
    },
    "4b70a6d11a76731ce19aaf470539ae2cc2512ff10d725afd93db88294d7b4694": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.BaseArchiveProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "ef2de0f3d9653a88d51d0718b93870bc1784e389ec8b1ad6c7f77e0c00aa7088"
    },
    "47d3dbb61e522cf657115dc4d4e2684819fc0f49974817a4090892e137d3d54f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn is of type Function\n\nrule = events.Rule(self, \"Schedule Rule\",\n    schedule=events.Schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.LambdaFunction(fn))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nFunction fn;\n\nRule rule = new Rule(this, \"Schedule Rule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" })\n});\nrule.AddTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nFunction fn;\n\nRule rule = Rule.Builder.create(this, \"Schedule Rule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .build();\nrule.addTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.CronOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d30d17b2c1e25e62ef3bc58d202d862bfd6262a07fbcc411b0f0fcb7feb8f9f6"
    },
    "01c3942e14f924ae6347ed1810bccb1f8ef643c5ec532dbf3ffba192cb3febca": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventBus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "ef2de0f3d9653a88d51d0718b93870bc1784e389ec8b1ad6c7f77e0c00aa7088"
    },
    "804ed44f6e80f96fdc2f0c88bed86c1268ef5d06059432201ac44935040375d8": {
      "translations": {
        "python": {
          "source": "bus = events.EventBus(self, \"bus\",\n    event_bus_name=\"MyCustomEventBus\"\n)\n\nbus.archive(\"MyArchive\",\n    archive_name=\"MyCustomEventBusArchive\",\n    description=\"MyCustomerEventBus Archive\",\n    event_pattern=events.EventPattern(\n        account=[Stack.of(self).account]\n    ),\n    retention=Duration.days(365)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EventBus bus = new EventBus(this, \"bus\", new EventBusProps {\n    EventBusName = \"MyCustomEventBus\"\n});\n\nbus.Archive(\"MyArchive\", new BaseArchiveProps {\n    ArchiveName = \"MyCustomEventBusArchive\",\n    Description = \"MyCustomerEventBus Archive\",\n    EventPattern = new EventPattern {\n        Account = new [] { Stack.Of(this).Account }\n    },\n    Retention = Duration.Days(365)\n});",
          "version": "1"
        },
        "java": {
          "source": "EventBus bus = EventBus.Builder.create(this, \"bus\")\n        .eventBusName(\"MyCustomEventBus\")\n        .build();\n\nbus.archive(\"MyArchive\", BaseArchiveProps.builder()\n        .archiveName(\"MyCustomEventBusArchive\")\n        .description(\"MyCustomerEventBus Archive\")\n        .eventPattern(EventPattern.builder()\n                .account(List.of(Stack.of(this).getAccount()))\n                .build())\n        .retention(Duration.days(365))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventBusProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events.BaseArchiveProps",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBusProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Stack#account",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bus = new events.EventBus(this, 'bus', {\n  eventBusName: 'MyCustomEventBus'\n});\n\nbus.archive('MyArchive', {\n  archiveName: 'MyCustomEventBusArchive',\n  description: 'MyCustomerEventBus Archive',\n  eventPattern: {\n    account: [Stack.of(this).account],\n  },\n  retention: Duration.days(365),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "ef2de0f3d9653a88d51d0718b93870bc1784e389ec8b1ad6c7f77e0c00aa7088"
    },
    "d70b1feb5e6164126b34a995afe6975c1f20117679b58ee6652b99cb7a639b5c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.EventPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "9f65c20a7b2243b1f9f4ba970dcd1c6f6a1e246c75edab99a27ddbedb584e666": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_config as config\nimport aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_events_targets as targets\n\n# Lambda function containing logic that evaluates compliance with the rule.\neval_compliance_fn = lambda_.Function(self, \"CustomFunction\",\n    code=lambda_.AssetCode.from_inline(\"exports.handler = (event) => console.log(event);\"),\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X\n)\n\n# A custom rule that runs on configuration changes of EC2 instances\ncustom_rule = config.CustomRule(self, \"Custom\",\n    configuration_changes=True,\n    lambda_function=eval_compliance_fn,\n    rule_scope=config.RuleScope.from_resource([config.ResourceType.EC2_INSTANCE])\n)\n\n# A rule to detect stack drifts\ndrift_rule = config.CloudFormationStackDriftDetectionCheck(self, \"Drift\")\n\n# Topic to which compliance notification events will be published\ncompliance_topic = sns.Topic(self, \"ComplianceTopic\")\n\n# Send notification on compliance change events\ndrift_rule.on_compliance_change(\"ComplianceChange\",\n    target=targets.SnsTopic(compliance_topic)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Config;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Events.Targets;\n\n// Lambda function containing logic that evaluates compliance with the rule.\nFunction evalComplianceFn = new Function(this, \"CustomFunction\", new FunctionProps {\n    Code = AssetCode.FromInline(\"exports.handler = (event) => console.log(event);\"),\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nCustomRule customRule = new CustomRule(this, \"Custom\", new CustomRuleProps {\n    ConfigurationChanges = true,\n    LambdaFunction = evalComplianceFn,\n    RuleScope = RuleScope.FromResource(new [] { ResourceType.EC2_INSTANCE })\n});\n\n// A rule to detect stack drifts\nCloudFormationStackDriftDetectionCheck driftRule = new CloudFormationStackDriftDetectionCheck(this, \"Drift\");\n\n// Topic to which compliance notification events will be published\nTopic complianceTopic = new Topic(this, \"ComplianceTopic\");\n\n// Send notification on compliance change events\ndriftRule.OnComplianceChange(\"ComplianceChange\", new OnEventOptions {\n    Target = new SnsTopic(complianceTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.config.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\n// Lambda function containing logic that evaluates compliance with the rule.\nFunction evalComplianceFn = Function.Builder.create(this, \"CustomFunction\")\n        .code(AssetCode.fromInline(\"exports.handler = (event) => console.log(event);\"))\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .build();\n\n// A custom rule that runs on configuration changes of EC2 instances\nCustomRule customRule = CustomRule.Builder.create(this, \"Custom\")\n        .configurationChanges(true)\n        .lambdaFunction(evalComplianceFn)\n        .ruleScope(RuleScope.fromResource(List.of(ResourceType.EC2_INSTANCE)))\n        .build();\n\n// A rule to detect stack drifts\nCloudFormationStackDriftDetectionCheck driftRule = new CloudFormationStackDriftDetectionCheck(this, \"Drift\");\n\n// Topic to which compliance notification events will be published\nTopic complianceTopic = new Topic(this, \"ComplianceTopic\");\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange(\"ComplianceChange\", OnEventOptions.builder()\n        .target(new SnsTopic(complianceTopic))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as config from '@aws-cdk/aws-config';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\n// Lambda function containing logic that evaluates compliance with the rule.\nconst evalComplianceFn = new lambda.Function(this, 'CustomFunction', {\n  code: lambda.AssetCode.fromInline('exports.handler = (event) => console.log(event);'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nconst customRule = new config.CustomRule(this, 'Custom', {\n  configurationChanges: true,\n  lambdaFunction: evalComplianceFn,\n  ruleScope: config.RuleScope.fromResource([config.ResourceType.EC2_INSTANCE]),\n});\n\n// A rule to detect stack drifts\nconst driftRule = new config.CloudFormationStackDriftDetectionCheck(this, 'Drift');\n\n// Topic to which compliance notification events will be published\nconst complianceTopic = new sns.Topic(this, 'ComplianceTopic');\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange('ComplianceChange', {\n  target: new targets.SnsTopic(complianceTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.OnEventOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-config.CloudFormationStackDriftDetectionCheck",
        "@aws-cdk/aws-config.CustomRule",
        "@aws-cdk/aws-config.CustomRuleProps",
        "@aws-cdk/aws-config.ResourceType",
        "@aws-cdk/aws-config.ResourceType#EC2_INSTANCE",
        "@aws-cdk/aws-config.RuleScope",
        "@aws-cdk/aws-config.RuleScope#fromResource",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "import * as config from '@aws-cdk/aws-config';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\n// Lambda function containing logic that evaluates compliance with the rule.\nconst evalComplianceFn = new lambda.Function(this, 'CustomFunction', {\n  code: lambda.AssetCode.fromInline('exports.handler = (event) => console.log(event);'),\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n});\n\n// A custom rule that runs on configuration changes of EC2 instances\nconst customRule = new config.CustomRule(this, 'Custom', {\n  configurationChanges: true,\n  lambdaFunction: evalComplianceFn,\n  ruleScope: config.RuleScope.fromResource([config.ResourceType.EC2_INSTANCE]),\n});\n\n// A rule to detect stack drifts\nconst driftRule = new config.CloudFormationStackDriftDetectionCheck(this, 'Drift');\n\n// Topic to which compliance notification events will be published\nconst complianceTopic = new sns.Topic(this, 'ComplianceTopic');\n\n// Send notification on compliance change events\ndriftRule.onComplianceChange('ComplianceChange', {\n  target: new targets.SnsTopic(complianceTopic),\n});",
      "syntaxKindCounter": {
        "10": 11,
        "75": 41,
        "104": 4,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 14,
        "196": 3,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "82cea3f56afdfee2fc7feed0bfd06c12cfcff866c15112109e07d2158d1dde40"
    },
    "34f066f4b900c44c7a1b2bafa3efa6ef014273136415e853e3b6ddc13e3cce1b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Rule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "bc4d6e7428650dee4255e2e0a99910301f85bb531721840dc318962a986a094b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "86172b774b21d13cca935e003b277b5287d8e872d787a6604906966b0303d0da": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10))),\n    role=role\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) }),\n    Role = role\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .role(role)\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.RuleTargetInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 47,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e31ea2a6c26e19107ff15745d0cd4830ffedba6d875ca952aa22de4fa2389e31"
    },
    "02ee28a7d2569dd027b5b18683700d69e7f36aebd4c8afd1c6bcbe4e920a082e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n# fn is of type Function\n\nrule = events.Rule(self, \"Schedule Rule\",\n    schedule=events.Schedule.cron(minute=\"0\", hour=\"4\")\n)\nrule.add_target(targets.LambdaFunction(fn))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\n\nFunction fn;\n\nRule rule = new Rule(this, \"Schedule Rule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" })\n});\nrule.AddTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nFunction fn;\n\nRule rule = Rule.Builder.create(this, \"Schedule Rule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .build();\nrule.addTarget(new LambdaFunction(fn));",
          "version": "1"
        },
        "$": {
          "source": "import * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events.Schedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst rule = new events.Rule(this, 'Schedule Rule', {\n schedule: events.Schedule.cron({ minute: '0', hour: '4' }),\n});\nrule.addTarget(new targets.LambdaFunction(fn));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "d30d17b2c1e25e62ef3bc58d202d862bfd6262a07fbcc411b0f0fcb7feb8f9f6"
    }
  }
}
