{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "edabba41c5da9d9ee34bd56c11f3da159cc14f27a29dc722a4daf6cacd2c1050": {
      "translations": {
        "python": {
          "source": "role = Role(self, \"MyRole\",\n    assumed_by=ServicePrincipal(\"sns.amazonaws.com\")\n)\n\nrole.add_to_policy(PolicyStatement(\n    resources=[\"*\"],\n    actions=[\"lambda:InvokeFunction\"]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"sns.amazonaws.com\")\n});\n\nrole.AddToPolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { \"*\" },\n    Actions = new [] { \"lambda:InvokeFunction\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"sns.amazonaws.com\"))\n        .build();\n\nrole.addToPolicy(PolicyStatement.Builder.create()\n        .resources(List.of(\"*\"))\n        .actions(List.of(\"lambda:InvokeFunction\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    const role = new Role(this, 'MyRole', {\n      assumedBy: new ServicePrincipal('sns.amazonaws.com'),\n    });\n\n    role.addToPolicy(new PolicyStatement({\n      resources: ['*'],\n      actions: ['lambda:InvokeFunction'],\n    }));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 17
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#addToPolicy",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "import * as constructs from 'constructs';\nimport { PolicyStatement, Role, ServicePrincipal } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const role = new Role(this, 'MyRole', {\n      assumedBy: new ServicePrincipal('sns.amazonaws.com'),\n    });\n\n    role.addToPolicy(new PolicyStatement({\n      resources: ['*'],\n      actions: ['lambda:InvokeFunction'],\n    }));\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "4e05f797bc5494804ac53443cc71352006efc628da6bdb5c8e361ff0da077d55"
    },
    "95bfd3a0651e54bfac2a5c45e1832f23796a0a7e208927f401a14b96ed02fd3c": {
      "translations": {
        "python": {
          "source": "user = User(self, \"MyUser\", password=cdk.SecretValue.plain_text(\"1234\"))\ngroup = Group(self, \"MyGroup\")\n\npolicy = Policy(self, \"MyPolicy\")\npolicy.attach_to_user(user)\ngroup.attach_inline_policy(policy)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\", new UserProps { Password = SecretValue.PlainText(\"1234\") });\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.AttachToUser(user);\ngroup.AttachInlinePolicy(policy);",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"MyUser\").password(SecretValue.plainText(\"1234\")).build();\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.attachToUser(user);\ngroup.attachInlinePolicy(policy);",
          "version": "1"
        },
        "$": {
          "source": "    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 31
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.Policy#attachToUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#plainText"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport { Group, Policy, User } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 3,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "02a97f11ef79d6c23eea9c9567fb21ad9e9950565e2a40d118e791cd96885858"
    },
    "fd41528b3cbd6b346e84f9eee59ae90ac0a3d9192aab58a04930b1ba8572c469": {
      "translations": {
        "python": {
          "source": "group = Group(self, \"MyGroup\")\ngroup.add_managed_policy(ManagedPolicy.from_aws_managed_policy_name(\"AdministratorAccess\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Group group = new Group(this, \"MyGroup\");\ngroup.AddManagedPolicy(ManagedPolicy.FromAwsManagedPolicyName(\"AdministratorAccess\"));",
          "version": "1"
        },
        "java": {
          "source": "Group group = new Group(this, \"MyGroup\");\ngroup.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName(\"AdministratorAccess\"));",
          "version": "1"
        },
        "$": {
          "source": "const group = new Group(this, 'MyGroup');\ngroup.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName('AdministratorAccess'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 42
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.Group#addManagedPolicy",
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName"
      ],
      "fullSource": "import * as constructs from 'constructs';\nimport { Group, ManagedPolicy } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const group = new Group(this, 'MyGroup');\n    group.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName('AdministratorAccess'));\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "2f8a27b9411b1306199439649c64caf039d254e91f6a4f39ec4dbecfaa7c4b47"
    },
    "53fe6253cd9d35289ebc06b836e7a1a91e19da4c47eb8fb38cb71d6a6c99d5f3": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n# table is of type Table\n\n\ntable.grant_write_data(fn)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\nTable table;\n\n\ntable.GrantWriteData(fn);",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\nTable table;\n\n\ntable.grantWriteData(fn);",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\ndeclare const table: dynamodb.Table;\n\ntable.grantWriteData(fn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntable.grantWriteData(fn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "7808076bfee1b7971cc05930d4cebf8507933ada771a07e618c45d2a7dcf081f": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n# table is of type Table\n\n\ntable.grant(fn, \"dynamodb:PutItem\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\nTable table;\n\n\ntable.Grant(fn, \"dynamodb:PutItem\");",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\nTable table;\n\n\ntable.grant(fn, \"dynamodb:PutItem\");",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\ndeclare const table: dynamodb.Table;\n\ntable.grant(fn, 'dynamodb:PutItem');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 60
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntable.grant(fn, 'dynamodb:PutItem');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "1afb0ac33880703dd032b083bc9d22bacd2581ea5480e33204c5f6689bad8cef": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"codepipeline.amazonaws.com\"),\n    # custom description if desired\n    description=\"This is a custom role...\"\n)\n\ncodepipeline.Pipeline(self, \"Pipeline\",\n    # Give the Pipeline an immutable view of the Role\n    role=role.without_policy_updates()\n)\n\n# You now have to manage the Role policies yourself\nrole.add_to_policy(iam.PolicyStatement(\n    actions=[],\n    resources=[]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"codepipeline.amazonaws.com\"),\n    // custom description if desired\n    Description = \"This is a custom role...\"\n});\n\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    // Give the Pipeline an immutable view of the Role\n    Role = role.WithoutPolicyUpdates()\n});\n\n// You now have to manage the Role policies yourself\nrole.AddToPolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] {  },\n    Resources = new [] {  }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"codepipeline.amazonaws.com\"))\n        // custom description if desired\n        .description(\"This is a custom role...\")\n        .build();\n\nPipeline.Builder.create(this, \"Pipeline\")\n        // Give the Pipeline an immutable view of the Role\n        .role(role.withoutPolicyUpdates())\n        .build();\n\n// You now have to manage the Role policies yourself\nrole.addToPolicy(PolicyStatement.Builder.create()\n        .actions(List.of())\n        .resources(List.of())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('codepipeline.amazonaws.com'),\n  // custom description if desired\n  description: 'This is a custom role...',\n});\n\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  // Give the Pipeline an immutable view of the Role\n  role: role.withoutPolicyUpdates(),\n});\n\n// You now have to manage the Role policies yourself\nrole.addToPolicy(new iam.PolicyStatement({\n  actions: [/* whatever actions you want */],\n  resources: [/* whatever resources you intend to touch */],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 108
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#addToPolicy",
        "@aws-cdk/aws-iam.Role#withoutPolicyUpdates",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('codepipeline.amazonaws.com'),\n  // custom description if desired\n  description: 'This is a custom role...',\n});\n\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  // Give the Pipeline an immutable view of the Role\n  role: role.withoutPolicyUpdates(),\n});\n\n// You now have to manage the Role policies yourself\nrole.addToPolicy(new iam.PolicyStatement({\n  actions: [/* whatever actions you want */],\n  resources: [/* whatever resources you intend to touch */],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 18,
        "104": 2,
        "192": 2,
        "193": 3,
        "194": 6,
        "196": 2,
        "197": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "49f6cd0af1f1cf8ba0300ea27795eea77d36f39b59c8a7a53f9e553f2e879624"
    },
    "57f2aeb5a6ff0f3a68f45b3e37b6dcdc14ab44f9b3e7ab398a2cf91333033eba": {
      "translations": {
        "python": {
          "source": "role = iam.Role.from_role_arn(self, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\",\n    # Set 'mutable' to 'false' to use the role as-is and prevent adding new\n    # policies to it. The default is 'true', which means the role may be\n    # modified as part of the deployment.\n    mutable=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IRole role = Role.FromRoleArn(this, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\", new FromRoleArnOptions {\n    // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n    // policies to it. The default is 'true', which means the role may be\n    // modified as part of the deployment.\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole role = Role.fromRoleArn(this, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\", FromRoleArnOptions.builder()\n        // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n        // policies to it. The default is 'true', which means the role may be\n        // modified as part of the deployment.\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const role = iam.Role.fromRoleArn(this, 'Role', 'arn:aws:iam::123456789012:role/MyExistingRole', {\n  // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n  // policies to it. The default is 'true', which means the role may be\n  // modified as part of the deployment.\n  mutable: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 133
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.FromRoleArnOptions",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = iam.Role.fromRoleArn(this, 'Role', 'arn:aws:iam::123456789012:role/MyExistingRole', {\n  // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n  // policies to it. The default is 'true', which means the role may be\n  // modified as part of the deployment.\n  mutable: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "9677a5ac48f004998f0e0ff232b74e5a4fea852d717d6c6933110cf3d4788b91"
    },
    "30dbf807e3c41b86a361ec7acaa98d45dfca7cef387e09f959c509d44336d21f": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.AccountPrincipal(\"123456789012\"),\n    external_ids=[\"SUPPLY-ME\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new AccountPrincipal(\"123456789012\"),\n    ExternalIds = new [] { \"SUPPLY-ME\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new AccountPrincipal(\"123456789012\"))\n        .externalIds(List.of(\"SUPPLY-ME\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  externalIds: ['SUPPLY-ME'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 148
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps"
      ],
      "fullSource": "import * as constructs from 'constructs';\nimport * as iam from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const role = new iam.Role(this, 'MyRole', {\n      assumedBy: new iam.AccountPrincipal('123456789012'),\n      externalIds: ['SUPPLY-ME'],\n    });\n    /// !hide\n\n    Array.isArray(role);\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "7c8d2148c6ea7f5c142b9a5f447cb66597b3e91ff3ab67e2d9490b39407ae2f2"
    },
    "fe5f92331f4a13ffac2fc300e8ef04d1348da847f50affdd14853f4495ca127f": {
      "translations": {
        "python": {
          "source": "statement = iam.PolicyStatement()\nstatement.add_service_principal(\"cloudwatch.amazonaws.com\")\nstatement.add_service_principal(\"ec2.amazonaws.com\")\nstatement.add_arn_principal(\"arn:aws:boom:boom\")",
          "version": "1"
        },
        "csharp": {
          "source": "PolicyStatement statement = new PolicyStatement();\nstatement.AddServicePrincipal(\"cloudwatch.amazonaws.com\");\nstatement.AddServicePrincipal(\"ec2.amazonaws.com\");\nstatement.AddArnPrincipal(\"arn:aws:boom:boom\");",
          "version": "1"
        },
        "java": {
          "source": "PolicyStatement statement = new PolicyStatement();\nstatement.addServicePrincipal(\"cloudwatch.amazonaws.com\");\nstatement.addServicePrincipal(\"ec2.amazonaws.com\");\nstatement.addArnPrincipal(\"arn:aws:boom:boom\");",
          "version": "1"
        },
        "$": {
          "source": "const statement = new iam.PolicyStatement();\nstatement.addServicePrincipal('cloudwatch.amazonaws.com');\nstatement.addServicePrincipal('ec2.amazonaws.com');\nstatement.addArnPrincipal('arn:aws:boom:boom');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 188
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatement#addArnPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement#addServicePrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst statement = new iam.PolicyStatement();\nstatement.addServicePrincipal('cloudwatch.amazonaws.com');\nstatement.addServicePrincipal('ec2.amazonaws.com');\nstatement.addArnPrincipal('arn:aws:boom:boom');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "241eb9b33ec9612df11d597fd4dc25caeacedde258f550e9249f234845257d47"
    },
    "93ab0d764e7e4d09aa521f42b8805b64417e055a8ad032f8cf6cdea622d1020b": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.CompositePrincipal(\n        iam.ServicePrincipal(\"ec2.amazonaws.com\"),\n        iam.AccountPrincipal(\"1818188181818187272\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new CompositePrincipal(\n    new ServicePrincipal(\"ec2.amazonaws.com\"),\n    new AccountPrincipal(\"1818188181818187272\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new CompositePrincipal(\n        new ServicePrincipal(\"ec2.amazonaws.com\"),\n        new AccountPrincipal(\"1818188181818187272\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.CompositePrincipal(\n    new iam.ServicePrincipal('ec2.amazonaws.com'),\n    new iam.AccountPrincipal('1818188181818187272')\n  ),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 208
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.CompositePrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.CompositePrincipal(\n    new iam.ServicePrincipal('ec2.amazonaws.com'),\n    new iam.AccountPrincipal('1818188181818187272')\n  ),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "197": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "06598f86c3330152921ab65651ecef2b203752fbc59a286396f318cb71c24987"
    },
    "d6447173e9537c5ebbcdf340d784ef18d92896f6badf647a84c615e69a62def5": {
      "translations": {
        "python": {
          "source": "principal = iam.AccountPrincipal(\"123456789000\").with_conditions({\"StringEquals\": {\"foo\": \"baz\"}})",
          "version": "1"
        },
        "csharp": {
          "source": "PrincipalBase principal = new AccountPrincipal(\"123456789000\").WithConditions(new Dictionary<string, object> { { \"StringEquals\", new Dictionary<string, string> { { \"foo\", \"baz\" } } } });",
          "version": "1"
        },
        "java": {
          "source": "PrincipalBase principal = new AccountPrincipal(\"123456789000\").withConditions(Map.of(\"StringEquals\", Map.of(\"foo\", \"baz\")));",
          "version": "1"
        },
        "$": {
          "source": "const principal = new iam.AccountPrincipal('123456789000')\n  .withConditions({ StringEquals: { foo: \"baz\" } });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 222
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst principal = new iam.AccountPrincipal('123456789000')\n  .withConditions({ StringEquals: { foo: \"baz\" } });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "c155c24a40983698e86083d759c55954b00d40720f96c145113a51261272c6a6"
    },
    "e0255902d0378c5663752bf93e948274242709921bad9ce9e29da3b5ff37c609": {
      "translations": {
        "python": {
          "source": "principal = iam.WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", {\n    \"StringEquals\": {\"cognito-identity.amazonaws.com:aud\": \"us-east-2:12345678-abcd-abcd-abcd-123456\"},\n    \"ForAnyValue:StringLike\": {\"cognito-identity.amazonaws.com:amr\": \"unauthenticated\"}\n})",
          "version": "1"
        },
        "csharp": {
          "source": "WebIdentityPrincipal principal = new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", new Dictionary<string, object> {\n    { \"StringEquals\", new Dictionary<string, string> { { \"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\" } } },\n    { \"ForAnyValue:StringLike\", new Dictionary<string, string> { { \"cognito-identity.amazonaws.com:amr\", \"unauthenticated\" } } }\n});",
          "version": "1"
        },
        "java": {
          "source": "WebIdentityPrincipal principal = new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", Map.of(\n        \"StringEquals\", Map.of(\"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\"),\n        \"ForAnyValue:StringLike\", Map.of(\"cognito-identity.amazonaws.com:amr\", \"unauthenticated\")));",
          "version": "1"
        },
        "$": {
          "source": "const principal = new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n  'StringEquals': { 'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456' },\n  'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated' },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.WebIdentityPrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst principal = new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n  'StringEquals': { 'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456' },\n  'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 3,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "de6706f646214f7cb0c505457396960e8a0f6008ca2ac33c6d4fa56e2a05f9ac"
    },
    "799b98faca27f0d0360bf07646c6fef5ee7de16f94ff453ffe7176e2f97dc5b5": {
      "translations": {
        "python": {
          "source": "iam.Role(self, \"Role\",\n    assumed_by=iam.WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", {\n        \"StringEquals\": {\n            \"cognito-identity.amazonaws.com:aud\": \"us-east-2:12345678-abcd-abcd-abcd-123456\"\n        },\n        \"ForAnyValue:StringLike\": {\n            \"cognito-identity.amazonaws.com:amr\": \"unauthenticated\"\n        }\n    }).with_session_tags()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", new Dictionary<string, object> {\n        { \"StringEquals\", new Dictionary<string, string> {\n            { \"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\" }\n        } },\n        { \"ForAnyValue:StringLike\", new Dictionary<string, string> {\n            { \"cognito-identity.amazonaws.com:amr\", \"unauthenticated\" }\n        } }\n    }).WithSessionTags()\n});",
          "version": "1"
        },
        "java": {
          "source": "Role.Builder.create(this, \"Role\")\n        .assumedBy(new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", Map.of(\n                \"StringEquals\", Map.of(\n                        \"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\"),\n                \"ForAnyValue:StringLike\", Map.of(\n                        \"cognito-identity.amazonaws.com:amr\", \"unauthenticated\"))).withSessionTags())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new iam.Role(this, 'Role', {\n  assumedBy: new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n    'StringEquals': {\n      'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456',\n     },\n    'ForAnyValue:StringLike': {\n      'cognito-identity.amazonaws.com:amr': 'unauthenticated',\n    },\n  }).withSessionTags(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 247
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase#withSessionTags",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.WebIdentityPrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n    'StringEquals': {\n      'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456',\n     },\n    'ForAnyValue:StringLike': {\n      'cognito-identity.amazonaws.com:amr': 'unauthenticated',\n    },\n  }).withSessionTags(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 6,
        "104": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "5d01f64ae90eb44bfe1ddf5510777b3e02eec75381d35e8c691db90924fed151"
    },
    "5c214b1ace9c8a2d60cde42f5501251b159b85c9d3b8fcd3c38efab493d39657": {
      "translations": {
        "python": {
          "source": "policy_document = {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Sid\": \"FirstStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\"iam:ChangePassword\"],\n        \"Resource\": \"*\"\n    }, {\n        \"Sid\": \"SecondStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": \"s3:ListAllMyBuckets\",\n        \"Resource\": \"*\"\n    }, {\n        \"Sid\": \"ThirdStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\"s3:List*\", \"s3:Get*\"\n        ],\n        \"Resource\": [\"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\"\n        ],\n        \"Condition\": {\"Bool\": {\"aws:_multi_factor_auth_present\": \"true\"}}\n    }\n    ]\n}\n\ncustom_policy_document = iam.PolicyDocument.from_json(policy_document)\n\n# You can pass this document as an initial document to a ManagedPolicy\n# or inline Policy.\nnew_managed_policy = iam.ManagedPolicy(self, \"MyNewManagedPolicy\",\n    document=custom_policy_document\n)\nnew_policy = iam.Policy(self, \"MyNewPolicy\",\n    document=custom_policy_document\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, object> policyDocument = new Dictionary<string, object> {\n    { \"Version\", \"2012-10-17\" },\n    { \"Statement\", new [] { new Dictionary<string, object> {\n        { \"Sid\", \"FirstStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", new [] { \"iam:ChangePassword\" } },\n        { \"Resource\", \"*\" }\n    }, new Dictionary<string, string> {\n        { \"Sid\", \"SecondStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", \"s3:ListAllMyBuckets\" },\n        { \"Resource\", \"*\" }\n    }, new Dictionary<string, object> {\n        { \"Sid\", \"ThirdStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", new [] { \"s3:List*\", \"s3:Get*\" } },\n        { \"Resource\", new [] { \"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\" } },\n        { \"Condition\", new Dictionary<string, IDictionary<string, string>> { { \"Bool\", new Dictionary<string, string> { { \"aws:MultiFactorAuthPresent\", \"true\" } } } } }\n    } } }\n};\n\nPolicyDocument customPolicyDocument = PolicyDocument.FromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nManagedPolicy newManagedPolicy = new ManagedPolicy(this, \"MyNewManagedPolicy\", new ManagedPolicyProps {\n    Document = customPolicyDocument\n});\nPolicy newPolicy = new Policy(this, \"MyNewPolicy\", new PolicyProps {\n    Document = customPolicyDocument\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, Object> policyDocument = Map.of(\n        \"Version\", \"2012-10-17\",\n        \"Statement\", List.of(Map.of(\n                \"Sid\", \"FirstStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", List.of(\"iam:ChangePassword\"),\n                \"Resource\", \"*\"), Map.of(\n                \"Sid\", \"SecondStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", \"s3:ListAllMyBuckets\",\n                \"Resource\", \"*\"), Map.of(\n                \"Sid\", \"ThirdStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", List.of(\"s3:List*\", \"s3:Get*\"),\n                \"Resource\", List.of(\"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\"),\n                \"Condition\", Map.of(\"Bool\", Map.of(\"aws:MultiFactorAuthPresent\", \"true\")))));\n\nPolicyDocument customPolicyDocument = PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nManagedPolicy newManagedPolicy = ManagedPolicy.Builder.create(this, \"MyNewManagedPolicy\")\n        .document(customPolicyDocument)\n        .build();\nPolicy newPolicy = Policy.Builder.create(this, \"MyNewPolicy\")\n        .document(customPolicyDocument)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const policyDocument = {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"FirstStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"iam:ChangePassword\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"SecondStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"ThirdStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:List*\",\n        \"s3:Get*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::confidential-data\",\n        \"arn:aws:s3:::confidential-data/*\"\n      ],\n      \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n    }\n  ]\n};\n\nconst customPolicyDocument = iam.PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nconst newManagedPolicy = new iam.ManagedPolicy(this, 'MyNewManagedPolicy', {\n  document: customPolicyDocument,\n});\nconst newPolicy = new iam.Policy(this, 'MyNewPolicy', {\n  document: customPolicyDocument,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 265
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicyProps",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-iam.PolicyDocument#fromJson",
        "@aws-cdk/aws-iam.PolicyProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst policyDocument = {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"FirstStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"iam:ChangePassword\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"SecondStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"ThirdStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:List*\",\n        \"s3:Get*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::confidential-data\",\n        \"arn:aws:s3:::confidential-data/*\"\n      ],\n      \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n    }\n  ]\n};\n\nconst customPolicyDocument = iam.PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nconst newManagedPolicy = new iam.ManagedPolicy(this, 'MyNewManagedPolicy', {\n  document: customPolicyDocument,\n});\nconst newPolicy = new iam.Policy(this, 'MyNewPolicy', {\n  document: customPolicyDocument,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 35,
        "75": 16,
        "104": 2,
        "192": 4,
        "193": 8,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 19
      },
      "fqnsFingerprint": "b85715370b7308e39d70415066394a175d0802d8d3a751df90416488ef1016f7"
    },
    "0c9953cbe048ca635c01a235449f1f0a40abc671afa69c5155dcd933ac01ef47": {
      "translations": {
        "python": {
          "source": "# Directly apply the boundary to a Role you create\n# role is of type Role\n\n# Apply the boundary to an Role that was implicitly created for you\n# fn is of type Function\n\n# Remove a Permissions Boundary that is inherited, for example from the Stack level\n# custom_resource is of type CustomResource\n# This imports an existing policy.\nboundary = iam.ManagedPolicy.from_managed_policy_arn(self, \"Boundary\", \"arn:aws:iam::123456789012:policy/boundary\")\n\n# This creates a new boundary\nboundary2 = iam.ManagedPolicy(self, \"Boundary2\",\n    statements=[\n        iam.PolicyStatement(\n            effect=iam.Effect.DENY,\n            actions=[\"iam:*\"],\n            resources=[\"*\"]\n        )\n    ]\n)\niam.PermissionsBoundary.of(role).apply(boundary)\niam.PermissionsBoundary.of(fn).apply(boundary)\n\n# Apply the boundary to all Roles in a stack\niam.PermissionsBoundary.of(self).apply(boundary)\niam.PermissionsBoundary.of(custom_resource).clear()",
          "version": "1"
        },
        "csharp": {
          "source": "// Directly apply the boundary to a Role you create\nRole role;\n\n// Apply the boundary to an Role that was implicitly created for you\nFunction fn;\n\n// Remove a Permissions Boundary that is inherited, for example from the Stack level\nCustomResource customResource;\n// This imports an existing policy.\nIManagedPolicy boundary = ManagedPolicy.FromManagedPolicyArn(this, \"Boundary\", \"arn:aws:iam::123456789012:policy/boundary\");\n\n// This creates a new boundary\nManagedPolicy boundary2 = new ManagedPolicy(this, \"Boundary2\", new ManagedPolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Effect = Effect.DENY,\n            Actions = new [] { \"iam:*\" },\n            Resources = new [] { \"*\" }\n        }) }\n});\nPermissionsBoundary.Of(role).Apply(boundary);\nPermissionsBoundary.Of(fn).Apply(boundary);\n\n// Apply the boundary to all Roles in a stack\nPermissionsBoundary.Of(this).Apply(boundary);\nPermissionsBoundary.Of(customResource).Clear();",
          "version": "1"
        },
        "java": {
          "source": "// Directly apply the boundary to a Role you create\nRole role;\n\n// Apply the boundary to an Role that was implicitly created for you\nFunction fn;\n\n// Remove a Permissions Boundary that is inherited, for example from the Stack level\nCustomResource customResource;\n// This imports an existing policy.\nIManagedPolicy boundary = ManagedPolicy.fromManagedPolicyArn(this, \"Boundary\", \"arn:aws:iam::123456789012:policy/boundary\");\n\n// This creates a new boundary\nManagedPolicy boundary2 = ManagedPolicy.Builder.create(this, \"Boundary2\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .effect(Effect.DENY)\n                    .actions(List.of(\"iam:*\"))\n                    .resources(List.of(\"*\"))\n                    .build()))\n        .build();\nPermissionsBoundary.of(role).apply(boundary);\nPermissionsBoundary.of(fn).apply(boundary);\n\n// Apply the boundary to all Roles in a stack\nPermissionsBoundary.of(this).apply(boundary);\nPermissionsBoundary.of(customResource).clear();",
          "version": "1"
        },
        "$": {
          "source": "// This imports an existing policy.\nconst boundary = iam.ManagedPolicy.fromManagedPolicyArn(this, 'Boundary', 'arn:aws:iam::123456789012:policy/boundary');\n\n// This creates a new boundary\nconst boundary2 = new iam.ManagedPolicy(this, 'Boundary2', {\n  statements: [\n    new iam.PolicyStatement({\n      effect: iam.Effect.DENY,\n      actions: ['iam:*'],\n      resources: ['*'],\n    }),\n  ],\n});\n\n// Directly apply the boundary to a Role you create\ndeclare const role: iam.Role;\niam.PermissionsBoundary.of(role).apply(boundary);\n\n// Apply the boundary to an Role that was implicitly created for you\ndeclare const fn: lambda.Function;\niam.PermissionsBoundary.of(fn).apply(boundary);\n\n// Apply the boundary to all Roles in a stack\niam.PermissionsBoundary.of(this).apply(boundary);\n\n// Remove a Permissions Boundary that is inherited, for example from the Stack level\ndeclare const customResource: CustomResource;\niam.PermissionsBoundary.of(customResource).clear();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 325
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#DENY",
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromManagedPolicyArn",
        "@aws-cdk/aws-iam.ManagedPolicyProps",
        "@aws-cdk/aws-iam.PermissionsBoundary",
        "@aws-cdk/aws-iam.PermissionsBoundary#apply",
        "@aws-cdk/aws-iam.PermissionsBoundary#clear",
        "@aws-cdk/aws-iam.PermissionsBoundary#of",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// Directly apply the boundary to a Role you create\ndeclare const role: iam.Role;\n\n// Apply the boundary to an Role that was implicitly created for you\ndeclare const fn: lambda.Function;\n\n// Remove a Permissions Boundary that is inherited, for example from the Stack level\ndeclare const customResource: CustomResource;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// This imports an existing policy.\nconst boundary = iam.ManagedPolicy.fromManagedPolicyArn(this, 'Boundary', 'arn:aws:iam::123456789012:policy/boundary');\n\n// This creates a new boundary\nconst boundary2 = new iam.ManagedPolicy(this, 'Boundary2', {\n  statements: [\n    new iam.PolicyStatement({\n      effect: iam.Effect.DENY,\n      actions: ['iam:*'],\n      resources: ['*'],\n    }),\n  ],\n});\niam.PermissionsBoundary.of(role).apply(boundary);\niam.PermissionsBoundary.of(fn).apply(boundary);\n\n// Apply the boundary to all Roles in a stack\niam.PermissionsBoundary.of(this).apply(boundary);\niam.PermissionsBoundary.of(customResource).clear();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 46,
        "104": 3,
        "130": 3,
        "153": 2,
        "169": 3,
        "192": 3,
        "193": 2,
        "194": 18,
        "196": 9,
        "197": 2,
        "225": 5,
        "226": 4,
        "242": 5,
        "243": 5,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "412174bcc00b1865cc2622e7e825d0421aea0796d4e64196144455384392933d"
    },
    "628dff1205f906fa270c69f16ae34e109d9f9da5e6345f717ce9f6af8995aafc": {
      "translations": {
        "python": {
          "source": "provider = iam.OpenIdConnectProvider(self, \"MyProvider\",\n    url=\"https://openid/connect\",\n    client_ids=[\"myclient1\", \"myclient2\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "OpenIdConnectProvider provider = new OpenIdConnectProvider(this, \"MyProvider\", new OpenIdConnectProviderProps {\n    Url = \"https://openid/connect\",\n    ClientIds = new [] { \"myclient1\", \"myclient2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider provider = OpenIdConnectProvider.Builder.create(this, \"MyProvider\")\n        .url(\"https://openid/connect\")\n        .clientIds(List.of(\"myclient1\", \"myclient2\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 376
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.OpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5c1bac44e996bfab51f7f3595426225f218694d47d86f2f4ef3d1765bd5b49ec"
    },
    "43e12444450a7b42e702d7ce8866ab15bcdd5c78d4a1a2831894fc22d0e08532": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\n\n# my_provider is of type OpenIdConnectProvider\n\ncognito.CfnIdentityPool(self, \"IdentityPool\",\n    open_id_connect_provider_arns=[my_provider.open_id_connect_provider_arn],\n    # And the other properties for your identity pool\n    allow_unauthenticated_identities=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\n\nOpenIdConnectProvider myProvider;\n\nnew CfnIdentityPool(this, \"IdentityPool\", new CfnIdentityPoolProps {\n    OpenIdConnectProviderArns = new [] { myProvider.OpenIdConnectProviderArn },\n    // And the other properties for your identity pool\n    AllowUnauthenticatedIdentities = false\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\n\nOpenIdConnectProvider myProvider;\n\nCfnIdentityPool.Builder.create(this, \"IdentityPool\")\n        .openIdConnectProviderArns(List.of(myProvider.getOpenIdConnectProviderArn()))\n        // And the other properties for your identity pool\n        .allowUnauthenticatedIdentities(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 394
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.CfnIdentityPool",
        "@aws-cdk/aws-cognito.CfnIdentityPoolProps",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#openIdConnectProviderArn",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "88614557b7c590a69b40ee12ca7370d1a87825e3b503c8404255d67483b83037"
    },
    "3bf35e7c632d4ad0c69b30b25ddb739f76443899c57c1c9d192b365ba766ffa6": {
      "translations": {
        "python": {
          "source": "provider = iam.OpenIdConnectProvider(self, \"MyProvider\",\n    url=\"https://openid/connect\",\n    client_ids=[\"myclient1\", \"myclient2\"]\n)\nprincipal = iam.OpenIdConnectPrincipal(provider)",
          "version": "1"
        },
        "csharp": {
          "source": "OpenIdConnectProvider provider = new OpenIdConnectProvider(this, \"MyProvider\", new OpenIdConnectProviderProps {\n    Url = \"https://openid/connect\",\n    ClientIds = new [] { \"myclient1\", \"myclient2\" }\n});\nOpenIdConnectPrincipal principal = new OpenIdConnectPrincipal(provider);",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider provider = OpenIdConnectProvider.Builder.create(this, \"MyProvider\")\n        .url(\"https://openid/connect\")\n        .clientIds(List.of(\"myclient1\", \"myclient2\"))\n        .build();\nOpenIdConnectPrincipal principal = new OpenIdConnectPrincipal(provider);",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\nconst principal = new iam.OpenIdConnectPrincipal(provider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 407
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IOpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectPrincipal",
        "@aws-cdk/aws-iam.OpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\nconst principal = new iam.OpenIdConnectPrincipal(provider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "f25c4831e4ef0937fa0aea20d89b3ca6bf030762ecc43cb115bbe6435510e8cf"
    },
    "dcd18efa8e0a447e0ae88b3dfbb92fc68fd8502f438a1c439e31f9ef27995777": {
      "translations": {
        "python": {
          "source": "iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 425
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "4213a6cf9bdc2cea98a0ffb2a002c7a37935420108f4f14bd53575641b772317"
    },
    "ab94f5eb27eb8e0dd6e227403616989519421fd5f09a012f684215ced7fd4b7f": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\nprincipal = iam.SamlPrincipal(provider, {\n    \"StringEquals\": {\n        \"SAML:iss\": \"issuer\"\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nSamlPrincipal principal = new SamlPrincipal(provider, new Dictionary<string, object> {\n    { \"StringEquals\", new Dictionary<string, string> {\n        { \"SAML:iss\", \"issuer\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nSamlPrincipal principal = new SamlPrincipal(provider, Map.of(\n        \"StringEquals\", Map.of(\n                \"SAML:iss\", \"issuer\")));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 433
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlPrincipal",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8bee988a0af423ea6d2c9e99f5aaaa5f025819d0b219c8814aaf7b525d6fa130"
    },
    "38c78441b2e23d2cf244836dff43cf6b60b7f18f46a393202af1c2865ff27d45": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\niam.Role(self, \"Role\",\n    assumed_by=iam.SamlConsolePrincipal(provider)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nnew Role(this, \"Role\", new RoleProps {\n    AssumedBy = new SamlConsolePrincipal(provider)\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nRole.Builder.create(this, \"Role\")\n        .assumedBy(new SamlConsolePrincipal(provider))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 447
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.SamlConsolePrincipal",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3c9e2b0782b1cf94d4e33d967d9b10738b2414df3d13c28f8aae145c1b8931a5"
    },
    "de0439b0be45d01db3e288ad1d247098b2db883afb42e39720c121ff26753e20": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"MyUser\")",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\");",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"MyUser\");",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'MyUser');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 460
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.User"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "f1cdcddea154a6e332356d6522209f06ab50e11e42cfa2f634edbec012ea6940"
    },
    "44d09e89c2a14c92b8b375afcee53468bcfc388be7c81f5860f46ac89e2729f4": {
      "translations": {
        "python": {
          "source": "user = iam.User.from_user_name(self, \"MyImportedUserByName\", \"johnsmith\")",
          "version": "1"
        },
        "csharp": {
          "source": "IUser user = User.FromUserName(this, \"MyImportedUserByName\", \"johnsmith\");",
          "version": "1"
        },
        "java": {
          "source": "IUser user = User.fromUserName(this, \"MyImportedUserByName\", \"johnsmith\");",
          "version": "1"
        },
        "$": {
          "source": "const user = iam.User.fromUserName(this, 'MyImportedUserByName', 'johnsmith');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 466
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#fromUserName"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = iam.User.fromUserName(this, 'MyImportedUserByName', 'johnsmith');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "df34ebb28460773c956b12fcb4dd19b437b45f408f0c86a479b2169160401b47"
    },
    "797205faa0d454d06b5c8d5f6e41ed50dd579a15867c87f6a3b35a5c79b0cd06": {
      "translations": {
        "python": {
          "source": "user = iam.User.from_user_arn(self, \"MyImportedUserByArn\", \"arn:aws:iam::123456789012:user/johnsmith\")",
          "version": "1"
        },
        "csharp": {
          "source": "IUser user = User.FromUserArn(this, \"MyImportedUserByArn\", \"arn:aws:iam::123456789012:user/johnsmith\");",
          "version": "1"
        },
        "java": {
          "source": "IUser user = User.fromUserArn(this, \"MyImportedUserByArn\", \"arn:aws:iam::123456789012:user/johnsmith\");",
          "version": "1"
        },
        "$": {
          "source": "const user = iam.User.fromUserArn(this, 'MyImportedUserByArn', 'arn:aws:iam::123456789012:user/johnsmith');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 472
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#fromUserArn"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = iam.User.fromUserArn(this, 'MyImportedUserByArn', 'arn:aws:iam::123456789012:user/johnsmith');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "1cb8433824f5e239e6668574765f3108fa294e76819e9f73d5943c22c676db2a"
    },
    "f46aa7bcee4fe5727bca293ad38fcddbb23268144ffabe7284b46c31f08765ef": {
      "translations": {
        "python": {
          "source": "user = iam.User.from_user_attributes(self, \"MyImportedUserByAttributes\",\n    user_arn=\"arn:aws:iam::123456789012:user/johnsmith\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IUser user = User.FromUserAttributes(this, \"MyImportedUserByAttributes\", new UserAttributes {\n    UserArn = \"arn:aws:iam::123456789012:user/johnsmith\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IUser user = User.fromUserAttributes(this, \"MyImportedUserByAttributes\", UserAttributes.builder()\n        .userArn(\"arn:aws:iam::123456789012:user/johnsmith\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const user = iam.User.fromUserAttributes(this, 'MyImportedUserByAttributes', {\n  userArn: 'arn:aws:iam::123456789012:user/johnsmith',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 478
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#fromUserAttributes",
        "@aws-cdk/aws-iam.UserAttributes"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = iam.User.fromUserAttributes(this, 'MyImportedUserByAttributes', {\n  userArn: 'arn:aws:iam::123456789012:user/johnsmith',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "18246e690a8a095d9f27e3bc81a568bc51e0a52310013712a199d2a36637c82a"
    },
    "32d365b787746cdead9b335a3cf2a1c19ad3282dca80af7e7d20f903f904e879": {
      "translations": {
        "python": {
          "source": "group = iam.Group(self, \"MyGroup\")",
          "version": "1"
        },
        "csharp": {
          "source": "Group group = new Group(this, \"MyGroup\");",
          "version": "1"
        },
        "java": {
          "source": "Group group = new Group(this, \"MyGroup\");",
          "version": "1"
        },
        "$": {
          "source": "const group = new iam.Group(this, 'MyGroup');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 488
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst group = new iam.Group(this, 'MyGroup');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "a1f3d7c34427bb0c37b52c3471fa61982b0315f93eeea739f0e0fbaea269cacb"
    },
    "c30dd91a2b2422ad8b27a95b9b6c8e9694088d11c10dc34c23c4f9b768c17c40": {
      "translations": {
        "python": {
          "source": "group = iam.Group.from_group_arn(self, \"MyImportedGroupByArn\", \"arn:aws:iam::account-id:group/group-name\")",
          "version": "1"
        },
        "csharp": {
          "source": "IGroup group = Group.FromGroupArn(this, \"MyImportedGroupByArn\", \"arn:aws:iam::account-id:group/group-name\");",
          "version": "1"
        },
        "java": {
          "source": "IGroup group = Group.fromGroupArn(this, \"MyImportedGroupByArn\", \"arn:aws:iam::account-id:group/group-name\");",
          "version": "1"
        },
        "$": {
          "source": "const group = iam.Group.fromGroupArn(this, 'MyImportedGroupByArn', 'arn:aws:iam::account-id:group/group-name');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 494
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.Group#fromGroupArn",
        "@aws-cdk/aws-iam.IGroup"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst group = iam.Group.fromGroupArn(this, 'MyImportedGroupByArn', 'arn:aws:iam::account-id:group/group-name');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "b08688078d5595bd4cb3abbfdfcb5e106cdc2160577aafec4d9ee072536d2d15"
    },
    "0bc3f69cd3dea0bc02e9dc3cbcbe16ea9fc60d56dd205212e5beeace49b784a6": {
      "translations": {
        "python": {
          "source": "group = iam.Group.from_group_name(self, \"MyImportedGroupByName\", \"group-name\")",
          "version": "1"
        },
        "csharp": {
          "source": "IGroup group = Group.FromGroupName(this, \"MyImportedGroupByName\", \"group-name\");",
          "version": "1"
        },
        "java": {
          "source": "IGroup group = Group.fromGroupName(this, \"MyImportedGroupByName\", \"group-name\");",
          "version": "1"
        },
        "$": {
          "source": "const group = iam.Group.fromGroupName(this, 'MyImportedGroupByName', 'group-name');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.Group#fromGroupName",
        "@aws-cdk/aws-iam.IGroup"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst group = iam.Group.fromGroupName(this, 'MyImportedGroupByName', 'group-name');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "caaa1bf1d6d9be7537276fb60ccb1418efb32b7f5150dbdd31934b8957577ad0"
    },
    "1c90c513609a9dccd1784297864552057d22136768e7832dd8b685cd44e6e77c": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"MyUser\") # or User.fromUserName(stack, 'User', 'johnsmith');\ngroup = iam.Group(self, \"MyGroup\") # or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.add_to_group(group)\n# or\ngroup.add_user(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\"); // or User.fromUserName(stack, 'User', 'johnsmith');\nGroup group = new Group(this, \"MyGroup\"); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.AddToGroup(group);\n// or\ngroup.AddUser(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"MyUser\"); // or User.fromUserName(stack, 'User', 'johnsmith');\nGroup group = new Group(this, \"MyGroup\"); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'MyUser'); // or User.fromUserName(stack, 'User', 'johnsmith');\nconst group = new iam.Group(this, 'MyGroup'); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-iam"
        },
        "field": {
          "field": "markdown",
          "line": 506
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IGroup",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#addToGroup"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser'); // or User.fromUserName(stack, 'User', 'johnsmith');\nconst group = new iam.Group(this, 'MyGroup'); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "7144ef435dec5160475186ed4cd528c02d2448d9359c2673a1e73bd773416639"
    },
    "1ef3765d7b488b17ab991479cec1232482b68b58f98164b2ed458c376f747c41": {
      "translations": {
        "python": {
          "source": "policy = iam.ManagedPolicy.from_aws_managed_policy_name(\"ReadOnlyAccess\")\niam.PermissionsBoundary.of(self).apply(policy)",
          "version": "1"
        },
        "csharp": {
          "source": "IManagedPolicy policy = ManagedPolicy.FromAwsManagedPolicyName(\"ReadOnlyAccess\");\nPermissionsBoundary.Of(this).Apply(policy);",
          "version": "1"
        },
        "java": {
          "source": "IManagedPolicy policy = ManagedPolicy.fromAwsManagedPolicyName(\"ReadOnlyAccess\");\nPermissionsBoundary.of(this).apply(policy);",
          "version": "1"
        },
        "$": {
          "source": "const policy = iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess');\niam.PermissionsBoundary.of(this).apply(policy);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PermissionsBoundary"
        },
        "field": {
          "field": "markdown",
          "line": 1
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.PermissionsBoundary",
        "@aws-cdk/aws-iam.PermissionsBoundary#apply",
        "@aws-cdk/aws-iam.PermissionsBoundary#of"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst policy = iam.ManagedPolicy.fromAwsManagedPolicyName('ReadOnlyAccess');\niam.PermissionsBoundary.of(this).apply(policy);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "194": 5,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "5b70646db4af68cadefa034c82ff85533744f9d06dddab08fab2832273f95c6b"
    },
    "f5907fa69b557d38f3d0b7eb471108a8ae826eeda4a75c0ab96544a277d25d92": {
      "translations": {
        "python": {
          "source": "cluster = neptune.DatabaseCluster(self, \"Cluster\",\n    vpc=vpc,\n    instance_type=neptune.InstanceType.R5_LARGE,\n    iam_authentication=True\n)\nrole = iam.Role(self, \"DBRole\", assumed_by=iam.AccountPrincipal(self.account))\ncluster.grant_connect(role)",
          "version": "1"
        },
        "csharp": {
          "source": "DatabaseCluster cluster = new DatabaseCluster(this, \"Cluster\", new DatabaseClusterProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.R5_LARGE,\n    IamAuthentication = true\n});\nRole role = new Role(this, \"DBRole\", new RoleProps { AssumedBy = new AccountPrincipal(Account) });\ncluster.GrantConnect(role);",
          "version": "1"
        },
        "java": {
          "source": "DatabaseCluster cluster = DatabaseCluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .instanceType(InstanceType.R5_LARGE)\n        .iamAuthentication(true)\n        .build();\nRole role = Role.Builder.create(this, \"DBRole\").assumedBy(new AccountPrincipal(this.account)).build();\ncluster.grantConnect(role);",
          "version": "1"
        },
        "$": {
          "source": "const cluster = new neptune.DatabaseCluster(this, 'Cluster', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ncluster.grantConnect(role); // Grant the role connection access to the DB.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.AccountPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-neptune.DatabaseCluster",
        "@aws-cdk/aws-neptune.DatabaseClusterBase#grantConnect",
        "@aws-cdk/aws-neptune.DatabaseClusterProps",
        "@aws-cdk/aws-neptune.InstanceType",
        "@aws-cdk/aws-neptune.InstanceType#R5_LARGE",
        "@aws-cdk/core.Stack#account"
      ],
      "fullSource": "import { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as neptune from '@aws-cdk/aws-neptune';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC', { maxAzs: 2 });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cluster = new neptune.DatabaseCluster(this, 'Cluster', {\n  vpc,\n  instanceType: neptune.InstanceType.R5_LARGE,\n  iamAuthentication: true, // Optional - will be automatically set if you call grantConnect().\n});\nconst role = new iam.Role(this, 'DBRole', { assumedBy: new iam.AccountPrincipal(this.account) });\ncluster.grantConnect(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "104": 3,
        "106": 1,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "bf66f22912a961d67a62c4f5bf8becc086409fe0dbc9259cf0e2d52bf8abe577"
    },
    "3d3ceb9082e5e860e7209b679e38493fa1dc30d94048d7f72ff3c6d389ab9a01": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\nresult = bucket.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"s3:GetObject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.AccountRootPrincipal()]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:GetObject\" },\n    Resources = new [] { bucket.ArnForObjects(\"file.txt\") },\n    Principals = new [] { new AccountRootPrincipal() }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\nAddToResourcePolicyResult result = bucket.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:GetObject\"))\n        .resources(List.of(bucket.arnForObjects(\"file.txt\")))\n        .principals(List.of(new AccountRootPrincipal()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.AccountRootPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketBase#addToResourcePolicy",
        "@aws-cdk/aws-s3.BucketBase#arnForObjects"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "86faacf4cdd9847cccec1be7289b71fdd49a9b702683da169e03a6188545915b"
    },
    "92f8f6080e8554809a372707d2c75b8f8442b5a430984c1565d3ad812a24285c": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket.from_bucket_name(self, \"existingBucket\", \"bucket-name\")\n\n# No policy statement will be added to the resource\nresult = bucket.add_to_resource_policy(iam.PolicyStatement(\n    actions=[\"s3:GetObject\"],\n    resources=[bucket.arn_for_objects(\"file.txt\")],\n    principals=[iam.AccountRootPrincipal()]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "IBucket bucket = Bucket.FromBucketName(this, \"existingBucket\", \"bucket-name\");\n\n// No policy statement will be added to the resource\nAddToResourcePolicyResult result = bucket.AddToResourcePolicy(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"s3:GetObject\" },\n    Resources = new [] { bucket.ArnForObjects(\"file.txt\") },\n    Principals = new [] { new AccountRootPrincipal() }\n}));",
          "version": "1"
        },
        "java": {
          "source": "IBucket bucket = Bucket.fromBucketName(this, \"existingBucket\", \"bucket-name\");\n\n// No policy statement will be added to the resource\nAddToResourcePolicyResult result = bucket.addToResourcePolicy(PolicyStatement.Builder.create()\n        .actions(List.of(\"s3:GetObject\"))\n        .resources(List.of(bucket.arnForObjects(\"file.txt\")))\n        .principals(List.of(new AccountRootPrincipal()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bucket = s3.Bucket.fromBucketName(this, 'existingBucket', 'bucket-name');\n\n// No policy statement will be added to the resource\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.AddToResourcePolicyResult"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.AddToResourcePolicyResult",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-s3.IBucket#addToResourcePolicy",
        "@aws-cdk/aws-s3.IBucket#arnForObjects"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport s3 = require('@aws-cdk/aws-s3');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3n = require('@aws-cdk/aws-s3-notifications');\nimport sns = require('@aws-cdk/aws-sns');\nimport sqs = require('@aws-cdk/aws-sqs');\nimport assert = require('assert');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = s3.Bucket.fromBucketName(this, 'existingBucket', 'bucket-name');\n\n// No policy statement will be added to the resource\nconst result = bucket.addToResourcePolicy(new iam.PolicyStatement({\n  actions: ['s3:GetObject'],\n  resources: [bucket.arnForObjects('file.txt')],\n  principals: [new iam.AccountRootPrincipal()],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 1,
        "192": 3,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "2fb67d404032825f4485d519d9e73d4e11bc12fb776bb5734b2f9e6a233f58e4"
    },
    "f11292a9a3f2076c471c889145e135aea2323a8e903c4629aea97e2810563e96": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.AnyPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "923fff3d8558f3eaaddcfa70206a010821f424edad1821d2bb0581c7306baa4a": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1 is of type NetworkLoadBalancer\n# network_load_balancer2 is of type NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.ArnPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "60d16696a56bccf56edf18eee13998ee1efbea081c0e990e3b809821e8ff44fd"
    },
    "9df87eaf4c3b1c5d1143ffd058a76e1a32119eaf70ebdf23cc2df20fad2ca459": {
      "translations": {
        "python": {
          "source": "slr = iam.CfnServiceLinkedRole(self, \"ElasticSLR\",\n    aws_service_name=\"es.amazonaws.com\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnServiceLinkedRole slr = new CfnServiceLinkedRole(this, \"ElasticSLR\", new CfnServiceLinkedRoleProps {\n    AwsServiceName = \"es.amazonaws.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnServiceLinkedRole slr = CfnServiceLinkedRole.Builder.create(this, \"ElasticSLR\")\n        .awsServiceName(\"es.amazonaws.com\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const slr = new iam.CfnServiceLinkedRole(this, 'ElasticSLR', {\n  awsServiceName: 'es.amazonaws.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRole"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnServiceLinkedRole",
        "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as es from '@aws-cdk/aws-elasticsearch';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst slr = new iam.CfnServiceLinkedRole(this, 'ElasticSLR', {\n  awsServiceName: 'es.amazonaws.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "8204dd47783e542be824aa7d88c232bdd3cb8c692d1b9280371777336da8d278"
    },
    "ec2300269c21f21cf5cbc4967204dde4db88930c4e9efcf944fd77c3b575985f": {
      "translations": {
        "python": {
          "source": "slr = iam.CfnServiceLinkedRole(self, \"ElasticSLR\",\n    aws_service_name=\"es.amazonaws.com\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnServiceLinkedRole slr = new CfnServiceLinkedRole(this, \"ElasticSLR\", new CfnServiceLinkedRoleProps {\n    AwsServiceName = \"es.amazonaws.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnServiceLinkedRole slr = CfnServiceLinkedRole.Builder.create(this, \"ElasticSLR\")\n        .awsServiceName(\"es.amazonaws.com\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const slr = new iam.CfnServiceLinkedRole(this, 'ElasticSLR', {\n  awsServiceName: 'es.amazonaws.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.CfnServiceLinkedRole",
        "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as es from '@aws-cdk/aws-elasticsearch';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst slr = new iam.CfnServiceLinkedRole(this, 'ElasticSLR', {\n  awsServiceName: 'es.amazonaws.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "8204dd47783e542be824aa7d88c232bdd3cb8c692d1b9280371777336da8d278"
    },
    "c473ecf8777a9001f626453de09a2c03acdfd0f568a7221699034ff87b89295e": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.CompositePrincipal(\n        iam.ServicePrincipal(\"ec2.amazonaws.com\"),\n        iam.AccountPrincipal(\"1818188181818187272\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new CompositePrincipal(\n    new ServicePrincipal(\"ec2.amazonaws.com\"),\n    new AccountPrincipal(\"1818188181818187272\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new CompositePrincipal(\n        new ServicePrincipal(\"ec2.amazonaws.com\"),\n        new AccountPrincipal(\"1818188181818187272\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.CompositePrincipal(\n    new iam.ServicePrincipal('ec2.amazonaws.com'),\n    new iam.AccountPrincipal('1818188181818187272')\n  ),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.CompositePrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.CompositePrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.CompositePrincipal(\n    new iam.ServicePrincipal('ec2.amazonaws.com'),\n    new iam.AccountPrincipal('1818188181818187272')\n  ),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "197": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "06598f86c3330152921ab65651ecef2b203752fbc59a286396f318cb71c24987"
    },
    "d4b078f795ba7479a034f85afca4ccc5361dc5498c01baf5b37014191a960516": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\n# iam_user is of type User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.Effect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "dce79b91f7d902fb8c9abcf47f4c1999080baa3002f491481cb3b463a902f912"
    },
    "d05bf2948294d2983efc44621bbf7cf39a98fd215b8b3579710abc83baf25a65": {
      "translations": {
        "python": {
          "source": "role = iam.Role.from_role_arn(self, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\",\n    # Set 'mutable' to 'false' to use the role as-is and prevent adding new\n    # policies to it. The default is 'true', which means the role may be\n    # modified as part of the deployment.\n    mutable=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IRole role = Role.FromRoleArn(this, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\", new FromRoleArnOptions {\n    // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n    // policies to it. The default is 'true', which means the role may be\n    // modified as part of the deployment.\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole role = Role.fromRoleArn(this, \"Role\", \"arn:aws:iam::123456789012:role/MyExistingRole\", FromRoleArnOptions.builder()\n        // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n        // policies to it. The default is 'true', which means the role may be\n        // modified as part of the deployment.\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const role = iam.Role.fromRoleArn(this, 'Role', 'arn:aws:iam::123456789012:role/MyExistingRole', {\n  // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n  // policies to it. The default is 'true', which means the role may be\n  // modified as part of the deployment.\n  mutable: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.FromRoleArnOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.FromRoleArnOptions",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = iam.Role.fromRoleArn(this, 'Role', 'arn:aws:iam::123456789012:role/MyExistingRole', {\n  // Set 'mutable' to 'false' to use the role as-is and prevent adding new\n  // policies to it. The default is 'true', which means the role may be\n  // modified as part of the deployment.\n  mutable: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "9677a5ac48f004998f0e0ff232b74e5a4fea852d717d6c6933110cf3d4788b91"
    },
    "782d9612e680e20e0a9fb4f4a7f9550d4907aeaba4459d22247ebaad530c7bde": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# volume is of type Volume\n\n\nattach_grant = volume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ndetach_grant = volume.grant_detach_volume_by_resource_tag(instance.grant_principal, [instance])",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.GrantAttachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });\nGrant detachGrant = volume.GrantDetachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.grantAttachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));\nGrant detachGrant = volume.grantDetachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.Grant"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Instance#grantPrincipal",
        "@aws-cdk/aws-iam.Grant",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "194": 4,
        "196": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "01c8d090025f2b918cb928a200d633afa1bb30ad56636a2cf220b892f9e07559"
    },
    "c56e25bbff6744468fedce7771dcf3285e7b51cba10ff5fc8b07691a2da1a256": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"MyUser\") # or User.fromUserName(stack, 'User', 'johnsmith');\ngroup = iam.Group(self, \"MyGroup\") # or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.add_to_group(group)\n# or\ngroup.add_user(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\"); // or User.fromUserName(stack, 'User', 'johnsmith');\nGroup group = new Group(this, \"MyGroup\"); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.AddToGroup(group);\n// or\ngroup.AddUser(user);",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"MyUser\"); // or User.fromUserName(stack, 'User', 'johnsmith');\nGroup group = new Group(this, \"MyGroup\"); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'MyUser'); // or User.fromUserName(stack, 'User', 'johnsmith');\nconst group = new iam.Group(this, 'MyGroup'); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.Group"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IGroup",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#addToGroup"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser'); // or User.fromUserName(stack, 'User', 'johnsmith');\nconst group = new iam.Group(this, 'MyGroup'); // or Group.fromGroupArn(stack, 'Group', 'arn:aws:iam::account-id:group/group-name');\n\nuser.addToGroup(group);\n// or\ngroup.addUser(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "7144ef435dec5160475186ed4cd528c02d2448d9359c2673a1e73bd773416639"
    },
    "a842919f1e7ca276e7053696b540b7028e9b887c5cc160cdda5e998bbb94fd9f": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nrole = iam.Role(self, \"RDSDirectoryServicesRole\",\n    assumed_by=iam.ServicePrincipal(\"rds.amazonaws.com\"),\n    managed_policies=[\n        iam.ManagedPolicy.from_aws_managed_policy_name(\"service-role/AmazonRDSDirectoryServiceAccess\")\n    ]\n)\ninstance = rds.DatabaseInstance(self, \"Instance\",\n    engine=rds.DatabaseInstanceEngine.mysql(version=rds.MysqlEngineVersion.VER_8_0_19),\n    vpc=vpc,\n    domain=\"d-????????\",  # The ID of the domain for the instance to join.\n    domain_role=role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nRole role = new Role(this, \"RDSDirectoryServicesRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"rds.amazonaws.com\"),\n    ManagedPolicies = new [] { ManagedPolicy.FromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\") }\n});\nDatabaseInstance instance = new DatabaseInstance(this, \"Instance\", new DatabaseInstanceProps {\n    Engine = DatabaseInstanceEngine.Mysql(new MySqlInstanceEngineProps { Version = MysqlEngineVersion.VER_8_0_19 }),\n    Vpc = vpc,\n    Domain = \"d-????????\",  // The ID of the domain for the instance to join.\n    DomainRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nRole role = Role.Builder.create(this, \"RDSDirectoryServicesRole\")\n        .assumedBy(new ServicePrincipal(\"rds.amazonaws.com\"))\n        .managedPolicies(List.of(ManagedPolicy.fromAwsManagedPolicyName(\"service-role/AmazonRDSDirectoryServiceAccess\")))\n        .build();\nDatabaseInstance instance = DatabaseInstance.Builder.create(this, \"Instance\")\n        .engine(DatabaseInstanceEngine.mysql(MySqlInstanceEngineProps.builder().version(MysqlEngineVersion.VER_8_0_19).build()))\n        .vpc(vpc)\n        .domain(\"d-????????\") // The ID of the domain for the instance to join.\n        .domainRole(role)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.ManagedPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicy#fromAwsManagedPolicyName",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-rds.DatabaseInstance",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#mysql",
        "@aws-cdk/aws-rds.DatabaseInstanceProps",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.MySqlInstanceEngineProps",
        "@aws-cdk/aws-rds.MysqlEngineVersion",
        "@aws-cdk/aws-rds.MysqlEngineVersion#VER_8_0_19"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst role = new iam.Role(this, 'RDSDirectoryServicesRole', {\n  assumedBy: new iam.ServicePrincipal('rds.amazonaws.com'),\n  managedPolicies: [\n    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonRDSDirectoryServiceAccess'),\n  ],\n});\nconst instance = new rds.DatabaseInstance(this, 'Instance', {\n  engine: rds.DatabaseInstanceEngine.mysql({ version: rds.MysqlEngineVersion.VER_8_0_19 }),\n  vpc,\n  domain: 'd-????????', // The ID of the domain for the instance to join.\n  domainRole: role, // Optional - will be create automatically if not provided.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "65ba03937d2b287afc45ce4e499d39d1724cdc67ebd0e299ffd9f804a2c4fa8a"
    },
    "c8e29824dcd43dfee04d20cbefa8d7b74b41d0cf915b704958888dc6f895fad8": {
      "translations": {
        "python": {
          "source": "policy_document = {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Sid\": \"FirstStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\"iam:ChangePassword\"],\n        \"Resource\": \"*\"\n    }, {\n        \"Sid\": \"SecondStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": \"s3:ListAllMyBuckets\",\n        \"Resource\": \"*\"\n    }, {\n        \"Sid\": \"ThirdStatement\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\"s3:List*\", \"s3:Get*\"\n        ],\n        \"Resource\": [\"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\"\n        ],\n        \"Condition\": {\"Bool\": {\"aws:_multi_factor_auth_present\": \"true\"}}\n    }\n    ]\n}\n\ncustom_policy_document = iam.PolicyDocument.from_json(policy_document)\n\n# You can pass this document as an initial document to a ManagedPolicy\n# or inline Policy.\nnew_managed_policy = iam.ManagedPolicy(self, \"MyNewManagedPolicy\",\n    document=custom_policy_document\n)\nnew_policy = iam.Policy(self, \"MyNewPolicy\",\n    document=custom_policy_document\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, object> policyDocument = new Dictionary<string, object> {\n    { \"Version\", \"2012-10-17\" },\n    { \"Statement\", new [] { new Dictionary<string, object> {\n        { \"Sid\", \"FirstStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", new [] { \"iam:ChangePassword\" } },\n        { \"Resource\", \"*\" }\n    }, new Dictionary<string, string> {\n        { \"Sid\", \"SecondStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", \"s3:ListAllMyBuckets\" },\n        { \"Resource\", \"*\" }\n    }, new Dictionary<string, object> {\n        { \"Sid\", \"ThirdStatement\" },\n        { \"Effect\", \"Allow\" },\n        { \"Action\", new [] { \"s3:List*\", \"s3:Get*\" } },\n        { \"Resource\", new [] { \"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\" } },\n        { \"Condition\", new Dictionary<string, IDictionary<string, string>> { { \"Bool\", new Dictionary<string, string> { { \"aws:MultiFactorAuthPresent\", \"true\" } } } } }\n    } } }\n};\n\nPolicyDocument customPolicyDocument = PolicyDocument.FromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nManagedPolicy newManagedPolicy = new ManagedPolicy(this, \"MyNewManagedPolicy\", new ManagedPolicyProps {\n    Document = customPolicyDocument\n});\nPolicy newPolicy = new Policy(this, \"MyNewPolicy\", new PolicyProps {\n    Document = customPolicyDocument\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, Object> policyDocument = Map.of(\n        \"Version\", \"2012-10-17\",\n        \"Statement\", List.of(Map.of(\n                \"Sid\", \"FirstStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", List.of(\"iam:ChangePassword\"),\n                \"Resource\", \"*\"), Map.of(\n                \"Sid\", \"SecondStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", \"s3:ListAllMyBuckets\",\n                \"Resource\", \"*\"), Map.of(\n                \"Sid\", \"ThirdStatement\",\n                \"Effect\", \"Allow\",\n                \"Action\", List.of(\"s3:List*\", \"s3:Get*\"),\n                \"Resource\", List.of(\"arn:aws:s3:::confidential-data\", \"arn:aws:s3:::confidential-data/*\"),\n                \"Condition\", Map.of(\"Bool\", Map.of(\"aws:MultiFactorAuthPresent\", \"true\")))));\n\nPolicyDocument customPolicyDocument = PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nManagedPolicy newManagedPolicy = ManagedPolicy.Builder.create(this, \"MyNewManagedPolicy\")\n        .document(customPolicyDocument)\n        .build();\nPolicy newPolicy = Policy.Builder.create(this, \"MyNewPolicy\")\n        .document(customPolicyDocument)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const policyDocument = {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"FirstStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"iam:ChangePassword\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"SecondStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"ThirdStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:List*\",\n        \"s3:Get*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::confidential-data\",\n        \"arn:aws:s3:::confidential-data/*\"\n      ],\n      \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n    }\n  ]\n};\n\nconst customPolicyDocument = iam.PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nconst newManagedPolicy = new iam.ManagedPolicy(this, 'MyNewManagedPolicy', {\n  document: customPolicyDocument,\n});\nconst newPolicy = new iam.Policy(this, 'MyNewPolicy', {\n  document: customPolicyDocument,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.ManagedPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.ManagedPolicy",
        "@aws-cdk/aws-iam.ManagedPolicyProps",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-iam.PolicyDocument#fromJson",
        "@aws-cdk/aws-iam.PolicyProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst policyDocument = {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"FirstStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"iam:ChangePassword\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"SecondStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListAllMyBuckets\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"ThirdStatement\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:List*\",\n        \"s3:Get*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::confidential-data\",\n        \"arn:aws:s3:::confidential-data/*\"\n      ],\n      \"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": \"true\"}}\n    }\n  ]\n};\n\nconst customPolicyDocument = iam.PolicyDocument.fromJson(policyDocument);\n\n// You can pass this document as an initial document to a ManagedPolicy\n// or inline Policy.\nconst newManagedPolicy = new iam.ManagedPolicy(this, 'MyNewManagedPolicy', {\n  document: customPolicyDocument,\n});\nconst newPolicy = new iam.Policy(this, 'MyNewPolicy', {\n  document: customPolicyDocument,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 35,
        "75": 16,
        "104": 2,
        "192": 4,
        "193": 8,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 19
      },
      "fqnsFingerprint": "b85715370b7308e39d70415066394a175d0802d8d3a751df90416488ef1016f7"
    },
    "529e58dc2d792864dfb6aac887ca4e1ce16a502e9480fdc048105d60840ba86c": {
      "translations": {
        "python": {
          "source": "provider = iam.OpenIdConnectProvider(self, \"MyProvider\",\n    url=\"https://openid/connect\",\n    client_ids=[\"myclient1\", \"myclient2\"]\n)\nprincipal = iam.OpenIdConnectPrincipal(provider)",
          "version": "1"
        },
        "csharp": {
          "source": "OpenIdConnectProvider provider = new OpenIdConnectProvider(this, \"MyProvider\", new OpenIdConnectProviderProps {\n    Url = \"https://openid/connect\",\n    ClientIds = new [] { \"myclient1\", \"myclient2\" }\n});\nOpenIdConnectPrincipal principal = new OpenIdConnectPrincipal(provider);",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider provider = OpenIdConnectProvider.Builder.create(this, \"MyProvider\")\n        .url(\"https://openid/connect\")\n        .clientIds(List.of(\"myclient1\", \"myclient2\"))\n        .build();\nOpenIdConnectPrincipal principal = new OpenIdConnectPrincipal(provider);",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\nconst principal = new iam.OpenIdConnectPrincipal(provider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.OpenIdConnectPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IOpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectPrincipal",
        "@aws-cdk/aws-iam.OpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\nconst principal = new iam.OpenIdConnectPrincipal(provider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "f25c4831e4ef0937fa0aea20d89b3ca6bf030762ecc43cb115bbe6435510e8cf"
    },
    "aedfa318e4892e624bafcf2bd139b3e06cafd1d43585ba9093aafb46c91bf67a": {
      "translations": {
        "python": {
          "source": "provider = iam.OpenIdConnectProvider(self, \"MyProvider\",\n    url=\"https://openid/connect\",\n    client_ids=[\"myclient1\", \"myclient2\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "OpenIdConnectProvider provider = new OpenIdConnectProvider(this, \"MyProvider\", new OpenIdConnectProviderProps {\n    Url = \"https://openid/connect\",\n    ClientIds = new [] { \"myclient1\", \"myclient2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider provider = OpenIdConnectProvider.Builder.create(this, \"MyProvider\")\n        .url(\"https://openid/connect\")\n        .clientIds(List.of(\"myclient1\", \"myclient2\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.OpenIdConnectProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.OpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5c1bac44e996bfab51f7f3595426225f218694d47d86f2f4ef3d1765bd5b49ec"
    },
    "8a87ae3a5d6abe1154dac229e64807858bcceb625c47a2a0e00c21ca0014c3c5": {
      "translations": {
        "python": {
          "source": "provider = iam.OpenIdConnectProvider(self, \"MyProvider\",\n    url=\"https://openid/connect\",\n    client_ids=[\"myclient1\", \"myclient2\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "OpenIdConnectProvider provider = new OpenIdConnectProvider(this, \"MyProvider\", new OpenIdConnectProviderProps {\n    Url = \"https://openid/connect\",\n    ClientIds = new [] { \"myclient1\", \"myclient2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider provider = OpenIdConnectProvider.Builder.create(this, \"MyProvider\")\n        .url(\"https://openid/connect\")\n        .clientIds(List.of(\"myclient1\", \"myclient2\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.OpenIdConnectProvider",
        "@aws-cdk/aws-iam.OpenIdConnectProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.OpenIdConnectProvider(this, 'MyProvider', {\n  url: 'https://openid/connect',\n  clientIds: [ 'myclient1', 'myclient2' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5c1bac44e996bfab51f7f3595426225f218694d47d86f2f4ef3d1765bd5b49ec"
    },
    "d2c533b83d059c9109b8702cf95c5056ee60657f3006fbce9bd6a5a3e0426a73": {
      "translations": {
        "python": {
          "source": "# project is of type Project\n\niam.PermissionsBoundary.of(project).apply(codebuild.UntrustedCodeBoundaryPolicy(self, \"Boundary\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Project project;\n\nPermissionsBoundary.Of(project).Apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "java": {
          "source": "Project project;\n\nPermissionsBoundary.of(project).apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PermissionsBoundary"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicy",
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.PermissionsBoundary",
        "@aws-cdk/aws-iam.PermissionsBoundary#apply",
        "@aws-cdk/aws-iam.PermissionsBoundary#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "12f1ef67d4822c62b6e21c5bc6bee554f7deee2a202cb325b85fb248668dd2bc"
    },
    "0fb15277ced62531a9eb4c008e9c63dec2e603243ddcf8f5f425dfdba2bc4c1a": {
      "translations": {
        "python": {
          "source": "user = User(self, \"MyUser\", password=cdk.SecretValue.plain_text(\"1234\"))\ngroup = Group(self, \"MyGroup\")\n\npolicy = Policy(self, \"MyPolicy\")\npolicy.attach_to_user(user)\ngroup.attach_inline_policy(policy)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\", new UserProps { Password = SecretValue.PlainText(\"1234\") });\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.AttachToUser(user);\ngroup.AttachInlinePolicy(policy);",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"MyUser\").password(SecretValue.plainText(\"1234\")).build();\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.attachToUser(user);\ngroup.attachInlinePolicy(policy);",
          "version": "1"
        },
        "$": {
          "source": "    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.Policy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.Policy#attachToUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#plainText"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport { Group, Policy, User } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 3,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "02a97f11ef79d6c23eea9c9567fb21ad9e9950565e2a40d118e791cd96885858"
    },
    "41a64d14395a27c1aba896dd8775d35033387788134490aa378250aefd62c508": {
      "translations": {
        "python": {
          "source": "my_trusted_admin_role = iam.Role.from_role_arn(self, \"TrustedRole\", \"arn:aws:iam:....\")\n# Creates a limited admin policy and assigns to the account root.\nmy_custom_policy = iam.PolicyDocument(\n    statements=[iam.PolicyStatement(\n        actions=[\"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\"\n        ],\n        principals=[iam.AccountRootPrincipal()],\n        resources=[\"*\"]\n    )]\n)\nkey = kms.Key(self, \"MyKey\",\n    policy=my_custom_policy\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IRole myTrustedAdminRole = Role.FromRoleArn(this, \"TrustedRole\", \"arn:aws:iam:....\");\n// Creates a limited admin policy and assigns to the account root.\nPolicyDocument myCustomPolicy = new PolicyDocument(new PolicyDocumentProps {\n    Statements = new [] { new PolicyStatement(new PolicyStatementProps {\n        Actions = new [] { \"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\" },\n        Principals = new [] { new AccountRootPrincipal() },\n        Resources = new [] { \"*\" }\n    }) }\n});\nKey key = new Key(this, \"MyKey\", new KeyProps {\n    Policy = myCustomPolicy\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole myTrustedAdminRole = Role.fromRoleArn(this, \"TrustedRole\", \"arn:aws:iam:....\");\n// Creates a limited admin policy and assigns to the account root.\nPolicyDocument myCustomPolicy = PolicyDocument.Builder.create()\n        .statements(List.of(PolicyStatement.Builder.create()\n                .actions(List.of(\"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\"))\n                .principals(List.of(new AccountRootPrincipal()))\n                .resources(List.of(\"*\"))\n                .build()))\n        .build();\nKey key = Key.Builder.create(this, \"MyKey\")\n        .policy(myCustomPolicy)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const myTrustedAdminRole = iam.Role.fromRoleArn(this, 'TrustedRole', 'arn:aws:iam:....');\n// Creates a limited admin policy and assigns to the account root.\nconst myCustomPolicy = new iam.PolicyDocument({\n  statements: [new iam.PolicyStatement({\n    actions: [\n      'kms:Create*',\n      'kms:Describe*',\n      'kms:Enable*',\n      'kms:List*',\n      'kms:Put*',\n    ],\n    principals: [new iam.AccountRootPrincipal()],\n    resources: ['*'],\n  })],\n});\nconst key = new kms.Key(this, 'MyKey', {\n  policy: myCustomPolicy,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PolicyDocument"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-iam.PolicyDocumentProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.KeyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTrustedAdminRole = iam.Role.fromRoleArn(this, 'TrustedRole', 'arn:aws:iam:....');\n// Creates a limited admin policy and assigns to the account root.\nconst myCustomPolicy = new iam.PolicyDocument({\n  statements: [new iam.PolicyStatement({\n    actions: [\n      'kms:Create*',\n      'kms:Describe*',\n      'kms:Enable*',\n      'kms:List*',\n      'kms:Put*',\n    ],\n    principals: [new iam.AccountRootPrincipal()],\n    resources: ['*'],\n  })],\n});\nconst key = new kms.Key(this, 'MyKey', {\n  policy: myCustomPolicy,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 3,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "1191dc9bd0ae91816ec529592558cce8a93759d14d9f5e36de1be847a61e2039"
    },
    "79a00eaac56f614851a477c4ac1590f9cb4db9607c8bedf7f0f569cd8c7dbef6": {
      "translations": {
        "python": {
          "source": "my_trusted_admin_role = iam.Role.from_role_arn(self, \"TrustedRole\", \"arn:aws:iam:....\")\n# Creates a limited admin policy and assigns to the account root.\nmy_custom_policy = iam.PolicyDocument(\n    statements=[iam.PolicyStatement(\n        actions=[\"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\"\n        ],\n        principals=[iam.AccountRootPrincipal()],\n        resources=[\"*\"]\n    )]\n)\nkey = kms.Key(self, \"MyKey\",\n    policy=my_custom_policy\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IRole myTrustedAdminRole = Role.FromRoleArn(this, \"TrustedRole\", \"arn:aws:iam:....\");\n// Creates a limited admin policy and assigns to the account root.\nPolicyDocument myCustomPolicy = new PolicyDocument(new PolicyDocumentProps {\n    Statements = new [] { new PolicyStatement(new PolicyStatementProps {\n        Actions = new [] { \"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\" },\n        Principals = new [] { new AccountRootPrincipal() },\n        Resources = new [] { \"*\" }\n    }) }\n});\nKey key = new Key(this, \"MyKey\", new KeyProps {\n    Policy = myCustomPolicy\n});",
          "version": "1"
        },
        "java": {
          "source": "IRole myTrustedAdminRole = Role.fromRoleArn(this, \"TrustedRole\", \"arn:aws:iam:....\");\n// Creates a limited admin policy and assigns to the account root.\nPolicyDocument myCustomPolicy = PolicyDocument.Builder.create()\n        .statements(List.of(PolicyStatement.Builder.create()\n                .actions(List.of(\"kms:Create*\", \"kms:Describe*\", \"kms:Enable*\", \"kms:List*\", \"kms:Put*\"))\n                .principals(List.of(new AccountRootPrincipal()))\n                .resources(List.of(\"*\"))\n                .build()))\n        .build();\nKey key = Key.Builder.create(this, \"MyKey\")\n        .policy(myCustomPolicy)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const myTrustedAdminRole = iam.Role.fromRoleArn(this, 'TrustedRole', 'arn:aws:iam:....');\n// Creates a limited admin policy and assigns to the account root.\nconst myCustomPolicy = new iam.PolicyDocument({\n  statements: [new iam.PolicyStatement({\n    actions: [\n      'kms:Create*',\n      'kms:Describe*',\n      'kms:Enable*',\n      'kms:List*',\n      'kms:Put*',\n    ],\n    principals: [new iam.AccountRootPrincipal()],\n    resources: ['*'],\n  })],\n});\nconst key = new kms.Key(this, 'MyKey', {\n  policy: myCustomPolicy,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PolicyDocumentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.PolicyDocument",
        "@aws-cdk/aws-iam.PolicyDocumentProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.KeyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTrustedAdminRole = iam.Role.fromRoleArn(this, 'TrustedRole', 'arn:aws:iam:....');\n// Creates a limited admin policy and assigns to the account root.\nconst myCustomPolicy = new iam.PolicyDocument({\n  statements: [new iam.PolicyStatement({\n    actions: [\n      'kms:Create*',\n      'kms:Describe*',\n      'kms:Enable*',\n      'kms:List*',\n      'kms:Put*',\n    ],\n    principals: [new iam.AccountRootPrincipal()],\n    resources: ['*'],\n  })],\n});\nconst key = new kms.Key(this, 'MyKey', {\n  policy: myCustomPolicy,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 3,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "1191dc9bd0ae91816ec529592558cce8a93759d14d9f5e36de1be847a61e2039"
    },
    "b3b92d9e5c628702c4d078bc180c0828dd5b298db0298fbd9351909474d4e19b": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\n# iam_user is of type User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "dce79b91f7d902fb8c9abcf47f4c1999080baa3002f491481cb3b463a902f912"
    },
    "8d909b9c689f5d850d723b66978e025ca031870a76cc6c5fcf5572018afcf756": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PolicyStatement"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "a843f788defdddfa4b9ecec06e2782caf93bfb9a0eec862921caacdd85e44d1d": {
      "translations": {
        "python": {
          "source": "topic = sns.Topic(self, \"Topic\")\ntopic_policy = sns.TopicPolicy(self, \"TopicPolicy\",\n    topics=[topic]\n)\n\ntopic_policy.document.add_statements(iam.PolicyStatement(\n    actions=[\"sns:Subscribe\"],\n    principals=[iam.AnyPrincipal()],\n    resources=[topic.topic_arn]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = new TopicPolicy(this, \"TopicPolicy\", new TopicPolicyProps {\n    Topics = new [] { topic }\n});\n\ntopicPolicy.Document.AddStatements(new PolicyStatement(new PolicyStatementProps {\n    Actions = new [] { \"sns:Subscribe\" },\n    Principals = new [] { new AnyPrincipal() },\n    Resources = new [] { topic.TopicArn }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Topic topic = new Topic(this, \"Topic\");\nTopicPolicy topicPolicy = TopicPolicy.Builder.create(this, \"TopicPolicy\")\n        .topics(List.of(topic))\n        .build();\n\ntopicPolicy.document.addStatements(PolicyStatement.Builder.create()\n        .actions(List.of(\"sns:Subscribe\"))\n        .principals(List.of(new AnyPrincipal()))\n        .resources(List.of(topic.getTopicArn()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PolicyStatementProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyDocument#addStatements",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.Topic#topicArn",
        "@aws-cdk/aws-sns.TopicPolicy",
        "@aws-cdk/aws-sns.TopicPolicy#document",
        "@aws-cdk/aws-sns.TopicPolicyProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst topic = new sns.Topic(this, 'Topic');\nconst topicPolicy = new sns.TopicPolicy(this, 'TopicPolicy', {\n  topics: [topic],\n});\n\ntopicPolicy.document.addStatements(new iam.PolicyStatement({\n  actions: [\"sns:Subscribe\"],\n  principals: [new iam.AnyPrincipal()],\n  resources: [topic.topicArn],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "192": 4,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "f856adff469ee1d0f89aea84ef9aff05905922ed0f31efad5ea189aaa722397b"
    },
    "a39cd8c5324b60d69298977f49196dfbaac98245a811ca830b8329c74ef44258": {
      "translations": {
        "python": {
          "source": "tag_param = CfnParameter(self, \"TagName\")\n\nstring_equals = CfnJson(self, \"ConditionJson\",\n    value={\n        f\"aws:PrincipalTag/{tagParam.valueAsString}\": True\n    }\n)\n\nprincipal = iam.AccountRootPrincipal().with_conditions({\n    \"StringEquals\": string_equals\n})\n\niam.Role(self, \"MyRole\", assumed_by=principal)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = new CfnJson(this, \"ConditionJson\", new CfnJsonProps {\n    Value = new Dictionary<string, boolean> {\n        { $\"aws:PrincipalTag/{tagParam.valueAsString}\", true }\n    }\n});\n\nPrincipalBase principal = new AccountRootPrincipal().WithConditions(new Dictionary<string, object> {\n    { \"StringEquals\", stringEquals }\n});\n\nnew Role(this, \"MyRole\", new RoleProps { AssumedBy = principal });",
          "version": "1"
        },
        "java": {
          "source": "CfnParameter tagParam = new CfnParameter(this, \"TagName\");\n\nCfnJson stringEquals = CfnJson.Builder.create(this, \"ConditionJson\")\n        .value(Map.of(\n                String.format(\"aws:PrincipalTag/%s\", tagParam.getValueAsString()), true))\n        .build();\n\nPrincipalBase principal = new AccountRootPrincipal().withConditions(Map.of(\n        \"StringEquals\", stringEquals));\n\nRole.Builder.create(this, \"MyRole\").assumedBy(principal).build();",
          "version": "1"
        },
        "$": {
          "source": "const tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.PrincipalBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.PrincipalBase",
        "@aws-cdk/aws-iam.PrincipalBase#withConditions",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/core.CfnJson",
        "@aws-cdk/core.CfnJsonProps",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "import * as cfn from '@aws-cdk/aws-cloudformation';\nimport * as customresources from '@aws-cdk/custom-resources';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport {\n  App,\n  Aws,\n  CfnCondition,\n  CfnDynamicReference,\n  CfnDynamicReferenceService,\n  CfnInclude,\n  CfnJson,\n  CfnMapping,\n  CfnOutput,\n  CfnParameter,\n  CfnResource,\n  CfnResourceProps,\n  ConcreteDependable,\n  Construct,\n  CustomResource,\n  CustomResourceProvider,\n  CustomResourceProviderRuntime,\n  DependableTrait,\n  Duration,\n  Fn,\n  IConstruct,\n  RemovalPolicy,\n  SecretValue,\n  Size,\n  SizeRoundingBehavior,\n  Stack,\n  StackProps,\n  Stage,\n  Token,\n} from '@aws-cdk/core';\n\ndeclare const app: App;\ndeclare const arn: 'arn:partition:service:region:account-id:resource-id';\ndeclare const cfnResource: CfnResource;\ndeclare const construct: Construct;\ndeclare const constructA: Construct;\ndeclare const constructB: Construct;\ndeclare const constructC: Construct;\ndeclare const functionProps: lambda.FunctionProps;\ndeclare const isCompleteHandler: lambda.Function;\ndeclare const myBucket: s3.IBucket;\ndeclare const myFunction: lambda.IFunction;\ndeclare const myTopic: sns.ITopic;\ndeclare const onEventHandler: lambda.Function;\ndeclare const resourceProps: CfnResourceProps;\n\ndeclare class MyStack extends Stack {}\ndeclare class YourStack extends Stack {}\n\nclass StackThatProvidesABucket extends Stack {\n  public readonly bucket!: s3.IBucket;\n}\n\ninterface StackThatExpectsABucketProps extends StackProps {\n  readonly bucket: s3.IBucket;\n}\n\nclass StackThatExpectsABucket extends Stack {\n  constructor(scope: Construct, id: string, props: StackThatExpectsABucketProps) {\n    super(scope, id, props);\n  }\n}\n\nclass fixture$construct extends Construct {\n  public constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst tagParam = new CfnParameter(this, 'TagName');\n\nconst stringEquals = new CfnJson(this, 'ConditionJson', {\n  value: {\n    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,\n  },\n});\n\nconst principal = new iam.AccountRootPrincipal().withConditions({\n  StringEquals: stringEquals,\n});\n\nnew iam.Role(this, 'MyRole', { assumedBy: principal });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "15": 1,
        "17": 1,
        "75": 17,
        "104": 3,
        "106": 1,
        "154": 1,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 4,
        "211": 1,
        "221": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4
      },
      "fqnsFingerprint": "3a0621f2dc036636a5a92262d11858a53f6da4be9816d8f8593c0b1254866ab7"
    },
    "49db63d3ddda6cc8a4ff2f2f34f153b73294f8debcfefb3ca5974790b5339556": {
      "translations": {
        "python": {
          "source": "lambda_role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\"),\n    description=\"Example role...\"\n)\n\nstream = kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)\n\n# give lambda permissions to read stream\nstream.grant_read(lambda_role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role lambdaRole = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\"),\n    Description = \"Example role...\"\n});\n\nStream stream = new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});\n\n// give lambda permissions to read stream\nstream.GrantRead(lambdaRole);",
          "version": "1"
        },
        "java": {
          "source": "Role lambdaRole = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .description(\"Example role...\")\n        .build();\n\nStream stream = Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "1"
        },
        "$": {
          "source": "const lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.Role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8997ed804d64d31bf650abb8ffaf49344ce26f8655fd382cd52d36a2be447624"
    },
    "0d24ee6c0eb1dcab73dd195781bd69db5eef36f412b1639c55282375b4bf80f8": {
      "translations": {
        "python": {
          "source": "lambda_role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\"),\n    description=\"Example role...\"\n)\n\nstream = kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)\n\n# give lambda permissions to read stream\nstream.grant_read(lambda_role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role lambdaRole = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\"),\n    Description = \"Example role...\"\n});\n\nStream stream = new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});\n\n// give lambda permissions to read stream\nstream.GrantRead(lambdaRole);",
          "version": "1"
        },
        "java": {
          "source": "Role lambdaRole = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .description(\"Example role...\")\n        .build();\n\nStream stream = Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "1"
        },
        "$": {
          "source": "const lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.RoleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8997ed804d64d31bf650abb8ffaf49344ce26f8655fd382cd52d36a2be447624"
    },
    "5952db042452a4b9b587e0b4982ca00fbd021443108ff52347a5259262151140": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\niam.Role(self, \"Role\",\n    assumed_by=iam.SamlConsolePrincipal(provider)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nnew Role(this, \"Role\", new RoleProps {\n    AssumedBy = new SamlConsolePrincipal(provider)\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nRole.Builder.create(this, \"Role\")\n        .assumedBy(new SamlConsolePrincipal(provider))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.SamlConsolePrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.SamlConsolePrincipal",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3c9e2b0782b1cf94d4e33d967d9b10738b2414df3d13c28f8aae145c1b8931a5"
    },
    "a4fa1690e052b3ce79c48e94948ebd968add5c072305b967aa35f19beea7ee62": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\nprincipal = iam.SamlPrincipal(provider, {\n    \"StringEquals\": {\n        \"SAML:iss\": \"issuer\"\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nSamlPrincipal principal = new SamlPrincipal(provider, new Dictionary<string, object> {\n    { \"StringEquals\", new Dictionary<string, string> {\n        { \"SAML:iss\", \"issuer\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nSamlPrincipal principal = new SamlPrincipal(provider, Map.of(\n        \"StringEquals\", Map.of(\n                \"SAML:iss\", \"issuer\")));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.SamlMetadataDocument"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlPrincipal",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8bee988a0af423ea6d2c9e99f5aaaa5f025819d0b219c8814aaf7b525d6fa130"
    },
    "3617b40647c75319a196b8ed88617f011d1bbc3b0e3855f19569a3f284564a45": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\nprincipal = iam.SamlPrincipal(provider, {\n    \"StringEquals\": {\n        \"SAML:iss\": \"issuer\"\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nSamlPrincipal principal = new SamlPrincipal(provider, new Dictionary<string, object> {\n    { \"StringEquals\", new Dictionary<string, string> {\n        { \"SAML:iss\", \"issuer\" }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nSamlPrincipal principal = new SamlPrincipal(provider, Map.of(\n        \"StringEquals\", Map.of(\n                \"SAML:iss\", \"issuer\")));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.SamlPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlPrincipal",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nconst principal = new iam.SamlPrincipal(provider, {\n  StringEquals: {\n    'SAML:iss': 'issuer',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8bee988a0af423ea6d2c9e99f5aaaa5f025819d0b219c8814aaf7b525d6fa130"
    },
    "eab80f639ff3acf0b6247773007573c44708cfdbc337069c2fab584914683841": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\niam.Role(self, \"Role\",\n    assumed_by=iam.SamlConsolePrincipal(provider)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nnew Role(this, \"Role\", new RoleProps {\n    AssumedBy = new SamlConsolePrincipal(provider)\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nRole.Builder.create(this, \"Role\")\n        .assumedBy(new SamlConsolePrincipal(provider))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.SamlProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.SamlConsolePrincipal",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3c9e2b0782b1cf94d4e33d967d9b10738b2414df3d13c28f8aae145c1b8931a5"
    },
    "a69c3b1fd7da7ce81693c8c07104b687c2e28c24611452b7b97c40e11e64870a": {
      "translations": {
        "python": {
          "source": "provider = iam.SamlProvider(self, \"Provider\",\n    metadata_document=iam.SamlMetadataDocument.from_file(\"/path/to/saml-metadata-document.xml\")\n)\niam.Role(self, \"Role\",\n    assumed_by=iam.SamlConsolePrincipal(provider)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SamlProvider provider = new SamlProvider(this, \"Provider\", new SamlProviderProps {\n    MetadataDocument = SamlMetadataDocument.FromFile(\"/path/to/saml-metadata-document.xml\")\n});\nnew Role(this, \"Role\", new RoleProps {\n    AssumedBy = new SamlConsolePrincipal(provider)\n});",
          "version": "1"
        },
        "java": {
          "source": "SamlProvider provider = SamlProvider.Builder.create(this, \"Provider\")\n        .metadataDocument(SamlMetadataDocument.fromFile(\"/path/to/saml-metadata-document.xml\"))\n        .build();\nRole.Builder.create(this, \"Role\")\n        .assumedBy(new SamlConsolePrincipal(provider))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.SamlProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.SamlConsolePrincipal",
        "@aws-cdk/aws-iam.SamlMetadataDocument",
        "@aws-cdk/aws-iam.SamlMetadataDocument#fromFile",
        "@aws-cdk/aws-iam.SamlProvider",
        "@aws-cdk/aws-iam.SamlProviderProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new iam.SamlProvider(this, 'Provider', {\n  metadataDocument: iam.SamlMetadataDocument.fromFile('/path/to/saml-metadata-document.xml'),\n});\nnew iam.Role(this, 'Role', {\n  assumedBy: new iam.SamlConsolePrincipal(provider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3c9e2b0782b1cf94d4e33d967d9b10738b2414df3d13c28f8aae145c1b8931a5"
    },
    "7ac132e0c8f14218f0cf203650d98f33f717946538d5ffae74f158abbac61339": {
      "translations": {
        "python": {
          "source": "lambda_role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\"),\n    description=\"Example role...\"\n)\n\nstream = kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)\n\n# give lambda permissions to read stream\nstream.grant_read(lambda_role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role lambdaRole = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\"),\n    Description = \"Example role...\"\n});\n\nStream stream = new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});\n\n// give lambda permissions to read stream\nstream.GrantRead(lambdaRole);",
          "version": "1"
        },
        "java": {
          "source": "Role lambdaRole = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .description(\"Example role...\")\n        .build();\n\nStream stream = Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "1"
        },
        "$": {
          "source": "const lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.ServicePrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8997ed804d64d31bf650abb8ffaf49344ce26f8655fd382cd52d36a2be447624"
    },
    "5856dcac3e75e684647e8fbaeebc372bd224c6b9a0620df8a3138fcc049f7498": {
      "translations": {
        "python": {
          "source": "user = User(self, \"MyUser\", password=cdk.SecretValue.plain_text(\"1234\"))\ngroup = Group(self, \"MyGroup\")\n\npolicy = Policy(self, \"MyPolicy\")\npolicy.attach_to_user(user)\ngroup.attach_inline_policy(policy)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\", new UserProps { Password = SecretValue.PlainText(\"1234\") });\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.AttachToUser(user);\ngroup.AttachInlinePolicy(policy);",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"MyUser\").password(SecretValue.plainText(\"1234\")).build();\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.attachToUser(user);\ngroup.attachInlinePolicy(policy);",
          "version": "1"
        },
        "$": {
          "source": "    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.User"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.Policy#attachToUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#plainText"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport { Group, Policy, User } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 3,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "02a97f11ef79d6c23eea9c9567fb21ad9e9950565e2a40d118e791cd96885858"
    },
    "e90f2a1af4abfea90ac28f3d752ee9e8f932d91bcbd5d4abfbf5e1b5ace31e68": {
      "translations": {
        "python": {
          "source": "user = iam.User.from_user_attributes(self, \"MyImportedUserByAttributes\",\n    user_arn=\"arn:aws:iam::123456789012:user/johnsmith\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IUser user = User.FromUserAttributes(this, \"MyImportedUserByAttributes\", new UserAttributes {\n    UserArn = \"arn:aws:iam::123456789012:user/johnsmith\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IUser user = User.fromUserAttributes(this, \"MyImportedUserByAttributes\", UserAttributes.builder()\n        .userArn(\"arn:aws:iam::123456789012:user/johnsmith\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const user = iam.User.fromUserAttributes(this, 'MyImportedUserByAttributes', {\n  userArn: 'arn:aws:iam::123456789012:user/johnsmith',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.UserAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.User#fromUserAttributes",
        "@aws-cdk/aws-iam.UserAttributes"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = iam.User.fromUserAttributes(this, 'MyImportedUserByAttributes', {\n  userArn: 'arn:aws:iam::123456789012:user/johnsmith',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "18246e690a8a095d9f27e3bc81a568bc51e0a52310013712a199d2a36637c82a"
    },
    "c1c6576055440716030d7df6707622a6f6d0e5c23a421121f5f2da57b67807b9": {
      "translations": {
        "python": {
          "source": "user = User(self, \"MyUser\", password=cdk.SecretValue.plain_text(\"1234\"))\ngroup = Group(self, \"MyGroup\")\n\npolicy = Policy(self, \"MyPolicy\")\npolicy.attach_to_user(user)\ngroup.attach_inline_policy(policy)",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\", new UserProps { Password = SecretValue.PlainText(\"1234\") });\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.AttachToUser(user);\ngroup.AttachInlinePolicy(policy);",
          "version": "1"
        },
        "java": {
          "source": "User user = User.Builder.create(this, \"MyUser\").password(SecretValue.plainText(\"1234\")).build();\nGroup group = new Group(this, \"MyGroup\");\n\nPolicy policy = new Policy(this, \"MyPolicy\");\npolicy.attachToUser(user);\ngroup.attachInlinePolicy(policy);",
          "version": "1"
        },
        "$": {
          "source": "    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.UserProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.Group",
        "@aws-cdk/aws-iam.IUser",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.Policy#attachToUser",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#plainText"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport { Group, Policy, User } from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nexport class ExampleConstruct extends Construct {\n  constructor(scope: constructs.Construct, id: string) {\n    super(scope, id);\n\n    /// !show\n    const user = new User(this, 'MyUser', { password: cdk.SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);\n    /// !hide\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 3,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "02a97f11ef79d6c23eea9c9567fb21ad9e9950565e2a40d118e791cd96885858"
    },
    "3626a953cffefda7e4d4d20d7982db1c8aa1282ee4272597f45936cc0b34b8d0": {
      "translations": {
        "python": {
          "source": "principal = iam.WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", {\n    \"StringEquals\": {\"cognito-identity.amazonaws.com:aud\": \"us-east-2:12345678-abcd-abcd-abcd-123456\"},\n    \"ForAnyValue:StringLike\": {\"cognito-identity.amazonaws.com:amr\": \"unauthenticated\"}\n})",
          "version": "1"
        },
        "csharp": {
          "source": "WebIdentityPrincipal principal = new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", new Dictionary<string, object> {\n    { \"StringEquals\", new Dictionary<string, string> { { \"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\" } } },\n    { \"ForAnyValue:StringLike\", new Dictionary<string, string> { { \"cognito-identity.amazonaws.com:amr\", \"unauthenticated\" } } }\n});",
          "version": "1"
        },
        "java": {
          "source": "WebIdentityPrincipal principal = new WebIdentityPrincipal(\"cognito-identity.amazonaws.com\", Map.of(\n        \"StringEquals\", Map.of(\"cognito-identity.amazonaws.com:aud\", \"us-east-2:12345678-abcd-abcd-abcd-123456\"),\n        \"ForAnyValue:StringLike\", Map.of(\"cognito-identity.amazonaws.com:amr\", \"unauthenticated\")));",
          "version": "1"
        },
        "$": {
          "source": "const principal = new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n  'StringEquals': { 'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456' },\n  'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated' },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-iam.WebIdentityPrincipal"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.WebIdentityPrincipal"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst principal = new iam.WebIdentityPrincipal('cognito-identity.amazonaws.com', {\n  'StringEquals': { 'cognito-identity.amazonaws.com:aud': 'us-east-2:12345678-abcd-abcd-abcd-123456' },\n  'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 3,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "de6706f646214f7cb0c505457396960e8a0f6008ca2ac33c6d4fa56e2a05f9ac"
    }
  }
}
