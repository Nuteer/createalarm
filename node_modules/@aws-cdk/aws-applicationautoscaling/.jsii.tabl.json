{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "36fcf4215fe315a16574129d5f119f79c47c17abcb757a8731673fd29845f682": {
      "translations": {
        "python": {
          "source": "# resource is of type SomeScalableResource\n\n\ncapacity = resource.auto_scale_capacity(\n    min_capacity=5,\n    max_capacity=100\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SomeScalableResource resource;\n\n\nScalableAttribute capacity = resource.AutoScaleCapacity(new Caps {\n    MinCapacity = 5,\n    MaxCapacity = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "SomeScalableResource resource;\n\n\nScalableAttribute capacity = resource.autoScaleCapacity(new Caps()\n        .minCapacity(5)\n        .maxCapacity(100)\n        );",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: SomeScalableResource;\n\nconst capacity = resource.autoScaleCapacity({\n  minCapacity: 5,\n  maxCapacity: 100\n});\n\n// Then call a method to enable metric scaling and/or schedule scaling\n// (explained below):\n//\n// capacity.scaleOnMetric(...);\n// capacity.scaleToTrackMetric(...);\n// capacity.scaleOnSchedule(...);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 53
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: SomeScalableResource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst capacity = resource.autoScaleCapacity({\n  minCapacity: 5,\n  maxCapacity: 100\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 7,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b2e5fa01f71ed6fc855039cdf65a429aa79b026106dea60d35f8a36d10aa157e": {
      "translations": {
        "python": {
          "source": "# capacity is of type ScalableAttribute\n# cpu_utilization is of type Metric\n\n\ncapacity.scale_on_metric(\"ScaleToCPU\",\n    metric=cpu_utilization,\n    scaling_steps=[appscaling.ScalingInterval(upper=10, change=-1), appscaling.ScalingInterval(lower=50, change=+1), appscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=appscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = cpuUtilization,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(cpuUtilization)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 88
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType",
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 1,
        "75": 20,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "87f96f24636563da6854303f441b7c277257827481c52db65d2578b5cf048e58"
    },
    "b1fed4169494d18e2f041d3b5ae9bef2120d18165a3ca1b842756d6da4e1bd35": {
      "translations": {
        "python": {
          "source": "# capacity is of type ScalableAttribute\n# cpu_utilization is of type Metric\n\n\ncapacity.scale_on_metric(\"ScaleToCPUWithMultipleDatapoints\",\n    metric=cpu_utilization,\n    scaling_steps=[appscaling.ScalingInterval(upper=10, change=-1), appscaling.ScalingInterval(lower=50, change=+1), appscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # if the cpuUtilization metric has a period of 1 minute, then data points\n    # in the last 10 minutes will be evaluated\n    evaluation_periods=10,\n\n    # Only trigger a scaling action when 6 datapoints out of the last 10 are\n    # breaching. If this is left unspecified, then ALL datapoints in the\n    # evaluation period must be breaching to trigger a scaling action\n    datapoints_to_alarm=6\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.ScaleOnMetric(\"ScaleToCPUWithMultipleDatapoints\", new BasicStepScalingPolicyProps {\n    Metric = cpuUtilization,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // if the cpuUtilization metric has a period of 1 minute, then data points\n    // in the last 10 minutes will be evaluated\n    EvaluationPeriods = 10,\n\n    // Only trigger a scaling action when 6 datapoints out of the last 10 are\n    // breaching. If this is left unspecified, then ALL datapoints in the\n    // evaluation period must be breaching to trigger a scaling action\n    DatapointsToAlarm = 6\n});",
          "version": "1"
        },
        "java": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.scaleOnMetric(\"ScaleToCPUWithMultipleDatapoints\", BasicStepScalingPolicyProps.builder()\n        .metric(cpuUtilization)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // if the cpuUtilization metric has a period of 1 minute, then data points\n        // in the last 10 minutes will be evaluated\n        .evaluationPeriods(10)\n\n        // Only trigger a scaling action when 6 datapoints out of the last 10 are\n        // breaching. If this is left unspecified, then ALL datapoints in the\n        // evaluation period must be breaching to trigger a scaling action\n        .datapointsToAlarm(6)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n\ncapacity.scaleOnMetric('ScaleToCPUWithMultipleDatapoints', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // if the cpuUtilization metric has a period of 1 minute, then data points\n  // in the last 10 minutes will be evaluated\n  evaluationPeriods: 10,\n\n  // Only trigger a scaling action when 6 datapoints out of the last 10 are\n  // breaching. If this is left unspecified, then ALL datapoints in the\n  // evaluation period must be breaching to trigger a scaling action\n  datapointsToAlarm: 6\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 117
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncapacity.scaleOnMetric('ScaleToCPUWithMultipleDatapoints', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // if the cpuUtilization metric has a period of 1 minute, then data points\n  // in the last 10 minutes will be evaluated\n  evaluationPeriods: 10,\n\n  // Only trigger a scaling action when 6 datapoints out of the last 10 are\n  // breaching. If this is left unspecified, then ALL datapoints in the\n  // evaluation period must be breaching to trigger a scaling action\n  datapointsToAlarm: 6\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 8,
        "10": 1,
        "75": 18,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 4,
        "194": 1,
        "196": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "c7bd32ba529330b780e60bad65fe2c5e24834a1194dda518c2439c291006f1b3"
    },
    "96f2743a64468804531ba1ec1251c291544362e8ab746b8cc1e4bdde2b39f452": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_dynamodb as dynamodb\n\n# table is of type Table\n\n\nread_capacity = table.auto_scale_read_capacity(\n    min_capacity=10,\n    max_capacity=1000\n)\nread_capacity.scale_on_utilization(\n    target_utilization_percent=60\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.DynamoDB;\n\nTable table;\n\n\nIScalableTableAttribute readCapacity = table.AutoScaleReadCapacity(new EnableScalingProps {\n    MinCapacity = 10,\n    MaxCapacity = 1000\n});\nreadCapacity.ScaleOnUtilization(new UtilizationScalingProps {\n    TargetUtilizationPercent = 60\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.dynamodb.*;\n\nTable table;\n\n\nIScalableTableAttribute readCapacity = table.autoScaleReadCapacity(EnableScalingProps.builder()\n        .minCapacity(10)\n        .maxCapacity(1000)\n        .build());\nreadCapacity.scaleOnUtilization(UtilizationScalingProps.builder()\n        .targetUtilizationPercent(60)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\ndeclare const table: dynamodb.Table;\n\nconst readCapacity = table.autoScaleReadCapacity({\n  minCapacity: 10,\n  maxCapacity: 1000\n});\nreadCapacity.scaleOnUtilization({\n  targetUtilizationPercent: 60\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 151
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table#autoScaleReadCapacity",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst readCapacity = table.autoScaleReadCapacity({\n  minCapacity: 10,\n  maxCapacity: 1000\n});\nreadCapacity.scaleOnUtilization({\n  targetUtilizationPercent: 60\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 1,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "407c72a0108582390f79061e98e333ecef33a6197890f447c7dd8fff2587c9ea"
    },
    "4d5068d0886590720dc490bb6909dbd1cef0efebb7a1c62b008aaef0815699e2": {
      "translations": {
        "python": {
          "source": "# resource is of type SomeScalableResource\n\n\ncapacity = resource.auto_scale_capacity(\n    min_capacity=1,\n    max_capacity=50\n)\n\ncapacity.scale_on_schedule(\"PrescaleInTheMorning\",\n    schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)\n\ncapacity.scale_on_schedule(\"AllowDownscalingAtNight\",\n    schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "SomeScalableResource resource;\n\n\nScalableAttribute capacity = resource.AutoScaleCapacity(new Caps {\n    MinCapacity = 1,\n    MaxCapacity = 50\n});\n\ncapacity.ScaleOnSchedule(\"PrescaleInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});\n\ncapacity.ScaleOnSchedule(\"AllowDownscalingAtNight\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "SomeScalableResource resource;\n\n\nScalableAttribute capacity = resource.autoScaleCapacity(new Caps()\n        .minCapacity(1)\n        .maxCapacity(50)\n        );\n\ncapacity.scaleOnSchedule(\"PrescaleInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());\n\ncapacity.scaleOnSchedule(\"AllowDownscalingAtNight\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: SomeScalableResource;\n\nconst capacity = resource.autoScaleCapacity({\n  minCapacity: 1,\n  maxCapacity: 50,\n});\n\ncapacity.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\ncapacity.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 189
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: SomeScalableResource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst capacity = resource.autoScaleCapacity({\n  minCapacity: 1,\n  maxCapacity: 50,\n});\n\ncapacity.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\ncapacity.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 6,
        "75": 25,
        "130": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 5,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "1e3736a063d9417070f26aab36f5b6de16096da0bef8bdf1f46e7809a466b2cc"
    },
    "01eb679e6a72ee04841f63116a35f7a64709527c24b4cbd9ed40c3d7cefba83a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 212
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    },
    "e551307e70675900cfec59454dbbd261d8da83fda3399c8e36c49c41dfb9e334": {
      "translations": {
        "python": {
          "source": "shards_scalable_target = appscaling.ScalableTarget(self, \"ElastiCacheRedisShardsScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.ELASTICACHE,\n    scalable_dimension=\"elasticache:replication-group:NodeGroups\",\n    min_capacity=2,\n    max_capacity=10,\n    resource_id=\"replication-group/main-cluster\"\n)\n\nshards_scalable_target.scale_to_track_metric(\"ElastiCacheRedisShardsCPUUtilization\",\n    target_value=20,\n    predefined_metric=appscaling.PredefinedMetric.ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ScalableTarget shardsScalableTarget = new ScalableTarget(this, \"ElastiCacheRedisShardsScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.ELASTICACHE,\n    ScalableDimension = \"elasticache:replication-group:NodeGroups\",\n    MinCapacity = 2,\n    MaxCapacity = 10,\n    ResourceId = \"replication-group/main-cluster\"\n});\n\nshardsScalableTarget.ScaleToTrackMetric(\"ElastiCacheRedisShardsCPUUtilization\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 20,\n    PredefinedMetric = PredefinedMetric.ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "ScalableTarget shardsScalableTarget = ScalableTarget.Builder.create(this, \"ElastiCacheRedisShardsScalableTarget\")\n        .serviceNamespace(ServiceNamespace.ELASTICACHE)\n        .scalableDimension(\"elasticache:replication-group:NodeGroups\")\n        .minCapacity(2)\n        .maxCapacity(10)\n        .resourceId(\"replication-group/main-cluster\")\n        .build();\n\nshardsScalableTarget.scaleToTrackMetric(\"ElastiCacheRedisShardsCPUUtilization\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(20)\n        .predefinedMetric(PredefinedMetric.ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const shardsScalableTarget = new appscaling.ScalableTarget(this, 'ElastiCacheRedisShardsScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.ELASTICACHE,\n  scalableDimension: 'elasticache:replication-group:NodeGroups',\n  minCapacity: 2,\n  maxCapacity: 10,\n  resourceId: 'replication-group/main-cluster',\n});\n\nshardsScalableTarget.scaleToTrackMetric('ElastiCacheRedisShardsCPUUtilization', {\n  targetValue: 20,\n  predefinedMetric: appscaling.PredefinedMetric.ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-applicationautoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 243
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#ELASTICACHE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst shardsScalableTarget = new appscaling.ScalableTarget(this, 'ElastiCacheRedisShardsScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.ELASTICACHE,\n  scalableDimension: 'elasticache:replication-group:NodeGroups',\n  minCapacity: 2,\n  maxCapacity: 10,\n  resourceId: 'replication-group/main-cluster',\n});\n\nshardsScalableTarget.scaleToTrackMetric('ElastiCacheRedisShardsCPUUtilization', {\n  targetValue: 20,\n  predefinedMetric: appscaling.PredefinedMetric.ELASTICACHE_PRIMARY_ENGINE_CPU_UTILIZATION,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "c04318484d2d9a7e79f0b4dfae6c97e09baec284fc060152c1043f1dabac1a41"
    },
    "4021bca7fe9f1bf22ff2706a0226df24ff237c766902673d93de1bce385d73f2": {
      "translations": {
        "python": {
          "source": "# capacity is of type ScalableAttribute\n# cpu_utilization is of type Metric\n\n\ncapacity.scale_on_metric(\"ScaleToCPU\",\n    metric=cpu_utilization,\n    scaling_steps=[appscaling.ScalingInterval(upper=10, change=-1), appscaling.ScalingInterval(lower=50, change=+1), appscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=appscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = cpuUtilization,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(cpuUtilization)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.AdjustmentType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType",
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 1,
        "75": 20,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "87f96f24636563da6854303f441b7c277257827481c52db65d2578b5cf048e58"
    },
    "8d88467c368db2b60226028c774ccfb24f670fb7aaf0913932eebf0f998a0729": {
      "translations": {
        "python": {
          "source": "# capacity is of type ScalableAttribute\n# cpu_utilization is of type Metric\n\n\ncapacity.scale_on_metric(\"ScaleToCPU\",\n    metric=cpu_utilization,\n    scaling_steps=[appscaling.ScalingInterval(upper=10, change=-1), appscaling.ScalingInterval(lower=50, change=+1), appscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=appscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = cpuUtilization,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "ScalableAttribute capacity;\nMetric cpuUtilization;\n\n\ncapacity.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(cpuUtilization)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType",
        "@aws-cdk/aws-applicationautoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-applicationautoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const capacity: ScalableAttribute;\ndeclare const cpuUtilization: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncapacity.scaleOnMetric('ScaleToCPU', {\n  metric: cpuUtilization,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PercentChangeInCapacity to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: appscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 1,
        "75": 20,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "87f96f24636563da6854303f441b7c277257827481c52db65d2578b5cf048e58"
    },
    "01b85e858967c01afac8aa6e06eabfc1dfebc7d5496a03a409444b8206440a75": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    },
    "9ce0925b157e65c968181ab4c15f18d50588b0374c27f51eab3f72c5fbe36e60": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=5,\n    max_capacity=20\n)\n\nscalable_target.scale_on_schedule(\"DaytimeScaleDown\",\n    schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=1\n)\n\nscalable_target.scale_on_schedule(\"EveningRushScaleUp\",\n    schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=10\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 5,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnSchedule(\"DaytimeScaleDown\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 1\n});\n\nscalableTarget.ScaleOnSchedule(\"EveningRushScaleUp\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 10\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(5)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"DaytimeScaleDown\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"EveningRushScaleUp\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(10)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.CronOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnSchedule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 8,
        "75": 39,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 7,
        "194": 11,
        "196": 6,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e206278730ea35755a2f63b5c40b00546b8505c3bf07861fe144e103480f4937"
    },
    "fba40961d32c8072fe242224a1e7ea635497dfa7b4c18f205e18f058a72e558f": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.EnableScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dc8c4e227694b89a81e0edc2d1e4783cee7f3f29d9c93ed38b3ba2c628f56e53"
    },
    "18cf4ceafb6bad4d21d53cbf880fbdf1c79d2d1ea0bc5ed4a5a8fad8ae51bdec": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.PredefinedMetric"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    },
    "095a76dee1b7932da1b79bd925f4df4418dbd09ddf61034528d5087cf5c6ba2d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.ScalableTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    },
    "ed40252919114e46ddd0ab137648c92fe18186cffc2873439620a86d78dc74a7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    },
    "6a205661010f55f4c26427c3da44634229b7e880158588c2f7b83d79270f53f5": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=5,\n    max_capacity=20\n)\n\nscalable_target.scale_on_schedule(\"DaytimeScaleDown\",\n    schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=1\n)\n\nscalable_target.scale_on_schedule(\"EveningRushScaleUp\",\n    schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=10\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 5,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnSchedule(\"DaytimeScaleDown\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 1\n});\n\nscalableTarget.ScaleOnSchedule(\"EveningRushScaleUp\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 10\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(5)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"DaytimeScaleDown\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());\n\nscalableTarget.scaleOnSchedule(\"EveningRushScaleUp\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(10)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.ScalingSchedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnSchedule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 8,
        "75": 39,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 7,
        "194": 11,
        "196": 6,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 15,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e206278730ea35755a2f63b5c40b00546b8505c3bf07861fe144e103480f4937"
    },
    "3dc11af4b27be39386e4fefe525c533baa2264222fa05a2385bb46f647e5bd49": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.Schedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "4b5b656bf515ff3427a14aed12e69c082498ba610444dfc5ec64007d0188c669": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# code is of type Code\n\n\nhandler = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.PYTHON_3_7,\n    handler=\"index.handler\",\n    code=code,\n\n    reserved_concurrent_executions=2\n)\n\nfn_ver = handler.add_version(\"CDKLambdaVersion\", undefined, \"demo alias\", 10)\n\ntarget = appscaling.ScalableTarget(self, \"ScalableTarget\",\n    service_namespace=appscaling.ServiceNamespace.LAMBDA,\n    max_capacity=100,\n    min_capacity=10,\n    resource_id=f\"function:{handler.functionName}:{fnVer.version}\",\n    scalable_dimension=\"lambda:function:ProvisionedConcurrency\"\n)\n\ntarget.scale_to_track_metric(\"PceTracking\",\n    target_value=0.9,\n    predefined_metric=appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nCode code;\n\n\nFunction handler = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.PYTHON_3_7,\n    Handler = \"index.handler\",\n    Code = code,\n\n    ReservedConcurrentExecutions = 2\n});\n\nVersion fnVer = handler.AddVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = new ScalableTarget(this, \"ScalableTarget\", new ScalableTargetProps {\n    ServiceNamespace = ServiceNamespace.LAMBDA,\n    MaxCapacity = 100,\n    MinCapacity = 10,\n    ResourceId = $\"function:{handler.functionName}:{fnVer.version}\",\n    ScalableDimension = \"lambda:function:ProvisionedConcurrency\"\n});\n\ntarget.ScaleToTrackMetric(\"PceTracking\", new BasicTargetTrackingScalingPolicyProps {\n    TargetValue = 0.9,\n    PredefinedMetric = PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nCode code;\n\n\nFunction handler = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.PYTHON_3_7)\n        .handler(\"index.handler\")\n        .code(code)\n\n        .reservedConcurrentExecutions(2)\n        .build();\n\nVersion fnVer = handler.addVersion(\"CDKLambdaVersion\", undefined, \"demo alias\", 10);\n\nScalableTarget target = ScalableTarget.Builder.create(this, \"ScalableTarget\")\n        .serviceNamespace(ServiceNamespace.LAMBDA)\n        .maxCapacity(100)\n        .minCapacity(10)\n        .resourceId(String.format(\"function:%s:%s\", handler.getFunctionName(), fnVer.getVersion()))\n        .scalableDimension(\"lambda:function:ProvisionedConcurrency\")\n        .build();\n\ntarget.scaleToTrackMetric(\"PceTracking\", BasicTargetTrackingScalingPolicyProps.builder()\n        .targetValue(0.9)\n        .predefinedMetric(PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-applicationautoscaling.ServiceNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.BasicTargetTrackingScalingPolicyProps",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric",
        "@aws-cdk/aws-applicationautoscaling.PredefinedMetric#LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget",
        "@aws-cdk/aws-applicationautoscaling.ScalableTarget#scaleToTrackMetric",
        "@aws-cdk/aws-applicationautoscaling.ScalableTargetProps",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace",
        "@aws-cdk/aws-applicationautoscaling.ServiceNamespace#LAMBDA",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#PYTHON_3_7",
        "@aws-cdk/aws-lambda.Version"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const code: lambda.Code;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\n\ninterface UtilizationScalingProps {\n  readonly targetUtilizationPercent: number;\n}\n\nclass ScalableAttribute {\n  public scaleOnSchedule(id: string, action: appscaling.ScalingSchedule) {\n    Array.isArray(id);\n    Array.isArray(action);\n  }\n  public scaleOnUtilization(props: UtilizationScalingProps) {\n    Array.isArray(props);\n  }\n  public scaleOnMetric(id: string, props: appscaling.BasicStepScalingPolicyProps) {\n    Array.isArray(id);\n    Array.isArray(props);\n  }\n}\n\ninterface Caps {\n  readonly minCapacity: number;\n  readonly maxCapacity: number;\n}\n\nclass SomeScalableResource {\n  public autoScaleCapacity(caps: Caps) {\n    return new ScalableAttribute();\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handler = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.PYTHON_3_7,\n  handler: 'index.handler',\n  code,\n\n  reservedConcurrentExecutions: 2,\n});\n\nconst fnVer = handler.addVersion('CDKLambdaVersion', undefined, 'demo alias', 10);\n\nconst target = new appscaling.ScalableTarget(this, 'ScalableTarget', {\n  serviceNamespace: appscaling.ServiceNamespace.LAMBDA,\n  maxCapacity: 100,\n  minCapacity: 10,\n  resourceId: `function:${handler.functionName}:${fnVer.version}`,\n  scalableDimension: 'lambda:function:ProvisionedConcurrency',\n})\n\ntarget.scaleToTrackMetric('PceTracking', {\n  targetValue: 0.9,\n  predefinedMetric: appscaling.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 8,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 40,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 12,
        "196": 2,
        "197": 2,
        "211": 1,
        "221": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "303609db9373e29e19426b768d0780301df85457fbcc7cf4a9c16d271f0b3927"
    }
  }
}
