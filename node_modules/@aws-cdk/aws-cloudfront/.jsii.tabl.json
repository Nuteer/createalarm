{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "10bd60d716c0026654038306c399171ff86952eb7729868c89b673ff498d0c60": {
      "translations": {
        "python": {
          "source": "# Creates a distribution from an S3 bucket.\nmy_bucket = s3.Bucket(self, \"myBucket\")\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a distribution from an S3 bucket.\nBucket myBucket = new Bucket(this, \"myBucket\");\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(myBucket) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a distribution from an S3 bucket.\nBucket myBucket = new Bucket(this, \"myBucket\");\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(myBucket)).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creates a distribution from an S3 bucket.\nconst myBucket = new s3.Bucket(this, 'myBucket');\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 41
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Creates a distribution from an S3 bucket.\nconst myBucket = new s3.Bucket(this, 'myBucket');\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 2,
        "193": 2,
        "194": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5c1e9b59c5733887da7682f0ffb1769f9c7777ea51c544636570629be3df1f96"
    },
    "0eb41a91dbb6bf95b75f9eccf49aa981f61c0ea1edb1a877918ab75abf65e66c": {
      "translations": {
        "python": {
          "source": "# Creates a distribution from an ELBv2 load balancer\n# vpc is of type Vpc\n\n# Create an application load balancer in a VPC. 'internetFacing' must be 'true'\n# for CloudFront to access the load balancer and use it as an origin.\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.LoadBalancerV2Origin(lb))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a distribution from an ELBv2 load balancer\nVpc vpc;\n\n// Create an application load balancer in a VPC. 'internetFacing' must be 'true'\n// for CloudFront to access the load balancer and use it as an origin.\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new LoadBalancerV2Origin(lb) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a distribution from an ELBv2 load balancer\nVpc vpc;\n\n// Create an application load balancer in a VPC. 'internetFacing' must be 'true'\n// for CloudFront to access the load balancer and use it as an origin.\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new LoadBalancerV2Origin(lb)).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creates a distribution from an ELBv2 load balancer\ndeclare const vpc: ec2.Vpc;\n// Create an application load balancer in a VPC. 'internetFacing' must be 'true'\n// for CloudFront to access the load balancer and use it as an origin.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.LoadBalancerV2Origin(lb) },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 60
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.LoadBalancerV2Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creates a distribution from an ELBv2 load balancer\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create an application load balancer in a VPC. 'internetFacing' must be 'true'\n// for CloudFront to access the load balancer and use it as an origin.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.LoadBalancerV2Origin(lb) },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dc093ed068f2716951f95c67ac367cb5ed1d30001333fe57b0ca25e058545d9b"
    },
    "0d13777da28c0044f97c3b4fff394de8f2645067eb97f53765a9c7e13fe12b4e": {
      "translations": {
        "python": {
          "source": "# Creates a distribution from an HTTP endpoint\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.HttpOrigin(\"www.example.com\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creates a distribution from an HTTP endpoint\n// Creates a distribution from an HTTP endpoint\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new HttpOrigin(\"www.example.com\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creates a distribution from an HTTP endpoint\n// Creates a distribution from an HTTP endpoint\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new HttpOrigin(\"www.example.com\")).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creates a distribution from an HTTP endpoint\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Creates a distribution from an HTTP endpoint\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "5b853abd917b0f4199e776ae821fb847d0a8a074b5db0ed00b34fac627ae5ab3"
    },
    "97d3c5a4afcb2902fc47831913f37a29426f7d0628f4bdfc4015763535020bb8": {
      "translations": {
        "python": {
          "source": "# To use your own domain name in a Distribution, you must associate a certificate\nimport aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone is of type HostedZone\n\n# my_bucket is of type Bucket\n\nmy_certificate = acm.DnsValidatedCertificate(self, \"mySiteCert\",\n    domain_name=\"www.example.com\",\n    hosted_zone=hosted_zone\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    certificate=my_certificate\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = new DnsValidatedCertificate(this, \"mySiteCert\", new DnsValidatedCertificateProps {\n    DomainName = \"www.example.com\",\n    HostedZone = hostedZone\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(myBucket) },\n    DomainNames = new [] { \"www.example.com\" },\n    Certificate = myCertificate\n});",
          "version": "1"
        },
        "java": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = DnsValidatedCertificate.Builder.create(this, \"mySiteCert\")\n        .domainName(\"www.example.com\")\n        .hostedZone(hostedZone)\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(myBucket)).build())\n        .domainNames(List.of(\"www.example.com\"))\n        .certificate(myCertificate)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 96
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificate",
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "22a61764c28f7afead8fbe014b95736ef49cdbc0911c70a94f861aa1e928701c"
    },
    "07906909d904bb58247ca49bee2939843cb7b924458df0d17fdbc071fee9c726": {
      "translations": {
        "python": {
          "source": "# Create a Distribution with a custom domain name and a minimum protocol version.\n# my_bucket is of type Bucket\n\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    minimum_protocol_version=cloudfront.SecurityPolicyProtocol.TLS_V1_2016\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Distribution with a custom domain name and a minimum protocol version.\nBucket myBucket;\n\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(myBucket) },\n    DomainNames = new [] { \"www.example.com\" },\n    MinimumProtocolVersion = SecurityPolicyProtocol.TLS_V1_2016\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Distribution with a custom domain name and a minimum protocol version.\nBucket myBucket;\n\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(myBucket)).build())\n        .domainNames(List.of(\"www.example.com\"))\n        .minimumProtocolVersion(SecurityPolicyProtocol.TLS_V1_2016)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Distribution with a custom domain name and a minimum protocol version.\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  minimumProtocolVersion: cloudfront.SecurityPolicyProtocol.TLS_V1_2016,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 117
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#TLS_V1_2016",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Distribution with a custom domain name and a minimum protocol version.\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  minimumProtocolVersion: cloudfront.SecurityPolicyProtocol.TLS_V1_2016,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "ba4768e8f69059e4d993a7fe5d73b5a206e4f8469c46e864201719234ccd78b9"
    },
    "b31553e50f4abe07077cb3c2b53a0a33d2f29893a1cec5199b849a4ec7f1204d": {
      "translations": {
        "python": {
          "source": "# Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\n# my_bucket is of type Bucket\n\nmy_web_distribution = cloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        allowed_methods=cloudfront.AllowedMethods.ALLOW_ALL,\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = new Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        AllowedMethods = AllowedMethods.ALLOW_ALL,\n        ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = Distribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .allowedMethods(AllowedMethods.ALLOW_ALL)\n                .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 136
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AllowedMethods",
        "@aws-cdk/aws-cloudfront.AllowedMethods#ALLOW_ALL",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0b415c6678a1d994aa00c22c1a1d19369190a9849a4b75be38aaa2be13aa02f3"
    },
    "ee481812c9e0ba0fa7206118893206e3c448d74d688840df077d04a7086a15df": {
      "translations": {
        "python": {
          "source": "# Add a behavior to a Distribution after initial creation.\n# my_bucket is of type Bucket\n# my_web_distribution is of type Distribution\n\nmy_web_distribution.add_behavior(\"/images/*.jpg\", origins.S3Origin(my_bucket),\n    viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add a behavior to a Distribution after initial creation.\nBucket myBucket;\nDistribution myWebDistribution;\n\nmyWebDistribution.AddBehavior(\"/images/*.jpg\", new S3Origin(myBucket), new AddBehaviorOptions {\n    ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add a behavior to a Distribution after initial creation.\nBucket myBucket;\nDistribution myWebDistribution;\n\nmyWebDistribution.addBehavior(\"/images/*.jpg\", new S3Origin(myBucket), AddBehaviorOptions.builder()\n        .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Add a behavior to a Distribution after initial creation.\ndeclare const myBucket: s3.Bucket;\ndeclare const myWebDistribution: cloudfront.Distribution;\nmyWebDistribution.addBehavior('/images/*.jpg', new origins.S3Origin(myBucket), {\n  viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AddBehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution#addBehavior",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Add a behavior to a Distribution after initial creation.\ndeclare const myBucket: s3.Bucket;\ndeclare const myWebDistribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nmyWebDistribution.addBehavior('/images/*.jpg', new origins.S3Origin(myBucket), {\n  viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a9111c07e2826a1c42ba6ab4805a05306659cc8ab2cec31f949ed0a04a257e3"
    },
    "3c209d169258e09da4dd7e751c2e8e6acfe3a0f7203538907d8ac233df5cdaed": {
      "translations": {
        "python": {
          "source": "# Create a Distribution with additional behaviors at creation time.\n# my_bucket is of type Bucket\n\nbucket_origin = origins.S3Origin(my_bucket)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        allowed_methods=cloudfront.AllowedMethods.ALLOW_ALL,\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    ),\n    additional_behaviors={\n        \"/images/*.jpg\": cloudfront.BehaviorOptions(\n            origin=bucket_origin,\n            viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n        )\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Distribution with additional behaviors at creation time.\nBucket myBucket;\n\nS3Origin bucketOrigin = new S3Origin(myBucket);\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        AllowedMethods = AllowedMethods.ALLOW_ALL,\n        ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    },\n    AdditionalBehaviors = new Dictionary<string, BehaviorOptions> {\n        { \"/images/*.jpg\", new BehaviorOptions {\n            Origin = bucketOrigin,\n            ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Distribution with additional behaviors at creation time.\nBucket myBucket;\n\nS3Origin bucketOrigin = new S3Origin(myBucket);\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .allowedMethods(AllowedMethods.ALLOW_ALL)\n                .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n                .build())\n        .additionalBehaviors(Map.of(\n                \"/images/*.jpg\", BehaviorOptions.builder()\n                        .origin(bucketOrigin)\n                        .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Distribution with additional behaviors at creation time.\ndeclare const myBucket: s3.Bucket;\nconst bucketOrigin = new origins.S3Origin(myBucket);\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n  additionalBehaviors: {\n    '/images/*.jpg': {\n      origin: bucketOrigin,\n      viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AllowedMethods",
        "@aws-cdk/aws-cloudfront.AllowedMethods#ALLOW_ALL",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Distribution with additional behaviors at creation time.\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst bucketOrigin = new origins.S3Origin(myBucket);\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n  additionalBehaviors: {\n    '/images/*.jpg': {\n      origin: bucketOrigin,\n      viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0b415c6678a1d994aa00c22c1a1d19369190a9849a4b75be38aaa2be13aa02f3"
    },
    "160ef535872897af2c865f7d27f5730b5c555eb9d7fa69432177420b52092196": {
      "translations": {
        "python": {
          "source": "# Using an existing cache policy for a Distribution\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=cloudfront.CachePolicy.CACHING_OPTIMIZED\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing cache policy for a Distribution\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = CachePolicy.CACHING_OPTIMIZED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing cache policy for a Distribution\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(CachePolicy.CACHING_OPTIMIZED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing cache policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 190
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicy#CACHING_OPTIMIZED",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing cache policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ac66ed0d874484a3046e01ea90b128fedc3886b35c100ee7f85ada075a3910e"
    },
    "08d6d241625c0a27be8c3d900148462ef0cc763ad7b076753f787479b5f95625": {
      "translations": {
        "python": {
          "source": "# Creating a custom cache policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_cache_policy = cloudfront.CachePolicy(self, \"myCachePolicy\",\n    cache_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    default_ttl=Duration.days(2),\n    min_ttl=Duration.minutes(1),\n    max_ttl=Duration.days(10),\n    cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n    header_behavior=cloudfront.CacheHeaderBehavior.allow_list(\"X-CustomHeader\"),\n    query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=True,\n    enable_accept_encoding_brotli=True\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = new CachePolicy(this, \"myCachePolicy\", new CachePolicyProps {\n    CachePolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    DefaultTtl = Duration.Days(2),\n    MinTtl = Duration.Minutes(1),\n    MaxTtl = Duration.Days(10),\n    CookieBehavior = CacheCookieBehavior.All(),\n    HeaderBehavior = CacheHeaderBehavior.AllowList(\"X-CustomHeader\"),\n    QueryStringBehavior = CacheQueryStringBehavior.DenyList(\"username\"),\n    EnableAcceptEncodingGzip = true,\n    EnableAcceptEncodingBrotli = true\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = myCachePolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = CachePolicy.Builder.create(this, \"myCachePolicy\")\n        .cachePolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .defaultTtl(Duration.days(2))\n        .minTtl(Duration.minutes(1))\n        .maxTtl(Duration.days(10))\n        .cookieBehavior(CacheCookieBehavior.all())\n        .headerBehavior(CacheHeaderBehavior.allowList(\"X-CustomHeader\"))\n        .queryStringBehavior(CacheQueryStringBehavior.denyList(\"username\"))\n        .enableAcceptEncodingGzip(true)\n        .enableAcceptEncodingBrotli(true)\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(myCachePolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 201
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior#all",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior#allowList",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicyProps",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior#denyList",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 11,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "76ac9125b077ed6d5bd992c7fbbdb2064ba2fc6b0238a16305041091946f5318"
    },
    "ffe3421a8c1a8ba18ce437e9871b55c1c73931deeec884d8eb294d1dac19d420": {
      "translations": {
        "python": {
          "source": "# Using an existing origin request policy for a Distribution\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing origin request policy for a Distribution\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = OriginRequestPolicy.CORS_S3_ORIGIN\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing origin request policy for a Distribution\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(OriginRequestPolicy.CORS_S3_ORIGIN)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing origin request policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 233
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy#CORS_S3_ORIGIN"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing origin request policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "892093956d7bb7eccdc21470e279aafc6140178b04d210325cd0f2b9cb6129d7"
    },
    "34d891b0103ddd4e8a0d9994eacfe606a83eb36968d7665bb25a6209b0a12656": {
      "translations": {
        "python": {
          "source": "# Creating a custom origin request policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_origin_request_policy = cloudfront.OriginRequestPolicy(self, \"OriginRequestPolicy\",\n    origin_request_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n    header_behavior=cloudfront.OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"),\n    query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list(\"username\")\n)\n\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = new OriginRequestPolicy(this, \"OriginRequestPolicy\", new OriginRequestPolicyProps {\n    OriginRequestPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CookieBehavior = OriginRequestCookieBehavior.None(),\n    HeaderBehavior = OriginRequestHeaderBehavior.All(\"CloudFront-Is-Android-Viewer\"),\n    QueryStringBehavior = OriginRequestQueryStringBehavior.AllowList(\"username\")\n});\n\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = myOriginRequestPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = OriginRequestPolicy.Builder.create(this, \"OriginRequestPolicy\")\n        .originRequestPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .cookieBehavior(OriginRequestCookieBehavior.none())\n        .headerBehavior(OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"))\n        .queryStringBehavior(OriginRequestQueryStringBehavior.allowList(\"username\"))\n        .build();\n\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(myOriginRequestPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 244
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior#none",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior#all",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior#allowList"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e0a42ea1b87447482a449b5c08f2496efc75b6d028b532c37b27ab837fb92e00"
    },
    "4e8538e36deaef58b5e374314b127f0cd32ef6e316c584e18cbc9c4ffcf5ff9d": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 269
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "bb2366809c65054044c134b74d7a56ed027185b2ec1ae9889a42a21c4280df99": {
      "translations": {
        "python": {
          "source": "# Validating signed URLs or signed cookies with Trusted Key Groups\n\n# public key in PEM format\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.Distribution(self, \"Dist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.HttpOrigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew Distribution(this, \"Dist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new HttpOrigin(\"www.example.com\"),\n        TrustedKeyGroups = new [] { keyGroup }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nDistribution.Builder.create(this, \"Dist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new HttpOrigin(\"www.example.com\"))\n                .trustedKeyGroups(List.of(keyGroup))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 321
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "130": 1,
        "143": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a34ad8b29322d0222be60936cd1d5e5863aefaf4db87f68cd42f50828c43ba44"
    },
    "49dd7768d46e3f240a597b5b97f21b918eea594ef55eba9e606de5ee9be87107": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n# A Lambda@Edge function added to default behavior of a Distribution\n# and triggered on every request\nmy_func = cloudfront.experimental.EdgeFunction(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        edge_lambdas=[cloudfront.EdgeLambda(\n            function_version=my_func.current_version,\n            event_type=cloudfront.LambdaEdgeEventType.VIEWER_REQUEST\n        )\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = new Experimental.EdgeFunction(this, \"MyFunction\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        EdgeLambdas = new [] { new EdgeLambda {\n            FunctionVersion = myFunc.CurrentVersion,\n            EventType = LambdaEdgeEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = EdgeFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .edgeLambdas(List.of(EdgeLambda.builder()\n                        .functionVersion(myFunc.getCurrentVersion())\n                        .eventType(LambdaEdgeEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 359
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.experimental",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunction",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6e211e88a67f024f0258ec24bdd80dc048a1ba01f3bf4da5c17ab7a1230b878e"
    },
    "24b383a6a464ed5341374a5975b896f02ce3150955e88df6f71a8b094611cb21": {
      "translations": {
        "python": {
          "source": "# Using a lambda Function instead of an EdgeFunction for stacks in `us-east-`.\nmy_func = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using a lambda Function instead of an EdgeFunction for stacks in `us-east-`.\nFunction myFunc = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using a lambda Function instead of an EdgeFunction for stacks in `us-east-`.\nFunction myFunc = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using a lambda Function instead of an EdgeFunction for stacks in `us-east-`.\nconst myFunc = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 391
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Using a lambda Function instead of an EdgeFunction for stacks in `us-east-`.\nconst myFunc = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "9681ed597e28f77242be73d1cb5aaa597c5320d328bbd0b204b84bc145254726"
    },
    "1c149ecacb7ca939ffdd3daf8160f2672c5fbdd93376b0fa6e77dc86434b6f1c": {
      "translations": {
        "python": {
          "source": "# Setting stackIds for EdgeFunctions that can be referenced from different applications\n# on the same account.\nmy_func1 = cloudfront.experimental.EdgeFunction(self, \"MyFunction1\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler1\")),\n    stack_id=\"edge-lambda-stack-id-1\"\n)\n\nmy_func2 = cloudfront.experimental.EdgeFunction(self, \"MyFunction2\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler2\")),\n    stack_id=\"edge-lambda-stack-id-2\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Setting stackIds for EdgeFunctions that can be referenced from different applications\n// on the same account.\nEdgeFunction myFunc1 = new Experimental.EdgeFunction(this, \"MyFunction1\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler1\")),\n    StackId = \"edge-lambda-stack-id-1\"\n});\n\nEdgeFunction myFunc2 = new Experimental.EdgeFunction(this, \"MyFunction2\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler2\")),\n    StackId = \"edge-lambda-stack-id-2\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Setting stackIds for EdgeFunctions that can be referenced from different applications\n// on the same account.\nEdgeFunction myFunc1 = EdgeFunction.Builder.create(this, \"MyFunction1\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler1\")))\n        .stackId(\"edge-lambda-stack-id-1\")\n        .build();\n\nEdgeFunction myFunc2 = EdgeFunction.Builder.create(this, \"MyFunction2\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler2\")))\n        .stackId(\"edge-lambda-stack-id-2\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Setting stackIds for EdgeFunctions that can be referenced from different applications\n// on the same account.\nconst myFunc1 = new cloudfront.experimental.EdgeFunction(this, 'MyFunction1', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler1')),\n  stackId: 'edge-lambda-stack-id-1',\n});\n\nconst myFunc2 = new cloudfront.experimental.EdgeFunction(this, 'MyFunction2', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler2')),\n  stackId: 'edge-lambda-stack-id-2',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 403
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.experimental",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunction",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Setting stackIds for EdgeFunctions that can be referenced from different applications\n// on the same account.\nconst myFunc1 = new cloudfront.experimental.EdgeFunction(this, 'MyFunction1', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler1')),\n  stackId: 'edge-lambda-stack-id-1',\n});\n\nconst myFunc2 = new cloudfront.experimental.EdgeFunction(this, 'MyFunction2', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler2')),\n  stackId: 'edge-lambda-stack-id-2',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 34,
        "104": 2,
        "193": 2,
        "194": 14,
        "196": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "2db4862afc0cabfaeabc502efdf0c903ff593d9671d0d62a400d27ed5732a1f0"
    },
    "53df40a93223ec6e91d5e2794825f738a4eb41d799a22153af0c838c2e262e52": {
      "translations": {
        "python": {
          "source": "# Associating a Lambda@Edge function with additional behaviors.\n\n# my_func is of type EdgeFunction\n# assigning at Distribution creation\n# my_bucket is of type Bucket\n\nmy_origin = origins.S3Origin(my_bucket)\nmy_distribution = cloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=my_origin),\n    additional_behaviors={\n        \"images/*\": cloudfront.BehaviorOptions(\n            origin=my_origin,\n            edge_lambdas=[cloudfront.EdgeLambda(\n                function_version=my_func.current_version,\n                event_type=cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n                include_body=True\n            )\n            ]\n        )\n    }\n)\n\n# assigning after creation\nmy_distribution.add_behavior(\"images/*\", my_origin,\n    edge_lambdas=[cloudfront.EdgeLambda(\n        function_version=my_func.current_version,\n        event_type=cloudfront.LambdaEdgeEventType.VIEWER_RESPONSE\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Associating a Lambda@Edge function with additional behaviors.\n\nEdgeFunction myFunc;\n// assigning at Distribution creation\nBucket myBucket;\n\nS3Origin myOrigin = new S3Origin(myBucket);\nDistribution myDistribution = new Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = myOrigin },\n    AdditionalBehaviors = new Dictionary<string, BehaviorOptions> {\n        { \"images/*\", new BehaviorOptions {\n            Origin = myOrigin,\n            EdgeLambdas = new [] { new EdgeLambda {\n                FunctionVersion = myFunc.CurrentVersion,\n                EventType = LambdaEdgeEventType.ORIGIN_REQUEST,\n                IncludeBody = true\n            } }\n        } }\n    }\n});\n\n// assigning after creation\nmyDistribution.AddBehavior(\"images/*\", myOrigin, new AddBehaviorOptions {\n    EdgeLambdas = new [] { new EdgeLambda {\n        FunctionVersion = myFunc.CurrentVersion,\n        EventType = LambdaEdgeEventType.VIEWER_RESPONSE\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Associating a Lambda@Edge function with additional behaviors.\n\nEdgeFunction myFunc;\n// assigning at Distribution creation\nBucket myBucket;\n\nS3Origin myOrigin = new S3Origin(myBucket);\nDistribution myDistribution = Distribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(myOrigin).build())\n        .additionalBehaviors(Map.of(\n                \"images/*\", BehaviorOptions.builder()\n                        .origin(myOrigin)\n                        .edgeLambdas(List.of(EdgeLambda.builder()\n                                .functionVersion(myFunc.getCurrentVersion())\n                                .eventType(LambdaEdgeEventType.ORIGIN_REQUEST)\n                                .includeBody(true)\n                                .build()))\n                        .build()))\n        .build();\n\n// assigning after creation\nmyDistribution.addBehavior(\"images/*\", myOrigin, AddBehaviorOptions.builder()\n        .edgeLambdas(List.of(EdgeLambda.builder()\n                .functionVersion(myFunc.getCurrentVersion())\n                .eventType(LambdaEdgeEventType.VIEWER_RESPONSE)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Associating a Lambda@Edge function with additional behaviors.\n\ndeclare const myFunc: cloudfront.experimental.EdgeFunction;\n// assigning at Distribution creation\ndeclare const myBucket: s3.Bucket;\nconst myOrigin = new origins.S3Origin(myBucket);\nconst myDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: myOrigin },\n  additionalBehaviors: {\n    'images/*': {\n      origin: myOrigin,\n      edgeLambdas: [\n        {\n          functionVersion: myFunc.currentVersion,\n          eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n          includeBody: true, // Optional - defaults to false\n        },\n      ],\n    },\n  },\n});\n\n// assigning after creation\nmyDistribution.addBehavior('images/*', myOrigin, {\n  edgeLambdas: [\n    {\n      functionVersion: myFunc.currentVersion,\n      eventType: cloudfront.LambdaEdgeEventType.VIEWER_RESPONSE,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 424
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AddBehaviorOptions",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.Distribution#addBehavior",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#ORIGIN_REQUEST",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_RESPONSE",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Associating a Lambda@Edge function with additional behaviors.\n\ndeclare const myFunc: cloudfront.experimental.EdgeFunction;\n// assigning at Distribution creation\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOrigin = new origins.S3Origin(myBucket);\nconst myDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: myOrigin },\n  additionalBehaviors: {\n    'images/*': {\n      origin: myOrigin,\n      edgeLambdas: [\n        {\n          functionVersion: myFunc.currentVersion,\n          eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,\n          includeBody: true, // Optional - defaults to false\n        },\n      ],\n    },\n  },\n});\n\n// assigning after creation\nmyDistribution.addBehavior('images/*', myOrigin, {\n  edgeLambdas: [\n    {\n      functionVersion: myFunc.currentVersion,\n      eventType: cloudfront.LambdaEdgeEventType.VIEWER_RESPONSE,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 40,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 3,
        "169": 2,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "67f2efa1ab5213ce36b7b79e71ca69c24ef6464a52347a8fbf352084e18d46bd"
    },
    "f22d1f0b7ef4eaea5be65528986ee430d377a85fc51b36bdc531ac1d5985e904": {
      "translations": {
        "python": {
          "source": "# Adding an existing Lambda@Edge function created in a different stack\n# to a CloudFront distribution.\n# s3_bucket is of type Bucket\n\nfunction_version = lambda_.Version.from_version_arn(self, \"Version\", \"arn:aws:lambda:us-east-1:123456789012:function:functionName:1\")\n\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        edge_lambdas=[cloudfront.EdgeLambda(\n            function_version=function_version,\n            event_type=cloudfront.LambdaEdgeEventType.VIEWER_REQUEST\n        )\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Adding an existing Lambda@Edge function created in a different stack\n// to a CloudFront distribution.\nBucket s3Bucket;\n\nIVersion functionVersion = Version.FromVersionArn(this, \"Version\", \"arn:aws:lambda:us-east-1:123456789012:function:functionName:1\");\n\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        EdgeLambdas = new [] { new EdgeLambda {\n            FunctionVersion = functionVersion,\n            EventType = LambdaEdgeEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Adding an existing Lambda@Edge function created in a different stack\n// to a CloudFront distribution.\nBucket s3Bucket;\n\nIVersion functionVersion = Version.fromVersionArn(this, \"Version\", \"arn:aws:lambda:us-east-1:123456789012:function:functionName:1\");\n\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .edgeLambdas(List.of(EdgeLambda.builder()\n                        .functionVersion(functionVersion)\n                        .eventType(LambdaEdgeEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Adding an existing Lambda@Edge function created in a different stack\n// to a CloudFront distribution.\ndeclare const s3Bucket: s3.Bucket;\nconst functionVersion = lambda.Version.fromVersionArn(this, 'Version', 'arn:aws:lambda:us-east-1:123456789012:function:functionName:1');\n\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    edgeLambdas: [\n      {\n        functionVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      },\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 460
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Version",
        "@aws-cdk/aws-lambda.Version#fromVersionArn",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Adding an existing Lambda@Edge function created in a different stack\n// to a CloudFront distribution.\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst functionVersion = lambda.Version.fromVersionArn(this, 'Version', 'arn:aws:lambda:us-east-1:123456789012:function:functionName:1');\n\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    edgeLambdas: [\n      {\n        functionVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      },\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89862a11bb1623444fd4621194511ba798dfe06dfffa09051833ea489e26fe7e"
    },
    "9e526c1bf5adf2d31cf667b33ee2abd72027fa818ba9539535d86c90e12769fe": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 483
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "41f52ac8e150a3a991f9e83ad772b55a2087020623667e37e1ddb5e9faafdc68": {
      "translations": {
        "python": {
          "source": "# Configure logging for Distributions\n\n# Simplest form - creates a new bucket and logs to it.\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.HttpOrigin(\"www.example.com\")),\n    enable_logging=True\n)\n\n# You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.HttpOrigin(\"www.example.com\")),\n    enable_logging=True,  # Optional, this is implied if logBucket is specified\n    log_bucket=s3.Bucket(self, \"LogBucket\"),\n    log_file_prefix=\"distribution-access-logs/\",\n    log_includes_cookies=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure logging for Distributions\n\n// Simplest form - creates a new bucket and logs to it.\n// Configure logging for Distributions\n// Simplest form - creates a new bucket and logs to it.\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new HttpOrigin(\"www.example.com\") },\n    EnableLogging = true\n});\n\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new HttpOrigin(\"www.example.com\") },\n    EnableLogging = true,  // Optional, this is implied if logBucket is specified\n    LogBucket = new Bucket(this, \"LogBucket\"),\n    LogFilePrefix = \"distribution-access-logs/\",\n    LogIncludesCookies = true\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure logging for Distributions\n\n// Simplest form - creates a new bucket and logs to it.\n// Configure logging for Distributions\n// Simplest form - creates a new bucket and logs to it.\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new HttpOrigin(\"www.example.com\")).build())\n        .enableLogging(true)\n        .build();\n\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new HttpOrigin(\"www.example.com\")).build())\n        .enableLogging(true) // Optional, this is implied if logBucket is specified\n        .logBucket(new Bucket(this, \"LogBucket\"))\n        .logFilePrefix(\"distribution-access-logs/\")\n        .logIncludesCookies(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Configure logging for Distributions\n\n// Simplest form - creates a new bucket and logs to it.\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n  enableLogging: true,\n});\n\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n  enableLogging: true, // Optional, this is implied if logBucket is specified\n  logBucket: new s3.Bucket(this, 'LogBucket'),\n  logFilePrefix: 'distribution-access-logs/',\n  logIncludesCookies: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 510
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Configure logging for Distributions\n\n// Simplest form - creates a new bucket and logs to it.\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n  enableLogging: true,\n});\n\n// You can optionally log to a specific bucket, configure whether cookies are logged, and give the log files a prefix.\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.HttpOrigin('www.example.com') },\n  enableLogging: true, // Optional, this is implied if logBucket is specified\n  logBucket: new s3.Bucket(this, 'LogBucket'),\n  logFilePrefix: 'distribution-access-logs/',\n  logIncludesCookies: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 19,
        "104": 3,
        "106": 3,
        "193": 4,
        "194": 5,
        "197": 5,
        "226": 2,
        "281": 9
      },
      "fqnsFingerprint": "e97c350a70789177062c675287fc7f3ba9cdce721537832219d8f070da20b7e6"
    },
    "b9012789b445bb22245a1dcf53ecb8556a69d867f5aa221a7324450ef06dcfcb": {
      "translations": {
        "python": {
          "source": "# Using a reference to an imported Distribution\ndistribution = cloudfront.Distribution.from_distribution_attributes(self, \"ImportedDist\",\n    domain_name=\"d111111abcdef8.cloudfront.net\",\n    distribution_id=\"012345ABCDEF\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using a reference to an imported Distribution\nIDistribution distribution = Distribution.FromDistributionAttributes(this, \"ImportedDist\", new DistributionAttributes {\n    DomainName = \"d111111abcdef8.cloudfront.net\",\n    DistributionId = \"012345ABCDEF\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using a reference to an imported Distribution\nIDistribution distribution = Distribution.fromDistributionAttributes(this, \"ImportedDist\", DistributionAttributes.builder()\n        .domainName(\"d111111abcdef8.cloudfront.net\")\n        .distributionId(\"012345ABCDEF\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Using a reference to an imported Distribution\nconst distribution = cloudfront.Distribution.fromDistributionAttributes(this, 'ImportedDist', {\n  domainName: 'd111111abcdef8.cloudfront.net',\n  distributionId: '012345ABCDEF',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 534
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.Distribution#fromDistributionAttributes",
        "@aws-cdk/aws-cloudfront.DistributionAttributes",
        "@aws-cdk/aws-cloudfront.IDistribution"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Using a reference to an imported Distribution\nconst distribution = cloudfront.Distribution.fromDistributionAttributes(this, 'ImportedDist', {\n  domainName: 'd111111abcdef8.cloudfront.net',\n  distributionId: '012345ABCDEF',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "842eac6df31fdb06a24a2f2375806c9ede03234b0b94e853fb80261d0e6a8553"
    },
    "5c430625d5d51ba98093c8a71467d98c285d4b498cd6e2b2f3ea675339ec40cd": {
      "translations": {
        "python": {
          "source": "# Using a CloudFrontWebDistribution construct.\n\n# source_bucket is of type Bucket\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"MyDistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using a CloudFrontWebDistribution construct.\n\nBucket sourceBucket;\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"MyDistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = sourceBucket\n        },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using a CloudFrontWebDistribution construct.\n\nBucket sourceBucket;\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"MyDistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(sourceBucket)\n                        .build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using a CloudFrontWebDistribution construct.\n\ndeclare const sourceBucket: s3.Bucket;\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 549
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using a CloudFrontWebDistribution construct.\n\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ba4b99b63a4cf1e19bef5105f0feb6b792772af9d48aa6466377cc5130e3e7f7"
    },
    "9009b3b7e72025b8d5039f8809659af96c26a8746adb6a6534c795d1776ea357": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_cloud_front_default_certificate(\"www.example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromCloudFrontDefaultCertificate(\"www.example.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromCloudFrontDefaultCertificate(\"www.example.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 579
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromCloudFrontDefaultCertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 2,
        "106": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "eeb12944e9e1ba5e61c361f46661c9b24759cd952e6050d13e53a07a65c4458a"
    },
    "34a0cd545bf5a1dcafc40aefb926b7449dd3d37488cf74126ef7c21cfb50a735": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ncertificate = certificatemanager.Certificate(self, \"Certificate\",\n    domain_name=\"example.com\",\n    subject_alternative_names=[\"*.example.com\"]\n)\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_acm_certificate(certificate,\n        aliases=[\"example.com\", \"www.example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.TLS_V1,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"example.com\",\n    SubjectAlternativeNames = new [] { \"*.example.com\" }\n});\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromAcmCertificate(certificate, new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\", \"www.example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.TLS_V1,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"example.com\")\n        .subjectAlternativeNames(List.of(\"*.example.com\"))\n        .build();\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromAcmCertificate(certificate, ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\", \"www.example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.TLS_V1) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 605
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#TLS_V1",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromAcmCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(certificate);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 3,
        "106": 1,
        "192": 4,
        "193": 6,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 10,
        "282": 1
      },
      "fqnsFingerprint": "f4289eeee59033b48c7fb2b982004b73a96a65877d5b6a484bea5a0b20887567"
    },
    "3beaf5a9271eea4efdd84ea93b388aa3eafdec3d8bb5f4f2e70c27d6b3736f2b": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_iam_certificate(\"certificateId\",\n        aliases=[\"example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.SSL_V3,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromIamCertificate(\"certificateId\", new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.SSL_V3,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromIamCertificate(\"certificateId\", ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.SSL_V3) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 637
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#SSL_V3",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromIamCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 24,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 5,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "25ccf8dbcc600387d3f427dbf1e320991d21dad15464576ad4f043778c58b9d6"
    },
    "3c2c6734aeca72056919b23c683818365f4e450ef7634dddecd536a1ab10d5d5": {
      "translations": {
        "python": {
          "source": "# Using trusted key groups for Cloudfront Web Distributions.\n# source_bucket is of type Bucket\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.Behavior(\n            is_default_behavior=True,\n            trusted_key_groups=[key_group\n            ]\n        )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using trusted key groups for Cloudfront Web Distributions.\nBucket sourceBucket;\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = sourceBucket\n        },\n        Behaviors = new [] { new Behavior {\n            IsDefaultBehavior = true,\n            TrustedKeyGroups = new [] { keyGroup }\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using trusted key groups for Cloudfront Web Distributions.\nBucket sourceBucket;\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nCloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(sourceBucket)\n                        .build())\n                .behaviors(List.of(Behavior.builder()\n                        .isDefaultBehavior(true)\n                        .trustedKeyGroups(List.of(keyGroup))\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using trusted key groups for Cloudfront Web Distributions.\ndeclare const sourceBucket: s3.Bucket;\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n          trustedKeyGroups: [\n            keyGroup,\n          ],\n        },\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 663
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using trusted key groups for Cloudfront Web Distributions.\ndeclare const sourceBucket: s3.Bucket;\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n          trustedKeyGroups: [\n            keyGroup,\n          ],\n        },\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 3,
        "106": 1,
        "130": 2,
        "143": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "194": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "f3c9766cd7f21c13eb1297536a074c7f190d3495f432fdeb2c8a488cd8e83d04"
    },
    "8d038e5fa335b7b209cc7dd44a9f993dbb600942f7c0b4b14a553b5a4680259d": {
      "translations": {
        "python": {
          "source": "# Adding restrictions to a Cloudfront Web Distribution.\n# source_bucket is of type Bucket\n\ncloudfront.CloudFrontWebDistribution(self, \"MyDistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )\n    ],\n    geo_restriction=cloudfront.GeoRestriction.whitelist(\"US\", \"UK\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\nBucket sourceBucket;\n\nnew CloudFrontWebDistribution(this, \"MyDistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = sourceBucket\n        },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    GeoRestriction = GeoRestriction.Whitelist(\"US\", \"UK\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\nBucket sourceBucket;\n\nCloudFrontWebDistribution.Builder.create(this, \"MyDistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(sourceBucket)\n                        .build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .geoRestriction(GeoRestriction.whitelist(\"US\", \"UK\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\ndeclare const sourceBucket: s3.Bucket;\nnew cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n  geoRestriction: cloudfront.GeoRestriction.whitelist('US', 'UK'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 704
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.GeoRestriction",
        "@aws-cdk/aws-cloudfront.GeoRestriction#whitelist",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Adding restrictions to a Cloudfront Web Distribution.\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n  geoRestriction: cloudfront.GeoRestriction.whitelist('US', 'UK'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "501793a50a1f77778791fa4ae6707befc55f9c937fc16683474b4eb3876a4c98"
    },
    "9a4e15d9eb5dc6666d8b44390b49b9fef74a233abb2a491451f1272a15868213": {
      "translations": {
        "python": {
          "source": "# Configuring connection behaviors between Cloudfront and your origin\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"MyDistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        connection_attempts=3,\n        connection_timeout=Duration.seconds(10),\n        behaviors=[cloudfront.Behavior(\n            is_default_behavior=True\n        )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configuring connection behaviors between Cloudfront and your origin\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"MyDistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        ConnectionAttempts = 3,\n        ConnectionTimeout = Duration.Seconds(10),\n        Behaviors = new [] { new Behavior {\n            IsDefaultBehavior = true\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configuring connection behaviors between Cloudfront and your origin\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"MyDistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .connectionAttempts(3)\n                .connectionTimeout(Duration.seconds(10))\n                .behaviors(List.of(Behavior.builder()\n                        .isDefaultBehavior(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Configuring connection behaviors between Cloudfront and your origin\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      connectionAttempts: 3,\n      connectionTimeout: Duration.seconds(10),\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 731
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Configuring connection behaviors between Cloudfront and your origin\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      connectionAttempts: 3,\n      connectionTimeout: Duration.seconds(10),\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "104": 1,
        "106": 1,
        "192": 2,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "a4339750d8293d5c6e7b91fd7682495cbf3830989f1beaa8b0658d6e8b8791c3"
    },
    "ec35ea62c72f95a7ae4f5cb0b3c1021e37cf463c2891265dd82e450c810b1bd5": {
      "translations": {
        "python": {
          "source": "# Configuring origin fallback options for the CloudFrontWebDistribution\ncloudfront.CloudFrontWebDistribution(self, \"ADistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=s3.Bucket.from_bucket_name(self, \"aBucket\", \"myoriginbucket\"),\n            origin_path=\"/\",\n            origin_headers={\n                \"my_header\": \"42\"\n            },\n            origin_shield_region=\"us-west-2\"\n        ),\n        failover_s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=s3.Bucket.from_bucket_name(self, \"aBucketFallback\", \"myoriginbucketfallback\"),\n            origin_path=\"/somewhere\",\n            origin_headers={\n                \"my_header2\": \"21\"\n            },\n            origin_shield_region=\"us-east-1\"\n        ),\n        failover_criteria_status_codes=[cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n        behaviors=[cloudfront.Behavior(\n            is_default_behavior=True\n        )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\n// Configuring origin fallback options for the CloudFrontWebDistribution\nnew CloudFrontWebDistribution(this, \"ADistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = Bucket.FromBucketName(this, \"aBucket\", \"myoriginbucket\"),\n            OriginPath = \"/\",\n            OriginHeaders = new Dictionary<string, string> {\n                { \"myHeader\", \"42\" }\n            },\n            OriginShieldRegion = \"us-west-2\"\n        },\n        FailoverS3OriginSource = new S3OriginConfig {\n            S3BucketSource = Bucket.FromBucketName(this, \"aBucketFallback\", \"myoriginbucketfallback\"),\n            OriginPath = \"/somewhere\",\n            OriginHeaders = new Dictionary<string, string> {\n                { \"myHeader2\", \"21\" }\n            },\n            OriginShieldRegion = \"us-east-1\"\n        },\n        FailoverCriteriaStatusCodes = new [] { FailoverStatusCode.INTERNAL_SERVER_ERROR },\n        Behaviors = new [] { new Behavior {\n            IsDefaultBehavior = true\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\n// Configuring origin fallback options for the CloudFrontWebDistribution\nCloudFrontWebDistribution.Builder.create(this, \"ADistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(Bucket.fromBucketName(this, \"aBucket\", \"myoriginbucket\"))\n                        .originPath(\"/\")\n                        .originHeaders(Map.of(\n                                \"myHeader\", \"42\"))\n                        .originShieldRegion(\"us-west-2\")\n                        .build())\n                .failoverS3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(Bucket.fromBucketName(this, \"aBucketFallback\", \"myoriginbucketfallback\"))\n                        .originPath(\"/somewhere\")\n                        .originHeaders(Map.of(\n                                \"myHeader2\", \"21\"))\n                        .originShieldRegion(\"us-east-1\")\n                        .build())\n                .failoverCriteriaStatusCodes(List.of(FailoverStatusCode.INTERNAL_SERVER_ERROR))\n                .behaviors(List.of(Behavior.builder()\n                        .isDefaultBehavior(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\nnew cloudfront.CloudFrontWebDistribution(this, 'ADistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucket', 'myoriginbucket'),\n        originPath: '/',\n        originHeaders: {\n          'myHeader': '42',\n        },\n        originShieldRegion: 'us-west-2',\n      },\n      failoverS3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucketFallback', 'myoriginbucketfallback'),\n        originPath: '/somewhere',\n        originHeaders: {\n          'myHeader2': '21',\n        },\n        originShieldRegion: 'us-east-1',\n      },\n      failoverCriteriaStatusCodes: [cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 753
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.FailoverStatusCode",
        "@aws-cdk/aws-cloudfront.FailoverStatusCode#INTERNAL_SERVER_ERROR",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Configuring origin fallback options for the CloudFrontWebDistribution\nnew cloudfront.CloudFrontWebDistribution(this, 'ADistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucket', 'myoriginbucket'),\n        originPath: '/',\n        originHeaders: {\n          'myHeader': '42',\n        },\n        originShieldRegion: 'us-west-2',\n      },\n      failoverS3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucketFallback', 'myoriginbucketfallback'),\n        originPath: '/somewhere',\n        originHeaders: {\n          'myHeader2': '21',\n        },\n        originShieldRegion: 'us-east-1',\n      },\n      failoverCriteriaStatusCodes: [cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 3,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 16
      },
      "fqnsFingerprint": "38eb8b97b6e052653a284949d26ad242169f8ac962283563f51606d8383fb1ec"
    },
    "da74c7c69e1edc96abcab7d325732b86f0d9d3dd957d13aad1ab977223e07edc": {
      "translations": {
        "python": {
          "source": "# Create a key group to use with CloudFront signed URLs and signed cookies.\ncloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[\n        cloudfront.PublicKey(self, \"MyPublicKey\",\n            encoded_key=\"...\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a key group to use with CloudFront signed URLs and signed cookies.\n// Create a key group to use with CloudFront signed URLs and signed cookies.\nnew KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] {\n        new PublicKey(this, \"MyPublicKey\", new PublicKeyProps {\n            EncodedKey = \"...\"\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a key group to use with CloudFront signed URLs and signed cookies.\n// Create a key group to use with CloudFront signed URLs and signed cookies.\nKeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(\n            PublicKey.Builder.create(this, \"MyPublicKey\")\n                    .encodedKey(\"...\")\n                    .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a key group to use with CloudFront signed URLs and signed cookies.\nnew cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    new cloudfront.PublicKey(this, 'MyPublicKey', {\n      encodedKey: '...', // contents of public_key.pem file\n      // comment: 'Key is expiring on ...',\n    }),\n  ],\n  // comment: 'Key group containing public keys ...',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudfront"
        },
        "field": {
          "field": "markdown",
          "line": 806
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a key group to use with CloudFront signed URLs and signed cookies.\nnew cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    new cloudfront.PublicKey(this, 'MyPublicKey', {\n      encodedKey: '...', // contents of public_key.pem file\n      // comment: 'Key is expiring on ...',\n    }),\n  ],\n  // comment: 'Key group containing public keys ...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "b400b2c8404b6f31a81a4b2eb59ee6f50c2011ce90dd5bc1a7f94edfc1edeba0"
    },
    "bb573e1bbd24bafeef7415e8826bfa7cbb34ccc3312c8ba7d8f6a6294e049aa5": {
      "translations": {
        "python": {
          "source": "source_bucket = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"MyDistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket sourceBucket = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"MyDistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = sourceBucket\n        },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket sourceBucket = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"MyDistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(sourceBucket)\n                        .build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceBucket = new s3.Bucket(this, 'Bucket');\n\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n   originConfigs: [\n     {\n       s3OriginSource: {\n       s3BucketSource: sourceBucket,\n       },\n       behaviors : [ {isDefaultBehavior: true}],\n     },\n   ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution"
        },
        "field": {
          "field": "markdown",
          "line": 5
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceBucket = new s3.Bucket(this, 'Bucket');\n\nconst distribution = new cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n   originConfigs: [\n     {\n       s3OriginSource: {\n       s3BucketSource: sourceBucket,\n       },\n       behaviors : [ {isDefaultBehavior: true}],\n     },\n   ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 2,
        "106": 1,
        "192": 2,
        "193": 4,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "a33800ca30dd0c94fe6857b9d96951b7cb340771c38da0704ac9987ea33728ae"
    },
    "2a372a835478ba2d59830f53996c1aa60af1e11b37c5b2f36f83dccf3c6744fd": {
      "translations": {
        "python": {
          "source": "# Add a behavior to a Distribution after initial creation.\n# my_bucket is of type Bucket\n# my_web_distribution is of type Distribution\n\nmy_web_distribution.add_behavior(\"/images/*.jpg\", origins.S3Origin(my_bucket),\n    viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add a behavior to a Distribution after initial creation.\nBucket myBucket;\nDistribution myWebDistribution;\n\nmyWebDistribution.AddBehavior(\"/images/*.jpg\", new S3Origin(myBucket), new AddBehaviorOptions {\n    ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add a behavior to a Distribution after initial creation.\nBucket myBucket;\nDistribution myWebDistribution;\n\nmyWebDistribution.addBehavior(\"/images/*.jpg\", new S3Origin(myBucket), AddBehaviorOptions.builder()\n        .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Add a behavior to a Distribution after initial creation.\ndeclare const myBucket: s3.Bucket;\ndeclare const myWebDistribution: cloudfront.Distribution;\nmyWebDistribution.addBehavior('/images/*.jpg', new origins.S3Origin(myBucket), {\n  viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.AddBehaviorOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AddBehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution#addBehavior",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Add a behavior to a Distribution after initial creation.\ndeclare const myBucket: s3.Bucket;\ndeclare const myWebDistribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nmyWebDistribution.addBehavior('/images/*.jpg', new origins.S3Origin(myBucket), {\n  viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a9111c07e2826a1c42ba6ab4805a05306659cc8ab2cec31f949ed0a04a257e3"
    },
    "e1e732849b2a56fcc8331352df136c60ec72a9b09ee3816661337dae68d6e904": {
      "translations": {
        "python": {
          "source": "# Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\n# my_bucket is of type Bucket\n\nmy_web_distribution = cloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        allowed_methods=cloudfront.AllowedMethods.ALLOW_ALL,\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = new Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        AllowedMethods = AllowedMethods.ALLOW_ALL,\n        ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = Distribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .allowedMethods(AllowedMethods.ALLOW_ALL)\n                .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.AllowedMethods"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AllowedMethods",
        "@aws-cdk/aws-cloudfront.AllowedMethods#ALLOW_ALL",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0b415c6678a1d994aa00c22c1a1d19369190a9849a4b75be38aaa2be13aa02f3"
    },
    "1c8572ff629e8855494ad139dc6240ba49a8be0ecbb4c52403b1ac4c3e5d5c7d": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.BehaviorOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "6e1a860f99dfb4e7365dd5cd30137f2e751834c23a3771140986fd380dd2b764": {
      "translations": {
        "python": {
          "source": "# Creating a custom cache policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_cache_policy = cloudfront.CachePolicy(self, \"myCachePolicy\",\n    cache_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    default_ttl=Duration.days(2),\n    min_ttl=Duration.minutes(1),\n    max_ttl=Duration.days(10),\n    cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n    header_behavior=cloudfront.CacheHeaderBehavior.allow_list(\"X-CustomHeader\"),\n    query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=True,\n    enable_accept_encoding_brotli=True\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = new CachePolicy(this, \"myCachePolicy\", new CachePolicyProps {\n    CachePolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    DefaultTtl = Duration.Days(2),\n    MinTtl = Duration.Minutes(1),\n    MaxTtl = Duration.Days(10),\n    CookieBehavior = CacheCookieBehavior.All(),\n    HeaderBehavior = CacheHeaderBehavior.AllowList(\"X-CustomHeader\"),\n    QueryStringBehavior = CacheQueryStringBehavior.DenyList(\"username\"),\n    EnableAcceptEncodingGzip = true,\n    EnableAcceptEncodingBrotli = true\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = myCachePolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = CachePolicy.Builder.create(this, \"myCachePolicy\")\n        .cachePolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .defaultTtl(Duration.days(2))\n        .minTtl(Duration.minutes(1))\n        .maxTtl(Duration.days(10))\n        .cookieBehavior(CacheCookieBehavior.all())\n        .headerBehavior(CacheHeaderBehavior.allowList(\"X-CustomHeader\"))\n        .queryStringBehavior(CacheQueryStringBehavior.denyList(\"username\"))\n        .enableAcceptEncodingGzip(true)\n        .enableAcceptEncodingBrotli(true)\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(myCachePolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CacheCookieBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior#all",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior#allowList",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicyProps",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior#denyList",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 11,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "76ac9125b077ed6d5bd992c7fbbdb2064ba2fc6b0238a16305041091946f5318"
    },
    "c1dbbaddef1efbbaf51515152c8ace81ac473e7c9e5bb320b85545886653f918": {
      "translations": {
        "python": {
          "source": "# Creating a custom cache policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_cache_policy = cloudfront.CachePolicy(self, \"myCachePolicy\",\n    cache_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    default_ttl=Duration.days(2),\n    min_ttl=Duration.minutes(1),\n    max_ttl=Duration.days(10),\n    cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n    header_behavior=cloudfront.CacheHeaderBehavior.allow_list(\"X-CustomHeader\"),\n    query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=True,\n    enable_accept_encoding_brotli=True\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = new CachePolicy(this, \"myCachePolicy\", new CachePolicyProps {\n    CachePolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    DefaultTtl = Duration.Days(2),\n    MinTtl = Duration.Minutes(1),\n    MaxTtl = Duration.Days(10),\n    CookieBehavior = CacheCookieBehavior.All(),\n    HeaderBehavior = CacheHeaderBehavior.AllowList(\"X-CustomHeader\"),\n    QueryStringBehavior = CacheQueryStringBehavior.DenyList(\"username\"),\n    EnableAcceptEncodingGzip = true,\n    EnableAcceptEncodingBrotli = true\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = myCachePolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = CachePolicy.Builder.create(this, \"myCachePolicy\")\n        .cachePolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .defaultTtl(Duration.days(2))\n        .minTtl(Duration.minutes(1))\n        .maxTtl(Duration.days(10))\n        .cookieBehavior(CacheCookieBehavior.all())\n        .headerBehavior(CacheHeaderBehavior.allowList(\"X-CustomHeader\"))\n        .queryStringBehavior(CacheQueryStringBehavior.denyList(\"username\"))\n        .enableAcceptEncodingGzip(true)\n        .enableAcceptEncodingBrotli(true)\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(myCachePolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CacheHeaderBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior#all",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior#allowList",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicyProps",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior#denyList",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 11,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "76ac9125b077ed6d5bd992c7fbbdb2064ba2fc6b0238a16305041091946f5318"
    },
    "895785075f9790d848a9d28e79604e9cb125837f03591d790bd8f83f1326d60a": {
      "translations": {
        "python": {
          "source": "# Using an existing cache policy for a Distribution\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=cloudfront.CachePolicy.CACHING_OPTIMIZED\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing cache policy for a Distribution\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = CachePolicy.CACHING_OPTIMIZED\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing cache policy for a Distribution\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(CachePolicy.CACHING_OPTIMIZED)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing cache policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CachePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicy#CACHING_OPTIMIZED",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing cache policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ac66ed0d874484a3046e01ea90b128fedc3886b35c100ee7f85ada075a3910e"
    },
    "54e8e20a859b8e6e723f1491956098ac1b8632b8f917259e1d8c41ac29c4fef9": {
      "translations": {
        "python": {
          "source": "# Creating a custom cache policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_cache_policy = cloudfront.CachePolicy(self, \"myCachePolicy\",\n    cache_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    default_ttl=Duration.days(2),\n    min_ttl=Duration.minutes(1),\n    max_ttl=Duration.days(10),\n    cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n    header_behavior=cloudfront.CacheHeaderBehavior.allow_list(\"X-CustomHeader\"),\n    query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=True,\n    enable_accept_encoding_brotli=True\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = new CachePolicy(this, \"myCachePolicy\", new CachePolicyProps {\n    CachePolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    DefaultTtl = Duration.Days(2),\n    MinTtl = Duration.Minutes(1),\n    MaxTtl = Duration.Days(10),\n    CookieBehavior = CacheCookieBehavior.All(),\n    HeaderBehavior = CacheHeaderBehavior.AllowList(\"X-CustomHeader\"),\n    QueryStringBehavior = CacheQueryStringBehavior.DenyList(\"username\"),\n    EnableAcceptEncodingGzip = true,\n    EnableAcceptEncodingBrotli = true\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = myCachePolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = CachePolicy.Builder.create(this, \"myCachePolicy\")\n        .cachePolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .defaultTtl(Duration.days(2))\n        .minTtl(Duration.minutes(1))\n        .maxTtl(Duration.days(10))\n        .cookieBehavior(CacheCookieBehavior.all())\n        .headerBehavior(CacheHeaderBehavior.allowList(\"X-CustomHeader\"))\n        .queryStringBehavior(CacheQueryStringBehavior.denyList(\"username\"))\n        .enableAcceptEncodingGzip(true)\n        .enableAcceptEncodingBrotli(true)\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(myCachePolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CachePolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior#all",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior#allowList",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicyProps",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior#denyList",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 11,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "76ac9125b077ed6d5bd992c7fbbdb2064ba2fc6b0238a16305041091946f5318"
    },
    "0ae7a22190e74c579fa617557d16cf9c5a7288562a7beefb03514831416bae92": {
      "translations": {
        "python": {
          "source": "# Creating a custom cache policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_cache_policy = cloudfront.CachePolicy(self, \"myCachePolicy\",\n    cache_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    default_ttl=Duration.days(2),\n    min_ttl=Duration.minutes(1),\n    max_ttl=Duration.days(10),\n    cookie_behavior=cloudfront.CacheCookieBehavior.all(),\n    header_behavior=cloudfront.CacheHeaderBehavior.allow_list(\"X-CustomHeader\"),\n    query_string_behavior=cloudfront.CacheQueryStringBehavior.deny_list(\"username\"),\n    enable_accept_encoding_gzip=True,\n    enable_accept_encoding_brotli=True\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        cache_policy=my_cache_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = new CachePolicy(this, \"myCachePolicy\", new CachePolicyProps {\n    CachePolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    DefaultTtl = Duration.Days(2),\n    MinTtl = Duration.Minutes(1),\n    MaxTtl = Duration.Days(10),\n    CookieBehavior = CacheCookieBehavior.All(),\n    HeaderBehavior = CacheHeaderBehavior.AllowList(\"X-CustomHeader\"),\n    QueryStringBehavior = CacheQueryStringBehavior.DenyList(\"username\"),\n    EnableAcceptEncodingGzip = true,\n    EnableAcceptEncodingBrotli = true\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        CachePolicy = myCachePolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nCachePolicy myCachePolicy = CachePolicy.Builder.create(this, \"myCachePolicy\")\n        .cachePolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .defaultTtl(Duration.days(2))\n        .minTtl(Duration.minutes(1))\n        .maxTtl(Duration.days(10))\n        .cookieBehavior(CacheCookieBehavior.all())\n        .headerBehavior(CacheHeaderBehavior.allowList(\"X-CustomHeader\"))\n        .queryStringBehavior(CacheQueryStringBehavior.denyList(\"username\"))\n        .enableAcceptEncodingGzip(true)\n        .enableAcceptEncodingBrotli(true)\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .cachePolicy(myCachePolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior",
        "@aws-cdk/aws-cloudfront.CacheCookieBehavior#all",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior",
        "@aws-cdk/aws-cloudfront.CacheHeaderBehavior#allowList",
        "@aws-cdk/aws-cloudfront.CachePolicy",
        "@aws-cdk/aws-cloudfront.CachePolicyProps",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.CacheQueryStringBehavior#denyList",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.ICachePolicy",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom cache policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCachePolicy = new cloudfront.CachePolicy(this, 'myCachePolicy', {\n  cachePolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  defaultTtl: Duration.days(2),\n  minTtl: Duration.minutes(1),\n  maxTtl: Duration.days(10),\n  cookieBehavior: cloudfront.CacheCookieBehavior.all(),\n  headerBehavior: cloudfront.CacheHeaderBehavior.allowList('X-CustomHeader'),\n  queryStringBehavior: cloudfront.CacheQueryStringBehavior.denyList('username'),\n  enableAcceptEncodingGzip: true,\n  enableAcceptEncodingBrotli: true,\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    cachePolicy: myCachePolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 11,
        "196": 6,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "76ac9125b077ed6d5bd992c7fbbdb2064ba2fc6b0238a16305041091946f5318"
    },
    "514e9d462ead3a0948f006ec1392ff87c9aecb0098a591c6721045e670e362ca": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_cloud_front_default_certificate(\"www.example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromCloudFrontDefaultCertificate(\"www.example.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromCloudFrontDefaultCertificate(\"www.example.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromCloudFrontDefaultCertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 2,
        "106": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "eeb12944e9e1ba5e61c361f46661c9b24759cd952e6050d13e53a07a65c4458a"
    },
    "b459f8cc025b57d1e58693d6efa2f85510505b71a1e1c8653fed6e7f8916091b": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_cloud_front_default_certificate(\"www.example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromCloudFrontDefaultCertificate(\"www.example.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromCloudFrontDefaultCertificate(\"www.example.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromCloudFrontDefaultCertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromCloudFrontDefaultCertificate(\n        'www.example.com',\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 2,
        "106": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1
      },
      "fqnsFingerprint": "eeb12944e9e1ba5e61c361f46661c9b24759cd952e6050d13e53a07a65c4458a"
    },
    "4ad404aa59220e022bda29d64fa33e07e1e37dca2a6ac37007ecff5fe88db04b": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.Distribution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "db4a4e45295cddc85d1018d17521ef8eed2b94e0aaeb9cd773ca435fb0048542": {
      "translations": {
        "python": {
          "source": "# Using a reference to an imported Distribution\ndistribution = cloudfront.Distribution.from_distribution_attributes(self, \"ImportedDist\",\n    domain_name=\"d111111abcdef8.cloudfront.net\",\n    distribution_id=\"012345ABCDEF\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using a reference to an imported Distribution\nIDistribution distribution = Distribution.FromDistributionAttributes(this, \"ImportedDist\", new DistributionAttributes {\n    DomainName = \"d111111abcdef8.cloudfront.net\",\n    DistributionId = \"012345ABCDEF\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using a reference to an imported Distribution\nIDistribution distribution = Distribution.fromDistributionAttributes(this, \"ImportedDist\", DistributionAttributes.builder()\n        .domainName(\"d111111abcdef8.cloudfront.net\")\n        .distributionId(\"012345ABCDEF\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Using a reference to an imported Distribution\nconst distribution = cloudfront.Distribution.fromDistributionAttributes(this, 'ImportedDist', {\n  domainName: 'd111111abcdef8.cloudfront.net',\n  distributionId: '012345ABCDEF',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.DistributionAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.Distribution#fromDistributionAttributes",
        "@aws-cdk/aws-cloudfront.DistributionAttributes",
        "@aws-cdk/aws-cloudfront.IDistribution"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Using a reference to an imported Distribution\nconst distribution = cloudfront.Distribution.fromDistributionAttributes(this, 'ImportedDist', {\n  domainName: 'd111111abcdef8.cloudfront.net',\n  distributionId: '012345ABCDEF',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "842eac6df31fdb06a24a2f2375806c9ede03234b0b94e853fb80261d0e6a8553"
    },
    "5d12c6be8bfcee1e8fe76b67ef0e800386efe7e1492ea6462c731039c84106c6": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.DistributionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "dac4b3e527302ffbc21f466aab3168832583876cfd842ad6777c55fdba1d6045": {
      "translations": {
        "python": {
          "source": "# Configuring origin fallback options for the CloudFrontWebDistribution\ncloudfront.CloudFrontWebDistribution(self, \"ADistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=s3.Bucket.from_bucket_name(self, \"aBucket\", \"myoriginbucket\"),\n            origin_path=\"/\",\n            origin_headers={\n                \"my_header\": \"42\"\n            },\n            origin_shield_region=\"us-west-2\"\n        ),\n        failover_s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=s3.Bucket.from_bucket_name(self, \"aBucketFallback\", \"myoriginbucketfallback\"),\n            origin_path=\"/somewhere\",\n            origin_headers={\n                \"my_header2\": \"21\"\n            },\n            origin_shield_region=\"us-east-1\"\n        ),\n        failover_criteria_status_codes=[cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n        behaviors=[cloudfront.Behavior(\n            is_default_behavior=True\n        )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\n// Configuring origin fallback options for the CloudFrontWebDistribution\nnew CloudFrontWebDistribution(this, \"ADistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = Bucket.FromBucketName(this, \"aBucket\", \"myoriginbucket\"),\n            OriginPath = \"/\",\n            OriginHeaders = new Dictionary<string, string> {\n                { \"myHeader\", \"42\" }\n            },\n            OriginShieldRegion = \"us-west-2\"\n        },\n        FailoverS3OriginSource = new S3OriginConfig {\n            S3BucketSource = Bucket.FromBucketName(this, \"aBucketFallback\", \"myoriginbucketfallback\"),\n            OriginPath = \"/somewhere\",\n            OriginHeaders = new Dictionary<string, string> {\n                { \"myHeader2\", \"21\" }\n            },\n            OriginShieldRegion = \"us-east-1\"\n        },\n        FailoverCriteriaStatusCodes = new [] { FailoverStatusCode.INTERNAL_SERVER_ERROR },\n        Behaviors = new [] { new Behavior {\n            IsDefaultBehavior = true\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\n// Configuring origin fallback options for the CloudFrontWebDistribution\nCloudFrontWebDistribution.Builder.create(this, \"ADistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(Bucket.fromBucketName(this, \"aBucket\", \"myoriginbucket\"))\n                        .originPath(\"/\")\n                        .originHeaders(Map.of(\n                                \"myHeader\", \"42\"))\n                        .originShieldRegion(\"us-west-2\")\n                        .build())\n                .failoverS3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(Bucket.fromBucketName(this, \"aBucketFallback\", \"myoriginbucketfallback\"))\n                        .originPath(\"/somewhere\")\n                        .originHeaders(Map.of(\n                                \"myHeader2\", \"21\"))\n                        .originShieldRegion(\"us-east-1\")\n                        .build())\n                .failoverCriteriaStatusCodes(List.of(FailoverStatusCode.INTERNAL_SERVER_ERROR))\n                .behaviors(List.of(Behavior.builder()\n                        .isDefaultBehavior(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Configuring origin fallback options for the CloudFrontWebDistribution\nnew cloudfront.CloudFrontWebDistribution(this, 'ADistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucket', 'myoriginbucket'),\n        originPath: '/',\n        originHeaders: {\n          'myHeader': '42',\n        },\n        originShieldRegion: 'us-west-2',\n      },\n      failoverS3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucketFallback', 'myoriginbucketfallback'),\n        originPath: '/somewhere',\n        originHeaders: {\n          'myHeader2': '21',\n        },\n        originShieldRegion: 'us-east-1',\n      },\n      failoverCriteriaStatusCodes: [cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.FailoverStatusCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.FailoverStatusCode",
        "@aws-cdk/aws-cloudfront.FailoverStatusCode#INTERNAL_SERVER_ERROR",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Configuring origin fallback options for the CloudFrontWebDistribution\nnew cloudfront.CloudFrontWebDistribution(this, 'ADistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucket', 'myoriginbucket'),\n        originPath: '/',\n        originHeaders: {\n          'myHeader': '42',\n        },\n        originShieldRegion: 'us-west-2',\n      },\n      failoverS3OriginSource: {\n        s3BucketSource: s3.Bucket.fromBucketName(this, 'aBucketFallback', 'myoriginbucketfallback'),\n        originPath: '/somewhere',\n        originHeaders: {\n          'myHeader2': '21',\n        },\n        originShieldRegion: 'us-east-1',\n      },\n      failoverCriteriaStatusCodes: [cloudfront.FailoverStatusCode.INTERNAL_SERVER_ERROR],\n      behaviors: [\n        {\n          isDefaultBehavior: true,\n        },\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 3,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 7,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 16
      },
      "fqnsFingerprint": "38eb8b97b6e052653a284949d26ad242169f8ac962283563f51606d8383fb1ec"
    },
    "c51c11d34cdf2e1e23ce5b55bf67945f5a2d70d8f70d6e7e05709a9780adf901": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.Function"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "5615cc8fbe925909d574d026046e2efd8cd4e8fb45044a7da65ca78b867ccc92": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.FunctionCode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "75539d4143e0e7f171a221b0076362006798f15593168d732943ec3f0636aaaf": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.FunctionEventType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "ba40ba9da4fd588814d6d58e6c0f46a95be6851022d708943e2205ad1e51de6d": {
      "translations": {
        "python": {
          "source": "# s3_bucket is of type Bucket\n# Add a cloudfront Function to a Distribution\ncf_function = cloudfront.Function(self, \"Function\",\n    code=cloudfront.FunctionCode.from_inline(\"function handler(event) { return event.request }\")\n)\ncloudfront.Distribution(self, \"distro\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(s3_bucket),\n        function_associations=[cloudfront.FunctionAssociation(\n            function=cf_function,\n            event_type=cloudfront.FunctionEventType.VIEWER_REQUEST\n        )]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = new Function(this, \"Function\", new FunctionProps {\n    Code = FunctionCode.FromInline(\"function handler(event) { return event.request }\")\n});\nnew Distribution(this, \"distro\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(s3Bucket),\n        FunctionAssociations = new [] { new FunctionAssociation {\n            Function = cfFunction,\n            EventType = FunctionEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3Bucket;\n// Add a cloudfront Function to a Distribution\nFunction cfFunction = Function.Builder.create(this, \"Function\")\n        .code(FunctionCode.fromInline(\"function handler(event) { return event.request }\"))\n        .build();\nDistribution.Builder.create(this, \"distro\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(s3Bucket))\n                .functionAssociations(List.of(FunctionAssociation.builder()\n                        .function(cfFunction)\n                        .eventType(FunctionEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\n\ndeclare const s3Bucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.FunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.Function",
        "@aws-cdk/aws-cloudfront.FunctionCode",
        "@aws-cdk/aws-cloudfront.FunctionCode#fromInline",
        "@aws-cdk/aws-cloudfront.FunctionEventType",
        "@aws-cdk/aws-cloudfront.FunctionEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.FunctionProps",
        "@aws-cdk/aws-cloudfront.IFunction",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Add a cloudfront Function to a Distribution\nconst cfFunction = new cloudfront.Function(this, 'Function', {\n  code: cloudfront.FunctionCode.fromInline('function handler(event) { return event.request }'),\n});\nnew cloudfront.Distribution(this, 'distro', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(s3Bucket),\n    functionAssociations: [{\n      function: cfFunction,\n      eventType: cloudfront.FunctionEventType.VIEWER_REQUEST,\n    }],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 24,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e13ddc77d3f98d62e9783cd542d6feae06a5d277e1f51d6cb7082637e250bf00"
    },
    "aaed3c3c64dc6870299e8e3f69a7f2f81367fcf848e61d00694ee2b097b7312e": {
      "translations": {
        "python": {
          "source": "# Adding restrictions to a Cloudfront Web Distribution.\n# source_bucket is of type Bucket\n\ncloudfront.CloudFrontWebDistribution(self, \"MyDistribution\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(\n            s3_bucket_source=source_bucket\n        ),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )\n    ],\n    geo_restriction=cloudfront.GeoRestriction.whitelist(\"US\", \"UK\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\nBucket sourceBucket;\n\nnew CloudFrontWebDistribution(this, \"MyDistribution\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig {\n            S3BucketSource = sourceBucket\n        },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    GeoRestriction = GeoRestriction.Whitelist(\"US\", \"UK\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\nBucket sourceBucket;\n\nCloudFrontWebDistribution.Builder.create(this, \"MyDistribution\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder()\n                        .s3BucketSource(sourceBucket)\n                        .build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .geoRestriction(GeoRestriction.whitelist(\"US\", \"UK\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Adding restrictions to a Cloudfront Web Distribution.\ndeclare const sourceBucket: s3.Bucket;\nnew cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n  geoRestriction: cloudfront.GeoRestriction.whitelist('US', 'UK'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.GeoRestriction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.GeoRestriction",
        "@aws-cdk/aws-cloudfront.GeoRestriction#whitelist",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Adding restrictions to a Cloudfront Web Distribution.\ndeclare const sourceBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.CloudFrontWebDistribution(this, 'MyDistribution', {\n  originConfigs: [\n    {\n      s3OriginSource: {\n        s3BucketSource: sourceBucket,\n      },\n      behaviors : [ {isDefaultBehavior: true}],\n    },\n  ],\n  geoRestriction: cloudfront.GeoRestriction.whitelist('US', 'UK'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "501793a50a1f77778791fa4ae6707befc55f9c937fc16683474b4eb3876a4c98"
    },
    "19d4f354fd0a11f82f6fbbf701fac6559eeb0c10fb3bbf532d0bcd7d3f6b9844": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.HeadersFrameOption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "eac6abeb7a79220c337704b794bf36e7610d7de35cfae5c51336349da30cff6f": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "25d456c69e26e97ee78054206a9d9dfe87120b3892b848156d8de6e9bb516f50": {
      "translations": {
        "python": {
          "source": "# Validating signed URLs or signed cookies with Trusted Key Groups\n\n# public key in PEM format\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.Distribution(self, \"Dist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.HttpOrigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew Distribution(this, \"Dist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new HttpOrigin(\"www.example.com\"),\n        TrustedKeyGroups = new [] { keyGroup }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nDistribution.Builder.create(this, \"Dist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new HttpOrigin(\"www.example.com\"))\n                .trustedKeyGroups(List.of(keyGroup))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.KeyGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "130": 1,
        "143": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a34ad8b29322d0222be60936cd1d5e5863aefaf4db87f68cd42f50828c43ba44"
    },
    "16b264cc8d5601e3670fd13317e5ac3369850f2653ee7045fc099bf436a652fb": {
      "translations": {
        "python": {
          "source": "# Validating signed URLs or signed cookies with Trusted Key Groups\n\n# public key in PEM format\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.Distribution(self, \"Dist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.HttpOrigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew Distribution(this, \"Dist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new HttpOrigin(\"www.example.com\"),\n        TrustedKeyGroups = new [] { keyGroup }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nDistribution.Builder.create(this, \"Dist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new HttpOrigin(\"www.example.com\"))\n                .trustedKeyGroups(List.of(keyGroup))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.KeyGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "130": 1,
        "143": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a34ad8b29322d0222be60936cd1d5e5863aefaf4db87f68cd42f50828c43ba44"
    },
    "0e2385c2d556bba89fc90f3dd76e411c033895558583b4a8288ae4d66effd0fe": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n# A Lambda@Edge function added to default behavior of a Distribution\n# and triggered on every request\nmy_func = cloudfront.experimental.EdgeFunction(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        edge_lambdas=[cloudfront.EdgeLambda(\n            function_version=my_func.current_version,\n            event_type=cloudfront.LambdaEdgeEventType.VIEWER_REQUEST\n        )\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = new Experimental.EdgeFunction(this, \"MyFunction\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        EdgeLambdas = new [] { new EdgeLambda {\n            FunctionVersion = myFunc.CurrentVersion,\n            EventType = LambdaEdgeEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = EdgeFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .edgeLambdas(List.of(EdgeLambda.builder()\n                        .functionVersion(myFunc.getCurrentVersion())\n                        .eventType(LambdaEdgeEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.LambdaEdgeEventType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.experimental",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunction",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6e211e88a67f024f0258ec24bdd80dc048a1ba01f3bf4da5c17ab7a1230b878e"
    },
    "075e4b4dd935407a936679f65626f2c3707a4a3f3ff8bc3d71d7bde2696fe063": {
      "translations": {
        "python": {
          "source": "# Creating a custom origin request policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_origin_request_policy = cloudfront.OriginRequestPolicy(self, \"OriginRequestPolicy\",\n    origin_request_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n    header_behavior=cloudfront.OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"),\n    query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list(\"username\")\n)\n\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = new OriginRequestPolicy(this, \"OriginRequestPolicy\", new OriginRequestPolicyProps {\n    OriginRequestPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CookieBehavior = OriginRequestCookieBehavior.None(),\n    HeaderBehavior = OriginRequestHeaderBehavior.All(\"CloudFront-Is-Android-Viewer\"),\n    QueryStringBehavior = OriginRequestQueryStringBehavior.AllowList(\"username\")\n});\n\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = myOriginRequestPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = OriginRequestPolicy.Builder.create(this, \"OriginRequestPolicy\")\n        .originRequestPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .cookieBehavior(OriginRequestCookieBehavior.none())\n        .headerBehavior(OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"))\n        .queryStringBehavior(OriginRequestQueryStringBehavior.allowList(\"username\"))\n        .build();\n\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(myOriginRequestPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior#none",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior#all",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior#allowList"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e0a42ea1b87447482a449b5c08f2496efc75b6d028b532c37b27ab837fb92e00"
    },
    "52347ad9066881f2e3a8179c3a4ded25bff50035fefa93d75d680d3aca149026": {
      "translations": {
        "python": {
          "source": "# Creating a custom origin request policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_origin_request_policy = cloudfront.OriginRequestPolicy(self, \"OriginRequestPolicy\",\n    origin_request_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n    header_behavior=cloudfront.OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"),\n    query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list(\"username\")\n)\n\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = new OriginRequestPolicy(this, \"OriginRequestPolicy\", new OriginRequestPolicyProps {\n    OriginRequestPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CookieBehavior = OriginRequestCookieBehavior.None(),\n    HeaderBehavior = OriginRequestHeaderBehavior.All(\"CloudFront-Is-Android-Viewer\"),\n    QueryStringBehavior = OriginRequestQueryStringBehavior.AllowList(\"username\")\n});\n\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = myOriginRequestPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = OriginRequestPolicy.Builder.create(this, \"OriginRequestPolicy\")\n        .originRequestPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .cookieBehavior(OriginRequestCookieBehavior.none())\n        .headerBehavior(OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"))\n        .queryStringBehavior(OriginRequestQueryStringBehavior.allowList(\"username\"))\n        .build();\n\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(myOriginRequestPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior#none",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior#all",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior#allowList"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e0a42ea1b87447482a449b5c08f2496efc75b6d028b532c37b27ab837fb92e00"
    },
    "3570b618a31468ceaa8043b22c4c297ef211a083c2885de9d61e1e433b705c75": {
      "translations": {
        "python": {
          "source": "# Using an existing origin request policy for a Distribution\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing origin request policy for a Distribution\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = OriginRequestPolicy.CORS_S3_ORIGIN\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing origin request policy for a Distribution\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(OriginRequestPolicy.CORS_S3_ORIGIN)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing origin request policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.OriginRequestPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy#CORS_S3_ORIGIN"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing origin request policy for a Distribution\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: cloudfront.OriginRequestPolicy.CORS_S3_ORIGIN,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "892093956d7bb7eccdc21470e279aafc6140178b04d210325cd0f2b9cb6129d7"
    },
    "2e1e54be5eea0eda7ac612afb238398b75dcda9072b9bc7714ea819f3fe2b42c": {
      "translations": {
        "python": {
          "source": "# Creating a custom origin request policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_origin_request_policy = cloudfront.OriginRequestPolicy(self, \"OriginRequestPolicy\",\n    origin_request_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n    header_behavior=cloudfront.OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"),\n    query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list(\"username\")\n)\n\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = new OriginRequestPolicy(this, \"OriginRequestPolicy\", new OriginRequestPolicyProps {\n    OriginRequestPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CookieBehavior = OriginRequestCookieBehavior.None(),\n    HeaderBehavior = OriginRequestHeaderBehavior.All(\"CloudFront-Is-Android-Viewer\"),\n    QueryStringBehavior = OriginRequestQueryStringBehavior.AllowList(\"username\")\n});\n\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = myOriginRequestPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = OriginRequestPolicy.Builder.create(this, \"OriginRequestPolicy\")\n        .originRequestPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .cookieBehavior(OriginRequestCookieBehavior.none())\n        .headerBehavior(OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"))\n        .queryStringBehavior(OriginRequestQueryStringBehavior.allowList(\"username\"))\n        .build();\n\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(myOriginRequestPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior#none",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior#all",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior#allowList"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e0a42ea1b87447482a449b5c08f2496efc75b6d028b532c37b27ab837fb92e00"
    },
    "d907fc9c040256430d5c20152ca25ed14870aaaa489d75f9901ee2aa2620e53d": {
      "translations": {
        "python": {
          "source": "# Creating a custom origin request policy for a Distribution -- all parameters optional\n# bucket_origin is of type S3Origin\n\nmy_origin_request_policy = cloudfront.OriginRequestPolicy(self, \"OriginRequestPolicy\",\n    origin_request_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cookie_behavior=cloudfront.OriginRequestCookieBehavior.none(),\n    header_behavior=cloudfront.OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"),\n    query_string_behavior=cloudfront.OriginRequestQueryStringBehavior.allow_list(\"username\")\n)\n\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        origin_request_policy=my_origin_request_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = new OriginRequestPolicy(this, \"OriginRequestPolicy\", new OriginRequestPolicyProps {\n    OriginRequestPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CookieBehavior = OriginRequestCookieBehavior.None(),\n    HeaderBehavior = OriginRequestHeaderBehavior.All(\"CloudFront-Is-Android-Viewer\"),\n    QueryStringBehavior = OriginRequestQueryStringBehavior.AllowList(\"username\")\n});\n\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        OriginRequestPolicy = myOriginRequestPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\nS3Origin bucketOrigin;\n\nOriginRequestPolicy myOriginRequestPolicy = OriginRequestPolicy.Builder.create(this, \"OriginRequestPolicy\")\n        .originRequestPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .cookieBehavior(OriginRequestCookieBehavior.none())\n        .headerBehavior(OriginRequestHeaderBehavior.all(\"CloudFront-Is-Android-Viewer\"))\n        .queryStringBehavior(OriginRequestQueryStringBehavior.allowList(\"username\"))\n        .build();\n\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .originRequestPolicy(myOriginRequestPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IOriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestCookieBehavior#none",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestHeaderBehavior#all",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicy",
        "@aws-cdk/aws-cloudfront.OriginRequestPolicyProps",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior",
        "@aws-cdk/aws-cloudfront.OriginRequestQueryStringBehavior#allowList"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Creating a custom origin request policy for a Distribution -- all parameters optional\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myOriginRequestPolicy = new cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {\n  originRequestPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  cookieBehavior: cloudfront.OriginRequestCookieBehavior.none(),\n  headerBehavior: cloudfront.OriginRequestHeaderBehavior.all('CloudFront-Is-Android-Viewer'),\n  queryStringBehavior: cloudfront.OriginRequestQueryStringBehavior.allowList('username'),\n});\n\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    originRequestPolicy: myOriginRequestPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 27,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e0a42ea1b87447482a449b5c08f2496efc75b6d028b532c37b27ab837fb92e00"
    },
    "a9bf1d84b140d5c44569a8b715f4e84ca07f965edf0245b7e585f1b182d7affa": {
      "translations": {
        "python": {
          "source": "# Validating signed URLs or signed cookies with Trusted Key Groups\n\n# public key in PEM format\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.Distribution(self, \"Dist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.HttpOrigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew Distribution(this, \"Dist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new HttpOrigin(\"www.example.com\"),\n        TrustedKeyGroups = new [] { keyGroup }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nDistribution.Builder.create(this, \"Dist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new HttpOrigin(\"www.example.com\"))\n                .trustedKeyGroups(List.of(keyGroup))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.PublicKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "130": 1,
        "143": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a34ad8b29322d0222be60936cd1d5e5863aefaf4db87f68cd42f50828c43ba44"
    },
    "1f53e4f461265faada5e7e1583f22cdd942c4cbd2176ce1cb01186d2e08d70f4": {
      "translations": {
        "python": {
          "source": "# Validating signed URLs or signed cookies with Trusted Key Groups\n\n# public key in PEM format\n# public_key is of type string\n\npub_key = cloudfront.PublicKey(self, \"MyPubKey\",\n    encoded_key=public_key\n)\n\nkey_group = cloudfront.KeyGroup(self, \"MyKeyGroup\",\n    items=[pub_key\n    ]\n)\n\ncloudfront.Distribution(self, \"Dist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.HttpOrigin(\"www.example.com\"),\n        trusted_key_groups=[key_group\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nstring publicKey;\n\nPublicKey pubKey = new PublicKey(this, \"MyPubKey\", new PublicKeyProps {\n    EncodedKey = publicKey\n});\n\nKeyGroup keyGroup = new KeyGroup(this, \"MyKeyGroup\", new KeyGroupProps {\n    Items = new [] { pubKey }\n});\n\nnew Distribution(this, \"Dist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new HttpOrigin(\"www.example.com\"),\n        TrustedKeyGroups = new [] { keyGroup }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\nString publicKey;\n\nPublicKey pubKey = PublicKey.Builder.create(this, \"MyPubKey\")\n        .encodedKey(publicKey)\n        .build();\n\nKeyGroup keyGroup = KeyGroup.Builder.create(this, \"MyKeyGroup\")\n        .items(List.of(pubKey))\n        .build();\n\nDistribution.Builder.create(this, \"Dist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new HttpOrigin(\"www.example.com\"))\n                .trustedKeyGroups(List.of(keyGroup))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.PublicKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.HttpOrigin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.KeyGroup",
        "@aws-cdk/aws-cloudfront.KeyGroupProps",
        "@aws-cdk/aws-cloudfront.PublicKey",
        "@aws-cdk/aws-cloudfront.PublicKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Validating signed URLs or signed cookies with Trusted Key Groups\n\n// public key in PEM format\ndeclare const publicKey: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pubKey = new cloudfront.PublicKey(this, 'MyPubKey', {\n  encodedKey: publicKey,\n});\n\nconst keyGroup = new cloudfront.KeyGroup(this, 'MyKeyGroup', {\n  items: [\n    pubKey,\n  ],\n});\n\nnew cloudfront.Distribution(this, 'Dist', {\n  defaultBehavior: {\n    origin: new origins.HttpOrigin('www.example.com'),\n    trustedKeyGroups: [\n      keyGroup,\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "130": 1,
        "143": 1,
        "192": 2,
        "193": 4,
        "194": 4,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "a34ad8b29322d0222be60936cd1d5e5863aefaf4db87f68cd42f50828c43ba44"
    },
    "c3f0d17f4bb074f6b1e669e4227373cfc3ac8f8d673b5a1c3efb2d8d46757854": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "77ee82051c470b65188eb545d4b36b73c9535fc640f86accf2451fe58606f88b": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "67afa77e2f71cc1963f8f785ddeab4a44f160ca527753b83fa6a45ba3ed25503": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "d90cd9f6eeadc4b81dbb2e73a31a49fdf329805d1e947aa44708074e2cfa546b": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "c34c9706bbfee6e9c4ec6c25d5e83b293fb4b5247597612d13786e6e084882ba": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "161a33466a81a744ee69fd15510072901a3f24933ad7d9886d0b2d8cfba06667": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "a1201145b07724cf721ef53afdb1e3457ff990a1478f9b11d1ed965ae04b070f": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "dcf5a0c7ab65d0cbcd3cb7ea522382fe7b202d60c2bb18ecf2e62d119625799f": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "fafc6c6c974df9957690090523feb72f1aeebc99b0b868bfc8aed240ba7ccf4c": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "83f1b164f334633959162a40c5be8b4b27a7aaa3b2ad17dd854479a15ae377a1": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "fc966ece0d92e163b17eca84d8c330d451f43281647c5445142429eea83ac195": {
      "translations": {
        "python": {
          "source": "# Using an existing managed response headers policy\n# bucket_origin is of type S3Origin\n\ncloudfront.Distribution(self, \"myDistManagedPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    )\n)\n\n# Creating a custom response headers policy -- all parameters optional\nmy_response_headers_policy = cloudfront.ResponseHeadersPolicy(self, \"ResponseHeadersPolicy\",\n    response_headers_policy_name=\"MyPolicy\",\n    comment=\"A default policy\",\n    cors_behavior=cloudfront.ResponseHeadersCorsBehavior(\n        access_control_allow_credentials=False,\n        access_control_allow_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_allow_methods=[\"GET\", \"POST\"],\n        access_control_allow_origins=[\"*\"],\n        access_control_expose_headers=[\"X-Custom-Header-1\", \"X-Custom-Header-2\"],\n        access_control_max_age=Duration.seconds(600),\n        origin_override=True\n    ),\n    custom_headers_behavior=cloudfront.ResponseCustomHeadersBehavior(\n        custom_headers=[cloudfront.ResponseCustomHeader(header=\"X-Amz-Date\", value=\"some-value\", override=True), cloudfront.ResponseCustomHeader(header=\"X-Amz-Security-Token\", value=\"some-value\", override=False)\n        ]\n    ),\n    security_headers_behavior=cloudfront.ResponseSecurityHeadersBehavior(\n        content_security_policy=cloudfront.ResponseHeadersContentSecurityPolicy(content_security_policy=\"default-src https:;\", override=True),\n        content_type_options=cloudfront.ResponseHeadersContentTypeOptions(override=True),\n        frame_options=cloudfront.ResponseHeadersFrameOptions(frame_option=cloudfront.HeadersFrameOption.DENY, override=True),\n        referrer_policy=cloudfront.ResponseHeadersReferrerPolicy(referrer_policy=cloudfront.HeadersReferrerPolicy.NO_REFERRER, override=True),\n        strict_transport_security=cloudfront.ResponseHeadersStrictTransportSecurity(access_control_max_age=Duration.seconds(600), include_subdomains=True, override=True),\n        xss_protection=cloudfront.ResponseHeadersXSSProtection(protection=True, mode_block=True, report_uri=\"https://example.com/csp-report\", override=True)\n    )\n)\ncloudfront.Distribution(self, \"myDistCustomPolicy\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=bucket_origin,\n        response_headers_policy=my_response_headers_policy\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nnew Distribution(this, \"myDistManagedPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS\n    }\n});\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = new ResponseHeadersPolicy(this, \"ResponseHeadersPolicy\", new ResponseHeadersPolicyProps {\n    ResponseHeadersPolicyName = \"MyPolicy\",\n    Comment = \"A default policy\",\n    CorsBehavior = new ResponseHeadersCorsBehavior {\n        AccessControlAllowCredentials = false,\n        AccessControlAllowHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlAllowMethods = new [] { \"GET\", \"POST\" },\n        AccessControlAllowOrigins = new [] { \"*\" },\n        AccessControlExposeHeaders = new [] { \"X-Custom-Header-1\", \"X-Custom-Header-2\" },\n        AccessControlMaxAge = Duration.Seconds(600),\n        OriginOverride = true\n    },\n    CustomHeadersBehavior = new ResponseCustomHeadersBehavior {\n        CustomHeaders = new [] { new ResponseCustomHeader { Header = \"X-Amz-Date\", Value = \"some-value\", Override = true }, new ResponseCustomHeader { Header = \"X-Amz-Security-Token\", Value = \"some-value\", Override = false } }\n    },\n    SecurityHeadersBehavior = new ResponseSecurityHeadersBehavior {\n        ContentSecurityPolicy = new ResponseHeadersContentSecurityPolicy { ContentSecurityPolicy = \"default-src https:;\", Override = true },\n        ContentTypeOptions = new ResponseHeadersContentTypeOptions { Override = true },\n        FrameOptions = new ResponseHeadersFrameOptions { FrameOption = HeadersFrameOption.DENY, Override = true },\n        ReferrerPolicy = new ResponseHeadersReferrerPolicy { ReferrerPolicy = HeadersReferrerPolicy.NO_REFERRER, Override = true },\n        StrictTransportSecurity = new ResponseHeadersStrictTransportSecurity { AccessControlMaxAge = Duration.Seconds(600), IncludeSubdomains = true, Override = true },\n        XssProtection = new ResponseHeadersXSSProtection { Protection = true, ModeBlock = true, ReportUri = \"https://example.com/csp-report\", Override = true }\n    }\n});\nnew Distribution(this, \"myDistCustomPolicy\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = bucketOrigin,\n        ResponseHeadersPolicy = myResponseHeadersPolicy\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Using an existing managed response headers policy\nS3Origin bucketOrigin;\n\nDistribution.Builder.create(this, \"myDistManagedPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS)\n                .build())\n        .build();\n\n// Creating a custom response headers policy -- all parameters optional\nResponseHeadersPolicy myResponseHeadersPolicy = ResponseHeadersPolicy.Builder.create(this, \"ResponseHeadersPolicy\")\n        .responseHeadersPolicyName(\"MyPolicy\")\n        .comment(\"A default policy\")\n        .corsBehavior(ResponseHeadersCorsBehavior.builder()\n                .accessControlAllowCredentials(false)\n                .accessControlAllowHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlAllowMethods(List.of(\"GET\", \"POST\"))\n                .accessControlAllowOrigins(List.of(\"*\"))\n                .accessControlExposeHeaders(List.of(\"X-Custom-Header-1\", \"X-Custom-Header-2\"))\n                .accessControlMaxAge(Duration.seconds(600))\n                .originOverride(true)\n                .build())\n        .customHeadersBehavior(ResponseCustomHeadersBehavior.builder()\n                .customHeaders(List.of(ResponseCustomHeader.builder().header(\"X-Amz-Date\").value(\"some-value\").override(true).build(), ResponseCustomHeader.builder().header(\"X-Amz-Security-Token\").value(\"some-value\").override(false).build()))\n                .build())\n        .securityHeadersBehavior(ResponseSecurityHeadersBehavior.builder()\n                .contentSecurityPolicy(ResponseHeadersContentSecurityPolicy.builder().contentSecurityPolicy(\"default-src https:;\").override(true).build())\n                .contentTypeOptions(ResponseHeadersContentTypeOptions.builder().override(true).build())\n                .frameOptions(ResponseHeadersFrameOptions.builder().frameOption(HeadersFrameOption.DENY).override(true).build())\n                .referrerPolicy(ResponseHeadersReferrerPolicy.builder().referrerPolicy(HeadersReferrerPolicy.NO_REFERRER).override(true).build())\n                .strictTransportSecurity(ResponseHeadersStrictTransportSecurity.builder().accessControlMaxAge(Duration.seconds(600)).includeSubdomains(true).override(true).build())\n                .xssProtection(ResponseHeadersXSSProtection.builder().protection(true).modeBlock(true).reportUri(\"https://example.com/csp-report\").override(true).build())\n                .build())\n        .build();\nDistribution.Builder.create(this, \"myDistCustomPolicy\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(bucketOrigin)\n                .responseHeadersPolicy(myResponseHeadersPolicy)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption",
        "@aws-cdk/aws-cloudfront.HeadersFrameOption#DENY",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.HeadersReferrerPolicy#NO_REFERRER",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.IResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseCustomHeadersBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentSecurityPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersContentTypeOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersCorsBehavior",
        "@aws-cdk/aws-cloudfront.ResponseHeadersFrameOptions",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicy#CORS_ALLOW_ALL_ORIGINS",
        "@aws-cdk/aws-cloudfront.ResponseHeadersPolicyProps",
        "@aws-cdk/aws-cloudfront.ResponseHeadersReferrerPolicy",
        "@aws-cdk/aws-cloudfront.ResponseHeadersStrictTransportSecurity",
        "@aws-cdk/aws-cloudfront.ResponseHeadersXSSProtection",
        "@aws-cdk/aws-cloudfront.ResponseSecurityHeadersBehavior",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Using an existing managed response headers policy\ndeclare const bucketOrigin: origins.S3Origin;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudfront.Distribution(this, 'myDistManagedPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: cloudfront.ResponseHeadersPolicy.CORS_ALLOW_ALL_ORIGINS,\n  },\n});\n\n// Creating a custom response headers policy -- all parameters optional\nconst myResponseHeadersPolicy = new cloudfront.ResponseHeadersPolicy(this, 'ResponseHeadersPolicy', {\n  responseHeadersPolicyName: 'MyPolicy',\n  comment: 'A default policy',\n  corsBehavior: {\n    accessControlAllowCredentials: false,\n    accessControlAllowHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlAllowMethods: ['GET', 'POST'],\n    accessControlAllowOrigins: ['*'],\n    accessControlExposeHeaders: ['X-Custom-Header-1', 'X-Custom-Header-2'],\n    accessControlMaxAge: Duration.seconds(600),\n    originOverride: true,\n  },\n  customHeadersBehavior: {\n    customHeaders: [\n      { header: 'X-Amz-Date', value: 'some-value', override: true },\n      { header: 'X-Amz-Security-Token', value: 'some-value', override: false },\n    ],\n  },\n  securityHeadersBehavior: {\n    contentSecurityPolicy: { contentSecurityPolicy: 'default-src https:;', override: true },\n    contentTypeOptions: { override: true },\n    frameOptions: { frameOption: cloudfront.HeadersFrameOption.DENY, override: true },\n    referrerPolicy: { referrerPolicy: cloudfront.HeadersReferrerPolicy.NO_REFERRER, override: true },\n    strictTransportSecurity: { accessControlMaxAge: Duration.seconds(600), includeSubdomains: true, override: true },\n    xssProtection: { protection: true, modeBlock: true, reportUri: 'https://example.com/csp-report', override: true },\n  },\n});\nnew cloudfront.Distribution(this, 'myDistCustomPolicy', {\n  defaultBehavior: {\n    origin: bucketOrigin,\n    responseHeadersPolicy: myResponseHeadersPolicy,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 18,
        "75": 71,
        "91": 2,
        "104": 3,
        "106": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 16,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 45,
        "290": 1
      },
      "fqnsFingerprint": "e2bdf44e14c1bd77f02d40478f2907088ac4cbea5f25d4f03584014393feb515"
    },
    "c8cf81f5d766f0dd90a52df5253e2972a6f51c24baf3e55bf375c1449dc7da88": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_iam_certificate(\"certificateId\",\n        aliases=[\"example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.SSL_V3,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromIamCertificate(\"certificateId\", new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.SSL_V3,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromIamCertificate(\"certificateId\", ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.SSL_V3) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.S3OriginConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#SSL_V3",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromIamCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 24,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 5,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "25ccf8dbcc600387d3f427dbf1e320991d21dad15464576ad4f043778c58b9d6"
    },
    "1ee16bcc455d8b3b4654b997112808fe77e4b05005c876692fffc87fcd5b1f32": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ncertificate = certificatemanager.Certificate(self, \"Certificate\",\n    domain_name=\"example.com\",\n    subject_alternative_names=[\"*.example.com\"]\n)\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_acm_certificate(certificate,\n        aliases=[\"example.com\", \"www.example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.TLS_V1,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"example.com\",\n    SubjectAlternativeNames = new [] { \"*.example.com\" }\n});\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromAcmCertificate(certificate, new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\", \"www.example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.TLS_V1,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"example.com\")\n        .subjectAlternativeNames(List.of(\"*.example.com\"))\n        .build();\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromAcmCertificate(certificate, ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\", \"www.example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.TLS_V1) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.SSLMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#TLS_V1",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromAcmCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(certificate);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 3,
        "106": 1,
        "192": 4,
        "193": 6,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 10,
        "282": 1
      },
      "fqnsFingerprint": "f4289eeee59033b48c7fb2b982004b73a96a65877d5b6a484bea5a0b20887567"
    },
    "d8f730e470ded7a8242981ff07a5eae90d19dc0301d08bb5e29ed4724873e235": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_iam_certificate(\"certificateId\",\n        aliases=[\"example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.SSL_V3,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromIamCertificate(\"certificateId\", new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.SSL_V3,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromIamCertificate(\"certificateId\", ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.SSL_V3) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#SSL_V3",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromIamCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 24,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 5,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "25ccf8dbcc600387d3f427dbf1e320991d21dad15464576ad4f043778c58b9d6"
    },
    "ae421cd1d84904bd23e0027c2ee990fa442c9ab0934976a64c5b29f903110907": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_iam_certificate(\"certificateId\",\n        aliases=[\"example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.SSL_V3,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromIamCertificate(\"certificateId\", new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.SSL_V3,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromIamCertificate(\"certificateId\", ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.SSL_V3) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ViewerCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#SSL_V3",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromIamCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromIamCertificate(\n        'certificateId',\n        {\n          aliases: ['example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.SSL_V3, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 24,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 5,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "25ccf8dbcc600387d3f427dbf1e320991d21dad15464576ad4f043778c58b9d6"
    },
    "dfe849cf4103165dbc874faa2d0fa997ac8e4e8c95338fb398f8d1253db5441f": {
      "translations": {
        "python": {
          "source": "s3_bucket_source = s3.Bucket(self, \"Bucket\")\n\ncertificate = certificatemanager.Certificate(self, \"Certificate\",\n    domain_name=\"example.com\",\n    subject_alternative_names=[\"*.example.com\"]\n)\n\ndistribution = cloudfront.CloudFrontWebDistribution(self, \"AnAmazingWebsiteProbably\",\n    origin_configs=[cloudfront.SourceConfiguration(\n        s3_origin_source=cloudfront.S3OriginConfig(s3_bucket_source=s3_bucket_source),\n        behaviors=[cloudfront.Behavior(is_default_behavior=True)]\n    )],\n    viewer_certificate=cloudfront.ViewerCertificate.from_acm_certificate(certificate,\n        aliases=[\"example.com\", \"www.example.com\"],\n        security_policy=cloudfront.SecurityPolicyProtocol.TLS_V1,  # default\n        ssl_method=cloudfront.SSLMethod.SNI\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = new Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"example.com\",\n    SubjectAlternativeNames = new [] { \"*.example.com\" }\n});\n\nCloudFrontWebDistribution distribution = new CloudFrontWebDistribution(this, \"AnAmazingWebsiteProbably\", new CloudFrontWebDistributionProps {\n    OriginConfigs = new [] { new SourceConfiguration {\n        S3OriginSource = new S3OriginConfig { S3BucketSource = s3BucketSource },\n        Behaviors = new [] { new Behavior { IsDefaultBehavior = true } }\n    } },\n    ViewerCertificate = ViewerCertificate.FromAcmCertificate(certificate, new ViewerCertificateOptions {\n        Aliases = new [] { \"example.com\", \"www.example.com\" },\n        SecurityPolicy = SecurityPolicyProtocol.TLS_V1,  // default\n        SslMethod = SSLMethod.SNI\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket s3BucketSource = new Bucket(this, \"Bucket\");\n\nCertificate certificate = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"example.com\")\n        .subjectAlternativeNames(List.of(\"*.example.com\"))\n        .build();\n\nCloudFrontWebDistribution distribution = CloudFrontWebDistribution.Builder.create(this, \"AnAmazingWebsiteProbably\")\n        .originConfigs(List.of(SourceConfiguration.builder()\n                .s3OriginSource(S3OriginConfig.builder().s3BucketSource(s3BucketSource).build())\n                .behaviors(List.of(Behavior.builder().isDefaultBehavior(true).build()))\n                .build()))\n        .viewerCertificate(ViewerCertificate.fromAcmCertificate(certificate, ViewerCertificateOptions.builder()\n                .aliases(List.of(\"example.com\", \"www.example.com\"))\n                .securityPolicy(SecurityPolicyProtocol.TLS_V1) // default\n                .sslMethod(SSLMethod.SNI)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ViewerCertificateOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistribution",
        "@aws-cdk/aws-cloudfront.CloudFrontWebDistributionProps",
        "@aws-cdk/aws-cloudfront.S3OriginConfig",
        "@aws-cdk/aws-cloudfront.SSLMethod",
        "@aws-cdk/aws-cloudfront.SSLMethod#SNI",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol",
        "@aws-cdk/aws-cloudfront.SecurityPolicyProtocol#TLS_V1",
        "@aws-cdk/aws-cloudfront.ViewerCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificate#fromAcmCertificate",
        "@aws-cdk/aws-cloudfront.ViewerCertificateOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport { App, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cloudfront from '../lib';\n\nclass AcmCertificateAliasStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    /// !show\n    const s3BucketSource = new s3.Bucket(this, 'Bucket');\n\n    const certificate = new certificatemanager.Certificate(this, 'Certificate', {\n      domainName: 'example.com',\n      subjectAlternativeNames: ['*.example.com'],\n    });\n\n    const distribution = new cloudfront.CloudFrontWebDistribution(this, 'AnAmazingWebsiteProbably', {\n      originConfigs: [{\n        s3OriginSource: { s3BucketSource },\n        behaviors: [{ isDefaultBehavior: true }],\n      }],\n      viewerCertificate: cloudfront.ViewerCertificate.fromAcmCertificate(\n        certificate,\n        {\n          aliases: ['example.com', 'www.example.com'],\n          securityPolicy: cloudfront.SecurityPolicyProtocol.TLS_V1, // default\n          sslMethod: cloudfront.SSLMethod.SNI, // default\n        },\n      ),\n    });\n    /// !hide\n\n    Array.isArray(s3BucketSource);\n    Array.isArray(certificate);\n    Array.isArray(distribution);\n  }\n}\n\nconst app = new App();\nnew AcmCertificateAliasStack(app, 'AcmCertificateAliasStack');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 3,
        "106": 1,
        "192": 4,
        "193": 6,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 10,
        "282": 1
      },
      "fqnsFingerprint": "f4289eeee59033b48c7fb2b982004b73a96a65877d5b6a484bea5a0b20887567"
    },
    "1eb15ae4863e1346f27f8f251eda4cb277403c7fdf43ed01beb674ca09bcf1c1": {
      "translations": {
        "python": {
          "source": "# Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\n# my_bucket is of type Bucket\n\nmy_web_distribution = cloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        allowed_methods=cloudfront.AllowedMethods.ALLOW_ALL,\n        viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = new Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        AllowedMethods = AllowedMethods.ALLOW_ALL,\n        ViewerProtocolPolicy = ViewerProtocolPolicy.REDIRECT_TO_HTTPS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\nBucket myBucket;\n\nDistribution myWebDistribution = Distribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .allowedMethods(AllowedMethods.ALLOW_ALL)\n                .viewerProtocolPolicy(ViewerProtocolPolicy.REDIRECT_TO_HTTPS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.AllowedMethods",
        "@aws-cdk/aws-cloudfront.AllowedMethods#ALLOW_ALL",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy",
        "@aws-cdk/aws-cloudfront.ViewerProtocolPolicy#REDIRECT_TO_HTTPS",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Distribution with configured HTTP methods and viewer protocol policy of the cache.\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myWebDistribution = new cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n    viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 6,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0b415c6678a1d994aa00c22c1a1d19369190a9849a4b75be38aaa2be13aa02f3"
    },
    "98d25810537d12b2f956eb65a84252e0867362d127e7c29d9c48eaa926bf386a": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n# A Lambda@Edge function added to default behavior of a Distribution\n# and triggered on every request\nmy_func = cloudfront.experimental.EdgeFunction(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        edge_lambdas=[cloudfront.EdgeLambda(\n            function_version=my_func.current_version,\n            event_type=cloudfront.LambdaEdgeEventType.VIEWER_REQUEST\n        )\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = new Experimental.EdgeFunction(this, \"MyFunction\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        EdgeLambdas = new [] { new EdgeLambda {\n            FunctionVersion = myFunc.CurrentVersion,\n            EventType = LambdaEdgeEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = EdgeFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .edgeLambdas(List.of(EdgeLambda.builder()\n                        .functionVersion(myFunc.getCurrentVersion())\n                        .eventType(LambdaEdgeEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.experimental.EdgeFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.experimental",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunction",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6e211e88a67f024f0258ec24bdd80dc048a1ba01f3bf4da5c17ab7a1230b878e"
    },
    "94237c1ffa5ccc6413369349513ec796c8214fff22421892597e8e00bd9eb542": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n# A Lambda@Edge function added to default behavior of a Distribution\n# and triggered on every request\nmy_func = cloudfront.experimental.EdgeFunction(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\"))\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(\n        origin=origins.S3Origin(my_bucket),\n        edge_lambdas=[cloudfront.EdgeLambda(\n            function_version=my_func.current_version,\n            event_type=cloudfront.LambdaEdgeEventType.VIEWER_REQUEST\n        )\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = new Experimental.EdgeFunction(this, \"MyFunction\", new EdgeFunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\"))\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions {\n        Origin = new S3Origin(myBucket),\n        EdgeLambdas = new [] { new EdgeLambda {\n            FunctionVersion = myFunc.CurrentVersion,\n            EventType = LambdaEdgeEventType.VIEWER_REQUEST\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nEdgeFunction myFunc = EdgeFunction.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder()\n                .origin(new S3Origin(myBucket))\n                .edgeLambdas(List.of(EdgeLambda.builder()\n                        .functionVersion(myFunc.getCurrentVersion())\n                        .eventType(LambdaEdgeEventType.VIEWER_REQUEST)\n                        .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType",
        "@aws-cdk/aws-cloudfront.LambdaEdgeEventType#VIEWER_REQUEST",
        "@aws-cdk/aws-cloudfront.experimental",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunction",
        "@aws-cdk/aws-cloudfront.experimental.EdgeFunctionProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// A Lambda@Edge function added to default behavior of a Distribution\n// and triggered on every request\nconst myFunc = new cloudfront.experimental.EdgeFunction(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: {\n    origin: new origins.S3Origin(myBucket),\n    edgeLambdas: [\n      {\n        functionVersion: myFunc.currentVersion,\n        eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n      }\n    ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "6e211e88a67f024f0258ec24bdd80dc048a1ba01f3bf4da5c17ab7a1230b878e"
    }
  }
}
