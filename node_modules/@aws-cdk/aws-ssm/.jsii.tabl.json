{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "cf56defddea1ca807fc603943fe26e8a0a9022c29eadfe9ec4849adb0914449e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ssm as ssm",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SSM;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ssm.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as ssm from '@aws-cdk/aws-ssm';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ssm"
        },
        "field": {
          "field": "markdown",
          "line": 26
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as ssm from '@aws-cdk/aws-ssm';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9e34fa893cefedb02cc99b8724377c793844bda4d65d6e85727c8a2a96ab64d7": {
      "translations": {
        "python": {
          "source": "# Retrieve the latest value of the non-secret parameter\n# with name \"/My/String/Parameter\".\nstring_value = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValue\",\n    parameter_name=\"/My/Public/Parameter\"\n).string_value\nstring_value_version_from_token = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValueVersionFromToken\",\n    parameter_name=\"/My/Public/Parameter\",\n    # parameter version from token\n    version=parameter_version\n).string_value\n\n# Retrieve a specific version of the secret (SecureString) parameter.\n# 'version' is always required.\nsecret_value = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValue\",\n    parameter_name=\"/My/Secret/Parameter\",\n    version=5\n)\nsecret_value_version_from_token = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValueVersionFromToken\",\n    parameter_name=\"/My/Secret/Parameter\",\n    # parameter version from token\n    version=parameter_version\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nstring stringValue = StringParameter.FromStringParameterAttributes(this, \"MyValue\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\"\n}).StringValue;\nstring stringValueVersionFromToken = StringParameter.FromStringParameterAttributes(this, \"MyValueVersionFromToken\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n}).StringValue;\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValue\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    Version = 5\n});\nIStringParameter secretValueVersionFromToken = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n});",
          "version": "1"
        },
        "java": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nString stringValue = StringParameter.fromStringParameterAttributes(this, \"MyValue\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        .build()).getStringValue();\nString stringValueVersionFromToken = StringParameter.fromStringParameterAttributes(this, \"MyValueVersionFromToken\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build()).getStringValue();\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValue\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        .version(5)\n        .build());\nIStringParameter secretValueVersionFromToken = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ssm"
        },
        "field": {
          "field": "markdown",
          "line": 35
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.IStringParameter",
        "@aws-cdk/aws-ssm.IStringParameter#stringValue",
        "@aws-cdk/aws-ssm.SecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#fromSecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter#fromStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameterAttributes"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nclass CreatingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new ssm.StringParameter(this, 'String', {\n      parameterName: '/My/Public/Parameter',\n      stringValue: 'abcdef',\n    });\n  }\n}\n\nclass UsingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    // Parameter that contains version number, will be used to pass\n    // version value from token.\n    const parameterVersion = new cdk.CfnParameter(this, 'MyParameterVersion', {\n      type: 'Number',\n      default: 1,\n    }).valueAsNumber;\n\n    /// !show\n    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });\n\n    /// !hide\n\n    new cdk.CfnResource(this, 'Dummy', { type: 'AWS::SNS::Topic' });\n    new cdk.CfnOutput(this, 'TheValue', { value: stringValue });\n    new cdk.CfnOutput(this, 'TheValueVersionFromToken', { value: stringValueVersionFromToken });\n\n    // Cannot be provisioned so cannot be actually used\n    Array.isArray(secretValue);\n    Array.isArray(secretValueVersionFromToken);\n  }\n}\n\nconst app = new cdk.App();\n\nconst creating = new CreatingStack(app, 'sspms-creating');\nconst using = new UsingStack(app, 'sspms-using');\nusing.addDependency(creating);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 27,
        "104": 4,
        "193": 4,
        "194": 10,
        "196": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "cdbb91f7b3bf248cbf3a6425f8cc299a5064c4ac59625d602e8453476f6d242f"
    },
    "3504cd30e344c3e2aae188f5e6a1218f6b4c4152cec4c42f73dd7d364d896e89": {
      "translations": {
        "python": {
          "source": "ssm.StringParameter(self, \"Parameter\",\n    allowed_pattern=\".*\",\n    description=\"The value Foo\",\n    parameter_name=\"FooParameter\",\n    string_value=\"Foo\",\n    tier=ssm.ParameterTier.ADVANCED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StringParameter(this, \"Parameter\", new StringParameterProps {\n    AllowedPattern = \".*\",\n    Description = \"The value Foo\",\n    ParameterName = \"FooParameter\",\n    StringValue = \"Foo\",\n    Tier = ParameterTier.ADVANCED\n});",
          "version": "1"
        },
        "java": {
          "source": "StringParameter.Builder.create(this, \"Parameter\")\n        .allowedPattern(\".*\")\n        .description(\"The value Foo\")\n        .parameterName(\"FooParameter\")\n        .stringValue(\"Foo\")\n        .tier(ParameterTier.ADVANCED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ssm"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.ParameterTier",
        "@aws-cdk/aws-ssm.ParameterTier#ADVANCED",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ssm from '@aws-cdk/aws-ssm';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "8121687931728412be69f56e233b848376b024f9a4a031de2bb621e09ee37335"
    },
    "cd4b0decb1d1f23f99bce460a1194db066a5e6b443b558c6bc036b612bf8ed9d": {
      "translations": {
        "python": {
          "source": "# Create a new SSM Parameter holding a String\nparam = ssm.StringParameter(stack, \"StringParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_value=\"Initial parameter value\"\n)\n\n# Grant read access to some Role\nparam.grant_read(role)\n\n# Create a new SSM Parameter holding a StringList\nlist_parameter = ssm.StringListParameter(stack, \"StringListParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_list_value=[\"Initial parameter value A\", \"Initial parameter value B\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = new StringParameter(stack, \"StringParameter\", new StringParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringValue = \"Initial parameter value\"\n});\n\n// Grant read access to some Role\nparam.GrantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = new StringListParameter(stack, \"StringListParameter\", new StringListParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringListValue = new [] { \"Initial parameter value A\", \"Initial parameter value B\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = StringParameter.Builder.create(stack, \"StringParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringValue(\"Initial parameter value\")\n        .build();\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = StringListParameter.Builder.create(stack, \"StringListParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringListValue(List.of(\"Initial parameter value A\", \"Initial parameter value B\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ssm"
        },
        "field": {
          "field": "markdown",
          "line": 80
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-ssm.StringListParameter",
        "@aws-cdk/aws-ssm.StringListParameterProps",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'SSM-Parameter');\n\nconst role = new iam.Role(stack, 'UserRole', {\n  assumedBy: new iam.AccountRootPrincipal(),\n});\n\n/// !show\n// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});\n/// !hide\n\nnew cdk.CfnOutput(stack, 'StringListOutput', {\n  value: cdk.Fn.join('+', listParameter.stringListValue),\n});\n\nnew cdk.CfnOutput(stack, 'ParamArn', {\n  value: param.parameterArn,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "afb466ab29cb04ab46a22dbba704d69263f3e933227599a82e3045c61290bd6f"
    },
    "e2505fa567af452b74b5bb94d0c6d6af9bdb8d318714cb2a02c450c2a7ff70be": {
      "translations": {
        "python": {
          "source": "ssm.StringParameter(self, \"Parameter\",\n    allowed_pattern=\".*\",\n    description=\"The value Foo\",\n    parameter_name=\"FooParameter\",\n    string_value=\"Foo\",\n    tier=ssm.ParameterTier.ADVANCED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StringParameter(this, \"Parameter\", new StringParameterProps {\n    AllowedPattern = \".*\",\n    Description = \"The value Foo\",\n    ParameterName = \"FooParameter\",\n    StringValue = \"Foo\",\n    Tier = ParameterTier.ADVANCED\n});",
          "version": "1"
        },
        "java": {
          "source": "StringParameter.Builder.create(this, \"Parameter\")\n        .allowedPattern(\".*\")\n        .description(\"The value Foo\")\n        .parameterName(\"FooParameter\")\n        .stringValue(\"Foo\")\n        .tier(ParameterTier.ADVANCED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.ParameterTier"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.ParameterTier",
        "@aws-cdk/aws-ssm.ParameterTier#ADVANCED",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ssm from '@aws-cdk/aws-ssm';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "8121687931728412be69f56e233b848376b024f9a4a031de2bb621e09ee37335"
    },
    "83d00b9c34fc5b7477c3d5caa5ae191d6ccf6a1e29a52611ba33ef294004c98d": {
      "translations": {
        "python": {
          "source": "# Retrieve the latest value of the non-secret parameter\n# with name \"/My/String/Parameter\".\nstring_value = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValue\",\n    parameter_name=\"/My/Public/Parameter\"\n).string_value\nstring_value_version_from_token = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValueVersionFromToken\",\n    parameter_name=\"/My/Public/Parameter\",\n    # parameter version from token\n    version=parameter_version\n).string_value\n\n# Retrieve a specific version of the secret (SecureString) parameter.\n# 'version' is always required.\nsecret_value = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValue\",\n    parameter_name=\"/My/Secret/Parameter\",\n    version=5\n)\nsecret_value_version_from_token = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValueVersionFromToken\",\n    parameter_name=\"/My/Secret/Parameter\",\n    # parameter version from token\n    version=parameter_version\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nstring stringValue = StringParameter.FromStringParameterAttributes(this, \"MyValue\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\"\n}).StringValue;\nstring stringValueVersionFromToken = StringParameter.FromStringParameterAttributes(this, \"MyValueVersionFromToken\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n}).StringValue;\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValue\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    Version = 5\n});\nIStringParameter secretValueVersionFromToken = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n});",
          "version": "1"
        },
        "java": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nString stringValue = StringParameter.fromStringParameterAttributes(this, \"MyValue\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        .build()).getStringValue();\nString stringValueVersionFromToken = StringParameter.fromStringParameterAttributes(this, \"MyValueVersionFromToken\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build()).getStringValue();\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValue\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        .version(5)\n        .build());\nIStringParameter secretValueVersionFromToken = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.SecureStringParameterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.IStringParameter",
        "@aws-cdk/aws-ssm.IStringParameter#stringValue",
        "@aws-cdk/aws-ssm.SecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#fromSecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter#fromStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameterAttributes"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nclass CreatingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new ssm.StringParameter(this, 'String', {\n      parameterName: '/My/Public/Parameter',\n      stringValue: 'abcdef',\n    });\n  }\n}\n\nclass UsingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    // Parameter that contains version number, will be used to pass\n    // version value from token.\n    const parameterVersion = new cdk.CfnParameter(this, 'MyParameterVersion', {\n      type: 'Number',\n      default: 1,\n    }).valueAsNumber;\n\n    /// !show\n    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });\n\n    /// !hide\n\n    new cdk.CfnResource(this, 'Dummy', { type: 'AWS::SNS::Topic' });\n    new cdk.CfnOutput(this, 'TheValue', { value: stringValue });\n    new cdk.CfnOutput(this, 'TheValueVersionFromToken', { value: stringValueVersionFromToken });\n\n    // Cannot be provisioned so cannot be actually used\n    Array.isArray(secretValue);\n    Array.isArray(secretValueVersionFromToken);\n  }\n}\n\nconst app = new cdk.App();\n\nconst creating = new CreatingStack(app, 'sspms-creating');\nconst using = new UsingStack(app, 'sspms-using');\nusing.addDependency(creating);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 27,
        "104": 4,
        "193": 4,
        "194": 10,
        "196": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "cdbb91f7b3bf248cbf3a6425f8cc299a5064c4ac59625d602e8453476f6d242f"
    },
    "bb23f441f698c012182d8fdf2ecb31f999c9357d849697c0359d6fc31e2f32a1": {
      "translations": {
        "python": {
          "source": "# Create a new SSM Parameter holding a String\nparam = ssm.StringParameter(stack, \"StringParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_value=\"Initial parameter value\"\n)\n\n# Grant read access to some Role\nparam.grant_read(role)\n\n# Create a new SSM Parameter holding a StringList\nlist_parameter = ssm.StringListParameter(stack, \"StringListParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_list_value=[\"Initial parameter value A\", \"Initial parameter value B\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = new StringParameter(stack, \"StringParameter\", new StringParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringValue = \"Initial parameter value\"\n});\n\n// Grant read access to some Role\nparam.GrantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = new StringListParameter(stack, \"StringListParameter\", new StringListParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringListValue = new [] { \"Initial parameter value A\", \"Initial parameter value B\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = StringParameter.Builder.create(stack, \"StringParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringValue(\"Initial parameter value\")\n        .build();\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = StringListParameter.Builder.create(stack, \"StringListParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringListValue(List.of(\"Initial parameter value A\", \"Initial parameter value B\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.StringListParameter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-ssm.StringListParameter",
        "@aws-cdk/aws-ssm.StringListParameterProps",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'SSM-Parameter');\n\nconst role = new iam.Role(stack, 'UserRole', {\n  assumedBy: new iam.AccountRootPrincipal(),\n});\n\n/// !show\n// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});\n/// !hide\n\nnew cdk.CfnOutput(stack, 'StringListOutput', {\n  value: cdk.Fn.join('+', listParameter.stringListValue),\n});\n\nnew cdk.CfnOutput(stack, 'ParamArn', {\n  value: param.parameterArn,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "afb466ab29cb04ab46a22dbba704d69263f3e933227599a82e3045c61290bd6f"
    },
    "c591d034490c4a4a54126fa49e58b33094b81787d1fc6bdfa3b9574de5f746bc": {
      "translations": {
        "python": {
          "source": "# Create a new SSM Parameter holding a String\nparam = ssm.StringParameter(stack, \"StringParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_value=\"Initial parameter value\"\n)\n\n# Grant read access to some Role\nparam.grant_read(role)\n\n# Create a new SSM Parameter holding a StringList\nlist_parameter = ssm.StringListParameter(stack, \"StringListParameter\",\n    # description: 'Some user-friendly description',\n    # name: 'ParameterName',\n    string_list_value=[\"Initial parameter value A\", \"Initial parameter value B\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = new StringParameter(stack, \"StringParameter\", new StringParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringValue = \"Initial parameter value\"\n});\n\n// Grant read access to some Role\nparam.GrantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = new StringListParameter(stack, \"StringListParameter\", new StringListParameterProps {\n    // description: 'Some user-friendly description',\n    // name: 'ParameterName',\n    StringListValue = new [] { \"Initial parameter value A\", \"Initial parameter value B\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a new SSM Parameter holding a String\nStringParameter param = StringParameter.Builder.create(stack, \"StringParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringValue(\"Initial parameter value\")\n        .build();\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nStringListParameter listParameter = StringListParameter.Builder.create(stack, \"StringListParameter\")\n        // description: 'Some user-friendly description',\n        // name: 'ParameterName',\n        .stringListValue(List.of(\"Initial parameter value A\", \"Initial parameter value B\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.StringListParameterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-ssm.StringListParameter",
        "@aws-cdk/aws-ssm.StringListParameterProps",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'SSM-Parameter');\n\nconst role = new iam.Role(stack, 'UserRole', {\n  assumedBy: new iam.AccountRootPrincipal(),\n});\n\n/// !show\n// Create a new SSM Parameter holding a String\nconst param = new ssm.StringParameter(stack, 'StringParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringValue: 'Initial parameter value',\n  // allowedPattern: '.*',\n});\n\n// Grant read access to some Role\nparam.grantRead(role);\n\n// Create a new SSM Parameter holding a StringList\nconst listParameter = new ssm.StringListParameter(stack, 'StringListParameter', {\n  // description: 'Some user-friendly description',\n  // name: 'ParameterName',\n  stringListValue: ['Initial parameter value A', 'Initial parameter value B'],\n  // allowedPattern: '.*',\n});\n/// !hide\n\nnew cdk.CfnOutput(stack, 'StringListOutput', {\n  value: cdk.Fn.join('+', listParameter.stringListValue),\n});\n\nnew cdk.CfnOutput(stack, 'ParamArn', {\n  value: param.parameterArn,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "afb466ab29cb04ab46a22dbba704d69263f3e933227599a82e3045c61290bd6f"
    },
    "21b6c5e1a9b0165f77d7501d2a90ee001a8db5f1517001d86a9078d319d8b212": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_vpc_attributes(self, \"VPC\",\n    vpc_id=\"vpc-1234\",\n    availability_zones=[\"us-east-1a\", \"us-east-1b\"],\n\n    # Either pass literals for all IDs\n    public_subnet_ids=[\"s-12345\", \"s-67890\"],\n\n    # OR: import a list of known length\n    private_subnet_ids=Fn.import_list_value(\"PrivateSubnetIds\", 2),\n\n    # OR: split an imported string to a list of known length\n    isolated_subnet_ids=Fn.split(\",\", ssm.StringParameter.value_for_string_parameter(self, \"MyParameter\"), 2)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromVpcAttributes(this, \"VPC\", new VpcAttributes {\n    VpcId = \"vpc-1234\",\n    AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1b\" },\n\n    // Either pass literals for all IDs\n    PublicSubnetIds = new [] { \"s-12345\", \"s-67890\" },\n\n    // OR: import a list of known length\n    PrivateSubnetIds = Fn.ImportListValue(\"PrivateSubnetIds\", 2),\n\n    // OR: split an imported string to a list of known length\n    IsolatedSubnetIds = Fn.Split(\",\", StringParameter.ValueForStringParameter(this, \"MyParameter\"), 2)\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromVpcAttributes(this, \"VPC\", VpcAttributes.builder()\n        .vpcId(\"vpc-1234\")\n        .availabilityZones(List.of(\"us-east-1a\", \"us-east-1b\"))\n\n        // Either pass literals for all IDs\n        .publicSubnetIds(List.of(\"s-12345\", \"s-67890\"))\n\n        // OR: import a list of known length\n        .privateSubnetIds(Fn.importListValue(\"PrivateSubnetIds\", 2))\n\n        // OR: split an imported string to a list of known length\n        .isolatedSubnetIds(Fn.split(\",\", StringParameter.valueForStringParameter(this, \"MyParameter\"), 2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.StringParameter"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#valueForStringParameter",
        "@aws-cdk/core.Fn#importListValue",
        "@aws-cdk/core.Fn#split"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "14": 1,
        "75": 16,
        "104": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "09f7d1633d49eda6f70ee878f1e2612b271587515b50b506c8f52154268e4615"
    },
    "a241853db7439840c7e6324729d033b0e979a3d966ea49a321104f85f34c7021": {
      "translations": {
        "python": {
          "source": "# Retrieve the latest value of the non-secret parameter\n# with name \"/My/String/Parameter\".\nstring_value = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValue\",\n    parameter_name=\"/My/Public/Parameter\"\n).string_value\nstring_value_version_from_token = ssm.StringParameter.from_string_parameter_attributes(self, \"MyValueVersionFromToken\",\n    parameter_name=\"/My/Public/Parameter\",\n    # parameter version from token\n    version=parameter_version\n).string_value\n\n# Retrieve a specific version of the secret (SecureString) parameter.\n# 'version' is always required.\nsecret_value = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValue\",\n    parameter_name=\"/My/Secret/Parameter\",\n    version=5\n)\nsecret_value_version_from_token = ssm.StringParameter.from_secure_string_parameter_attributes(self, \"MySecureValueVersionFromToken\",\n    parameter_name=\"/My/Secret/Parameter\",\n    # parameter version from token\n    version=parameter_version\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nstring stringValue = StringParameter.FromStringParameterAttributes(this, \"MyValue\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\"\n}).StringValue;\nstring stringValueVersionFromToken = StringParameter.FromStringParameterAttributes(this, \"MyValueVersionFromToken\", new StringParameterAttributes {\n    ParameterName = \"/My/Public/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n}).StringValue;\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValue\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    Version = 5\n});\nIStringParameter secretValueVersionFromToken = StringParameter.FromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", new SecureStringParameterAttributes {\n    ParameterName = \"/My/Secret/Parameter\",\n    // parameter version from token\n    Version = parameterVersion\n});",
          "version": "1"
        },
        "java": {
          "source": "// Retrieve the latest value of the non-secret parameter\n// with name \"/My/String/Parameter\".\nString stringValue = StringParameter.fromStringParameterAttributes(this, \"MyValue\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        .build()).getStringValue();\nString stringValueVersionFromToken = StringParameter.fromStringParameterAttributes(this, \"MyValueVersionFromToken\", StringParameterAttributes.builder()\n        .parameterName(\"/My/Public/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build()).getStringValue();\n\n// Retrieve a specific version of the secret (SecureString) parameter.\n// 'version' is always required.\nIStringParameter secretValue = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValue\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        .version(5)\n        .build());\nIStringParameter secretValueVersionFromToken = StringParameter.fromSecureStringParameterAttributes(this, \"MySecureValueVersionFromToken\", SecureStringParameterAttributes.builder()\n        .parameterName(\"/My/Secret/Parameter\")\n        // parameter version from token\n        .version(parameterVersion)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.StringParameterAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.IStringParameter",
        "@aws-cdk/aws-ssm.IStringParameter#stringValue",
        "@aws-cdk/aws-ssm.SecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#fromSecureStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameter#fromStringParameterAttributes",
        "@aws-cdk/aws-ssm.StringParameterAttributes"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as ssm from '../lib';\n\nclass CreatingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new ssm.StringParameter(this, 'String', {\n      parameterName: '/My/Public/Parameter',\n      stringValue: 'abcdef',\n    });\n  }\n}\n\nclass UsingStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    // Parameter that contains version number, will be used to pass\n    // version value from token.\n    const parameterVersion = new cdk.CfnParameter(this, 'MyParameterVersion', {\n      type: 'Number',\n      default: 1,\n    }).valueAsNumber;\n\n    /// !show\n    // Retrieve the latest value of the non-secret parameter\n    // with name \"/My/String/Parameter\".\n    const stringValue = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValue', {\n      parameterName: '/My/Public/Parameter',\n      // 'version' can be specified but is optional.\n    }).stringValue;\n    const stringValueVersionFromToken = ssm.StringParameter.fromStringParameterAttributes(this, 'MyValueVersionFromToken', {\n      parameterName: '/My/Public/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    }).stringValue;\n\n    // Retrieve a specific version of the secret (SecureString) parameter.\n    // 'version' is always required.\n    const secretValue = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValue', {\n      parameterName: '/My/Secret/Parameter',\n      version: 5,\n    });\n    const secretValueVersionFromToken = ssm.StringParameter.fromSecureStringParameterAttributes(this, 'MySecureValueVersionFromToken', {\n      parameterName: '/My/Secret/Parameter',\n      // parameter version from token\n      version: parameterVersion,\n    });\n\n    /// !hide\n\n    new cdk.CfnResource(this, 'Dummy', { type: 'AWS::SNS::Topic' });\n    new cdk.CfnOutput(this, 'TheValue', { value: stringValue });\n    new cdk.CfnOutput(this, 'TheValueVersionFromToken', { value: stringValueVersionFromToken });\n\n    // Cannot be provisioned so cannot be actually used\n    Array.isArray(secretValue);\n    Array.isArray(secretValueVersionFromToken);\n  }\n}\n\nconst app = new cdk.App();\n\nconst creating = new CreatingStack(app, 'sspms-creating');\nconst using = new UsingStack(app, 'sspms-using');\nusing.addDependency(creating);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 27,
        "104": 4,
        "193": 4,
        "194": 10,
        "196": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 7
      },
      "fqnsFingerprint": "cdbb91f7b3bf248cbf3a6425f8cc299a5064c4ac59625d602e8453476f6d242f"
    },
    "06ad36f7dc078dee3def8e1110c2892f4f68b844141611e1eeee4b227c87361f": {
      "translations": {
        "python": {
          "source": "ssm.StringParameter(self, \"Parameter\",\n    allowed_pattern=\".*\",\n    description=\"The value Foo\",\n    parameter_name=\"FooParameter\",\n    string_value=\"Foo\",\n    tier=ssm.ParameterTier.ADVANCED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StringParameter(this, \"Parameter\", new StringParameterProps {\n    AllowedPattern = \".*\",\n    Description = \"The value Foo\",\n    ParameterName = \"FooParameter\",\n    StringValue = \"Foo\",\n    Tier = ParameterTier.ADVANCED\n});",
          "version": "1"
        },
        "java": {
          "source": "StringParameter.Builder.create(this, \"Parameter\")\n        .allowedPattern(\".*\")\n        .description(\"The value Foo\")\n        .parameterName(\"FooParameter\")\n        .stringValue(\"Foo\")\n        .tier(ParameterTier.ADVANCED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ssm.StringParameterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ssm.ParameterTier",
        "@aws-cdk/aws-ssm.ParameterTier#ADVANCED",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameterProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ssm from '@aws-cdk/aws-ssm';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ssm.StringParameter(this, 'Parameter', {\n  allowedPattern: '.*',\n  description: 'The value Foo',\n  parameterName: 'FooParameter',\n  stringValue: 'Foo',\n  tier: ssm.ParameterTier.ADVANCED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "8121687931728412be69f56e233b848376b024f9a4a031de2bb621e09ee37335"
    }
  }
}
