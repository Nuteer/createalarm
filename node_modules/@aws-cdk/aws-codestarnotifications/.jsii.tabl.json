{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "540f304210279f6c098a5d0f65264d46b28dfdf56ca85dd59e095a80e0c7bb30": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\nproject = codebuild.PipelineProject(stack, \"MyProject\")\n\ntopic = sns.Topic(stack, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(stack, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(stack, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = new SlackChannelConfiguration(stack, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nNotificationRule rule = new NotificationRule(stack, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(stack, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(stack, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);",
          "version": "1"
        },
        "$": {
          "source": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codestarnotifications"
        },
        "field": {
          "field": "markdown",
          "line": 36
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleSource",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRule",
        "@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRuleProps",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "76a73a4354b70fd035956c8e18ad8e50c40af980614a4c60f25be59185e45d41"
    },
    "7bda05107a63e2c720b31199341ce0b8dadaf9b05bce9bf3afba91589737005b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\nproject = codebuild.PipelineProject(stack, \"MyProject\")\n\ntopic = sns.Topic(stack, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(stack, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(stack, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = new SlackChannelConfiguration(stack, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nNotificationRule rule = new NotificationRule(stack, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(stack, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(stack, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);",
          "version": "1"
        },
        "$": {
          "source": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codestarnotifications.NotificationRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleSource",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRule",
        "@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRuleProps",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "76a73a4354b70fd035956c8e18ad8e50c40af980614a4c60f25be59185e45d41"
    },
    "08e1c669816f2eb41d0abef0f17f558127cdb1f605ae2544209b66f0dcc40872": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codestarnotifications as notifications\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.aws_chatbot as chatbot\n\nproject = codebuild.PipelineProject(stack, \"MyProject\")\n\ntopic = sns.Topic(stack, \"MyTopic1\")\n\nslack = chatbot.SlackChannelConfiguration(stack, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = notifications.NotificationRule(stack, \"NotificationRule\",\n    source=project,\n    events=[\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"\n    ],\n    targets=[topic]\n)\nrule.add_target(slack)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeStarNotifications;\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.AWS.Chatbot;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = new SlackChannelConfiguration(stack, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nNotificationRule rule = new NotificationRule(stack, \"NotificationRule\", new NotificationRuleProps {\n    Source = project,\n    Events = new [] { \"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\" },\n    Targets = new [] { topic }\n});\nrule.AddTarget(slack);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codestarnotifications.*;\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.services.chatbot.*;\n\nPipelineProject project = new PipelineProject(stack, \"MyProject\");\n\nTopic topic = new Topic(stack, \"MyTopic1\");\n\nSlackChannelConfiguration slack = SlackChannelConfiguration.Builder.create(stack, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nNotificationRule rule = NotificationRule.Builder.create(stack, \"NotificationRule\")\n        .source(project)\n        .events(List.of(\"codebuild-project-build-state-succeeded\", \"codebuild-project-build-state-failed\"))\n        .targets(List.of(topic))\n        .build();\nrule.addTarget(slack);",
          "version": "1"
        },
        "$": {
          "source": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codestarnotifications.NotificationRuleProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleSource",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRule",
        "@aws-cdk/aws-codestarnotifications.NotificationRule#addTarget",
        "@aws-cdk/aws-codestarnotifications.NotificationRuleProps",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "import * as notifications from '@aws-cdk/aws-codestarnotifications';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\nconst project = new codebuild.PipelineProject(stack, 'MyProject');\n\nconst topic = new sns.Topic(stack, 'MyTopic1');\n\nconst slack = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = new notifications.NotificationRule(stack, 'NotificationRule', {\n  source: project,\n  events: [\n    'codebuild-project-build-state-succeeded',\n    'codebuild-project-build-state-failed',\n  ],\n  targets: [topic],\n});\nrule.addTarget(slack);",
      "syntaxKindCounter": {
        "10": 13,
        "75": 31,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "76a73a4354b70fd035956c8e18ad8e50c40af980614a4c60f25be59185e45d41"
    }
  }
}
