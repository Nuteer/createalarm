{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "315735d1693d812dfd0333750428ccd9306d9e3c0bc5f43a44847d625a5fb101": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "f6559e6055f2a6ad38e9b138059bf914edc588ce7042134135cc0ae54d41a123": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\");",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'VPC');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'VPC');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "cd1bcfc1e9c43086206937a726e326be12e350e13ab55f07f0ed068a1c2ce280"
    },
    "2e3ae8d1968eabb0da7fb8ae64bb7af3bbc34f2a0cc6c8c9cf239d8b1fb14240": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.SubnetSelection(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    Subnets = new SubnetSelection {\n        SubnetType = SubnetType.ISOLATED,\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        .subnets(SubnetSelection.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnetType: ec2.SubnetType.ISOLATED,\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 127
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnetType: ec2.SubnetType.ISOLATED,\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "bc14c07e46ad25628b1d3102909becd80b669fb302fb7a24e7359e820f306b17"
    },
    "588a14e5d7502891374f9804f5274fe0b80352b5ef5926b7b542c2c629e18ab8": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# subnet1 is of type Subnet\n# subnet2 is of type Subnet\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    subnets=ec2.SubnetSelection(\n        subnets=[subnet1, subnet2]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSubnet subnet1;\nSubnet subnet2;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    Subnets = new SubnetSelection {\n        Subnets = new [] { subnet1, subnet2 }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSubnet subnet1;\nSubnet subnet2;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        .subnets(SubnetSelection.builder()\n                .subnets(List.of(subnet1, subnet2))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const subnet1: ec2.Subnet;\ndeclare const subnet2: ec2.Subnet;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnets: [subnet1, subnet2]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 142
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const subnet1: ec2.Subnet;\ndeclare const subnet2: ec2.Subnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  subnets: {\n    subnets: [subnet1, subnet2]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 19,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a1642cb8265266e6f0349a8583a71124546d264135b6cf9375dd6213dc5d4f6"
    },
    "7212379b5f48f5edb962458ad8e4680f15d069c65b40f290c5c5ec98dd8a931a": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 194
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "483ea377366ebeee7bba800d946073690ad2b6e6faceba938d772c39de7fb926"
    },
    "b3dc8e1955c23e29eedf86406e7090d1dd9e31e54c6a2adcbae49218723e39a0": {
      "translations": {
        "python": {
          "source": "# instance_type is of type InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    allow_all_traffic=False\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "1"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    AllowAllTraffic = false\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .allowAllTraffic(false)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 217
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a5763867f92151f5475615a98ec414b1aeabd89bbb8385a4b5eebe6c7fe7b90c"
    },
    "d134a2f1a7cb94dec56e7cdfb3f7604719a956858b152ad5278e555ecd52d38a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    # 'cidr' configures the IP range and size of the entire VPC.\n    # The IP space will be divided over the configured subnets.\n    cidr=\"10.0.0.0/21\",\n\n    # 'maxAzs' configures the maximum number of availability zones to use\n    max_azs=3,\n\n    # 'subnetConfiguration' specifies the \"subnet groups\" to create.\n    # Every subnet group will have a subnet for each AZ, so this\n    # configuration will create `3 groups × 3 AZs = 9` subnets.\n    subnet_configuration=[ec2.SubnetConfiguration(\n        # 'subnetType' controls Internet access, as described above.\n        subnet_type=ec2.SubnetType.PUBLIC,\n\n        # 'name' is used to name this particular subnet group. You will have to\n        # use the name for subnet selection if you have more than one subnet\n        # group of the same type.\n        name=\"Ingress\",\n\n        # 'cidrMask' specifies the IP addresses in the range of of individual\n        # subnets in the group. Each of the subnets in this group will contain\n        # `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n        # usable IP addresses.\n        #\n        # If 'cidrMask' is left out the available address space is evenly\n        # divided across the remaining subnet groups.\n        cidr_mask=24\n    ), ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"Application\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=28,\n        name=\"Database\",\n        subnet_type=ec2.SubnetType.PRIVATE_ISOLATED,\n\n        # 'reserved' can be used to reserve IP address space. No resources will\n        # be created for this subnet, but the IP range will be kept available for\n        # future creation of this subnet, or even for future subdivision.\n        reserved=True\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    // 'cidr' configures the IP range and size of the entire VPC.\n    // The IP space will be divided over the configured subnets.\n    Cidr = \"10.0.0.0/21\",\n\n    // 'maxAzs' configures the maximum number of availability zones to use\n    MaxAzs = 3,\n\n    // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n    // Every subnet group will have a subnet for each AZ, so this\n    // configuration will create `3 groups × 3 AZs = 9` subnets.\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        // 'subnetType' controls Internet access, as described above.\n        SubnetType = SubnetType.PUBLIC,\n\n        // 'name' is used to name this particular subnet group. You will have to\n        // use the name for subnet selection if you have more than one subnet\n        // group of the same type.\n        Name = \"Ingress\",\n\n        // 'cidrMask' specifies the IP addresses in the range of of individual\n        // subnets in the group. Each of the subnets in this group will contain\n        // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n        // usable IP addresses.\n        //\n        // If 'cidrMask' is left out the available address space is evenly\n        // divided across the remaining subnet groups.\n        CidrMask = 24\n    }, new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"Application\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 28,\n        Name = \"Database\",\n        SubnetType = SubnetType.PRIVATE_ISOLATED,\n\n        // 'reserved' can be used to reserve IP address space. No resources will\n        // be created for this subnet, but the IP range will be kept available for\n        // future creation of this subnet, or even for future subdivision.\n        Reserved = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        // 'cidr' configures the IP range and size of the entire VPC.\n        // The IP space will be divided over the configured subnets.\n        .cidr(\"10.0.0.0/21\")\n\n        // 'maxAzs' configures the maximum number of availability zones to use\n        .maxAzs(3)\n\n        // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n        // Every subnet group will have a subnet for each AZ, so this\n        // configuration will create `3 groups × 3 AZs = 9` subnets.\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                // 'subnetType' controls Internet access, as described above.\n                .subnetType(SubnetType.PUBLIC)\n\n                // 'name' is used to name this particular subnet group. You will have to\n                // use the name for subnet selection if you have more than one subnet\n                // group of the same type.\n                .name(\"Ingress\")\n\n                // 'cidrMask' specifies the IP addresses in the range of of individual\n                // subnets in the group. Each of the subnets in this group will contain\n                // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n                // usable IP addresses.\n                //\n                // If 'cidrMask' is left out the available address space is evenly\n                // divided across the remaining subnet groups.\n                .cidrMask(24)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"Application\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(28)\n                .name(\"Database\")\n                .subnetType(SubnetType.PRIVATE_ISOLATED)\n\n                // 'reserved' can be used to reserve IP address space. No resources will\n                // be created for this subnet, but the IP range will be kept available for\n                // future creation of this subnet, or even for future subdivision.\n                .reserved(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n  // 'cidr' configures the IP range and size of the entire VPC.\n  // The IP space will be divided over the configured subnets.\n  cidr: '10.0.0.0/21',\n\n  // 'maxAzs' configures the maximum number of availability zones to use\n  maxAzs: 3,\n\n  // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n  // Every subnet group will have a subnet for each AZ, so this\n  // configuration will create `3 groups × 3 AZs = 9` subnets.\n  subnetConfiguration: [\n    {\n      // 'subnetType' controls Internet access, as described above.\n      subnetType: ec2.SubnetType.PUBLIC,\n\n      // 'name' is used to name this particular subnet group. You will have to\n      // use the name for subnet selection if you have more than one subnet\n      // group of the same type.\n      name: 'Ingress',\n\n      // 'cidrMask' specifies the IP addresses in the range of of individual\n      // subnets in the group. Each of the subnets in this group will contain\n      // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n      // usable IP addresses.\n      //\n      // If 'cidrMask' is left out the available address space is evenly\n      // divided across the remaining subnet groups.\n      cidrMask: 24,\n    },\n    {\n      cidrMask: 24,\n      name: 'Application',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 28,\n      name: 'Database',\n      subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n\n      // 'reserved' can be used to reserve IP address space. No resources will\n      // be created for this subnet, but the IP range will be kept available for\n      // future creation of this subnet, or even for future subdivision.\n      reserved: true\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 238
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n  // 'cidr' configures the IP range and size of the entire VPC.\n  // The IP space will be divided over the configured subnets.\n  cidr: '10.0.0.0/21',\n\n  // 'maxAzs' configures the maximum number of availability zones to use\n  maxAzs: 3,\n\n  // 'subnetConfiguration' specifies the \"subnet groups\" to create.\n  // Every subnet group will have a subnet for each AZ, so this\n  // configuration will create `3 groups × 3 AZs = 9` subnets.\n  subnetConfiguration: [\n    {\n      // 'subnetType' controls Internet access, as described above.\n      subnetType: ec2.SubnetType.PUBLIC,\n\n      // 'name' is used to name this particular subnet group. You will have to\n      // use the name for subnet selection if you have more than one subnet\n      // group of the same type.\n      name: 'Ingress',\n\n      // 'cidrMask' specifies the IP addresses in the range of of individual\n      // subnets in the group. Each of the subnets in this group will contain\n      // `2^(32 address bits - 24 subnet bits) - 2 reserved addresses = 254`\n      // usable IP addresses.\n      //\n      // If 'cidrMask' is left out the available address space is evenly\n      // divided across the remaining subnet groups.\n      cidrMask: 24,\n    },\n    {\n      cidrMask: 24,\n      name: 'Application',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 28,\n      name: 'Database',\n      subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n\n      // 'reserved' can be used to reserve IP address space. No resources will\n      // be created for this subnet, but the IP range will be kept available for\n      // future creation of this subnet, or even for future subdivision.\n      reserved: true\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 13
      },
      "fqnsFingerprint": "c9cf0873b84b5aad99c241b468ad84e39f58c0a28989bfe9d5a7a7db3c4f805c"
    },
    "1f9ed901a4afb53e26001663021a3b25218f6e2e6d5e6938bc3c5141449eb1f4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nigw_id = vpc.internet_gateway_id",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nstring? igwId = vpc.InternetGatewayId;",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nString igwId = vpc.getInternetGatewayId();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst igwId = vpc.internetGatewayId;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 310
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst igwId = vpc.internetGatewayId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "18691b606fdcf7817ebb941179fc4c0fd7f56c4de09d9b72bfd93881f922d93a"
    },
    "d81e4f2360aad46fcc2dfc4126897751e46c4213797db79bf650644ca427df8c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 333
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "7e8eaff77534ff13f489cd8bb12b79109ac9678e5d25f67bee35ff39ef63e265"
    },
    "39bbef2d58b757b8e8bd7337a2620ba5ec2faad296800cbf4148b26592cd1238": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    nat_gateways=1,\n    subnet_configuration=[ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Public\",\n        subnet_type=ec2.SubnetType.PUBLIC\n    ), ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Application1\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=26,\n        name=\"Application2\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT,\n        reserved=True\n    ), ec2.SubnetConfiguration(\n        cidr_mask=27,\n        name=\"Database\",\n        subnet_type=ec2.SubnetType.ISOLATED\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    NatGateways = 1,\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Public\",\n        SubnetType = SubnetType.PUBLIC\n    }, new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Application1\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 26,\n        Name = \"Application2\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT,\n        Reserved = true\n    }, new SubnetConfiguration {\n        CidrMask = 27,\n        Name = \"Database\",\n        SubnetType = SubnetType.ISOLATED\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .natGateways(1)\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Public\")\n                .subnetType(SubnetType.PUBLIC)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Application1\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(26)\n                .name(\"Application2\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .reserved(true)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(27)\n                .name(\"Database\")\n                .subnetType(SubnetType.ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n  natGateways: 1,\n  subnetConfiguration: [\n    {\n      cidrMask: 26,\n      name: 'Public',\n      subnetType: ec2.SubnetType.PUBLIC,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application1',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application2',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      reserved: true,   // <---- This subnet group is reserved\n    },\n    {\n      cidrMask: 27,\n      name: 'Database',\n      subnetType: ec2.SubnetType.ISOLATED,\n    }\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 363
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n  natGateways: 1,\n  subnetConfiguration: [\n    {\n      cidrMask: 26,\n      name: 'Public',\n      subnetType: ec2.SubnetType.PUBLIC,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application1',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n    },\n    {\n      cidrMask: 26,\n      name: 'Application2',\n      subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      reserved: true,   // <---- This subnet group is reserved\n    },\n    {\n      cidrMask: 27,\n      name: 'Database',\n      subnetType: ec2.SubnetType.ISOLATED,\n    }\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 5,
        "75": 30,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 5,
        "194": 9,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 15
      },
      "fqnsFingerprint": "999e23bd90101e4a5d382e4c040c011c1237bbacbde5f97e720e8548412ccf5d"
    },
    "f34f16b79a4670850c77544fb996fd8754e0be8bcc57f489bea3ca7e6d9e8163": {
      "translations": {
        "python": {
          "source": "#\n# Stack1 creates the VPC\n#\nclass Stack1(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        self.vpc = ec2.Vpc(self, \"VPC\")\n\n#\n# Stack2 consumes the VPC\n#\nclass Stack2(cdk.Stack):\n    def __init__(self, scope, id, *, vpc, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, vpc=vpc, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # Pass the VPC to a construct that needs it\n        ConstructThatTakesAVpc(self, \"Construct\",\n            vpc=vpc\n        )\n\nstack1 = Stack1(app, \"Stack1\")\nstack2 = Stack2(app, \"Stack2\",\n    vpc=stack1.vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 : Stack\n{\n    public Vpc Vpc { get; }\n\n    public Stack1(App scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        Vpc = new Vpc(this, \"VPC\");\n    }\n}\n\nclass Stack2Props : StackProps\n{\n    public IVpc Vpc { get; set; }\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 : Stack\n{\n    public Stack2(App scope, string id, Stack2Props props) : base(scope, id, props)\n    {\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps {\n            Vpc = props.Vpc\n        });\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props {\n    Vpc = stack1.Vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * Stack1 creates the VPC\n */\npublic class Stack1 extends Stack {\n    public final Vpc vpc;\n\n    public Stack1(App scope, String id) {\n        this(scope, id, null);\n    }\n\n    public Stack1(App scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        this.vpc = new Vpc(this, \"VPC\");\n    }\n}\n\npublic class Stack2Props extends StackProps {\n    private IVpc vpc;\n    public IVpc getVpc() {\n        return this.vpc;\n    }\n    public Stack2Props vpc(IVpc vpc) {\n        this.vpc = vpc;\n        return this;\n    }\n}\n\n/**\n * Stack2 consumes the VPC\n */\npublic class Stack2 extends Stack {\n    public Stack2(App scope, String id, Stack2Props props) {\n        super(scope, id, props);\n\n        // Pass the VPC to a construct that needs it\n        // Pass the VPC to a construct that needs it\n        new ConstructThatTakesAVpc(this, \"Construct\", new ConstructThatTakesAVpcProps()\n                .vpc(props.getVpc())\n                );\n    }\n}\n\nStack1 stack1 = new Stack1(app, \"Stack1\");\nStack2 stack2 = new Stack2(app, \"Stack2\", new Stack2Props()\n        .vpc(stack1.getVpc())\n        );",
          "version": "1"
        },
        "$": {
          "source": "/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 403
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as constructs from 'constructs';\nimport * as ec2 from '../lib';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from '@aws-cdk/core';\n\nconst app = new cdk.App();\n\ninterface ConstructThatTakesAVpcProps {\n  vpc: ec2.IVpc;\n}\n\nclass ConstructThatTakesAVpc extends Construct {\n  constructor(scope: constructs.Construct, id: string, _props: ConstructThatTakesAVpcProps) {\n    super(scope, id);\n\n    // new ec2.CfnInstance(this, 'Instance', {\n    //   subnetId: props.vpc.privateSubnets[0].subnetId,\n    //   imageId: new ec2.AmazonLinuxImage().getImage(this).imageId,\n    // });\n  }\n}\n\n/// !show\n/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});\n/// !hide\n\nArray.isArray(stack2);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 4,
        "57": 1,
        "62": 1,
        "75": 50,
        "102": 2,
        "104": 3,
        "119": 1,
        "138": 1,
        "143": 2,
        "153": 5,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 4,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 2
      },
      "fqnsFingerprint": "2d634f0f54bbe74508454abfa6660e41ab7fcb17c3f39fd01623dc9064289605"
    },
    "a7d95e48ea956d22dbd7642769bbb954a5d736b82c09575710f8d95ac0eb5cc7": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(stack, \"VPC\",\n    # This imports the default VPC but you can also\n    # specify a 'vpcName' or 'tags'.\n    is_default=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(stack, \"VPC\", new VpcLookupOptions {\n    // This imports the default VPC but you can also\n    // specify a 'vpcName' or 'tags'.\n    IsDefault = true\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(stack, \"VPC\", VpcLookupOptions.builder()\n        // This imports the default VPC but you can also\n        // specify a 'vpcName' or 'tags'.\n        .isDefault(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(stack, 'VPC', {\n  // This imports the default VPC but you can also\n  // specify a 'vpcName' or 'tags'.\n  isDefault: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 461
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/core.Environment"
      ],
      "fullSource": "/// !cdk-integ *\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\n// we associate this stack with an explicit environment since this is required by the\n// environmental context provider used in `fromLookup`. CDK_INTEG_XXX are set\n// when producing the .expected file and CDK_DEFAULT_XXX is passed in through from\n// the CLI in actual deployment.\nconst env = {\n  account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n  region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n};\n\nconst stack = new cdk.Stack(app, 'aws-cdk-ec2-import', { env });\n\n/// !show\nconst vpc = ec2.Vpc.fromLookup(stack, 'VPC', {\n  // This imports the default VPC but you can also\n  // specify a 'vpcName' or 'tags'.\n  isDefault: true,\n});\n/// !hide\n\n// The only thing in this library that takes a VPC as an argument :)\nnew ec2.SecurityGroup(stack, 'SecurityGroup', {\n  vpc,\n});\n\n// Try subnet selection\nnew cdk.CfnOutput(stack, 'PublicSubnets', { value: 'ids:' + vpc.publicSubnets.map(s => s.subnetId).join(',') });\nnew cdk.CfnOutput(stack, 'PrivateSubnets', { value: 'ids:' + vpc.privateSubnets.map(s => s.subnetId).join(',') });\n\n// Route table IDs\nnew cdk.CfnOutput(stack, 'PublicRouteTables', { value: 'ids: ' + vpc.publicSubnets.map(s => s.routeTable.routeTableId).join(', ') });\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "681aaa540b52591a9c083ea3e3b8459b8a4b2e84d18ce00a6cd75d53c01cf2a4"
    },
    "e81f573a4c3095fde187f763928ddaca2c77c74e31e1a62681917bec304f2cb0": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_vpc_attributes(self, \"VPC\",\n    vpc_id=\"vpc-1234\",\n    availability_zones=[\"us-east-1a\", \"us-east-1b\"],\n\n    # Either pass literals for all IDs\n    public_subnet_ids=[\"s-12345\", \"s-67890\"],\n\n    # OR: import a list of known length\n    private_subnet_ids=Fn.import_list_value(\"PrivateSubnetIds\", 2),\n\n    # OR: split an imported string to a list of known length\n    isolated_subnet_ids=Fn.split(\",\", ssm.StringParameter.value_for_string_parameter(self, \"MyParameter\"), 2)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromVpcAttributes(this, \"VPC\", new VpcAttributes {\n    VpcId = \"vpc-1234\",\n    AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1b\" },\n\n    // Either pass literals for all IDs\n    PublicSubnetIds = new [] { \"s-12345\", \"s-67890\" },\n\n    // OR: import a list of known length\n    PrivateSubnetIds = Fn.ImportListValue(\"PrivateSubnetIds\", 2),\n\n    // OR: split an imported string to a list of known length\n    IsolatedSubnetIds = Fn.Split(\",\", StringParameter.ValueForStringParameter(this, \"MyParameter\"), 2)\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromVpcAttributes(this, \"VPC\", VpcAttributes.builder()\n        .vpcId(\"vpc-1234\")\n        .availabilityZones(List.of(\"us-east-1a\", \"us-east-1b\"))\n\n        // Either pass literals for all IDs\n        .publicSubnetIds(List.of(\"s-12345\", \"s-67890\"))\n\n        // OR: import a list of known length\n        .privateSubnetIds(Fn.importListValue(\"PrivateSubnetIds\", 2))\n\n        // OR: split an imported string to a list of known length\n        .isolatedSubnetIds(Fn.split(\",\", StringParameter.valueForStringParameter(this, \"MyParameter\"), 2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 483
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#valueForStringParameter",
        "@aws-cdk/core.Fn#importListValue",
        "@aws-cdk/core.Fn#split"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "14": 1,
        "75": 16,
        "104": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "09f7d1633d49eda6f70ee878f1e2612b271587515b50b506c8f52154268e4615"
    },
    "38bb306141205c793c2abe25cf460205d5c5c62430a37922d2608c5b53f57b95": {
      "translations": {
        "python": {
          "source": "my_security_group = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc,\n    description=\"Allow ssh access to ec2 instances\",\n    allow_all_outbound=True\n)\nmy_security_group.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22), \"allow ssh access from the world\")",
          "version": "1"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc,\n    Description = \"Allow ssh access to ec2 instances\",\n    AllowAllOutbound = true\n});\nmySecurityGroup.AddIngressRule(Peer.AnyIpv4(), Port.Tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .description(\"Allow ssh access to ec2 instances\")\n        .allowAllOutbound(true)\n        .build();\nmySecurityGroup.addIngressRule(Peer.anyIpv4(), Port.tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "$": {
          "source": "const mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 511
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#addIngressRule",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "0f0063862926c0d402e9ca959c7d77c296dd0212bea4bb6c6c1d629a0ae099d4"
    },
    "7b45a4d3cfde842c301f6e42a8c7680393d3a53b8cae5747eb934516489c6ab9": {
      "translations": {
        "python": {
          "source": "# load_balancer is of type ApplicationLoadBalancer\n# app_fleet is of type AutoScalingGroup\n# db_fleet is of type AutoScalingGroup\n\n\n# Allow connections from anywhere\nload_balancer.connections.allow_from_any_ipv4(ec2.Port.tcp(443), \"Allow inbound HTTPS\")\n\n# The same, but an explicit IP address\nload_balancer.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/32\"), ec2.Port.tcp(443), \"Allow inbound HTTPS\")\n\n# Allow connection between AutoScalingGroups\napp_fleet.connections.allow_to(db_fleet, ec2.Port.tcp(443), \"App can call database\")",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer loadBalancer;\nAutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Allow connections from anywhere\nloadBalancer.Connections.AllowFromAnyIpv4(Port.Tcp(443), \"Allow inbound HTTPS\");\n\n// The same, but an explicit IP address\nloadBalancer.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/32\"), Port.Tcp(443), \"Allow inbound HTTPS\");\n\n// Allow connection between AutoScalingGroups\nappFleet.Connections.AllowTo(dbFleet, Port.Tcp(443), \"App can call database\");",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer loadBalancer;\nAutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(Port.tcp(443), \"Allow inbound HTTPS\");\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(Peer.ipv4(\"1.2.3.4/32\"), Port.tcp(443), \"Allow inbound HTTPS\");\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, Port.tcp(443), \"App can call database\");",
          "version": "1"
        },
        "$": {
          "source": "declare const loadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, ec2.Port.tcp(443), 'App can call database');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 529
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const loadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Allow connections from anywhere\nloadBalancer.connections.allowFromAnyIpv4(ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// The same, but an explicit IP address\nloadBalancer.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(443), 'Allow inbound HTTPS');\n\n// Allow connection between AutoScalingGroups\nappFleet.connections.allowTo(dbFleet, ec2.Port.tcp(443), 'App can call database');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 31,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 14,
        "196": 7,
        "225": 3,
        "226": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "1e247813d2f663e2712e748a431209e567f9362c95b346a30c9bf8107323f827"
    },
    "4b7c8d74b821f0422f52f15e2c9eb7f31a59cd765d31b41ed0deb2aba3e86bd8": {
      "translations": {
        "python": {
          "source": "# app_fleet is of type AutoScalingGroup\n# db_fleet is of type AutoScalingGroup\n\n\n# Simple connection peers\npeer = ec2.Peer.ipv4(\"10.0.0.0/16\")\npeer = ec2.Peer.any_ipv4()\npeer = ec2.Peer.ipv6(\"::0/0\")\npeer = ec2.Peer.any_ipv6()\npeer = ec2.Peer.prefix_list(\"pl-12345\")\napp_fleet.connections.allow_to(peer, ec2.Port.tcp(443), \"Allow outbound HTTPS\")",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Simple connection peers\nIPeer peer = Peer.Ipv4(\"10.0.0.0/16\");\npeer = Peer.AnyIpv4();\npeer = Peer.Ipv6(\"::0/0\");\npeer = Peer.AnyIpv6();\npeer = Peer.PrefixList(\"pl-12345\");\nappFleet.Connections.AllowTo(peer, Port.Tcp(443), \"Allow outbound HTTPS\");",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup appFleet;\nAutoScalingGroup dbFleet;\n\n\n// Simple connection peers\nIPeer peer = Peer.ipv4(\"10.0.0.0/16\");\npeer = Peer.anyIpv4();\npeer = Peer.ipv6(\"::0/0\");\npeer = Peer.anyIpv6();\npeer = Peer.prefixList(\"pl-12345\");\nappFleet.connections.allowTo(peer, Port.tcp(443), \"Allow outbound HTTPS\");",
          "version": "1"
        },
        "$": {
          "source": "declare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n\n// Simple connection peers\nlet peer = ec2.Peer.ipv4('10.0.0.0/16');\npeer = ec2.Peer.anyIpv4();\npeer = ec2.Peer.ipv6('::0/0');\npeer = ec2.Peer.anyIpv6();\npeer = ec2.Peer.prefixList('pl-12345');\nappFleet.connections.allowTo(peer, ec2.Port.tcp(443), 'Allow outbound HTTPS');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 548
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Peer#anyIpv6",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Peer#ipv6",
        "@aws-cdk/aws-ec2.Peer#prefixList",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const dbFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Simple connection peers\nlet peer = ec2.Peer.ipv4('10.0.0.0/16');\npeer = ec2.Peer.anyIpv4();\npeer = ec2.Peer.ipv6('::0/0');\npeer = ec2.Peer.anyIpv6();\npeer = ec2.Peer.prefixList('pl-12345');\nappFleet.connections.allowTo(peer, ec2.Port.tcp(443), 'Allow outbound HTTPS');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "62": 4,
        "75": 33,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 14,
        "196": 7,
        "209": 4,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "b518f198a90d230aa9d8d1a1b93da6876a1d4b51d20731c0b58892cc4ac0acdf"
    },
    "dbd3a0818c9247d02aa19e29722fcc43ea7d86466b059d4aa5d94216184a22ab": {
      "translations": {
        "python": {
          "source": "# fleet1 is of type AutoScalingGroup\n# fleet2 is of type AutoScalingGroup\n# app_fleet is of type AutoScalingGroup\n\n\n# These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allow_to(fleet2, ec2.Port.tcp(80), \"Allow between fleets\")\n\napp_fleet.connections.allow_from_any_ipv4(ec2.Port.tcp(80), \"Allow from load balancer\")",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup fleet1;\nAutoScalingGroup fleet2;\nAutoScalingGroup appFleet;\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.Connections.AllowTo(fleet2, Port.Tcp(80), \"Allow between fleets\");\n\nappFleet.Connections.AllowFromAnyIpv4(Port.Tcp(80), \"Allow from load balancer\");",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup fleet1;\nAutoScalingGroup fleet2;\nAutoScalingGroup appFleet;\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, Port.tcp(80), \"Allow between fleets\");\n\nappFleet.connections.allowFromAnyIpv4(Port.tcp(80), \"Allow from load balancer\");",
          "version": "1"
        },
        "$": {
          "source": "declare const fleet1: autoscaling.AutoScalingGroup;\ndeclare const fleet2: autoscaling.AutoScalingGroup;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, ec2.Port.tcp(80), 'Allow between fleets');\n\nappFleet.connections.allowFromAnyIpv4(ec2.Port.tcp(80), 'Allow from load balancer');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 563
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fleet1: autoscaling.AutoScalingGroup;\ndeclare const fleet2: autoscaling.AutoScalingGroup;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// These automatically create appropriate ingress and egress rules in both security groups\nfleet1.connections.allowTo(fleet2, ec2.Port.tcp(80), 'Allow between fleets');\n\nappFleet.connections.allowFromAnyIpv4(ec2.Port.tcp(80), 'Allow from load balancer');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 8,
        "196": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "af11b8650e2c7f74aa99abf3813a8f4231c07a09dbf069a5081856e58e59ef06"
    },
    "3a1f8f8e376a6d61dc2a259db0ed7c0c37447cd2bdd62f1aaf9b3cc93cc2135a": {
      "translations": {
        "python": {
          "source": "ec2.Port.tcp(80)\nec2.Port.tcp_range(60000, 65535)\nec2.Port.all_tcp()\nec2.Port.all_traffic()",
          "version": "1"
        },
        "csharp": {
          "source": "Port.Tcp(80);\nPort.TcpRange(60000, 65535);\nPort.AllTcp();\nPort.AllTraffic();",
          "version": "1"
        },
        "java": {
          "source": "Port.tcp(80);\nPort.tcpRange(60000, 65535);\nPort.allTcp();\nPort.allTraffic();",
          "version": "1"
        },
        "$": {
          "source": "ec2.Port.tcp(80)\nec2.Port.tcpRange(60000, 65535)\nec2.Port.allTcp()\nec2.Port.allTraffic()",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 579
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#allTcp",
        "@aws-cdk/aws-ec2.Port#allTraffic",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Port#tcpRange"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.Port.tcp(80)\nec2.Port.tcpRange(60000, 65535)\nec2.Port.allTcp()\nec2.Port.allTraffic()\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "75": 12,
        "194": 8,
        "196": 4,
        "226": 4
      },
      "fqnsFingerprint": "9ca737912b70e8820a908f2ffc1ed705e6dc758af9fba3b3936d2996fc1468d8"
    },
    "a93baab3e8b3c461fde8b0ea6b40b5501aed59735962809564d9bff1dd8615d7": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# app_fleet is of type AutoScalingGroup\n# rds_database is of type DatabaseCluster\n\n\n# Port implicit in listener\nlistener.connections.allow_default_port_from_any_ipv4(\"Allow public\")\n\n# Port implicit in peer\napp_fleet.connections.allow_default_port_to(rds_database, \"Fleet can access database\")",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nAutoScalingGroup appFleet;\nDatabaseCluster rdsDatabase;\n\n\n// Port implicit in listener\nlistener.Connections.AllowDefaultPortFromAnyIpv4(\"Allow public\");\n\n// Port implicit in peer\nappFleet.Connections.AllowDefaultPortTo(rdsDatabase, \"Fleet can access database\");",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nAutoScalingGroup appFleet;\nDatabaseCluster rdsDatabase;\n\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4(\"Allow public\");\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, \"Fleet can access database\");",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const rdsDatabase: rds.DatabaseCluster;\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4('Allow public');\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, 'Fleet can access database');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 601
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const appFleet: autoscaling.AutoScalingGroup;\ndeclare const rdsDatabase: rds.DatabaseCluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Port implicit in listener\nlistener.connections.allowDefaultPortFromAnyIpv4('Allow public');\n\n// Port implicit in peer\nappFleet.connections.allowDefaultPortTo(rdsDatabase, 'Fleet can access database');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "194": 4,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "f62e6e3ffd70f5420523fd706f0cac0313701e5aa2a9d3a54e7ece57ffe790bc"
    },
    "6614b4373fe1cea4df8367ae2ae9cefce720330cb7ebcdc6affd16c58198f52c": {
      "translations": {
        "python": {
          "source": "my_security_group_without_inline_rules = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc,\n    description=\"Allow ssh access to ec2 instances\",\n    allow_all_outbound=True,\n    disable_inline_rules=True\n)\n# This will add the rule as an external cloud formation construct\nmy_security_group_without_inline_rules.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22), \"allow ssh access from the world\")",
          "version": "1"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroupWithoutInlineRules = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc,\n    Description = \"Allow ssh access to ec2 instances\",\n    AllowAllOutbound = true,\n    DisableInlineRules = true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.AddIngressRule(Peer.AnyIpv4(), Port.Tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroupWithoutInlineRules = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .description(\"Allow ssh access to ec2 instances\")\n        .allowAllOutbound(true)\n        .disableInlineRules(true)\n        .build();\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(Peer.anyIpv4(), Port.tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "$": {
          "source": "const mySecurityGroupWithoutInlineRules = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true,\n  disableInlineRules: true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 623
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#addIngressRule",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst mySecurityGroupWithoutInlineRules = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true,\n  disableInlineRules: true\n});\n//This will add the rule as an external cloud formation construct\nmySecurityGroupWithoutInlineRules.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "106": 2,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "0f0063862926c0d402e9ca959c7d77c296dd0212bea4bb6c6c1d629a0ae099d4"
    },
    "45b5d8e54123c45bebc3e9fa444444df8df41ca67fb44f760fab38d39acd858c": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_security_group_id(self, \"SecurityGroupImport\", \"sg-1234\",\n    allow_all_outbound=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromSecurityGroupId(this, \"SecurityGroupImport\", \"sg-1234\", new SecurityGroupImportOptions {\n    AllowAllOutbound = true\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromSecurityGroupId(this, \"SecurityGroupImport\", \"sg-1234\", SecurityGroupImportOptions.builder()\n        .allowAllOutbound(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroupImport', 'sg-1234', {\n  allowAllOutbound: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 638
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromSecurityGroupId(this, 'SecurityGroupImport', 'sg-1234', {\n  allowAllOutbound: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "b2d7550737b96d43c243dd8d8fbe6c1b7e0d89389304debe6c04a7df54e3acc1"
    },
    "ef7b91b27870f1c3e7dcbbf69733891aee00256b5d00b974df7783bd3144f0c3": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_lookup_by_name(self, \"SecurityGroupLookup\", \"security-group-name\", vpc)",
          "version": "1"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromLookupByName(this, \"SecurityGroupLookup\", \"security-group-name\", vpc);",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromLookupByName(this, \"SecurityGroupLookup\", \"security-group-name\", vpc);",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromLookupByName(this, 'SecurityGroupLookup', 'security-group-name', vpc);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 646
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromLookupByName"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromLookupByName(this, 'SecurityGroupLookup', 'security-group-name', vpc);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4169ec17e5602de4bdbe54cb8ce034588d99eb9c3cad6af70320e1e047642d14"
    },
    "2f4a17bff185591c565bc46ae6c8e8d1278c10908bd429b392a5c31b9bdba2a7": {
      "translations": {
        "python": {
          "source": "sg = ec2.SecurityGroup.from_lookup_by_id(self, \"SecurityGroupLookup\", \"sg-1234\")",
          "version": "1"
        },
        "csharp": {
          "source": "ISecurityGroup sg = SecurityGroup.FromLookupById(this, \"SecurityGroupLookup\", \"sg-1234\");",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup sg = SecurityGroup.fromLookupById(this, \"SecurityGroupLookup\", \"sg-1234\");",
          "version": "1"
        },
        "$": {
          "source": "const sg = ec2.SecurityGroup.fromLookupById(this, 'SecurityGroupLookup', 'sg-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 652
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromLookupById"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst sg = ec2.SecurityGroup.fromLookupById(this, 'SecurityGroupLookup', 'sg-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "ed54aadf71fccb979d7e06eb30623dd2f78999b0331cb06e83a911fe02fa2c82"
    },
    "c68da0f7c7254ba09bb613c17eaeac557d1cf9b6a7212b6fb14a8c4940eb3fa9": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 666
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "576d20a2ddf300de16a4eddffff812bcd9c5ea302a173b727918e1105b4a10e8": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_connections={\n        \"dynamic\": ec2.VpnConnectionOptions( # Dynamic routing (BGP)\n            ip=\"1.2.3.4\"),\n        \"static\": ec2.VpnConnectionOptions( # Static routing\n            ip=\"4.5.6.7\",\n            static_routes=[\"192.168.10.0/24\", \"192.168.20.0/24\"\n            ])\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnConnections = new Dictionary<string, VpnConnectionOptions> {\n        { \"dynamic\", new VpnConnectionOptions {  // Dynamic routing (BGP)\n            Ip = \"1.2.3.4\" } },\n        { \"static\", new VpnConnectionOptions {  // Static routing\n            Ip = \"4.5.6.7\",\n            StaticRoutes = new [] { \"192.168.10.0/24\", \"192.168.20.0/24\" } } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnConnections(Map.of(\n                \"dynamic\", VpnConnectionOptions.builder() // Dynamic routing (BGP)\n                        .ip(\"1.2.3.4\").build(),\n                \"static\", VpnConnectionOptions.builder() // Static routing\n                        .ip(\"4.5.6.7\")\n                        .staticRoutes(List.of(\"192.168.10.0/24\", \"192.168.20.0/24\")).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 726
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "98e4ae0880c5fb7be17f33a531258dc6e9ec84f401f3e239cd6fa1dd812a10ad"
    },
    "048dbdb788df298666d4c1ed4acd6fc3238aa38cfe9632df51be0c41cb7f1b1a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_gateway=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnGateway = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnGateway(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnGateway: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 745
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnGateway: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "0d14dcf6c697926ecc1ddbf50ded62dfce46e52a7459adef79746eb560e0ec46"
    },
    "0d9bb239cf5eb10373b5fe12d9a497362e19fc02a168b571a251deef3135eb43": {
      "translations": {
        "python": {
          "source": "vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});",
          "version": "1"
        },
        "java": {
          "source": "vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 753
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nvpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "193": 1,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e090f332594202a1a127f004cdbb17148214e9e764b55013d1ad47fbaca611c1"
    },
    "f4145bf5a8a25230fd1154f77da001af44cde0844572c31e2d3008b717264628": {
      "translations": {
        "python": {
          "source": "# Across all tunnels in the account/region\nall_data_out = ec2.VpnConnection.metric_all_tunnel_data_out()\n\n# For a specific vpn connection\nvpn_connection = vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)\nstate = vpn_connection.metric_tunnel_state()",
          "version": "1"
        },
        "csharp": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.MetricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});\nMetric state = vpnConnection.MetricTunnelState();",
          "version": "1"
        },
        "java": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());\nMetric state = vpnConnection.metricTunnelState();",
          "version": "1"
        },
        "$": {
          "source": "// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 765
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-ec2.VpnConnection",
        "@aws-cdk/aws-ec2.VpnConnection#metricAllTunnelDataOut",
        "@aws-cdk/aws-ec2.VpnConnection#metricTunnelState",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "193": 1,
        "194": 4,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "3e6d32dd4650df4a9604b5dd7aeb29ec191dd72b81244313d8802c698547d0f3"
    },
    "f6e24b88e8d822f5752e714d63ee67db42d308daa0ce55b026839cd6b9ffb804": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 782
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "096c6d476a6c32741770c6de0b7a689fbb20f86d279c179256af17e0e318d760": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 818
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a1642cb8265266e6f0349a8583a71124546d264135b6cf9375dd6213dc5d4f6"
    },
    "5534739902ef3642be683bca82b89eee91c7a638c56cef246f076bd01e8e99cb": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    lookup_supported_azs=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    LookupSupportedAzs = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .lookupSupportedAzs(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  lookupSupportedAzs: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 837
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  lookupSupportedAzs: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "f9e3529d1f4db013be2c2b569777777c9e34e6c3d48cff83db7cae8f784fe97b"
    },
    "93aabcab3cfc2975beaea130327a8be14aae36f66e693ce57f2e4a6a5d305431": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointAwsService.KEYSPACES\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = InterfaceVpcEndpointAwsService.KEYSPACES\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(InterfaceVpcEndpointAwsService.KEYSPACES)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: ec2.InterfaceVpcEndpointAwsService.KEYSPACES,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 853
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#KEYSPACES",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: ec2.InterfaceVpcEndpointAwsService.KEYSPACES,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "af8819e75dc58d57af7309b70f289335081176ce472c8c11956af2650aa83f66"
    },
    "8b832ee0ce3275c0c5a52dc020b39fcf09065e3d36a6097c7ddc54f2657b7280": {
      "translations": {
        "python": {
          "source": "# my_endpoint is of type InterfaceVpcEndpoint\n\n\nmy_endpoint.connections.allow_default_port_from_any_ipv4()",
          "version": "1"
        },
        "csharp": {
          "source": "InterfaceVpcEndpoint myEndpoint;\n\n\nmyEndpoint.Connections.AllowDefaultPortFromAnyIpv4();",
          "version": "1"
        },
        "java": {
          "source": "InterfaceVpcEndpoint myEndpoint;\n\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();",
          "version": "1"
        },
        "$": {
          "source": "declare const myEndpoint: ec2.InterfaceVpcEndpoint;\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 869
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFromAnyIpv4",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint#connections"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myEndpoint: ec2.InterfaceVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyEndpoint.connections.allowDefaultPortFromAnyIpv4();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "af4567ff87c576ea5e7f2ff803ee95a40b892f6053b5f8532acbda661b511b20"
    },
    "f689ceee1f1e839b96153db02907dbde62417336f34916fef98be3058f32683a": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1 is of type NetworkLoadBalancer\n# network_load_balancer2 is of type NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 881
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "60d16696a56bccf56edf18eee13998ee1efbea081c0e990e3b809821e8ff44fd"
    },
    "0c889c751d999fa1a59aff978ac8bffe310924b5f060393467caab5dad4eaaaf": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone is of type HostedZone\n# vpces is of type VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 895
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6f133d86c53e4fad7a4eb422a2de7f88b3c4a13386cf83297b82edc9053f528a"
    },
    "49e768404635257c5280c0ed49583fd72e70467719e6777a3d03e2f0750eb620": {
      "translations": {
        "python": {
          "source": "vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    # Mutual authentication\n    client_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\",\n    # User-based authentication\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    // Mutual authentication\n    ClientCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\",\n    // User-based authentication\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});",
          "version": "1"
        },
        "java": {
          "source": "vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        // Mutual authentication\n        .clientCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id\")\n        // User-based authentication\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  // Mutual authentication\n  clientCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id',\n  // User-based authentication\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 919
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nvpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  // Mutual authentication\n  clientCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/client-certificate-id',\n  // User-based authentication\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "193": 1,
        "194": 3,
        "196": 2,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "4f21ca6fc3d8c92a9a4cbee4378f1db846ea509720a9a2076fbb405f51d37574"
    },
    "e01e80210cc88cbe0e570469a8af61fec8cfaf5c86793ac7344a606b2b08b5fa": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 944
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "5d2be7bdcce7146cf9788b4c115061f20c381bcc7a93b612fe38a10a608a0e47"
    },
    "0f92107c2c71a61182cd35529a0a730fbea319bd6973b04357e0b3893b34aae6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 960
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "7154c476971b6566d7c4775af603e013f348fd7c45ee9310166616cf7dc3f1c6"
    },
    "39d64cc5dabdf53f46c2eb07b4be04b70ef7fc40deb2357139234d16b07bfd33": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 993
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "15a9db68f9cee341daee5187a575489e3cdea109ab0cc92c25bd055f6e391042": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1054
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "f24037cb1da4053a5fe705e2dc058f0ff91722cebb6b019328f49a3778fa0b89": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\", vpc=vpc)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\").vpc(vpc).build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1076
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "282": 1
      },
      "fqnsFingerprint": "c8150049298edbb6eeb7dd084100b8139acbdc538ef6a1fdfe018e89a0dbfb94"
    },
    "516753d2283eeea869a0c8d1b824a1e1d1c45bcd3e179468853468100491ab84": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\nhost.allow_ssh_access_from(ec2.Peer.ipv4(\"1.2.3.4/32\"))",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\nhost.AllowSshAccessFrom(Peer.Ipv4(\"1.2.3.4/32\"));",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build();\nhost.allowSshAccessFrom(Peer.ipv4(\"1.2.3.4/32\"));",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PUBLIC },\n});\nhost.allowSshAccessFrom(ec2.Peer.ipv4('1.2.3.4/32'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1082
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinux#allowSshAccessFrom",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PUBLIC },\n});\nhost.allowSshAccessFrom(ec2.Peer.ipv4('1.2.3.4/32'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "c45f2e5e6379ff2cabb5df620474999b0bd9cf3d464e9357d1279f4841e93eca"
    },
    "9d48ef35aeb3a8c6b96447bbea78b1ddc981b090d5ffeea4185c5e6805c9c656": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1095
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "fbfd048c9e54371252799fd12591e3edb5f21464d2841d5091a10f20485b26ef"
    },
    "38a1766c02cb2b1b91a6dd8c2dfd7f017921f51ff3740ed7ce686c8ee054339b": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1113
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "0c2a36279c4355d81e882520a05073082701f920a1f070be963187d3a1fd2343"
    },
    "72c59996bbe799490530108e08396e9542575174571f081cbd8469c4457a8f33": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# role is of type Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1147
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ce9a75e0f7cbf6a1e44226c889019efb1437e694fa1f48daf5ad06299043c4e"
    },
    "f07076dd3fec04c0ff4cc15220b7a2f12a190c1fc5abcd27c1076a762def9c1b": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# volume is of type Volume\n\n\nattach_grant = volume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ndetach_grant = volume.grant_detach_volume_by_resource_tag(instance.grant_principal, [instance])",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.GrantAttachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });\nGrant detachGrant = volume.GrantDetachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nVolume volume;\n\n\nGrant attachGrant = volume.grantAttachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));\nGrant detachGrant = volume.grantDetachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1165
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Instance#grantPrincipal",
        "@aws-cdk/aws-iam.Grant",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst attachGrant = volume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst detachGrant = volume.grantDetachVolumeByResourceTag(instance.grantPrincipal, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "194": 4,
        "196": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "01c8d090025f2b918cb928a200d633afa1bb30ad56636a2cf220b892f9e07559"
    },
    "e6894d9afca35dc36ed528d22ed1c853532f1658e6f580d24b6048adc3f526dd": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# volume is of type Volume\n\n\nvolume.grant_attach_volume_by_resource_tag(instance.grant_principal, [instance])\ntarget_device = \"/dev/xvdz\"\ninstance.user_data.add_commands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", f\"aws --region {Stack.of(this).region} ec2 attach-volume --volume-id {volume.volumeId} --instance-id $INSTANCE_ID --device {targetDevice}\", f\"while ! test -e {targetDevice}; do sleep 1; done\")",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nVolume volume;\n\n\nvolume.GrantAttachVolumeByResourceTag(instance.GrantPrincipal, new [] { instance });\nstring targetDevice = \"/dev/xvdz\";\ninstance.UserData.AddCommands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", $\"aws --region {Stack.of(this).region} ec2 attach-volume --volume-id {volume.volumeId} --instance-id $INSTANCE_ID --device {targetDevice}\", $\"while ! test -e {targetDevice}; do sleep 1; done\");",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nVolume volume;\n\n\nvolume.grantAttachVolumeByResourceTag(instance.getGrantPrincipal(), List.of(instance));\nString targetDevice = \"/dev/xvdz\";\ninstance.userData.addCommands(\"TOKEN=$(curl -SsfX PUT \\\"http://169.254.169.254/latest/api/token\\\" -H \\\"X-aws-ec2-metadata-token-ttl-seconds: 21600\\\")\", \"INSTANCE_ID=$(curl -SsfH \\\"X-aws-ec2-metadata-token: $TOKEN\\\" http://169.254.169.254/latest/meta-data/instance-id)\", String.format(\"aws --region %s ec2 attach-volume --volume-id %s --instance-id $INSTANCE_ID --device %s\", Stack.of(this).getRegion(), volume.getVolumeId(), targetDevice), String.format(\"while ! test -e %s; do sleep 1; done\", targetDevice));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n\nvolume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst targetDevice = '/dev/xvdz';\ninstance.userData.addCommands(\n  // Retrieve token for accessing EC2 instance metadata (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html)\n  `TOKEN=$(curl -SsfX PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")`,\n  // Retrieve the instance Id of the current EC2 instance\n  `INSTANCE_ID=$(curl -SsfH \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id)`,\n  // Attach the volume to /dev/xvdz\n  `aws --region ${Stack.of(this).region} ec2 attach-volume --volume-id ${volume.volumeId} --instance-id $INSTANCE_ID --device ${targetDevice}`,\n  // Wait until the volume has attached\n  `while ! test -e ${targetDevice}; do sleep 1; done`\n  // The volume will now be mounted. You may have to add additional code to format the volume if it has not been prepared.\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1182
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Instance#grantPrincipal",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const volume: ec2.Volume;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nvolume.grantAttachVolumeByResourceTag(instance.grantPrincipal, [instance]);\nconst targetDevice = '/dev/xvdz';\ninstance.userData.addCommands(\n  // Retrieve token for accessing EC2 instance metadata (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html)\n  `TOKEN=$(curl -SsfX PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")`,\n  // Retrieve the instance Id of the current EC2 instance\n  `INSTANCE_ID=$(curl -SsfH \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id)`,\n  // Attach the volume to /dev/xvdz\n  `aws --region ${Stack.of(this).region} ec2 attach-volume --volume-id ${volume.volumeId} --instance-id $INSTANCE_ID --device ${targetDevice}`,\n  // Wait until the volume has attached\n  `while ! test -e ${targetDevice}; do sleep 1; done`\n  // The volume will now be mounted. You may have to add additional code to format the volume if it has not been prepared.\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 2,
        "15": 2,
        "16": 2,
        "17": 2,
        "75": 22,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "194": 7,
        "196": 3,
        "211": 2,
        "221": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "057b9974de718044975fc0e55a9769f184a42ca181c27049249fb6522c2c1243"
    },
    "60a17e93a87e11b613cc6af71fd722c0dc72161371bc85588f67ee732f380564": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    machine_image=machine_image,\n    instance_type=instance_type,\n    propagate_tags_to_volume_on_creation=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    MachineImage = machineImage,\n    InstanceType = instanceType,\n    PropagateTagsToVolumeOnCreation = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .machineImage(machineImage)\n        .instanceType(instanceType)\n        .propagateTagsToVolumeOnCreation(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "  declare const vpc: ec2.Vpc;\n  declare const instanceType: ec2.InstanceType;\n  declare const machineImage: ec2.IMachineImage;\n\n  new ec2.Instance(this, 'Instance', {\n    vpc,\n    machineImage,\n    instanceType,\n    propagateTagsToVolumeOnCreation: true,\n  });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1205
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n  declare const vpc: ec2.Vpc;\n  declare const instanceType: ec2.InstanceType;\n  declare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n  new ec2.Instance(this, 'Instance', {\n    vpc,\n    machineImage,\n    instanceType,\n    propagateTagsToVolumeOnCreation: true,\n  });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "86f7e7e19bf4cc0dccf6e059f7fe7098913c0cafc8cb33b727619c96f4c2c282"
    },
    "f0d69225e3e515b742ee1edbfde5b3b861b5f8c6849a45556b28d28f27ff77f5": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    require_imdsv2=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    RequireImdsv2 = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .requireImdsv2(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1228
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "86f7e7e19bf4cc0dccf6e059f7fe7098913c0cafc8cb33b727619c96f4c2c282"
    },
    "a51e3e1393500bc84ce2fe35c664360c9dd12caaadd60cda14447da06d83d13a": {
      "translations": {
        "python": {
          "source": "aspect = ec2.InstanceRequireImdsv2Aspect()\nAspects.of(self).add(aspect)",
          "version": "1"
        },
        "csharp": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1249
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "606ef34fecf9169354d00ceb09fb7481800af4172fd59c7db3948bfae42837e9"
    },
    "f1ab259ce0d91bc629cf6089f8e642799be5ad29d07c99c14083db3cfba72d77": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc)\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1262
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc)\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "96c7d79afa4deb594eaac6b3831addac5fba1810499a1fee67f93ed6e4f1fc49"
    },
    "2666df47cc83cb9ef061e8b4c650fb079d5939715f25c1b09a800e62b0cd9fbf": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLog\")",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLog\");",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLog\");",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLog');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1272
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLog');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "cd1bcfc1e9c43086206937a726e326be12e350e13ab55f07f0ed068a1c2ce280"
    },
    "813da24b9412f68d82efff7bafda39b59d1a9531bcb277813010f75d48c72522": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1280
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5d8bef0f73fdb0432c896ac6efb0e036fa7ff8bed0b6dec9f05be29c96b36eaa"
    },
    "6a50b35245cec582a4f1aca4fcd341d3b112f42587b9ce5766b90661a768f2f1": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1300
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73b867481add070c34f9435c0fbf8ee9ec9441257d0ca66789467ae00d4134c"
    },
    "f1c3ad55aab56a3044c63cd28fef50dadb9ae5827b4ce56af3b984bf23ddde9d": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nbucket = s3.Bucket(self, \"MyCustomBucket\")\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_s3(bucket)\n)\n\nec2.FlowLog(self, \"FlowLogWithKeyPrefix\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_s3(bucket, \"prefix/\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nBucket bucket = new Bucket(this, \"MyCustomBucket\");\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToS3(bucket)\n});\n\nnew FlowLog(this, \"FlowLogWithKeyPrefix\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToS3(bucket, \"prefix/\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nBucket bucket = new Bucket(this, \"MyCustomBucket\");\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toS3(bucket))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLogWithKeyPrefix\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toS3(bucket, \"prefix/\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst bucket = new s3.Bucket(this, 'MyCustomBucket');\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket)\n});\n\nnew ec2.FlowLog(this, 'FlowLogWithKeyPrefix', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket, 'prefix/')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1317
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst bucket = new s3.Bucket(this, 'MyCustomBucket');\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket)\n});\n\nnew ec2.FlowLog(this, 'FlowLogWithKeyPrefix', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toS3(bucket, 'prefix/')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "787187e016f92ec0174e53ae7ccf3ab31216b1b0a943ea48f18332fbaf73442e"
    },
    "aa453638bc453a1fd4350a73d249de1efbc3e0b7dacfac649135da6da9c05d37": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance is of type Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1340
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "404a5cdfead3c96590e807c29cffd0eca9284ccd3fcd12b711df2a9032a97719"
    },
    "59a7ee93c59d03e6fc21c5a6923b25c408615d0f84f171f1ebafb74714ae0e76": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1381
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "01ee74a62009d71e09d109a384c739605fe6194d12e00eed22f9aa0fbb25393a"
    },
    "933eb7c2c20a765cfb8142b86af37eb0be72cf5c0a0ab8f2aaa2757675c08c96": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "1"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1411
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "56454331c6a79ca2767ea93ab33ac080c4371d85aad4b727c4eee75a78e954c4"
    },
    "00e5605020c0f0545af466e0c0f7f224d1ef23241a637238b74e3d731332ea37": {
      "translations": {
        "python": {
          "source": "# Supply all properties\nsubnet1 = ec2.Subnet.from_subnet_attributes(self, \"SubnetFromAttributes\",\n    subnet_id=\"s-1234\",\n    availability_zone=\"pub-az-4465\",\n    route_table_id=\"rt-145\"\n)\n\n# Supply only subnet id\nsubnet2 = ec2.Subnet.from_subnet_id(self, \"SubnetFromId\", \"s-1234\")",
          "version": "1"
        },
        "csharp": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.FromSubnetAttributes(this, \"SubnetFromAttributes\", new SubnetAttributes {\n    SubnetId = \"s-1234\",\n    AvailabilityZone = \"pub-az-4465\",\n    RouteTableId = \"rt-145\"\n});\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.FromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "java": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.fromSubnetAttributes(this, \"SubnetFromAttributes\", SubnetAttributes.builder()\n        .subnetId(\"s-1234\")\n        .availabilityZone(\"pub-az-4465\")\n        .routeTableId(\"rt-145\")\n        .build());\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.fromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "$": {
          "source": "// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1433
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetAttributes",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetAttributes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "cd1a595f65ad689d269f9cf7b399f3adc79fc93e961e630764441b57c1b60416"
    },
    "86455c4606d2cd74529306dfe922a82feaccb1604e8fad247f8bd3600d0d0a38": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ntemplate = ec2.LaunchTemplate(self, \"LaunchTemplate\",\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    security_group=ec2.SecurityGroup(self, \"LaunchTemplateSG\",\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = new LaunchTemplate(this, \"LaunchTemplate\", new LaunchTemplateProps {\n    MachineImage = MachineImage.LatestAmazonLinux(),\n    SecurityGroup = new SecurityGroup(this, \"LaunchTemplateSG\", new SecurityGroupProps {\n        Vpc = vpc\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = LaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .machineImage(MachineImage.latestAmazonLinux())\n        .securityGroup(SecurityGroup.Builder.create(this, \"LaunchTemplateSG\")\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ec2"
        },
        "field": {
          "field": "markdown",
          "line": 1455
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "096f25fab1a0b5ea51116c158dc448bef599f45ab60506b60d2bee7322e570c3"
    },
    "7eeb07f7c86755273d445df65dc6d5f6ae5bc83a56c1d27beaaa4fbb0743965c": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nvpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    # Add only to ISOLATED subnets\n    subnets=[ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_ISOLATED)\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nvpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB,\n    // Add only to ISOLATED subnets\n    Subnets = new [] { new SubnetSelection { SubnetType = SubnetType.PRIVATE_ISOLATED } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nvpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        // Add only to ISOLATED subnets\n        .subnets(List.of(SubnetSelection.builder().subnetType(SubnetType.PRIVATE_ISOLATED).build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nvpc.addGatewayEndpoint('DynamoDbEndpoint', {\n  service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n  // Add only to ISOLATED subnets\n  subnets: [\n    { subnetType: ec2.SubnetType.PRIVATE_ISOLATED }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
          "memberName": "subnets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nvpc.addGatewayEndpoint('DynamoDbEndpoint', {\n  service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n  // Add only to ISOLATED subnets\n  subnets: [\n    { subnetType: ec2.SubnetType.PRIVATE_ISOLATED }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "317779b0213267a188c41616f5352eb6de894eb9014ff53ac139dec8e5e86de1"
    },
    "b7caba29e1917f5167b940748fbf718bba5bd5e29fa6ca4ac5838a064b7d6d55": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "1"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceRestartHandle"
        },
        "field": {
          "field": "markdown",
          "line": 9
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "efecda7e45b31ae0b204f6d48b072fb376f3bdf0f7fa1f241c72750deba18b2d"
    },
    "4ed7472048a071a637db7accbf8f2d8cb85776e588f81742607d776c045909b6": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.InstanceProps",
          "memberName": "role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "04832edc32fdaca25979a28ee80037f33d7a00355bec024d209fbfe27788d33e"
    },
    "25466b3084759c7b75ef59ed3d3b47814807c97017b1701a4040d33f4a4d78f8": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateProps",
          "memberName": "role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "04832edc32fdaca25979a28ee80037f33d7a00355bec024d209fbfe27788d33e"
    },
    "ed61b963c6242aa416526667c5e130811b30cbd62e0079f1f40889a09e29a2a1": {
      "translations": {
        "python": {
          "source": "# multi_part is of type MultipartUserData\n# user_data is of type UserData\n# content_type is of type string\n\n\nmulti_part.add_part(ec2.MultipartBody.from_user_data(user_data, content_type))",
          "version": "1"
        },
        "csharp": {
          "source": "MultipartUserData multiPart;\nUserData userData;\nstring contentType;\n\n\nmultiPart.AddPart(MultipartBody.FromUserData(userData, contentType));",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multiPart;\nUserData userData;\nString contentType;\n\n\nmultiPart.addPart(MultipartBody.fromUserData(userData, contentType));",
          "version": "1"
        },
        "$": {
          "source": "declare const multiPart: ec2.MultipartUserData;\ndeclare const userData: ec2.UserData;\ndeclare const contentType: string;\n\nmultiPart.addPart(ec2.MultipartBody.fromUserData(userData, contentType));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.MultipartUserData",
          "memberName": "addUserDataPart"
        },
        "field": {
          "field": "markdown",
          "line": 7
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const multiPart: ec2.MultipartUserData;\ndeclare const userData: ec2.UserData;\ndeclare const contentType: string;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmultiPart.addPart(ec2.MultipartBody.fromUserData(userData, contentType));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "130": 3,
        "143": 1,
        "153": 2,
        "169": 2,
        "194": 3,
        "196": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "772d94edd5d0db2eb11187cb690eae582d8b5ee24a1a1117304e830bd705e00f"
    },
    "7d823bb19d3aa1bb3b37114cb488dacd4eb0f7914ba9439a25bb28a658ca854d": {
      "translations": {
        "python": {
          "source": "ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.micro\"),\n    machine_image=ec2.GenericLinuxImage({\n        \"us-east-2\": \"ami-0f9c61b5a562a16af\"\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.micro\"),\n    MachineImage = new GenericLinuxImage(new Dictionary<string, string> {\n        { \"us-east-2\", \"ami-0f9c61b5a562a16af\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.micro\"))\n        .machineImage(new GenericLinuxImage(Map.of(\n                \"us-east-2\", \"ami-0f9c61b5a562a16af\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "ec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProps",
          "memberName": "machineImage"
        },
        "field": {
          "field": "markdown",
          "line": 5
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "8212df3509b0e69f1836cb65e1332ae3952e3c34d1e1e24c013a562d990d653e"
    },
    "fab2422d1a99d6e209975e9c7c241b1da286012f522c6425c56dd8e732df66d1": {
      "translations": {
        "python": {
          "source": "security_group = ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-12345\",\n    mutable=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-12345\", new SecurityGroupImportOptions {\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-12345\", SecurityGroupImportOptions.builder()\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroup"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "b2d7550737b96d43c243dd8d8fbe6c1b7e0d89389304debe6c04a7df54e3acc1"
    },
    "5e244c7e7025e2773b057b0430ee6a96c186a2401830661fa73acc737cb2d573": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    cidr=\"10.0.0.0/16\"\n)\n\n# Iterate the private subnets\nselection = vpc.select_subnets(\n    subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n)\n\nfor subnet in selection.subnets:\n    pass",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.SelectSubnets(new SubnetSelection {\n    SubnetType = SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (var subnet in selection.Subnets)\n{\n}",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.selectSubnets(SubnetSelection.builder()\n        .subnetType(SubnetType.PRIVATE_WITH_NAT)\n        .build());\n\nfor (Object subnet : selection.getSubnets()) {\n}",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Vpc"
        },
        "field": {
          "field": "markdown",
          "line": 6
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SelectedSubnets",
        "@aws-cdk/aws-ec2.SelectedSubnets#subnets",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "223": 1,
        "225": 2,
        "232": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "e53954d6ed7c79149aeed4c56728c7d2a20076ecc6df9e83b0c6cd8c3356640c"
    },
    "0b5e164e0e081e931c500ec2cfa75d430d16bd4b62cdba60c7910981e29d303c": {
      "translations": {
        "python": {
          "source": "ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"ingress\",\n        subnet_type=ec2.SubnetType.PUBLIC\n    ), ec2.SubnetConfiguration(\n        cidr_mask=24,\n        name=\"application\",\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ), ec2.SubnetConfiguration(\n        cidr_mask=28,\n        name=\"rds\",\n        subnet_type=ec2.SubnetType.PRIVATE_ISOLATED\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"ingress\",\n        SubnetType = SubnetType.PUBLIC\n    }, new SubnetConfiguration {\n        CidrMask = 24,\n        Name = \"application\",\n        SubnetType = SubnetType.PRIVATE_WITH_NAT\n    }, new SubnetConfiguration {\n        CidrMask = 28,\n        Name = \"rds\",\n        SubnetType = SubnetType.PRIVATE_ISOLATED\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"ingress\")\n                .subnetType(SubnetType.PUBLIC)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(24)\n                .name(\"application\")\n                .subnetType(SubnetType.PRIVATE_WITH_NAT)\n                .build(), SubnetConfiguration.builder()\n                .cidrMask(28)\n                .name(\"rds\")\n                .subnetType(SubnetType.PRIVATE_ISOLATED)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new ec2.Vpc(this, 'VPC', {\n   subnetConfiguration: [\n      {\n        cidrMask: 24,\n        name: 'ingress',\n        subnetType: ec2.SubnetType.PUBLIC,\n      },\n      {\n        cidrMask: 24,\n        name: 'application',\n        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      },\n      {\n        cidrMask: 28,\n        name: 'rds',\n        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n      }\n   ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ec2.VpcProps",
          "memberName": "subnetConfiguration"
        },
        "field": {
          "field": "markdown",
          "line": 7
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew ec2.Vpc(this, 'VPC', {\n   subnetConfiguration: [\n      {\n        cidrMask: 24,\n        name: 'ingress',\n        subnetType: ec2.SubnetType.PUBLIC,\n      },\n      {\n        cidrMask: 24,\n        name: 'application',\n        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT,\n      },\n      {\n        cidrMask: 28,\n        name: 'rds',\n        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,\n      }\n   ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 21,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "c9cf0873b84b5aad99c241b468ad84e39f58c0a28989bfe9d5a7a7db3c4f805c"
    },
    "44df5c2bfb58c9a1365cf6dcdc134a31bfafba2c447ecaeaf4f5bb07c41ce399": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AddRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "7e8eaff77534ff13f489cd8bb12b79109ac9678e5d25f67bee35ff39ef63e265"
    },
    "261d885976b4f595aa50102864ca908a51909e11b36c31aa42f94e65d83a6a91": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxCpuType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "7866a0595a99a77271e1b54df34b097f9ab35857328268ae3bd616574a824fdc": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxEdition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "04e3751994a3dff490be0bde2ffbe3aa254529a55fe053a3410e43be360f51b4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nmy_compute_env = batch.ComputeEnvironment(self, \"ComputeEnv\",\n    compute_resources=batch.ComputeResources(\n        image=ecs.EcsOptimizedAmi(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = new ComputeEnvironment(this, \"ComputeEnv\", new ComputeEnvironmentProps {\n    ComputeResources = new ComputeResources {\n        Image = new EcsOptimizedAmi(new EcsOptimizedAmiProps {\n            Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n        }),\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = ComputeEnvironment.Builder.create(this, \"ComputeEnv\")\n        .computeResources(ComputeResources.builder()\n                .image(EcsOptimizedAmi.Builder.create()\n                        .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxGeneration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.ComputeResources",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.EcsOptimizedAmi",
        "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c9526019960be3683c3a01b891deb88051c2480cd811f1dbe73e19081c978c0"
    },
    "cda8ff3bc05e3c6a025f3c5a06fcff74ba6f1a5992b0f353de63c174c8a32039": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nmy_security_group = ec2.SecurityGroup(self, \"SecurityGroup\", vpc=vpc)\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage(),\n    security_group=my_security_group\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps { Vpc = vpc });\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage(),\n    SecurityGroup = mySecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\").vpc(vpc).build();\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .securityGroup(mySecurityGroup)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0b12bbd230cf361ca00240a9f992b0b3eb7c520a5047001c4d98a8402d5c28"
    },
    "f481d63dcd832139ce7c9bd2c52ff1deaf428aac86e582e71755f7a9847bed02": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "d5827d364b3698a9fe1309d9304fcea1f42e251cf1f70b406664e6b6a3f0355f": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxStorage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "4ec247144feb4e685df3cab3c5ef1cea06932c9b84cec62005e10707b0951e1b": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.AmazonLinuxVirt"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "6d2c4bf6af2d7e2636fb42e45b6046268da1ed345b6189566f49ca1d321dcfad": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "19fc02bdd35ae61c3942742bebe770b8c03bdb321ef603cfbaf3b20aa156469f": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BastionHostLinux"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "fbfd048c9e54371252799fd12591e3edb5f21464d2841d5091a10f20485b26ef"
    },
    "5250cb553551a0da457d7f4368dc8810c987696ee6e41e5acc91d3dad93aa4de": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BastionHostLinuxProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "fbfd048c9e54371252799fd12591e3edb5f21464d2841d5091a10f20485b26ef"
    },
    "6e8c9616980ec84fc033ae2a07225f408a01c908e88348e785e5d82c23ba1158": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.BlockDeviceVolume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "fbfd048c9e54371252799fd12591e3edb5f21464d2841d5091a10f20485b26ef"
    },
    "1ae9f8e29c3e4527c33e6e957df427fccba0bcb14a54aed2997dedaff5b99605": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n\n# my_zone is of type HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIP"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c6e415c67975c40d5afd3861cf0116dd4b3706e0d8ad2331ffa6a3ccd44eb51c"
    },
    "730e202907250e9f9fe5d3a6d60299cf0da358620c59983bfb8b4a33019cd9b7": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n\n# my_zone is of type HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnEIPProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c6e415c67975c40d5afd3861cf0116dd4b3706e0d8ad2331ffa6a3ccd44eb51c"
    },
    "209ff74c57ee1feaf2d87c2ab118f443018c24224067ef0b18e10ca9254be674": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c075e9d0b0f9e1c63e939af74d437fbd47c5782f71f051e11fdf47289ca7fd5a"
    },
    "1e3d906121cf4d2364982a85357a7edbdd4e2dd45e1cc82d9942b928fd108943": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\nuser_data = \"\"\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n\"\"\"\nlt = ec2.CfnLaunchTemplate(self, \"LaunchTemplate\",\n    launch_template_data=ec2.CfnLaunchTemplate.LaunchTemplateDataProperty(\n        instance_type=\"t3.small\",\n        user_data=Fn.base64(user_data)\n    )\n)\n\ncluster.add_nodegroup_capacity(\"extra-ng\",\n    launch_template_spec=eks.LaunchTemplateSpec(\n        id=lt.ref,\n        version=lt.attr_latest_version_number\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\nstring userData = @\"MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"\"==MYBOUNDARY==\"\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"\"us-ascii\"\"\n\n#!/bin/bash\necho \"\"Running custom user data script\"\"\n\n--==MYBOUNDARY==--\\\n\";\nCfnLaunchTemplate lt = new CfnLaunchTemplate(this, \"LaunchTemplate\", new CfnLaunchTemplateProps {\n    LaunchTemplateData = new LaunchTemplateDataProperty {\n        InstanceType = \"t3.small\",\n        UserData = Fn.Base64(userData)\n    }\n});\n\ncluster.AddNodegroupCapacity(\"extra-ng\", new NodegroupOptions {\n    LaunchTemplateSpec = new LaunchTemplateSpec {\n        Id = lt.Ref,\n        Version = lt.AttrLatestVersionNumber\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\nString userData = \"MIME-Version: 1.0\\nContent-Type: multipart/mixed; boundary=\\\"==MYBOUNDARY==\\\"\\n\\n--==MYBOUNDARY==\\nContent-Type: text/x-shellscript; charset=\\\"us-ascii\\\"\\n\\n#!/bin/bash\\necho \\\"Running custom user data script\\\"\\n\\n--==MYBOUNDARY==--\\\\\\n\";\nCfnLaunchTemplate lt = CfnLaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .launchTemplateData(LaunchTemplateDataProperty.builder()\n                .instanceType(\"t3.small\")\n                .userData(Fn.base64(userData))\n                .build())\n        .build();\n\ncluster.addNodegroupCapacity(\"extra-ng\", NodegroupOptions.builder()\n        .launchTemplateSpec(LaunchTemplateSpec.builder()\n                .id(lt.getRef())\n                .version(lt.getAttrLatestVersionNumber())\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: eks.Cluster;\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnLaunchTemplateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnLaunchTemplate",
        "@aws-cdk/aws-ec2.CfnLaunchTemplate#attrLatestVersionNumber",
        "@aws-cdk/aws-ec2.CfnLaunchTemplateProps",
        "@aws-cdk/aws-eks.Cluster#addNodegroupCapacity",
        "@aws-cdk/aws-eks.LaunchTemplateSpec",
        "@aws-cdk/aws-eks.NodegroupOptions",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Fn#base64"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: eks.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CfnOutput, Fn, Size, Stack } from '@aws-cdk/core';\nimport * as eks from '@aws-cdk/aws-eks';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst userData = `MIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n\n--==MYBOUNDARY==\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\n\n#!/bin/bash\necho \"Running custom user data script\"\n\n--==MYBOUNDARY==--\\\\\n`;\nconst lt = new ec2.CfnLaunchTemplate(this, 'LaunchTemplate', {\n  launchTemplateData: {\n    instanceType: 't3.small',\n    userData: Fn.base64(userData),\n  },\n});\n\ncluster.addNodegroupCapacity('extra-ng', {\n  launchTemplateSpec: {\n    id: lt.ref,\n    version: lt.attrLatestVersionNumber,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c075e9d0b0f9e1c63e939af74d437fbd47c5782f71f051e11fdf47289ca7fd5a"
    },
    "f21ed0bb1fdff3fac8c2eea5c38019fd1351566ff6149789b6371eeb9a59787a": {
      "translations": {
        "python": {
          "source": "# cfn_template is of type CfnInclude\n\n# using from*Attributes()\n# private_cfn_subnet1 is of type CfnSubnet\n# private_cfn_subnet2 is of type CfnSubnet\n\n\n# using from*Name()\ncfn_bucket = cfn_template.get_resource(\"Bucket\")\nbucket = s3.Bucket.from_bucket_name(self, \"L2Bucket\", cfn_bucket.ref)\n\n# using from*Arn()\ncfn_key = cfn_template.get_resource(\"Key\")\nkey = kms.Key.from_key_arn(self, \"L2Key\", cfn_key.attr_arn)\ncfn_vpc = cfn_template.get_resource(\"Vpc\")\nvpc = ec2.Vpc.from_vpc_attributes(self, \"L2Vpc\",\n    vpc_id=cfn_vpc.ref,\n    availability_zones=core.Fn.get_azs(),\n    private_subnet_ids=[private_cfn_subnet1.ref, private_cfn_subnet2.ref]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CfnInclude cfnTemplate;\n\n// using from*Attributes()\nCfnSubnet privateCfnSubnet1;\nCfnSubnet privateCfnSubnet2;\n\n\n// using from*Name()\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.GetResource(\"Bucket\");\nIBucket bucket = Bucket.FromBucketName(this, \"L2Bucket\", cfnBucket.Ref);\n\n// using from*Arn()\nCfnKey cfnKey = (CfnKey)cfnTemplate.GetResource(\"Key\");\nIKey key = Key.FromKeyArn(this, \"L2Key\", cfnKey.AttrArn);\nCfnVPC cfnVpc = (CfnVPC)cfnTemplate.GetResource(\"Vpc\");\nIVpc vpc = Vpc.FromVpcAttributes(this, \"L2Vpc\", new VpcAttributes {\n    VpcId = cfnVpc.Ref,\n    AvailabilityZones = Fn.GetAzs(),\n    PrivateSubnetIds = new [] { privateCfnSubnet1.Ref, privateCfnSubnet2.Ref }\n});",
          "version": "1"
        },
        "java": {
          "source": "CfnInclude cfnTemplate;\n\n// using from*Attributes()\nCfnSubnet privateCfnSubnet1;\nCfnSubnet privateCfnSubnet2;\n\n\n// using from*Name()\nCfnBucket cfnBucket = (CfnBucket)cfnTemplate.getResource(\"Bucket\");\nIBucket bucket = Bucket.fromBucketName(this, \"L2Bucket\", cfnBucket.getRef());\n\n// using from*Arn()\nCfnKey cfnKey = (CfnKey)cfnTemplate.getResource(\"Key\");\nIKey key = Key.fromKeyArn(this, \"L2Key\", cfnKey.getAttrArn());\nCfnVPC cfnVpc = (CfnVPC)cfnTemplate.getResource(\"Vpc\");\nIVpc vpc = Vpc.fromVpcAttributes(this, \"L2Vpc\", VpcAttributes.builder()\n        .vpcId(cfnVpc.getRef())\n        .availabilityZones(Fn.getAzs())\n        .privateSubnetIds(List.of(privateCfnSubnet1.getRef(), privateCfnSubnet2.getRef()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cfnTemplate: cfn_inc.CfnInclude;\n\n// using from*Name()\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\nconst bucket = s3.Bucket.fromBucketName(this, 'L2Bucket', cfnBucket.ref);\n\n// using from*Arn()\nconst cfnKey = cfnTemplate.getResource('Key') as kms.CfnKey;\nconst key = kms.Key.fromKeyArn(this, 'L2Key', cfnKey.attrArn);\n\n// using from*Attributes()\ndeclare const privateCfnSubnet1: ec2.CfnSubnet;\ndeclare const privateCfnSubnet2: ec2.CfnSubnet;\nconst cfnVpc = cfnTemplate.getResource('Vpc') as ec2.CfnVPC;\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'L2Vpc', {\n  vpcId: cfnVpc.ref,\n  availabilityZones: core.Fn.getAzs(),\n  privateSubnetIds: [privateCfnSubnet1.ref, privateCfnSubnet2.ref],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CfnVPC"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnVPC",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-kms.CfnKey",
        "@aws-cdk/aws-kms.CfnKey#attrArn",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.CfnBucket",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/cloudformation-include.CfnInclude#getResource",
        "@aws-cdk/core.Fn",
        "@aws-cdk/core.Fn#getAzs"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cfnTemplate: cfn_inc.CfnInclude;\n\n// using from*Attributes()\ndeclare const privateCfnSubnet1: ec2.CfnSubnet;\ndeclare const privateCfnSubnet2: ec2.CfnSubnet;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as core from '@aws-cdk/core';\nimport * as path from 'path';\nimport * as cfn_inc from '@aws-cdk/cloudformation-include';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// using from*Name()\nconst cfnBucket = cfnTemplate.getResource('Bucket') as s3.CfnBucket;\nconst bucket = s3.Bucket.fromBucketName(this, 'L2Bucket', cfnBucket.ref);\n\n// using from*Arn()\nconst cfnKey = cfnTemplate.getResource('Key') as kms.CfnKey;\nconst key = kms.Key.fromKeyArn(this, 'L2Key', cfnKey.attrArn);\nconst cfnVpc = cfnTemplate.getResource('Vpc') as ec2.CfnVPC;\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'L2Vpc', {\n  vpcId: cfnVpc.ref,\n  availabilityZones: core.Fn.getAzs(),\n  privateSubnetIds: [privateCfnSubnet1.ref, privateCfnSubnet2.ref],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 52,
        "104": 3,
        "130": 3,
        "153": 6,
        "169": 6,
        "192": 1,
        "193": 1,
        "194": 16,
        "196": 7,
        "217": 3,
        "225": 9,
        "242": 9,
        "243": 9,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a36eb437b1c6bce2699c4ea1531854e0fe5c396c1b2d3646716214fe50667d39"
    },
    "233bba9f0a9c0b11a64a89877acaeaa90655ec6b7ef201e0e2b90a06a2830823": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "5d2be7bdcce7146cf9788b4c115061f20c381bcc7a93b612fe38a10a608a0e47"
    },
    "e4f796eca5a6014297bc9bca63c2439969684ae72424485b8aab6dbc4fece8d6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "5d2be7bdcce7146cf9788b4c115061f20c381bcc7a93b612fe38a10a608a0e47"
    },
    "1d1019ecd7ba5950446bdeda8b0886a37445b33b7e223cacc3fb0ec390238e9e": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "5d2be7bdcce7146cf9788b4c115061f20c381bcc7a93b612fe38a10a608a0e47"
    },
    "8761e29f6c22c49e09fe6a82989f4f4849a84da3199c9974b9ab0a9e2e67cae6": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "7154c476971b6566d7c4775af603e013f348fd7c45ee9310166616cf7dc3f1c6"
    },
    "5a71a76e614a05d85f1cc24cad8918c48ea3c70ca8ce1fa0cf31d99f4c32924b": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider)\n)\n\n# Client-to-client access\nendpoint.add_route(\"Route\",\n    cidr=\"10.100.0.0/16\",\n    target=ec2.ClientVpnRouteTarget.local()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider)\n});\n\n// Client-to-client access\nendpoint.AddRoute(\"Route\", new ClientVpnRouteOptions {\n    Cidr = \"10.100.0.0/16\",\n    Target = ClientVpnRouteTarget.Local()\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .build());\n\n// Client-to-client access\nendpoint.addRoute(\"Route\", ClientVpnRouteOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .target(ClientVpnRouteTarget.local())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnRouteTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addRoute",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteOptions",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget",
        "@aws-cdk/aws-ec2.ClientVpnRouteTarget#local",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n});\n\n// Client-to-client access\nendpoint.addRoute('Route', {\n  cidr: '10.100.0.0/16',\n  target: ec2.ClientVpnRouteTarget.local(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 17,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "7154c476971b6566d7c4775af603e013f348fd7c45ee9310166616cf7dc3f1c6"
    },
    "882a8c6d93dd0c11e694a3ec8d07b3e90131ab5e63df7d300ead067a4f5914cd": {
      "translations": {
        "python": {
          "source": "endpoint = vpc.add_client_vpn_endpoint(\"Endpoint\",\n    cidr=\"10.100.0.0/16\",\n    server_certificate_arn=\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    user_based_authentication=ec2.ClientVpnUserBasedAuthentication.federated(saml_provider),\n    authorize_all_users_to_vpc_cidr=False\n)\n\nendpoint.add_authorization_rule(\"Rule\",\n    cidr=\"10.0.10.0/32\",\n    group_id=\"group-id\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ClientVpnEndpoint endpoint = vpc.AddClientVpnEndpoint(\"Endpoint\", new ClientVpnEndpointOptions {\n    Cidr = \"10.100.0.0/16\",\n    ServerCertificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\",\n    UserBasedAuthentication = ClientVpnUserBasedAuthentication.Federated(samlProvider),\n    AuthorizeAllUsersToVpcCidr = false\n});\n\nendpoint.AddAuthorizationRule(\"Rule\", new ClientVpnAuthorizationRuleOptions {\n    Cidr = \"10.0.10.0/32\",\n    GroupId = \"group-id\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ClientVpnEndpoint endpoint = vpc.addClientVpnEndpoint(\"Endpoint\", ClientVpnEndpointOptions.builder()\n        .cidr(\"10.100.0.0/16\")\n        .serverCertificateArn(\"arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id\")\n        .userBasedAuthentication(ClientVpnUserBasedAuthentication.federated(samlProvider))\n        .authorizeAllUsersToVpcCidr(false)\n        .build());\n\nendpoint.addAuthorizationRule(\"Rule\", ClientVpnAuthorizationRuleOptions.builder()\n        .cidr(\"10.0.10.0/32\")\n        .groupId(\"group-id\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ClientVpnAuthorizationRuleOptions",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint",
        "@aws-cdk/aws-ec2.ClientVpnEndpoint#addAuthorizationRule",
        "@aws-cdk/aws-ec2.ClientVpnEndpointOptions",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication",
        "@aws-cdk/aws-ec2.ClientVpnUserBasedAuthentication#federated",
        "@aws-cdk/aws-iam.ISamlProvider",
        "@aws-cdk/aws-iam.SamlMetadataDocument"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n    const samlProvider = new iam.SamlProvider(this, 'Provider', {\n      metadataDocument: iam.SamlMetadataDocument.fromXml('xml'),\n    })\n\n    // Code snippet begins after !show marker below\n/// !show\nconst endpoint = vpc.addClientVpnEndpoint('Endpoint', {\n  cidr: '10.100.0.0/16',\n  serverCertificateArn: 'arn:aws:acm:us-east-1:123456789012:certificate/server-certificate-id',\n  userBasedAuthentication: ec2.ClientVpnUserBasedAuthentication.federated(samlProvider),\n  authorizeAllUsersToVpcCidr: false,\n});\n\nendpoint.addAuthorizationRule('Rule', {\n  cidr: '10.0.10.0/32',\n  groupId: 'group-id',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "91": 1,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "5d2be7bdcce7146cf9788b4c115061f20c381bcc7a93b612fe38a10a608a0e47"
    },
    "6bed7e4a275737c29d94216789d39d56315a389b2f3ea9caba84435451053f42": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.CloudFormationInit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "71f883696512d9f91bfc72920ab3325ba1e2c6cde06a4964c1baf53472a083e4": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ConfigSetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "813d979cfdefe40f1fdb5a7220c168b14c52f8a0b5f145014c219f276e710c00": {
      "translations": {
        "python": {
          "source": "host = ec2.BastionHostLinux(self, \"BastionHost\",\n    vpc=vpc,\n    block_devices=[ec2.BlockDevice(\n        device_name=\"EBSBastionHost\",\n        volume=ec2.BlockDeviceVolume.ebs(10,\n            encrypted=True\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "BastionHostLinux host = new BastionHostLinux(this, \"BastionHost\", new BastionHostLinuxProps {\n    Vpc = vpc,\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"EBSBastionHost\",\n        Volume = BlockDeviceVolume.Ebs(10, new EbsDeviceOptions {\n            Encrypted = true\n        })\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "BastionHostLinux host = BastionHostLinux.Builder.create(this, \"BastionHost\")\n        .vpc(vpc)\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"EBSBastionHost\")\n                .volume(BlockDeviceVolume.ebs(10, EbsDeviceOptions.builder()\n                        .encrypted(true)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BastionHostLinux",
        "@aws-cdk/aws-ec2.BastionHostLinuxProps",
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.EbsDeviceOptions",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst host = new ec2.BastionHostLinux(this, 'BastionHost', {\n  vpc,\n  blockDevices: [{\n    deviceName: 'EBSBastionHost',\n    volume: ec2.BlockDeviceVolume.ebs(10, {\n      encrypted: true,\n    }),\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "282": 1
      },
      "fqnsFingerprint": "fbfd048c9e54371252799fd12591e3edb5f21464d2841d5091a10f20485b26ef"
    },
    "5f66d893d131c92b5a71acaeb21ee3abbcc1b1880d2f63514faccb1619018b9f": {
      "translations": {
        "python": {
          "source": "domain = es.Domain(self, \"Domain\",\n    version=es.ElasticsearchVersion.V7_4,\n    ebs=es.EbsOptions(\n        volume_size=100,\n        volume_type=ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    ),\n    node_to_node_encryption=True,\n    encryption_at_rest=es.EncryptionAtRestOptions(\n        enabled=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Domain domain = new Domain(this, \"Domain\", new DomainProps {\n    Version = ElasticsearchVersion.V7_4,\n    Ebs = new EbsOptions {\n        VolumeSize = 100,\n        VolumeType = EbsDeviceVolumeType.GENERAL_PURPOSE_SSD\n    },\n    NodeToNodeEncryption = true,\n    EncryptionAtRest = new EncryptionAtRestOptions {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Domain domain = Domain.Builder.create(this, \"Domain\")\n        .version(ElasticsearchVersion.V7_4)\n        .ebs(EbsOptions.builder()\n                .volumeSize(100)\n                .volumeType(EbsDeviceVolumeType.GENERAL_PURPOSE_SSD)\n                .build())\n        .nodeToNodeEncryption(true)\n        .encryptionAtRest(EncryptionAtRestOptions.builder()\n                .enabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_4,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.EbsDeviceVolumeType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType",
        "@aws-cdk/aws-ec2.EbsDeviceVolumeType#GENERAL_PURPOSE_SSD",
        "@aws-cdk/aws-elasticsearch.Domain",
        "@aws-cdk/aws-elasticsearch.DomainProps",
        "@aws-cdk/aws-elasticsearch.EbsOptions",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion",
        "@aws-cdk/aws-elasticsearch.ElasticsearchVersion#V7_4",
        "@aws-cdk/aws-elasticsearch.EncryptionAtRestOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { RemovalPolicy, Stack } from '@aws-cdk/core';  \nimport * as es from '@aws-cdk/aws-elasticsearch';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst domain = new es.Domain(this, 'Domain', {\n  version: es.ElasticsearchVersion.V7_4,\n  ebs: {\n    volumeSize: 100,\n    volumeType: ec2.EbsDeviceVolumeType.GENERAL_PURPOSE_SSD,\n  },\n  nodeToNodeEncryption: true,\n  encryptionAtRest: {\n    enabled: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "104": 1,
        "106": 2,
        "193": 3,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "7fb27ea8ab91b33b4ada65c8dd244f341dae2a68eebae1749f796c26b24a23c9"
    },
    "5cdf145aaff50259aae9d7f3959d524e28c148e21fcbe7df0ce38e816ecf9c05": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance is of type Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.ExecuteFileOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "404a5cdfead3c96590e807c29cffd0eca9284ccd3fcd12b711df2a9032a97719"
    },
    "252e85c5162aecf37a4eafa5cfebb547e12ce3a27702532143e99d721a322f67": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLog"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73b867481add070c34f9435c0fbf8ee9ec9441257d0ca66789467ae00d4134c"
    },
    "83d02f8783d7650c312b70ec2966766a8cace58dd149e5ee23290125f696e1d9": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73b867481add070c34f9435c0fbf8ee9ec9441257d0ca66789467ae00d4134c"
    },
    "b9a85ccf0357adc1fe7c6adefc975c32bc894564b5e65194360e325c4d260c73": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5d8bef0f73fdb0432c896ac6efb0e036fa7ff8bed0b6dec9f05be29c96b36eaa"
    },
    "778a8f2ab53e8b2d3920886883ed6c6cae64ce52b4cab1c179d5b7354705ef59": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73b867481add070c34f9435c0fbf8ee9ec9441257d0ca66789467ae00d4134c"
    },
    "41b537bb261e9b4b0e25e123aacdfecc36429d2b6ba120ad5a29ebfa4fe8195f": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nlog_group = logs.LogGroup(self, \"MyCustomLogGroup\")\n\nrole = iam.Role(self, \"MyCustomRole\",\n    assumed_by=iam.ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n)\n\nec2.FlowLog(self, \"FlowLog\",\n    resource_type=ec2.FlowLogResourceType.from_vpc(vpc),\n    destination=ec2.FlowLogDestination.to_cloud_watch_logs(log_group, role)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = new Role(this, \"MyCustomRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\")\n});\n\nnew FlowLog(this, \"FlowLog\", new FlowLogProps {\n    ResourceType = FlowLogResourceType.FromVpc(vpc),\n    Destination = FlowLogDestination.ToCloudWatchLogs(logGroup, role)\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyCustomLogGroup\");\n\nRole role = Role.Builder.create(this, \"MyCustomRole\")\n        .assumedBy(new ServicePrincipal(\"vpc-flow-logs.amazonaws.com\"))\n        .build();\n\nFlowLog.Builder.create(this, \"FlowLog\")\n        .resourceType(FlowLogResourceType.fromVpc(vpc))\n        .destination(FlowLogDestination.toCloudWatchLogs(logGroup, role))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogResourceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLog",
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toCloudWatchLogs",
        "@aws-cdk/aws-ec2.FlowLogProps",
        "@aws-cdk/aws-ec2.FlowLogResourceType",
        "@aws-cdk/aws-ec2.FlowLogResourceType#fromVpc",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyCustomLogGroup');\n\nconst role = new iam.Role(this, 'MyCustomRole', {\n  assumedBy: new iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')\n});\n\nnew ec2.FlowLog(this, 'FlowLog', {\n  resourceType: ec2.FlowLogResourceType.fromVpc(vpc),\n  destination: ec2.FlowLogDestination.toCloudWatchLogs(logGroup, role)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73b867481add070c34f9435c0fbf8ee9ec9441257d0ca66789467ae00d4134c"
    },
    "803acdf5f726a514e48a71188e3d38fd6664a6eeda6320d19086d8d221c1655a": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\")\n\nvpc.add_flow_log(\"FlowLogS3\",\n    destination=ec2.FlowLogDestination.to_s3()\n)\n\nvpc.add_flow_log(\"FlowLogCloudWatch\",\n    traffic_type=ec2.FlowLogTrafficType.REJECT\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.AddFlowLog(\"FlowLogS3\", new FlowLogOptions {\n    Destination = FlowLogDestination.ToS3()\n});\n\nvpc.AddFlowLog(\"FlowLogCloudWatch\", new FlowLogOptions {\n    TrafficType = FlowLogTrafficType.REJECT\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\");\n\nvpc.addFlowLog(\"FlowLogS3\", FlowLogOptions.builder()\n        .destination(FlowLogDestination.toS3())\n        .build());\n\nvpc.addFlowLog(\"FlowLogCloudWatch\", FlowLogOptions.builder()\n        .trafficType(FlowLogTrafficType.REJECT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.FlowLogTrafficType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.FlowLogDestination",
        "@aws-cdk/aws-ec2.FlowLogDestination#toS3",
        "@aws-cdk/aws-ec2.FlowLogOptions",
        "@aws-cdk/aws-ec2.FlowLogTrafficType",
        "@aws-cdk/aws-ec2.FlowLogTrafficType#REJECT",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc');\n\nvpc.addFlowLog('FlowLogS3', {\n  destination: ec2.FlowLogDestination.toS3()\n});\n\nvpc.addFlowLog('FlowLogCloudWatch', {\n  trafficType: ec2.FlowLogTrafficType.REJECT\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5d8bef0f73fdb0432c896ac6efb0e036fa7ff8bed0b6dec9f05be29c96b36eaa"
    },
    "0ce2d3596b610fdca2ce4123dc24696dc8627a15796c4bf8929b2e8dfe407941": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "1b5c115ed828a9ae02c7220b78f9a049c4860e80e4e34e92ce7228dca85a3d2c": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "7d4861307fdb3d79bd9467098746b0a9e9d1da8b84963c10850aba65e89741d9": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "4bc8b374268cd460d835be938991e78e52ab51c8ed003edea521e11c7f381701": {
      "translations": {
        "python": {
          "source": "ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.micro\"),\n    machine_image=ec2.GenericLinuxImage({\n        \"us-east-2\": \"ami-0f9c61b5a562a16af\"\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.micro\"),\n    MachineImage = new GenericLinuxImage(new Dictionary<string, string> {\n        { \"us-east-2\", \"ami-0f9c61b5a562a16af\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.micro\"))\n        .machineImage(new GenericLinuxImage(Map.of(\n                \"us-east-2\", \"ami-0f9c61b5a562a16af\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "ec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.GenericLinuxImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nec2.NatProvider.instance({\n   instanceType: new ec2.InstanceType('t3.micro'),\n   machineImage: new ec2.GenericLinuxImage({\n     'us-east-2': 'ami-0f9c61b5a562a16af'\n   })\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "8212df3509b0e69f1836cb65e1332ae3952e3c34d1e1e24c013a562d990d653e"
    },
    "adf3a2c05c46fae9193717b9f29a29b1356e5cb55e21730a8c3929d68000cf46": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "1"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitCommand"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "efecda7e45b31ae0b204f6d48b072fb376f3bdf0f7fa1f241c72750deba18b2d"
    },
    "2c443a7ada883c59a78168da9258af83197972b3950f69001c0ea5f1ed42f385": {
      "translations": {
        "python": {
          "source": "handle = ec2.InitServiceRestartHandle()\nec2.CloudFormationInit.from_elements(\n    ec2.InitCommand.shell_command(\"/usr/bin/custom-nginx-install.sh\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\", service_restart_handle=handle))",
          "version": "1"
        },
        "csharp": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.FromElements(InitCommand.ShellCommand(\"/usr/bin/custom-nginx-install.sh\", new InitCommandOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions { ServiceRestartHandle = handle }));",
          "version": "1"
        },
        "java": {
          "source": "InitServiceRestartHandle handle = new InitServiceRestartHandle();\nCloudFormationInit.fromElements(InitCommand.shellCommand(\"/usr/bin/custom-nginx-install.sh\", InitCommandOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder().serviceRestartHandle(handle).build()));",
          "version": "1"
        },
        "$": {
          "source": "const handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitCommandOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitCommand",
        "@aws-cdk/aws-ec2.InitCommand#shellCommand",
        "@aws-cdk/aws-ec2.InitCommandOptions",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst handle = new ec2.InitServiceRestartHandle();\nec2.CloudFormationInit.fromElements(\n   ec2.InitCommand.shellCommand('/usr/bin/custom-nginx-install.sh', { serviceRestartHandles: [handle] }),\n   ec2.InitService.enable('nginx', { serviceRestartHandle: handle }),\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "192": 1,
        "193": 2,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "efecda7e45b31ae0b204f6d48b072fb376f3bdf0f7fa1f241c72750deba18b2d"
    },
    "15ed1669d74f296408d7c36a3ee07cf0cb0c2f20a3eb8280121d0809499a3436": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "22c9c749050a0e23777f484424da47bae4c402dbd7f674d0e4449ca57d5729e2": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitElement"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "4712a08d8fed3afa310747aa1eb1aba5d6ba37a216e3aba56e4648c79c2ccf25": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "f941227b98d4af1acda40c3a590e7e485581a7c701be23bb0eff5bef0070f6eb"
    },
    "2f3a7d28276f1384fdf9c135d810c365e7c343c3c49262ee22865a36d3565590": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitFileOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "720540150fbc58d5aa51edbcd0c815614c8293a3ba5c39920b98f12bb4a0825b": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "2e4b2b32c72681ffd56c06de676423deb4bd4aecf9d9e3ab708ea3cb03056fb5": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitPackage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "bbf0f31277ad5c35ba3405b0e8770afd0570acbb0a8f4d244ba2f27e3b4042e5": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "f4622817fe7203d5959f163ed54639acc5d9643a9e568c2a652a8effb9648333": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "a7c5f13b15c23ed3d0ece1e3696bc3e3b275cb82d34a26257f6bafb0a8a075ee": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitServiceRestartHandle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "264a93c14e7c5d9cc4f9749caf8b771c4fe3466c4d88a73c43f9e7e8093d37c2": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "fd651f882d3dec4130dc05be18537549fee3e998c98f75418162b65ee84d0c65": {
      "translations": {
        "python": {
          "source": "# my_bucket is of type Bucket\n\n\nhandle = ec2.InitServiceRestartHandle()\n\nec2.CloudFormationInit.from_elements(\n    ec2.InitFile.from_string(\"/etc/nginx/nginx.conf\", \"...\", service_restart_handles=[handle]),\n    ec2.InitSource.from_s3_object(\"/var/www/html\", my_bucket, \"html.zip\", service_restart_handles=[handle]),\n    ec2.InitService.enable(\"nginx\",\n        service_restart_handle=handle\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.FromElements(InitFile.FromString(\"/etc/nginx/nginx.conf\", \"...\", new InitFileOptions { ServiceRestartHandles = new [] { handle } }), InitSource.FromS3Object(\"/var/www/html\", myBucket, \"html.zip\", new InitSourceOptions { ServiceRestartHandles = new [] { handle } }), InitService.Enable(\"nginx\", new InitServiceOptions {\n    ServiceRestartHandle = handle\n}));",
          "version": "1"
        },
        "java": {
          "source": "Bucket myBucket;\n\n\nInitServiceRestartHandle handle = new InitServiceRestartHandle();\n\nCloudFormationInit.fromElements(InitFile.fromString(\"/etc/nginx/nginx.conf\", \"...\", InitFileOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitSource.fromS3Object(\"/var/www/html\", myBucket, \"html.zip\", InitSourceOptions.builder().serviceRestartHandles(List.of(handle)).build()), InitService.enable(\"nginx\", InitServiceOptions.builder()\n        .serviceRestartHandle(handle)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const myBucket: s3.Bucket;\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InitFileOptions",
        "@aws-cdk/aws-ec2.InitService",
        "@aws-cdk/aws-ec2.InitService#enable",
        "@aws-cdk/aws-ec2.InitServiceOptions",
        "@aws-cdk/aws-ec2.InitServiceRestartHandle",
        "@aws-cdk/aws-ec2.InitSource",
        "@aws-cdk/aws-ec2.InitSource#fromS3Object",
        "@aws-cdk/aws-ec2.InitSourceOptions",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst handle = new ec2.InitServiceRestartHandle();\n\nec2.CloudFormationInit.fromElements(\n  ec2.InitFile.fromString('/etc/nginx/nginx.conf', '...', { serviceRestartHandles: [handle] }),\n  ec2.InitSource.fromS3Object('/var/www/html', myBucket, 'html.zip', { serviceRestartHandles: [handle] }),\n  ec2.InitService.enable('nginx', {\n    serviceRestartHandle: handle,\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 25,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5f7d584123d6b095007e23ee91ae901d39e34d9bc0334c8ffdc2a73ee57da408"
    },
    "7a166b341f52b160dbd4ce3b177f2536a9be30dd3d8968f2ae06c6335ec2d2a7": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # Showing the most complex setup, if you have simpler requirements\n    # you can use `CloudFormationInit.fromElements()`.\n    init=ec2.CloudFormationInit.from_config_sets(\n        config_sets={\n            # Applies the configs below in this order\n            \"default\": [\"yumPreinstall\", \"config\"]\n        },\n        configs={\n            \"yum_preinstall\": ec2.InitConfig([\n                # Install an Amazon Linux package using yum\n                ec2.InitPackage.yum(\"git\")\n            ]),\n            \"config\": ec2.InitConfig([\n                # Create a JSON file from tokens (can also create other files)\n                ec2.InitFile.from_object(\"/etc/stack.json\", {\n                    \"stack_id\": Stack.of(self).stack_id,\n                    \"stack_name\": Stack.of(self).stack_name,\n                    \"region\": Stack.of(self).region\n                }),\n\n                # Create a group and user\n                ec2.InitGroup.from_name(\"my-group\"),\n                ec2.InitUser.from_name(\"my-user\"),\n\n                # Install an RPM from the internet\n                ec2.InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")\n            ])\n        }\n    ),\n    init_options=ec2.ApplyCloudFormationInitOptions(\n        # Optional, which configsets to activate (['default'] by default)\n        config_sets=[\"default\"],\n\n        # Optional, how long the installation is expected to take (5 minutes by default)\n        timeout=Duration.minutes(30),\n\n        # Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        include_url=True,\n\n        # Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        include_role=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // Showing the most complex setup, if you have simpler requirements\n    // you can use `CloudFormationInit.fromElements()`.\n    Init = CloudFormationInit.FromConfigSets(new ConfigSetProps {\n        ConfigSets = new Dictionary<string, string[]> {\n            // Applies the configs below in this order\n            { \"default\", new [] { \"yumPreinstall\", \"config\" } }\n        },\n        Configs = new Dictionary<string, InitConfig> {\n            { \"yumPreinstall\", new InitConfig(new [] { InitPackage.Yum(\"git\") }) },\n            { \"config\", new InitConfig(new [] { InitFile.FromObject(\"/etc/stack.json\", new Dictionary<string, object> {\n                { \"stackId\", Stack.Of(this).StackId },\n                { \"stackName\", Stack.Of(this).StackName },\n                { \"region\", Stack.Of(this).Region }\n            }), InitGroup.FromName(\"my-group\"), InitUser.FromName(\"my-user\"), InitPackage.Rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\") }) }\n        }\n    }),\n    InitOptions = new ApplyCloudFormationInitOptions {\n        // Optional, which configsets to activate (['default'] by default)\n        ConfigSets = new [] { \"default\" },\n\n        // Optional, how long the installation is expected to take (5 minutes by default)\n        Timeout = Duration.Minutes(30),\n\n        // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeUrl = true,\n\n        // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n        IncludeRole = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // Showing the most complex setup, if you have simpler requirements\n        // you can use `CloudFormationInit.fromElements()`.\n        .init(CloudFormationInit.fromConfigSets(ConfigSetProps.builder()\n                .configSets(Map.of(\n                        // Applies the configs below in this order\n                        \"default\", List.of(\"yumPreinstall\", \"config\")))\n                .configs(Map.of(\n                        \"yumPreinstall\", new InitConfig(List.of(InitPackage.yum(\"git\"))),\n                        \"config\", new InitConfig(List.of(InitFile.fromObject(\"/etc/stack.json\", Map.of(\n                                \"stackId\", Stack.of(this).getStackId(),\n                                \"stackName\", Stack.of(this).getStackName(),\n                                \"region\", Stack.of(this).getRegion())), InitGroup.fromName(\"my-group\"), InitUser.fromName(\"my-user\"), InitPackage.rpm(\"http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm\")))))\n                .build()))\n        .initOptions(ApplyCloudFormationInitOptions.builder()\n                // Optional, which configsets to activate (['default'] by default)\n                .configSets(List.of(\"default\"))\n\n                // Optional, how long the installation is expected to take (5 minutes by default)\n                .timeout(Duration.minutes(30))\n\n                // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n                .includeUrl(true)\n\n                // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n                .includeRole(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InitUser"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ApplyCloudFormationInitOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromConfigSets",
        "@aws-cdk/aws-ec2.ConfigSetProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitConfig",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromObject",
        "@aws-cdk/aws-ec2.InitGroup",
        "@aws-cdk/aws-ec2.InitGroup#fromName",
        "@aws-cdk/aws-ec2.InitPackage",
        "@aws-cdk/aws-ec2.InitPackage#rpm",
        "@aws-cdk/aws-ec2.InitPackage#yum",
        "@aws-cdk/aws-ec2.InitUser",
        "@aws-cdk/aws-ec2.InitUser#fromName",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // Showing the most complex setup, if you have simpler requirements\n  // you can use `CloudFormationInit.fromElements()`.\n  init: ec2.CloudFormationInit.fromConfigSets({\n    configSets: {\n      // Applies the configs below in this order\n      default: ['yumPreinstall', 'config'],\n    },\n    configs: {\n      yumPreinstall: new ec2.InitConfig([\n        // Install an Amazon Linux package using yum\n        ec2.InitPackage.yum('git'),\n      ]),\n      config: new ec2.InitConfig([\n        // Create a JSON file from tokens (can also create other files)\n        ec2.InitFile.fromObject('/etc/stack.json', {\n          stackId: Stack.of(this).stackId,\n          stackName: Stack.of(this).stackName,\n          region: Stack.of(this).region,\n        }),\n\n        // Create a group and user\n        ec2.InitGroup.fromName('my-group'),\n        ec2.InitUser.fromName('my-user'),\n\n        // Install an RPM from the internet\n        ec2.InitPackage.rpm('http://mirrors.ukfast.co.uk/sites/dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/r/rubygem-git-1.5.0-2.el8.noarch.rpm'),\n      ]),\n    },\n  }),\n  initOptions: {\n    // Optional, which configsets to activate (['default'] by default)\n    configSets: ['default'],\n\n    // Optional, how long the installation is expected to take (5 minutes by default)\n    timeout: Duration.minutes(30),\n\n    // Optional, whether to include the --url argument when running cfn-init and cfn-signal commands (false by default)\n    includeUrl: true,\n\n    // Optional, whether to include the --role argument when running cfn-init and cfn-signal commands (false by default)\n    includeRole: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 61,
        "104": 4,
        "106": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 4,
        "193": 6,
        "194": 22,
        "196": 10,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 14,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "05e5c0140b7918e9769681aa43978baa756c3a124ce2a808e1f688d12d9eb4db"
    },
    "1b99cd37515535c9734bd6ce912b418a18697b7a95a8818a14a1c08a8b8ea74e": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Instance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "0c2a36279c4355d81e882520a05073082701f920a1f070be963187d3a1fd2343"
    },
    "304c53cdfb28ec85e0cf7a952c1a19468d42643da490ca41eca627615c0f21fe": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceClass"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "eeffd287a628883d313a7e4b02b37cb61bf629d48091cdaddc35555fea048e95"
    },
    "b16d9da78d78592b1f14e0d42dcc2e3d9023bd53b3b70cc2d6757d116eff7c86": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nec2.Instance(self, \"Instance\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    block_devices=[ec2.BlockDevice(\n        device_name=\"/dev/sda1\",\n        volume=ec2.BlockDeviceVolume.ebs(50)\n    ), ec2.BlockDevice(\n        device_name=\"/dev/sdm\",\n        volume=ec2.BlockDeviceVolume.ebs(100)\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew Instance(this, \"Instance\", new InstanceProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    BlockDevices = new [] { new BlockDevice {\n        DeviceName = \"/dev/sda1\",\n        Volume = BlockDeviceVolume.Ebs(50)\n    }, new BlockDevice {\n        DeviceName = \"/dev/sdm\",\n        Volume = BlockDeviceVolume.Ebs(100)\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nInstance.Builder.create(this, \"Instance\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .blockDevices(List.of(BlockDevice.builder()\n                .deviceName(\"/dev/sda1\")\n                .volume(BlockDeviceVolume.ebs(50))\n                .build(), BlockDevice.builder()\n                .deviceName(\"/dev/sdm\")\n                .volume(BlockDeviceVolume.ebs(100))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.BlockDeviceVolume",
        "@aws-cdk/aws-ec2.BlockDeviceVolume#ebs",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance",
        "@aws-cdk/aws-ec2.InstanceProps",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.Instance(this, 'Instance', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  blockDevices: [\n    {\n      deviceName: '/dev/sda1',\n      volume: ec2.BlockDeviceVolume.ebs(50),\n    },\n    {\n      deviceName: '/dev/sdm',\n      volume: ec2.BlockDeviceVolume.ebs(100),\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 25,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "0c2a36279c4355d81e882520a05073082701f920a1f070be963187d3a1fd2343"
    },
    "cc439851c1a366c75a818664692e8aab8c195f863d9d096435206dd6f89f4d64": {
      "translations": {
        "python": {
          "source": "aspect = ec2.InstanceRequireImdsv2Aspect()\nAspects.of(self).add(aspect)",
          "version": "1"
        },
        "csharp": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "InstanceRequireImdsv2Aspect aspect = new InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new ec2.InstanceRequireImdsv2Aspect();\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "606ef34fecf9169354d00ceb09fb7481800af4172fd59c7db3948bfae42837e9"
    },
    "b2fa2b32350678459cfba3e5fe7fc4b04f9c0929bcd3dd9fef3f3679b6a13044": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n# source_instance is of type DatabaseInstance\n\nrds.DatabaseInstanceFromSnapshot(self, \"Instance\",\n    snapshot_identifier=\"my-snapshot\",\n    engine=rds.DatabaseInstanceEngine.postgres(version=rds.PostgresEngineVersion.VER_12_3),\n    # optional, defaults to m5.large\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)\nrds.DatabaseInstanceReadReplica(self, \"ReadReplica\",\n    source_database_instance=source_instance,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nnew DatabaseInstanceFromSnapshot(this, \"Instance\", new DatabaseInstanceFromSnapshotProps {\n    SnapshotIdentifier = \"my-snapshot\",\n    Engine = DatabaseInstanceEngine.Postgres(new PostgresInstanceEngineProps { Version = PostgresEngineVersion.VER_12_3 }),\n    // optional, defaults to m5.large\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});\nnew DatabaseInstanceReadReplica(this, \"ReadReplica\", new DatabaseInstanceReadReplicaProps {\n    SourceDatabaseInstance = sourceInstance,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.LARGE),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nDatabaseInstance sourceInstance;\n\nDatabaseInstanceFromSnapshot.Builder.create(this, \"Instance\")\n        .snapshotIdentifier(\"my-snapshot\")\n        .engine(DatabaseInstanceEngine.postgres(PostgresInstanceEngineProps.builder().version(PostgresEngineVersion.VER_12_3).build()))\n        // optional, defaults to m5.large\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();\nDatabaseInstanceReadReplica.Builder.create(this, \"ReadReplica\")\n        .sourceDatabaseInstance(sourceInstance)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.LARGE))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n\ndeclare const sourceInstance: rds.DatabaseInstance;\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceSize"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#LARGE",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine",
        "@aws-cdk/aws-rds.DatabaseInstanceEngine#postgres",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshot",
        "@aws-cdk/aws-rds.DatabaseInstanceFromSnapshotProps",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplica",
        "@aws-cdk/aws-rds.DatabaseInstanceReadReplicaProps",
        "@aws-cdk/aws-rds.IDatabaseInstance",
        "@aws-cdk/aws-rds.IInstanceEngine",
        "@aws-cdk/aws-rds.PostgresEngineVersion",
        "@aws-cdk/aws-rds.PostgresEngineVersion#VER_12_3",
        "@aws-cdk/aws-rds.PostgresInstanceEngineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n\ndeclare const sourceInstance: rds.DatabaseInstance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport rds = require('@aws-cdk/aws-rds');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport kms = require('@aws-cdk/aws-kms');\nimport iam = require('@aws-cdk/aws-iam');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew rds.DatabaseInstanceFromSnapshot(this, 'Instance', {\n  snapshotIdentifier: 'my-snapshot',\n  engine: rds.DatabaseInstanceEngine.postgres({ version: rds.PostgresEngineVersion.VER_12_3 }),\n  // optional, defaults to m5.large\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\nnew rds.DatabaseInstanceReadReplica(this, 'ReadReplica', {\n  sourceDatabaseInstance: sourceInstance,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.LARGE),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 43,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 18,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "eeffd287a628883d313a7e4b02b37cb61bf629d48091cdaddc35555fea048e95"
    },
    "c566ee4c9038872f782ce4f3c87d0e3837258cd9e88466761dfc73386bdb6347": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nmy_security_group = ec2.SecurityGroup(self, \"SecurityGroup\", vpc=vpc)\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage(),\n    security_group=my_security_group\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps { Vpc = vpc });\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage(),\n    SecurityGroup = mySecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\").vpc(vpc).build();\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .securityGroup(mySecurityGroup)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InstanceType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0b12bbd230cf361ca00240a9f992b0b3eb7c520a5047001c4d98a8402d5c28"
    },
    "6958facad74c9233e3d55420bf16f8648a958f7bcf86a6253b87db95bf525c5e": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a1642cb8265266e6f0349a8583a71124546d264135b6cf9375dd6213dc5d4f6"
    },
    "d6804b1b8c17a62b351c0ef92cbcfb2fab3903a67740ce49654e3f85740b7b10": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "10edd13f962796404fbcdbffcf047c5e5cfe7e280cf25c8f941752ced4d93e38": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "5459d11adc54cb49e09829734ac607a87d27c60368e86be7a8edcc2ebce6f52f": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a1642cb8265266e6f0349a8583a71124546d264135b6cf9375dd6213dc5d4f6"
    },
    "878337aca001d67a824370cb65423cc3d631adb0cbc1ffb6e88f243e1aa69e21": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nec2.InterfaceVpcEndpoint(self, \"VPC Endpoint\",\n    vpc=vpc,\n    service=ec2.InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    # Choose which availability zones to place the VPC endpoint in, based on\n    # available AZs\n    subnets=ec2.SubnetSelection(\n        availability_zones=[\"us-east-1a\", \"us-east-1c\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew InterfaceVpcEndpoint(this, \"VPC Endpoint\", new InterfaceVpcEndpointProps {\n    Vpc = vpc,\n    Service = new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443),\n    // Choose which availability zones to place the VPC endpoint in, based on\n    // available AZs\n    Subnets = new SubnetSelection {\n        AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1c\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nInterfaceVpcEndpoint.Builder.create(this, \"VPC Endpoint\")\n        .vpc(vpc)\n        .service(new InterfaceVpcEndpointService(\"com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc\", 443))\n        // Choose which availability zones to place the VPC endpoint in, based on\n        // available AZs\n        .subnets(SubnetSelection.builder()\n                .availabilityZones(List.of(\"us-east-1a\", \"us-east-1c\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.InterfaceVpcEndpointService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpoint",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointProps",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.SubnetSelection"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.InterfaceVpcEndpoint(this, 'VPC Endpoint', {\n  vpc,\n  service: new ec2.InterfaceVpcEndpointService('com.amazonaws.vpce.us-east-1.vpce-svc-uuddlrlrbastrtsvc', 443),\n  // Choose which availability zones to place the VPC endpoint in, based on\n  // available AZs\n  subnets: {\n    availabilityZones: ['us-east-1a', 'us-east-1c']\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3a1642cb8265266e6f0349a8583a71124546d264135b6cf9375dd6213dc5d4f6"
    },
    "6c72a09252faea292e81ce9ef28d892725d94fab2972dc84c15adf9ecf2e2af3": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "01ee74a62009d71e09d109a384c739605fe6194d12e00eed22f9aa0fbb25393a"
    },
    "65bb9dd365eef788d838eb46a09e9ca17bb588556a34c3535da75c41d27c5a19": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LaunchTemplateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "01ee74a62009d71e09d109a384c739605fe6194d12e00eed22f9aa0fbb25393a"
    },
    "6a36bfea58777c28195a7d3ecdd03d5bbd5b61ee64fe0db3af7c387051547c18": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.LookupMachineImageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "3911e13c4ce53510f9cdcb82a34950908b2f4fd57467a62025160afd0475edfe": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ntemplate = ec2.LaunchTemplate(self, \"LaunchTemplate\",\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    security_group=ec2.SecurityGroup(self, \"LaunchTemplateSG\",\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = new LaunchTemplate(this, \"LaunchTemplate\", new LaunchTemplateProps {\n    MachineImage = MachineImage.LatestAmazonLinux(),\n    SecurityGroup = new SecurityGroup(this, \"LaunchTemplateSG\", new SecurityGroupProps {\n        Vpc = vpc\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nLaunchTemplate template = LaunchTemplate.Builder.create(this, \"LaunchTemplate\")\n        .machineImage(MachineImage.latestAmazonLinux())\n        .securityGroup(SecurityGroup.Builder.create(this, \"LaunchTemplateSG\")\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MachineImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst template = new ec2.LaunchTemplate(this, 'LaunchTemplate', {\n  machineImage: ec2.MachineImage.latestAmazonLinux(),\n  securityGroup: new ec2.SecurityGroup(this, 'LaunchTemplateSG', {\n    vpc: vpc,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "096f25fab1a0b5ea51116c158dc448bef599f45ab60506b60d2bee7322e570c3"
    },
    "4215f12fc58bb631bbd9f258be219776664d330d956f9b51b5b3583781cd2d53": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "1"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartBody"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "56454331c6a79ca2767ea93ab33ac080c4371d85aad4b727c4eee75a78e954c4"
    },
    "d522b1c7b322291145e1cafa6a4e6d7ff7e1fedf116a6286df8f4b4fcc7928e9": {
      "translations": {
        "python": {
          "source": "boot_hook_conf = ec2.UserData.for_linux()\nboot_hook_conf.add_commands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\")\n\nsetup_commands = ec2.UserData.for_linux()\nsetup_commands.add_commands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\")\n\nmultipart_user_data = ec2.MultipartUserData()\n# The docker has to be configured at early stage, so content type is overridden to boothook\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(boot_hook_conf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"))\n# Execute the rest of setup\nmultipart_user_data.add_part(ec2.MultipartBody.from_user_data(setup_commands))\n\nec2.LaunchTemplate(self, \"\",\n    user_data=multipart_user_data,\n    block_devices=[]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserData bootHookConf = UserData.ForLinux();\nbootHookConf.AddCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.ForLinux();\nsetupCommands.AddCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.AddPart(MultipartBody.FromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.AddPart(MultipartBody.FromUserData(setupCommands));\n\nnew LaunchTemplate(this, \"\", new LaunchTemplateProps {\n    UserData = multipartUserData,\n    BlockDevices = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserData bootHookConf = UserData.forLinux();\nbootHookConf.addCommands(\"cloud-init-per once docker_options echo 'OPTIONS=\\\"${OPTIONS} --storage-opt dm.basesize=40G\\\"' >> /etc/sysconfig/docker\");\n\nUserData setupCommands = UserData.forLinux();\nsetupCommands.addCommands(\"sudo yum install awscli && echo Packages installed らと > /var/tmp/setup\");\n\nMultipartUserData multipartUserData = new MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(MultipartBody.fromUserData(bootHookConf, \"text/cloud-boothook; charset=\\\"us-ascii\\\"\"));\n// Execute the rest of setup\nmultipartUserData.addPart(MultipartBody.fromUserData(setupCommands));\n\nLaunchTemplate.Builder.create(this, \"\")\n        .userData(multipartUserData)\n        .blockDevices(List.of())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.MultipartUserData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.LaunchTemplate",
        "@aws-cdk/aws-ec2.LaunchTemplateProps",
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#fromUserData",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bootHookConf = ec2.UserData.forLinux();\nbootHookConf.addCommands('cloud-init-per once docker_options echo \\'OPTIONS=\"${OPTIONS} --storage-opt dm.basesize=40G\"\\' >> /etc/sysconfig/docker');\n\nconst setupCommands = ec2.UserData.forLinux();\nsetupCommands.addCommands('sudo yum install awscli && echo Packages installed らと > /var/tmp/setup');\n\nconst multipartUserData = new ec2.MultipartUserData();\n// The docker has to be configured at early stage, so content type is overridden to boothook\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHookConf, 'text/cloud-boothook; charset=\"us-ascii\"'));\n// Execute the rest of setup\nmultipartUserData.addPart(ec2.MultipartBody.fromUserData(setupCommands));\n\nnew ec2.LaunchTemplate(this, '', {\n  userData: multipartUserData,\n  blockDevices: [\n    // Block device configuration rest\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 32,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 14,
        "196": 8,
        "197": 2,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "01ee74a62009d71e09d109a384c739605fe6194d12e00eed22f9aa0fbb25393a"
    },
    "dba5a021589c79f7c12f0de78c4392393aafd3e68b0818fe5a008de851c0327d": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "483ea377366ebeee7bba800d946073690ad2b6e6faceba938d772c39de7fb926"
    },
    "148162506df6cb69f2d48d52e1b24b54e541ae1c14d363f47eb4fc1e2e2232a9": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatInstanceProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "483ea377366ebeee7bba800d946073690ad2b6e6faceba938d772c39de7fb926"
    },
    "2efd1eede74a6fa9c3745422a4864751db5a1149f98803e00d7c72821d385f5f": {
      "translations": {
        "python": {
          "source": "# Configure the `natGatewayProvider` when defining a Vpc\nnat_gateway_provider = ec2.NatProvider.instance(\n    instance_type=ec2.InstanceType(\"t3.small\")\n)\n\nvpc = ec2.Vpc(self, \"MyVpc\",\n    nat_gateway_provider=nat_gateway_provider,\n\n    # The 'natGateways' parameter now controls the number of NAT instances\n    nat_gateways=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = new InstanceType(\"t3.small\")\n});\n\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    NatGatewayProvider = natGatewayProvider,\n\n    // The 'natGateways' parameter now controls the number of NAT instances\n    NatGateways = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "// Configure the `natGatewayProvider` when defining a Vpc\nNatInstanceProvider natGatewayProvider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(new InstanceType(\"t3.small\"))\n        .build());\n\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .natGatewayProvider(natGatewayProvider)\n\n        // The 'natGateways' parameter now controls the number of NAT instances\n        .natGateways(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.NatProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/core.Environment"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nclass NatInstanceStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Configure the `natGatewayProvider` when defining a Vpc\n    const natGatewayProvider = ec2.NatProvider.instance({\n      instanceType: new ec2.InstanceType('t3.small'),\n    });\n\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      natGatewayProvider,\n\n      // The 'natGateways' parameter now controls the number of NAT instances\n      natGateways: 2,\n    });\n    /// !hide\n\n    Array.isArray(vpc);\n    Array.isArray(natGatewayProvider.configuredGateways);\n  }\n}\n\nconst app = new cdk.App();\nnew NatInstanceStack(app, 'aws-cdk-vpc-nat-instances', {\n  env: {\n    account: process.env.CDK_INTEG_ACCOUNT || process.env.CDK_DEFAULT_ACCOUNT,\n    region: process.env.CDK_INTEG_REGION || process.env.CDK_DEFAULT_REGION,\n  },\n});\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "483ea377366ebeee7bba800d946073690ad2b6e6faceba938d772c39de7fb926"
    },
    "03c4b4bcf5b0cf9b50d11a386c1db1ba6e6c06b067f9f0b18128fcfe2fd76b67": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.OperatingSystemType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    },
    "4c87df2bd266c54579179bfa252357db8a9de3b9b4b44d783d1a5eefaf8a25fe": {
      "translations": {
        "python": {
          "source": "# instance_type is of type InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    allow_all_traffic=False\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "1"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    AllowAllTraffic = false\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .allowAllTraffic(false)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Peer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a5763867f92151f5475615a98ec414b1aeabd89bbb8385a4b5eebe6c7fe7b90c"
    },
    "8fad4965bd8a7f308cc20d200db7b941f418605e753441fbebfb783dbf88e348": {
      "translations": {
        "python": {
          "source": "# instance_type is of type InstanceType\n\n\nprovider = ec2.NatProvider.instance(\n    instance_type=instance_type,\n    allow_all_traffic=False\n)\nec2.Vpc(self, \"TheVPC\",\n    nat_gateway_provider=provider\n)\nprovider.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/8\"), ec2.Port.tcp(80))",
          "version": "1"
        },
        "csharp": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.Instance(new NatInstanceProps {\n    InstanceType = instanceType,\n    AllowAllTraffic = false\n});\nnew Vpc(this, \"TheVPC\", new VpcProps {\n    NatGatewayProvider = provider\n});\nprovider.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/8\"), Port.Tcp(80));",
          "version": "1"
        },
        "java": {
          "source": "InstanceType instanceType;\n\n\nNatInstanceProvider provider = NatProvider.instance(NatInstanceProps.builder()\n        .instanceType(instanceType)\n        .allowAllTraffic(false)\n        .build());\nVpc.Builder.create(this, \"TheVPC\")\n        .natGatewayProvider(provider)\n        .build();\nprovider.connections.allowFrom(Peer.ipv4(\"1.2.3.4/8\"), Port.tcp(80));",
          "version": "1"
        },
        "$": {
          "source": "declare const instanceType: ec2.InstanceType;\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Port"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.NatInstanceProps",
        "@aws-cdk/aws-ec2.NatInstanceProvider",
        "@aws-cdk/aws-ec2.NatProvider",
        "@aws-cdk/aws-ec2.NatProvider#instance",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instanceType: ec2.InstanceType;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst provider = ec2.NatProvider.instance({\n  instanceType,\n  allowAllTraffic: false,\n});\nnew ec2.Vpc(this, 'TheVPC', {\n  natGatewayProvider: provider,\n});\nprovider.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/8'), ec2.Port.tcp(80));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a5763867f92151f5475615a98ec414b1aeabd89bbb8385a4b5eebe6c7fe7b90c"
    },
    "03895d6b8cb5d163671155f2177e224adcdb9aa9510a50ffb676a334144755c2": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"VPC\",\n    subnet_configuration=[ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.PUBLIC,\n        name=\"Public\"\n    ), ec2.SubnetConfiguration(\n        subnet_type=ec2.SubnetType.ISOLATED,\n        name=\"Isolated\"\n    )]\n)\n\n(vpc.isolated_subnets[0]).add_route(\"StaticRoute\",\n    router_id=vpc.internet_gateway_id,\n    router_type=ec2.RouterType.GATEWAY,\n    destination_cidr_block=\"8.8.8.8/32\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"VPC\", new VpcProps {\n    SubnetConfiguration = new [] { new SubnetConfiguration {\n        SubnetType = SubnetType.PUBLIC,\n        Name = \"Public\"\n    }, new SubnetConfiguration {\n        SubnetType = SubnetType.ISOLATED,\n        Name = \"Isolated\"\n    } }\n});\n\n((Subnet)vpc.IsolatedSubnets[0]).AddRoute(\"StaticRoute\", new AddRouteOptions {\n    RouterId = vpc.InternetGatewayId,\n    RouterType = RouterType.GATEWAY,\n    DestinationCidrBlock = \"8.8.8.8/32\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"VPC\")\n        .subnetConfiguration(List.of(SubnetConfiguration.builder()\n                .subnetType(SubnetType.PUBLIC)\n                .name(\"Public\")\n                .build(), SubnetConfiguration.builder()\n                .subnetType(SubnetType.ISOLATED)\n                .name(\"Isolated\")\n                .build()))\n        .build();\n\n((Subnet)vpc.isolatedSubnets[0]).addRoute(\"StaticRoute\", AddRouteOptions.builder()\n        .routerId(vpc.getInternetGatewayId())\n        .routerType(RouterType.GATEWAY)\n        .destinationCidrBlock(\"8.8.8.8/32\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.RouterType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AddRouteOptions",
        "@aws-cdk/aws-ec2.RouterType",
        "@aws-cdk/aws-ec2.RouterType#GATEWAY",
        "@aws-cdk/aws-ec2.Subnet#addRoute",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#internetGatewayId",
        "@aws-cdk/aws-ec2.Vpc#isolatedSubnets",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, \"VPC\", {\n  subnetConfiguration: [{\n      subnetType: ec2.SubnetType.PUBLIC,\n      name: 'Public',\n    },{\n      subnetType: ec2.SubnetType.ISOLATED,\n      name: 'Isolated',\n    }]\n});\n\n(vpc.isolatedSubnets[0] as ec2.Subnet).addRoute(\"StaticRoute\", {\n    routerId: vpc.internetGatewayId!,\n    routerType: ec2.RouterType.GATEWAY,\n    destinationCidrBlock: \"8.8.8.8/32\",\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 27,
        "104": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 10,
        "195": 1,
        "196": 1,
        "197": 1,
        "200": 1,
        "217": 1,
        "218": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "7e8eaff77534ff13f489cd8bb12b79109ac9678e5d25f67bee35ff39ef63e265"
    },
    "ac76f02be68341222fa3c0ff12a9e1537ba7eb0e374c011dcfa2f0332e8264a3": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_s3_assets import Asset\n\n# instance is of type Instance\n\n\nasset = Asset(self, \"Asset\",\n    path=\"./configure.sh\"\n)\n\nlocal_path = instance.user_data.add_s3_download_command(\n    bucket=asset.bucket,\n    bucket_key=asset.s3_object_key,\n    region=\"us-east-1\"\n)\ninstance.user_data.add_execute_file_command(\n    file_path=local_path,\n    arguments=\"--verbose -y\"\n)\nasset.grant_read(instance.role)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3.Assets;\n\nInstance instance;\n\n\nAsset asset = new Asset(this, \"Asset\", new AssetProps {\n    Path = \"./configure.sh\"\n});\n\nstring localPath = instance.UserData.AddS3DownloadCommand(new S3DownloadOptions {\n    Bucket = asset.Bucket,\n    BucketKey = asset.S3ObjectKey,\n    Region = \"us-east-1\"\n});\ninstance.UserData.AddExecuteFileCommand(new ExecuteFileOptions {\n    FilePath = localPath,\n    Arguments = \"--verbose -y\"\n});\nasset.GrantRead(instance.Role);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.assets.Asset;\n\nInstance instance;\n\n\nAsset asset = Asset.Builder.create(this, \"Asset\")\n        .path(\"./configure.sh\")\n        .build();\n\nString localPath = instance.userData.addS3DownloadCommand(S3DownloadOptions.builder()\n        .bucket(asset.getBucket())\n        .bucketKey(asset.getS3ObjectKey())\n        .region(\"us-east-1\")\n        .build());\ninstance.userData.addExecuteFileCommand(ExecuteFileOptions.builder()\n        .filePath(localPath)\n        .arguments(\"--verbose -y\")\n        .build());\nasset.grantRead(instance.getRole());",
          "version": "1"
        },
        "$": {
          "source": "import { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.S3DownloadOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ExecuteFileOptions",
        "@aws-cdk/aws-ec2.Instance#role",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.S3DownloadOptions",
        "@aws-cdk/aws-ec2.UserData#addExecuteFileCommand",
        "@aws-cdk/aws-ec2.UserData#addS3DownloadCommand",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3-assets.Asset",
        "@aws-cdk/aws-s3-assets.Asset#bucket",
        "@aws-cdk/aws-s3-assets.Asset#grantRead",
        "@aws-cdk/aws-s3-assets.Asset#s3ObjectKey",
        "@aws-cdk/aws-s3-assets.AssetProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Asset } from '@aws-cdk/aws-s3-assets';\n\ndeclare const instance: ec2.Instance;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst asset = new Asset(this, 'Asset', {\n  path: './configure.sh'\n});\n\nconst localPath = instance.userData.addS3DownloadCommand({\n  bucket:asset.bucket,\n  bucketKey:asset.s3ObjectKey,\n  region: 'us-east-1', // Optional\n});\ninstance.userData.addExecuteFileCommand({\n  filePath:localPath,\n  arguments: '--verbose -y'\n});\nasset.grantRead(instance.role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "404a5cdfead3c96590e807c29cffd0eca9284ccd3fcd12b711df2a9032a97719"
    },
    "41540b2d81c0426ca462f8895e3ed8b8b23999b7a8bdf59ce0abe68d1678095c": {
      "translations": {
        "python": {
          "source": "my_security_group = ec2.SecurityGroup(self, \"SecurityGroup\",\n    vpc=vpc,\n    description=\"Allow ssh access to ec2 instances\",\n    allow_all_outbound=True\n)\nmy_security_group.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22), \"allow ssh access from the world\")",
          "version": "1"
        },
        "csharp": {
          "source": "SecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps {\n    Vpc = vpc,\n    Description = \"Allow ssh access to ec2 instances\",\n    AllowAllOutbound = true\n});\nmySecurityGroup.AddIngressRule(Peer.AnyIpv4(), Port.Tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "java": {
          "source": "SecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\")\n        .vpc(vpc)\n        .description(\"Allow ssh access to ec2 instances\")\n        .allowAllOutbound(true)\n        .build();\nmySecurityGroup.addIngressRule(Peer.anyIpv4(), Port.tcp(22), \"allow ssh access from the world\");",
          "version": "1"
        },
        "$": {
          "source": "const mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IPeer",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#anyIpv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#addIngressRule",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', {\n  vpc,\n  description: 'Allow ssh access to ec2 instances',\n  allowAllOutbound: true   // Can be set to false\n});\nmySecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'allow ssh access from the world');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "0f0063862926c0d402e9ca959c7d77c296dd0212bea4bb6c6c1d629a0ae099d4"
    },
    "0cdb6d385f2c99950d074b25703b68e9b94e47b2678076cab19de922c602b2fd": {
      "translations": {
        "python": {
          "source": "security_group = ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-12345\",\n    mutable=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-12345\", new SecurityGroupImportOptions {\n    Mutable = false\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecurityGroup securityGroup = SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-12345\", SecurityGroupImportOptions.builder()\n        .mutable(false)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroupImportOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst securityGroup = ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-12345', {\n   mutable: false\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "b2d7550737b96d43c243dd8d8fbe6c1b7e0d89389304debe6c04a7df54e3acc1"
    },
    "85bdc663c1b8e7c74b4a30aeb52dbd99088845f8718df4864c936d9082959cf6": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nmy_security_group = ec2.SecurityGroup(self, \"SecurityGroup\", vpc=vpc)\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage(),\n    security_group=my_security_group\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps { Vpc = vpc });\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage(),\n    SecurityGroup = mySecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\").vpc(vpc).build();\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .securityGroup(mySecurityGroup)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SecurityGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0b12bbd230cf361ca00240a9f992b0b3eb7c520a5047001c4d98a8402d5c28"
    },
    "61fd641949dbec560cc50d9a2988b42742d62429df8b7e3b75f5a8ac0522183b": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"TheVPC\",\n    cidr=\"10.0.0.0/16\"\n)\n\n# Iterate the private subnets\nselection = vpc.select_subnets(\n    subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n)\n\nfor subnet in selection.subnets:\n    pass",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"TheVPC\", new VpcProps {\n    Cidr = \"10.0.0.0/16\"\n});\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.SelectSubnets(new SubnetSelection {\n    SubnetType = SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (var subnet in selection.Subnets)\n{\n}",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"TheVPC\")\n        .cidr(\"10.0.0.0/16\")\n        .build();\n\n// Iterate the private subnets\nSelectedSubnets selection = vpc.selectSubnets(SubnetSelection.builder()\n        .subnetType(SubnetType.PRIVATE_WITH_NAT)\n        .build());\n\nfor (Object subnet : selection.getSubnets()) {\n}",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SelectedSubnets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.SelectedSubnets",
        "@aws-cdk/aws-ec2.SelectedSubnets#subnets",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE_WITH_NAT",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'TheVPC', {\n   cidr: \"10.0.0.0/16\"\n})\n\n// Iterate the private subnets\nconst selection = vpc.selectSubnets({\n   subnetType: ec2.SubnetType.PRIVATE_WITH_NAT\n});\n\nfor (const subnet of selection.subnets) {\n   // ...\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 1,
        "223": 1,
        "225": 2,
        "232": 1,
        "242": 3,
        "243": 3,
        "281": 2
      },
      "fqnsFingerprint": "e53954d6ed7c79149aeed4c56728c7d2a20076ecc6df9e83b0c6cd8c3356640c"
    },
    "48c484829d946dc84d8cc9d0c49ef478b3b7e416e9680aaee243b2ea96c1b6f5": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Subnet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "beea4c36025054a5ff6d90354a3454ff4c85d37ece66e08348ad0dbfc96db70a"
    },
    "26e3bff9dcbaf47940a4a9763e6d80fb0f5750d4f12badf59dc8f051e8591d75": {
      "translations": {
        "python": {
          "source": "# Supply all properties\nsubnet1 = ec2.Subnet.from_subnet_attributes(self, \"SubnetFromAttributes\",\n    subnet_id=\"s-1234\",\n    availability_zone=\"pub-az-4465\",\n    route_table_id=\"rt-145\"\n)\n\n# Supply only subnet id\nsubnet2 = ec2.Subnet.from_subnet_id(self, \"SubnetFromId\", \"s-1234\")",
          "version": "1"
        },
        "csharp": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.FromSubnetAttributes(this, \"SubnetFromAttributes\", new SubnetAttributes {\n    SubnetId = \"s-1234\",\n    AvailabilityZone = \"pub-az-4465\",\n    RouteTableId = \"rt-145\"\n});\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.FromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "java": {
          "source": "// Supply all properties\nISubnet subnet1 = Subnet.fromSubnetAttributes(this, \"SubnetFromAttributes\", SubnetAttributes.builder()\n        .subnetId(\"s-1234\")\n        .availabilityZone(\"pub-az-4465\")\n        .routeTableId(\"rt-145\")\n        .build());\n\n// Supply only subnet id\nISubnet subnet2 = Subnet.fromSubnetId(this, \"SubnetFromId\", \"s-1234\");",
          "version": "1"
        },
        "$": {
          "source": "// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISubnet",
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetAttributes",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetAttributes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Supply all properties\nconst subnet1 = ec2.Subnet.fromSubnetAttributes(this, 'SubnetFromAttributes', {\n  subnetId: 's-1234',\n  availabilityZone: 'pub-az-4465',\n  routeTableId: 'rt-145'\n});\n\n// Supply only subnet id\nconst subnet2 = ec2.Subnet.fromSubnetId(this, 'SubnetFromId', 's-1234');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "cd1a595f65ad689d269f9cf7b399f3adc79fc93e961e630764441b57c1b60416"
    },
    "170aaa517d6352076b8b0d16a05a51e658ca21da8c29e8a89297f40b38962332": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    task_subnets=ec2.SubnetSelection(\n        subnets=[ec2.Subnet.from_subnet_id(self, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    TaskSubnets = new SubnetSelection {\n        Subnets = new [] { Subnet.FromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .taskSubnets(SubnetSelection.builder()\n                .subnets(List.of(Subnet.fromSubnetId(this, \"subnet\", \"VpcISOLATEDSubnet1Subnet80F07FA0\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Subnet",
        "@aws-cdk/aws-ec2.Subnet#fromSubnetId",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 4,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "beea4c36025054a5ff6d90354a3454ff4c85d37ece66e08348ad0dbfc96db70a"
    },
    "d55b729571e4019a13bdcbc348b1e7b458509efcf6fa826e84aaf67343076911": {
      "translations": {
        "python": {
          "source": "asg = cluster.add_capacity(\"Nodes\",\n    instance_type=ec2.InstanceType(\"t2.medium\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC),\n    key_name=\"my-key-name\"\n)\n\n# Replace with desired IP\nasg.connections.allow_from(ec2.Peer.ipv4(\"1.2.3.4/32\"), ec2.Port.tcp(22))",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup asg = cluster.AddCapacity(\"Nodes\", new CapacityOptions {\n    InstanceType = new InstanceType(\"t2.medium\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC },\n    KeyName = \"my-key-name\"\n});\n\n// Replace with desired IP\nasg.Connections.AllowFrom(Peer.Ipv4(\"1.2.3.4/32\"), Port.Tcp(22));",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup asg = cluster.addCapacity(\"Nodes\", CapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.medium\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .keyName(\"my-key-name\")\n        .build());\n\n// Replace with desired IP\nasg.connections.allowFrom(Peer.ipv4(\"1.2.3.4/32\"), Port.tcp(22));",
          "version": "1"
        },
        "$": {
          "source": "    const asg = cluster.addCapacity('Nodes', {\n      instanceType: new ec2.InstanceType('t2.medium'),\n      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n      keyName: 'my-key-name',\n    });\n\n    // Replace with desired IP\n    asg.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(22));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.SubnetType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.Peer",
        "@aws-cdk/aws-ec2.Peer#ipv4",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-eks-legacy.CapacityOptions",
        "@aws-cdk/aws-eks-legacy.Cluster#addCapacity"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as cdk from '@aws-cdk/core';\nimport * as eks from '../lib';\n\nclass EksClusterStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const cluster = new eks.Cluster(this, 'EKSCluster', {\n      vpc,\n    });\n\n    /// !show\n    const asg = cluster.addCapacity('Nodes', {\n      instanceType: new ec2.InstanceType('t2.medium'),\n      vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n      keyName: 'my-key-name',\n    });\n\n    // Replace with desired IP\n    asg.connections.allowFrom(ec2.Peer.ipv4('1.2.3.4/32'), ec2.Port.tcp(22));\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew EksClusterStack(app, 'eks-integ-test');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 21,
        "193": 2,
        "194": 10,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "183df41347d742ce3de015a31a90b9a9f1c26f866958cf015f7bad926f6866fd"
    },
    "5dad6b7c3d639bd15591411db7953874dc4b7cdd53faefc02a3fd0ff47518da0": {
      "translations": {
        "python": {
          "source": "multipart_user_data = ec2.MultipartUserData()\ncommands_user_data = ec2.UserData.for_linux()\nmultipart_user_data.add_user_data_part(commands_user_data, ec2.MultipartBody.SHELL_SCRIPT, True)\n\n# Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipart_user_data.add_commands(\"touch /root/multi.txt\")\ncommands_user_data.add_commands(\"touch /root/userdata.txt\")",
          "version": "1"
        },
        "csharp": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.ForLinux();\nmultipartUserData.AddUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.AddCommands(\"touch /root/multi.txt\");\ncommandsUserData.AddCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "java": {
          "source": "MultipartUserData multipartUserData = new MultipartUserData();\nUserData commandsUserData = UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands(\"touch /root/multi.txt\");\ncommandsUserData.addCommands(\"touch /root/userdata.txt\");",
          "version": "1"
        },
        "$": {
          "source": "const multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.UserData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.MultipartBody",
        "@aws-cdk/aws-ec2.MultipartBody#SHELL_SCRIPT",
        "@aws-cdk/aws-ec2.MultipartUserData",
        "@aws-cdk/aws-ec2.MultipartUserData#addCommands",
        "@aws-cdk/aws-ec2.MultipartUserData#addUserDataPart",
        "@aws-cdk/aws-ec2.UserData",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-ec2.UserData#forLinux"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst multipartUserData = new ec2.MultipartUserData();\nconst commandsUserData = ec2.UserData.forLinux();\nmultipartUserData.addUserDataPart(commandsUserData, ec2.MultipartBody.SHELL_SCRIPT, true);\n\n// Adding commands to the multipartUserData adds them to commandsUserData, and vice-versa.\nmultipartUserData.addCommands('touch /root/multi.txt');\ncommandsUserData.addCommands('touch /root/userdata.txt');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "106": 1,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "56454331c6a79ca2767ea93ab33ac080c4371d85aad4b727c4eee75a78e954c4"
    },
    "36ad81134641bc582a22fce8d735ac3724269657e64ac1f7651e811d9c797c5b": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# role is of type Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Volume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ce9a75e0f7cbf6a1e44226c889019efb1437e694fa1f48daf5ad06299043c4e"
    },
    "bd0c5d091220ab5b8a782ee4496ae36b218c0f6f0f328092406fe3845cdc9e72": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n# role is of type Role\n\n\nvolume = ec2.Volume(self, \"Volume\",\n    availability_zone=\"us-west-2a\",\n    size=Size.gibibytes(500),\n    encrypted=True\n)\n\nvolume.grant_attach_volume(role, [instance])",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = new Volume(this, \"Volume\", new VolumeProps {\n    AvailabilityZone = \"us-west-2a\",\n    Size = Size.Gibibytes(500),\n    Encrypted = true\n});\n\nvolume.GrantAttachVolume(role, new [] { instance });",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\nRole role;\n\n\nVolume volume = Volume.Builder.create(this, \"Volume\")\n        .availabilityZone(\"us-west-2a\")\n        .size(Size.gibibytes(500))\n        .encrypted(true)\n        .build();\n\nvolume.grantAttachVolume(role, List.of(instance));",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VolumeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Volume",
        "@aws-cdk/aws-ec2.VolumeProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/core.Size",
        "@aws-cdk/core.Size#gibibytes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst volume = new ec2.Volume(this, 'Volume', {\n  availabilityZone: 'us-west-2a',\n  size: Size.gibibytes(500),\n  encrypted: true,\n});\n\nvolume.grantAttachVolume(role, [instance]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 18,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "9ce9a75e0f7cbf6a1e44226c889019efb1437e694fa1f48daf5ad06299043c4e"
    },
    "9e95b14a111e16dc791beec6604d66879d536bdf1d00ad4f748f89b540f4751f": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"Vpc\", max_azs=1)\ncluster = ecs.Cluster(self, \"EcsCluster\", vpc=vpc)\nsecurity_group = ec2.SecurityGroup(self, \"SG\", vpc=vpc)\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    security_groups=[security_group]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"Vpc\", new VpcProps { MaxAzs = 1 });\nCluster cluster = new Cluster(this, \"EcsCluster\", new ClusterProps { Vpc = vpc });\nSecurityGroup securityGroup = new SecurityGroup(this, \"SG\", new SecurityGroupProps { Vpc = vpc });\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    SecurityGroups = new [] { securityGroup }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"Vpc\").maxAzs(1).build();\nCluster cluster = Cluster.Builder.create(this, \"EcsCluster\").vpc(vpc).build();\nSecurityGroup securityGroup = SecurityGroup.Builder.create(this, \"SG\").vpc(vpc).build();\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .securityGroups(List.of(securityGroup))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.Vpc"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 28,
        "104": 4,
        "192": 1,
        "193": 5,
        "194": 8,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 6,
        "282": 3
      },
      "fqnsFingerprint": "37704d23f45df18ad08dffb22c08ec9cf9f0bf18643fed4ed464b73b7e5d34bf"
    },
    "98068234e7be8df9b57723eac08551c28bf8607541238fd8f8fe6a9926919b25": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_vpc_attributes(self, \"VPC\",\n    vpc_id=\"vpc-1234\",\n    availability_zones=[\"us-east-1a\", \"us-east-1b\"],\n\n    # Either pass literals for all IDs\n    public_subnet_ids=[\"s-12345\", \"s-67890\"],\n\n    # OR: import a list of known length\n    private_subnet_ids=Fn.import_list_value(\"PrivateSubnetIds\", 2),\n\n    # OR: split an imported string to a list of known length\n    isolated_subnet_ids=Fn.split(\",\", ssm.StringParameter.value_for_string_parameter(self, \"MyParameter\"), 2)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromVpcAttributes(this, \"VPC\", new VpcAttributes {\n    VpcId = \"vpc-1234\",\n    AvailabilityZones = new [] { \"us-east-1a\", \"us-east-1b\" },\n\n    // Either pass literals for all IDs\n    PublicSubnetIds = new [] { \"s-12345\", \"s-67890\" },\n\n    // OR: import a list of known length\n    PrivateSubnetIds = Fn.ImportListValue(\"PrivateSubnetIds\", 2),\n\n    // OR: split an imported string to a list of known length\n    IsolatedSubnetIds = Fn.Split(\",\", StringParameter.ValueForStringParameter(this, \"MyParameter\"), 2)\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromVpcAttributes(this, \"VPC\", VpcAttributes.builder()\n        .vpcId(\"vpc-1234\")\n        .availabilityZones(List.of(\"us-east-1a\", \"us-east-1b\"))\n\n        // Either pass literals for all IDs\n        .publicSubnetIds(List.of(\"s-12345\", \"s-67890\"))\n\n        // OR: import a list of known length\n        .privateSubnetIds(Fn.importListValue(\"PrivateSubnetIds\", 2))\n\n        // OR: split an imported string to a list of known length\n        .isolatedSubnetIds(Fn.split(\",\", StringParameter.valueForStringParameter(this, \"MyParameter\"), 2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromVpcAttributes",
        "@aws-cdk/aws-ec2.VpcAttributes",
        "@aws-cdk/aws-ssm.StringParameter",
        "@aws-cdk/aws-ssm.StringParameter#valueForStringParameter",
        "@aws-cdk/core.Fn#importListValue",
        "@aws-cdk/core.Fn#split"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromVpcAttributes(this, 'VPC', {\n  vpcId: 'vpc-1234',\n  availabilityZones: ['us-east-1a', 'us-east-1b'],\n\n  // Either pass literals for all IDs\n  publicSubnetIds: ['s-12345', 's-67890'],\n\n  // OR: import a list of known length\n  privateSubnetIds: Fn.importListValue('PrivateSubnetIds', 2),\n\n  // OR: split an imported string to a list of known length\n  isolatedSubnetIds: Fn.split(',', ssm.StringParameter.valueForStringParameter(this, `MyParameter`), 2),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "14": 1,
        "75": 16,
        "104": 2,
        "192": 2,
        "193": 1,
        "194": 6,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "09f7d1633d49eda6f70ee878f1e2612b271587515b50b506c8f52154268e4615"
    },
    "54845e30ae14efd958a15b8acb510e2247efe0f4ed81ea2d9114e5ff6fef3b7f": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1 is of type NetworkLoadBalancer\n# network_load_balancer2 is of type NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcEndpointService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "60d16696a56bccf56edf18eee13998ee1efbea081c0e990e3b809821e8ff44fd"
    },
    "51be01cf26862f470466c2e873e50b86e9dcd73c032b4402ea34786c95c2173e": {
      "translations": {
        "python": {
          "source": "# network_load_balancer1 is of type NetworkLoadBalancer\n# network_load_balancer2 is of type NetworkLoadBalancer\n\n\nec2.VpcEndpointService(self, \"EndpointService\",\n    vpc_endpoint_service_load_balancers=[network_load_balancer1, network_load_balancer2],\n    acceptance_required=True,\n    allowed_principals=[iam.ArnPrincipal(\"arn:aws:iam::123456789012:root\")]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nnew VpcEndpointService(this, \"EndpointService\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { networkLoadBalancer1, networkLoadBalancer2 },\n    AcceptanceRequired = true,\n    AllowedPrincipals = new [] { new ArnPrincipal(\"arn:aws:iam::123456789012:root\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "NetworkLoadBalancer networkLoadBalancer1;\nNetworkLoadBalancer networkLoadBalancer2;\n\n\nVpcEndpointService.Builder.create(this, \"EndpointService\")\n        .vpcEndpointServiceLoadBalancers(List.of(networkLoadBalancer1, networkLoadBalancer2))\n        .acceptanceRequired(true)\n        .allowedPrincipals(List.of(new ArnPrincipal(\"arn:aws:iam::123456789012:root\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcEndpointServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-iam.ArnPrincipal"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const networkLoadBalancer1: elbv2.NetworkLoadBalancer;\ndeclare const networkLoadBalancer2: elbv2.NetworkLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew ec2.VpcEndpointService(this, 'EndpointService', {\n  vpcEndpointServiceLoadBalancers: [networkLoadBalancer1, networkLoadBalancer2],\n  acceptanceRequired: true,\n  allowedPrincipals: [new iam.ArnPrincipal('arn:aws:iam::123456789012:root')]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "60d16696a56bccf56edf18eee13998ee1efbea081c0e990e3b809821e8ff44fd"
    },
    "6e06c4e58d4a42ded9025731ccf79c3bf0087609c043abbe3a62c525eda75884": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcLookupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "847d181dfbbe6aa51975c5bf1e40589eabc8316b27ba1b1089c8ecec56d99ec8"
    },
    "b8bc17c50c25ccadc29e927735ee7d975225edb9c06966a09dcbf8bc499f3dfd": {
      "translations": {
        "python": {
          "source": "# Add gateway endpoints when creating the VPC\nvpc = ec2.Vpc(self, \"MyVpc\",\n    gateway_endpoints={\n        \"S3\": ec2.GatewayVpcEndpointOptions(\n            service=ec2.GatewayVpcEndpointAwsService.S3\n        )\n    }\n)\n\n# Alternatively gateway endpoints can be added on the VPC\ndynamo_db_endpoint = vpc.add_gateway_endpoint(\"DynamoDbEndpoint\",\n    service=ec2.GatewayVpcEndpointAwsService.DYNAMODB\n)\n\n# This allows to customize the endpoint policy\ndynamo_db_endpoint.add_to_policy(\n    iam.PolicyStatement( # Restrict to listing and describing tables\n        principals=[iam.AnyPrincipal()],\n        actions=[\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"],\n        resources=[\"*\"]))\n\n# Add an interface endpoint\nvpc.add_interface_endpoint(\"EcrDockerEndpoint\",\n    service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    GatewayEndpoints = new Dictionary<string, GatewayVpcEndpointOptions> {\n        { \"S3\", new GatewayVpcEndpointOptions {\n            Service = GatewayVpcEndpointAwsService.S3\n        } }\n    }\n});\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.AddGatewayEndpoint(\"DynamoDbEndpoint\", new GatewayVpcEndpointOptions {\n    Service = GatewayVpcEndpointAwsService.DYNAMODB\n});\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.AddToPolicy(\nnew PolicyStatement(new PolicyStatementProps {  // Restrict to listing and describing tables\n    Principals = new [] { new AnyPrincipal() },\n    Actions = new [] { \"dynamodb:DescribeTable\", \"dynamodb:ListTables\" },\n    Resources = new [] { \"*\" } }));\n\n// Add an interface endpoint\nvpc.AddInterfaceEndpoint(\"EcrDockerEndpoint\", new InterfaceVpcEndpointOptions {\n    Service = InterfaceVpcEndpointAwsService.ECR_DOCKER\n});",
          "version": "1"
        },
        "java": {
          "source": "// Add gateway endpoints when creating the VPC\nVpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .gatewayEndpoints(Map.of(\n                \"S3\", GatewayVpcEndpointOptions.builder()\n                        .service(GatewayVpcEndpointAwsService.S3)\n                        .build()))\n        .build();\n\n// Alternatively gateway endpoints can be added on the VPC\nGatewayVpcEndpoint dynamoDbEndpoint = vpc.addGatewayEndpoint(\"DynamoDbEndpoint\", GatewayVpcEndpointOptions.builder()\n        .service(GatewayVpcEndpointAwsService.DYNAMODB)\n        .build());\n\n// This allows to customize the endpoint policy\ndynamoDbEndpoint.addToPolicy(\nPolicyStatement.Builder.create() // Restrict to listing and describing tables\n        .principals(List.of(new AnyPrincipal()))\n        .actions(List.of(\"dynamodb:DescribeTable\", \"dynamodb:ListTables\"))\n        .resources(List.of(\"*\")).build());\n\n// Add an interface endpoint\nvpc.addInterfaceEndpoint(\"EcrDockerEndpoint\", InterfaceVpcEndpointOptions.builder()\n        .service(InterfaceVpcEndpointAwsService.ECR_DOCKER)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpcProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.GatewayVpcEndpoint",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#DYNAMODB",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointAwsService#S3",
        "@aws-cdk/aws-ec2.GatewayVpcEndpointOptions",
        "@aws-cdk/aws-ec2.IGatewayVpcEndpointService",
        "@aws-cdk/aws-ec2.IInterfaceVpcEndpointService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointAwsService#ECR_DOCKER",
        "@aws-cdk/aws-ec2.InterfaceVpcEndpointOptions",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpoint#addToPolicy",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-iam.AnyPrincipal",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\nclass VpcEndpointStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /// !show\n    // Add gateway endpoints when creating the VPC\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\n      gatewayEndpoints: {\n        S3: {\n          service: ec2.GatewayVpcEndpointAwsService.S3,\n        },\n      },\n    });\n\n    // Alternatively gateway endpoints can be added on the VPC\n    const dynamoDbEndpoint = vpc.addGatewayEndpoint('DynamoDbEndpoint', {\n      service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n    });\n\n    // This allows to customize the endpoint policy\n    dynamoDbEndpoint.addToPolicy(\n      new iam.PolicyStatement({ // Restrict to listing and describing tables\n        principals: [new iam.AnyPrincipal()],\n        actions: ['dynamodb:DescribeTable', 'dynamodb:ListTables'],\n        resources: ['*'],\n      }));\n\n    // Add an interface endpoint\n    vpc.addInterfaceEndpoint('EcrDockerEndpoint', {\n      service: ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,\n\n      // Uncomment the following to allow more fine-grained control over\n      // who can access the endpoint via the '.connections' object.\n      // open: false\n    });\n    /// !hide\n  }\n}\n\nnew VpcEndpointStack(app, 'aws-cdk-ec2-vpc-endpoint');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 31,
        "104": 1,
        "192": 3,
        "193": 6,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "bd836a9ffb78098afd76c952c3aa05058d34e95de287030b9e7977b675c2f392"
    },
    "7e7eb5f710a826229e20e2b8777dd98b2c722db77cf6150ae6f583a314a4d0b4": {
      "translations": {
        "python": {
          "source": "# Across all tunnels in the account/region\nall_data_out = ec2.VpnConnection.metric_all_tunnel_data_out()\n\n# For a specific vpn connection\nvpn_connection = vpc.add_vpn_connection(\"Dynamic\",\n    ip=\"1.2.3.4\"\n)\nstate = vpn_connection.metric_tunnel_state()",
          "version": "1"
        },
        "csharp": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.MetricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.AddVpnConnection(\"Dynamic\", new VpnConnectionOptions {\n    Ip = \"1.2.3.4\"\n});\nMetric state = vpnConnection.MetricTunnelState();",
          "version": "1"
        },
        "java": {
          "source": "// Across all tunnels in the account/region\nMetric allDataOut = VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nVpnConnection vpnConnection = vpc.addVpnConnection(\"Dynamic\", VpnConnectionOptions.builder()\n        .ip(\"1.2.3.4\")\n        .build());\nMetric state = vpnConnection.metricTunnelState();",
          "version": "1"
        },
        "$": {
          "source": "// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnConnection"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-ec2.VpnConnection",
        "@aws-cdk/aws-ec2.VpnConnection#metricAllTunnelDataOut",
        "@aws-cdk/aws-ec2.VpnConnection#metricTunnelState",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported and a VPC created\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    // Code snippet begins after !show marker below\n/// !show\n// Across all tunnels in the account/region\nconst allDataOut = ec2.VpnConnection.metricAllTunnelDataOut();\n\n// For a specific vpn connection\nconst vpnConnection = vpc.addVpnConnection('Dynamic', {\n  ip: '1.2.3.4'\n});\nconst state = vpnConnection.metricTunnelState();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "193": 1,
        "194": 4,
        "196": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "3e6d32dd4650df4a9604b5dd7aeb29ec191dd72b81244313d8802c698547d0f3"
    },
    "0632c705838d357f0fd780361559a90543102a35e713ba867cd824961aaddff0": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc(self, \"MyVpc\",\n    vpn_connections={\n        \"dynamic\": ec2.VpnConnectionOptions( # Dynamic routing (BGP)\n            ip=\"1.2.3.4\"),\n        \"static\": ec2.VpnConnectionOptions( # Static routing\n            ip=\"4.5.6.7\",\n            static_routes=[\"192.168.10.0/24\", \"192.168.20.0/24\"\n            ])\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc = new Vpc(this, \"MyVpc\", new VpcProps {\n    VpnConnections = new Dictionary<string, VpnConnectionOptions> {\n        { \"dynamic\", new VpnConnectionOptions {  // Dynamic routing (BGP)\n            Ip = \"1.2.3.4\" } },\n        { \"static\", new VpnConnectionOptions {  // Static routing\n            Ip = \"4.5.6.7\",\n            StaticRoutes = new [] { \"192.168.10.0/24\", \"192.168.20.0/24\" } } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc = Vpc.Builder.create(this, \"MyVpc\")\n        .vpnConnections(Map.of(\n                \"dynamic\", VpnConnectionOptions.builder() // Dynamic routing (BGP)\n                        .ip(\"1.2.3.4\").build(),\n                \"static\", VpnConnectionOptions.builder() // Static routing\n                        .ip(\"4.5.6.7\")\n                        .staticRoutes(List.of(\"192.168.10.0/24\", \"192.168.20.0/24\")).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.VpnConnectionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ec2.VpnConnectionOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = new ec2.Vpc(this, 'MyVpc', {\n  vpnConnections: {\n    dynamic: { // Dynamic routing (BGP)\n      ip: '1.2.3.4'\n    },\n    static: { // Static routing\n      ip: '4.5.6.7',\n      staticRoutes: [\n        '192.168.10.0/24',\n        '192.168.20.0/24'\n      ]\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "98e4ae0880c5fb7be17f33a531258dc6e9ec84f401f3e239cd6fa1dd812a10ad"
    },
    "00815811ff441452a2996b411180b0249f399f5c137a1464613f7c0c80ceedf5": {
      "translations": {
        "python": {
          "source": "# Pick a Windows edition to use\nwindows = ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.AmazonLinuxImage(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\n\nlinux = ec2.GenericLinuxImage({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = new AmazonLinuxImage(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = AmazonLinuxImage.Builder.create()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .build();\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.WindowsImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.WindowsImage",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\n\n/// !show\n// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "193": 2,
        "194": 13,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6
      },
      "fqnsFingerprint": "6d4f386af5c46de124cd13713b296cf8bb7c257958c2942c27686549a7bc616d"
    },
    "00fc7139c51bf26d8ffe89f7a22ac792728403f1bda6332b3f34d49a2d8123bb": {
      "translations": {
        "python": {
          "source": "# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.MachineImage.latest_amazon_linux(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n    cpu_type=ec2.AmazonLinuxCpuType.X86_64\n)\n\n# Pick a Windows edition to use\nwindows = ec2.MachineImage.latest_windows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Read AMI id from SSM parameter store\nssm = ec2.MachineImage.from_sSMParameter(\"/my/ami\", ec2.OperatingSystemType.LINUX)\n\n# Look up the most recent image matching a set of AMI filters.\n# In this case, look up the NAT instance AMI, by using a wildcard\n# in the 'name' field:\nnat_ami = ec2.MachineImage.lookup(\n    name=\"amzn-ami-vpc-nat-*\",\n    owners=[\"amazon\"]\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\nlinux = ec2.MachineImage.generic_linux({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})\n\n# For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n# a map giving the AMI to in for each region:\ngeneric_windows = ec2.MachineImage.generic_windows({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.LatestAmazonLinux(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE,\n    CpuType = AmazonLinuxCpuType.X86_64\n});\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.LatestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.FromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.Lookup(new LookupMachineImageProps {\n    Name = \"amzn-ami-vpc-nat-*\",\n    Owners = new [] { \"amazon\" }\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.GenericLinux(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.GenericWindows(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nIMachineImage amznLinux = MachineImage.latestAmazonLinux(AmazonLinuxImageProps.builder()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .cpuType(AmazonLinuxCpuType.X86_64)\n        .build());\n\n// Pick a Windows edition to use\nIMachineImage windows = MachineImage.latestWindows(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nIMachineImage ssm = MachineImage.fromSSMParameter(\"/my/ami\", OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nIMachineImage natAmi = MachineImage.lookup(LookupMachineImageProps.builder()\n        .name(\"amzn-ami-vpc-nat-*\")\n        .owners(List.of(\"amazon\"))\n        .build());\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nIMachineImage linux = MachineImage.genericLinux(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nIMachineImage genericWindows = MachineImage.genericWindows(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ec2.WindowsVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType",
        "@aws-cdk/aws-ec2.AmazonLinuxCpuType#X86_64",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.LookupMachineImageProps",
        "@aws-cdk/aws-ec2.MachineImage",
        "@aws-cdk/aws-ec2.MachineImage#fromSSMParameter",
        "@aws-cdk/aws-ec2.MachineImage#genericLinux",
        "@aws-cdk/aws-ec2.MachineImage#genericWindows",
        "@aws-cdk/aws-ec2.MachineImage#latestAmazonLinux",
        "@aws-cdk/aws-ec2.MachineImage#latestWindows",
        "@aws-cdk/aws-ec2.MachineImage#lookup",
        "@aws-cdk/aws-ec2.OperatingSystemType",
        "@aws-cdk/aws-ec2.OperatingSystemType#LINUX",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '../lib';\n\n/// !show\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = ec2.MachineImage.latestAmazonLinux({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n  cpuType: ec2.AmazonLinuxCpuType.X86_64,\n});\n\n// Pick a Windows edition to use\nconst windows = ec2.MachineImage.latestWindows(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Read AMI id from SSM parameter store\nconst ssm = ec2.MachineImage.fromSSMParameter('/my/ami', ec2.OperatingSystemType.LINUX);\n\n// Look up the most recent image matching a set of AMI filters.\n// In this case, look up the NAT instance AMI, by using a wildcard\n// in the 'name' field:\nconst natAmi = ec2.MachineImage.lookup({\n  name: 'amzn-ami-vpc-nat-*',\n  owners: ['amazon'],\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\nconst linux = ec2.MachineImage.genericLinux({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n\n// For other custom (Windows) images, instantiate a `GenericWindowsImage` with\n// a map giving the AMI to in for each region:\nconst genericWindows = ec2.MachineImage.genericWindows({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\nArray.isArray(ssm);\nArray.isArray(genericWindows);\nArray.isArray(natAmi);\n",
      "syntaxKindCounter": {
        "10": 11,
        "75": 52,
        "192": 1,
        "193": 4,
        "194": 26,
        "196": 6,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 11
      },
      "fqnsFingerprint": "00148d7b9974180217a6f21d57c9f446d9e659addc82d860fbcb8056fdd6cae1"
    }
  }
}
