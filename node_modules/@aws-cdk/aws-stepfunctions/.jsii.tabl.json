{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "577bdec320c8a3a322d56a5d88f7487e127d391e8380c5723142f962317f436a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda is of type Function\n# get_status_lambda is of type Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nWait waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nLambdaInvoke getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nFail jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nLambdaInvoke finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nChain definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 66,
        "104": 7,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 6,
        "194": 20,
        "196": 10,
        "197": 7,
        "225": 8,
        "226": 1,
        "242": 8,
        "243": 8,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "498f8d65c070ee3ced6829715cf2b39afc012d5c33fba7393022171e32ba9d19"
    },
    "9cb6551a2b8426d67862b9b808b399cc5e3a130d46af870d901b6c4fce3dcd1e": {
      "translations": {
        "python": {
          "source": "start_state = sfn.Pass(self, \"StartState\")\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=start_state\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass startState = new Pass(this, \"StartState\");\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = startState\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass startState = new Pass(this, \"StartState\");\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(startState)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const startState = new sfn.Pass(this, 'StartState');\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: startState,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 84
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst startState = new sfn.Pass(this, 'StartState');\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: startState,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "5aca3f1d0910a0c3bf482a724b3501d880cbf29992498fd8af105f4488772195"
    },
    "e87f7a657b5eb5b10b15af94d88b8f3429754c9ce708ecdc7e5ac9f0fc670227": {
      "translations": {
        "python": {
          "source": "# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)",
          "version": "1"
        },
        "csharp": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.Next(nextState);",
          "version": "1"
        },
        "java": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);",
          "version": "1"
        },
        "$": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 137
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.Pass#next",
        "@aws-cdk/aws-stepfunctions.PassProps",
        "@aws-cdk/aws-stepfunctions.Result",
        "@aws-cdk/aws-stepfunctions.Result#fromObject"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "7e62e46b2373a0217cbda1436523aa5bacebbc594f789519120e343e8a4ae270"
    },
    "37e2379648ce7d30cdbc285d34b8989ee11fd82706d274020b03fc3374104c84": {
      "translations": {
        "python": {
          "source": "pass = sfn.Pass(self, \"Filter input and inject data\",\n    parameters={ # input to the pass state\n        \"input\": sfn.JsonPath.string_at(\"$.input.greeting\"),\n        \"other_data\": \"some-extra-stuff\"}\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass pass = new Pass(this, \"Filter input and inject data\", new PassProps {\n    Parameters = new Dictionary<string, object> {  // input to the pass state\n        { \"input\", JsonPath.StringAt(\"$.input.greeting\") },\n        { \"otherData\", \"some-extra-stuff\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass pass = Pass.Builder.create(this, \"Filter input and inject data\")\n        .parameters(Map.of( // input to the pass state\n                \"input\", JsonPath.stringAt(\"$.input.greeting\"),\n                \"otherData\", \"some-extra-stuff\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const pass = new sfn.Pass(this, 'Filter input and inject data', {\n  parameters: { // input to the pass state\n    input: sfn.JsonPath.stringAt('$.input.greeting'),\n    otherData: 'some-extra-stuff',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 155
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.PassProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pass = new sfn.Pass(this, 'Filter input and inject data', {\n  parameters: { // input to the pass state\n    input: sfn.JsonPath.stringAt('$.input.greeting'),\n    otherData: 'some-extra-stuff',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "1808825461af1f61ace51b385c77720e194ebb966ed8a6d8fc5ffa1d7b82aac0"
    },
    "b632aad2d209a7dc2e4219e160dde825f4245addd25135ef9305a2066ae2b918": {
      "translations": {
        "python": {
          "source": "# Wait until it's the time mentioned in the the state object's \"triggerTime\"\n# field.\nwait = sfn.Wait(self, \"Wait For Trigger Time\",\n    time=sfn.WaitTime.timestamp_path(\"$.triggerTime\")\n)\n\n# Set the next state\nstart_the_work = sfn.Pass(self, \"StartTheWork\")\nwait.next(start_the_work)",
          "version": "1"
        },
        "csharp": {
          "source": "// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nWait wait = new Wait(this, \"Wait For Trigger Time\", new WaitProps {\n    Time = WaitTime.TimestampPath(\"$.triggerTime\")\n});\n\n// Set the next state\nPass startTheWork = new Pass(this, \"StartTheWork\");\nwait.Next(startTheWork);",
          "version": "1"
        },
        "java": {
          "source": "// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nWait wait = Wait.Builder.create(this, \"Wait For Trigger Time\")\n        .time(WaitTime.timestampPath(\"$.triggerTime\"))\n        .build();\n\n// Set the next state\nPass startTheWork = new Pass(this, \"StartTheWork\");\nwait.next(startTheWork);",
          "version": "1"
        },
        "$": {
          "source": "// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new sfn.Wait(this, 'Wait For Trigger Time', {\n  time: sfn.WaitTime.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nconst startTheWork = new sfn.Pass(this, 'StartTheWork');\nwait.next(startTheWork);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 176
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.Wait#next",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#timestampPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new sfn.Wait(this, 'Wait For Trigger Time', {\n  time: sfn.WaitTime.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nconst startTheWork = new sfn.Pass(this, 'StartTheWork');\nwait.next(startTheWork);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "6f023c7fe81a66a634554afb29b46a16874265e8db0e4781b9ac8b5159c1e12f"
    },
    "edb39355fd59307ad883d3104a4b8d5b82efb9b97c11257677a7fb9c6a18f612": {
      "translations": {
        "python": {
          "source": "choice = sfn.Choice(self, \"Did it work?\")\n\n# Add conditions with .when()\nsuccess_state = sfn.Pass(self, \"SuccessState\")\nfailure_state = sfn.Pass(self, \"FailureState\")\nchoice.when(sfn.Condition.string_equals(\"$.status\", \"SUCCESS\"), success_state)\nchoice.when(sfn.Condition.number_greater_than(\"$.attempts\", 5), failure_state)\n\n# Use .otherwise() to indicate what should be done if none of the conditions match\ntry_again_state = sfn.Pass(self, \"TryAgainState\")\nchoice.otherwise(try_again_state)",
          "version": "1"
        },
        "csharp": {
          "source": "Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.When(Condition.StringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.When(Condition.NumberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.Otherwise(tryAgainState);",
          "version": "1"
        },
        "java": {
          "source": "Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.when(Condition.stringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.when(Condition.numberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.otherwise(tryAgainState);",
          "version": "1"
        },
        "$": {
          "source": "const choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 193
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#numberGreaterThan",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 27,
        "104": 4,
        "194": 11,
        "196": 5,
        "197": 4,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4
      },
      "fqnsFingerprint": "4874dd68056b2aa6d0a65ed00e763ec37b38010d082b456c6289db4522d236ae"
    },
    "6c98755426e04957e95b780f975e021952ce7c0bb770008a6caa5de9179b89e2": {
      "translations": {
        "python": {
          "source": "choice = sfn.Choice(self, \"What color is it?\")\nhandle_blue_item = sfn.Pass(self, \"HandleBlueItem\")\nhandle_red_item = sfn.Pass(self, \"HandleRedItem\")\nhandle_other_item_color = sfn.Pass(self, \"HanldeOtherItemColor\")\nchoice.when(sfn.Condition.string_equals(\"$.color\", \"BLUE\"), handle_blue_item)\nchoice.when(sfn.Condition.string_equals(\"$.color\", \"RED\"), handle_red_item)\nchoice.otherwise(handle_other_item_color)\n\n# Use .afterwards() to join all possible paths back together and continue\nship_the_item = sfn.Pass(self, \"ShipTheItem\")\nchoice.afterwards().next(ship_the_item)",
          "version": "1"
        },
        "csharp": {
          "source": "Choice choice = new Choice(this, \"What color is it?\");\nPass handleBlueItem = new Pass(this, \"HandleBlueItem\");\nPass handleRedItem = new Pass(this, \"HandleRedItem\");\nPass handleOtherItemColor = new Pass(this, \"HanldeOtherItemColor\");\nchoice.When(Condition.StringEquals(\"$.color\", \"BLUE\"), handleBlueItem);\nchoice.When(Condition.StringEquals(\"$.color\", \"RED\"), handleRedItem);\nchoice.Otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nPass shipTheItem = new Pass(this, \"ShipTheItem\");\nchoice.Afterwards().Next(shipTheItem);",
          "version": "1"
        },
        "java": {
          "source": "Choice choice = new Choice(this, \"What color is it?\");\nPass handleBlueItem = new Pass(this, \"HandleBlueItem\");\nPass handleRedItem = new Pass(this, \"HandleRedItem\");\nPass handleOtherItemColor = new Pass(this, \"HanldeOtherItemColor\");\nchoice.when(Condition.stringEquals(\"$.color\", \"BLUE\"), handleBlueItem);\nchoice.when(Condition.stringEquals(\"$.color\", \"RED\"), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nPass shipTheItem = new Pass(this, \"ShipTheItem\");\nchoice.afterwards().next(shipTheItem);",
          "version": "1"
        },
        "$": {
          "source": "const choice = new sfn.Choice(this, 'What color is it?');\nconst handleBlueItem = new sfn.Pass(this, 'HandleBlueItem');\nconst handleRedItem = new sfn.Pass(this, 'HandleRedItem');\nconst handleOtherItemColor = new sfn.Pass(this, 'HanldeOtherItemColor');\nchoice.when(sfn.Condition.stringEquals('$.color', 'BLUE'), handleBlueItem);\nchoice.when(sfn.Condition.stringEquals('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nconst shipTheItem = new sfn.Pass(this, 'ShipTheItem');\nchoice.afterwards().next(shipTheItem);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 211
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#afterwards",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'What color is it?');\nconst handleBlueItem = new sfn.Pass(this, 'HandleBlueItem');\nconst handleRedItem = new sfn.Pass(this, 'HandleRedItem');\nconst handleOtherItemColor = new sfn.Pass(this, 'HanldeOtherItemColor');\nchoice.when(sfn.Condition.stringEquals('$.color', 'BLUE'), handleBlueItem);\nchoice.when(sfn.Condition.stringEquals('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nconst shipTheItem = new sfn.Pass(this, 'ShipTheItem');\nchoice.afterwards().next(shipTheItem);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 34,
        "104": 5,
        "194": 14,
        "196": 7,
        "197": 5,
        "225": 5,
        "226": 4,
        "242": 5,
        "243": 5
      },
      "fqnsFingerprint": "62c9376e5c34a619fb89f39c61c590438a605272528172c32735f2b2bbeb51d5"
    },
    "539fb875fec880ad97bd950295c2d8062c4a64b0ef1162a7ea60f9fa07e0b3f5": {
      "translations": {
        "python": {
          "source": "parallel = sfn.Parallel(self, \"Do the work in parallel\")\n\n# Add branches to be executed in parallel\nship_item = sfn.Pass(self, \"ShipItem\")\nsend_invoice = sfn.Pass(self, \"SendInvoice\")\nrestock = sfn.Pass(self, \"Restock\")\nparallel.branch(ship_item)\nparallel.branch(send_invoice)\nparallel.branch(restock)\n\n# Retry the whole workflow if something goes wrong\nparallel.add_retry(max_attempts=1)\n\n# How to recover from errors\nsend_failure_notification = sfn.Pass(self, \"SendFailureNotification\")\nparallel.add_catch(send_failure_notification)\n\n# What to do in case everything succeeded\nclose_order = sfn.Pass(self, \"CloseOrder\")\nparallel.next(close_order)",
          "version": "1"
        },
        "csharp": {
          "source": "Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.Branch(shipItem);\nparallel.Branch(sendInvoice);\nparallel.Branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(new RetryProps { MaxAttempts = 1 });\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.AddCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.Next(closeOrder);",
          "version": "1"
        },
        "java": {
          "source": "Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry(RetryProps.builder().maxAttempts(1).build());\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.next(closeOrder);",
          "version": "1"
        },
        "$": {
          "source": "const parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 284
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#addCatch",
        "@aws-cdk/aws-stepfunctions.Parallel#addRetry",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Parallel#next",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.RetryProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 36,
        "104": 6,
        "193": 1,
        "194": 12,
        "196": 6,
        "197": 6,
        "225": 6,
        "226": 6,
        "242": 6,
        "243": 6,
        "281": 1
      },
      "fqnsFingerprint": "9baee2438a1808777a67ae230bc9ffbeae47463a0ea5d2697331d93e576792df"
    },
    "81c406035046d5ac40336ddc8b37fca432cfbff63d3b7cc0be68a000a4215730": {
      "translations": {
        "python": {
          "source": "success = sfn.Succeed(self, \"We did it!\")",
          "version": "1"
        },
        "csharp": {
          "source": "Succeed success = new Succeed(this, \"We did it!\");",
          "version": "1"
        },
        "java": {
          "source": "Succeed success = new Succeed(this, \"We did it!\");",
          "version": "1"
        },
        "$": {
          "source": "const success = new sfn.Succeed(this, 'We did it!');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 312
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Succeed"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Succeed(this, 'We did it!');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "8bc0c45f66e10b81fc1817ff367a0cc169d0743fbdde432ba4237e9701f5ad44"
    },
    "67ecfd2548d04d4ed64f2662e3060b7971f078713dbe5fcb423e3512960b8ab1": {
      "translations": {
        "python": {
          "source": "success = sfn.Fail(self, \"Fail\",\n    error=\"WorkflowFailure\",\n    cause=\"Something went wrong\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Fail success = new Fail(this, \"Fail\", new FailProps {\n    Error = \"WorkflowFailure\",\n    Cause = \"Something went wrong\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Fail success = Fail.Builder.create(this, \"Fail\")\n        .error(\"WorkflowFailure\")\n        .cause(\"Something went wrong\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const success = new sfn.Fail(this, 'Fail', {\n  error: 'WorkflowFailure',\n  cause: \"Something went wrong\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 322
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Fail(this, 'Fail', {\n  error: 'WorkflowFailure',\n  cause: \"Something went wrong\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "5a6a38381399f8068e13d213b685c8c271f08424f8ee2aeb6afb5c15ccea412c"
    },
    "248585e2c7a8491b43baded5a981d92d0855be249d4df91f5369ee241da81ae0": {
      "translations": {
        "python": {
          "source": "map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Map map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "java": {
          "source": "Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "$": {
          "source": "const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 337
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.Map",
        "@aws-cdk/aws-stepfunctions.Map#iterator",
        "@aws-cdk/aws-stepfunctions.MapProps",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3190831da8aa577cf3a1aa3180dea5d0ce4c34b988f3955552f7f0a3ac4a0ab8"
    },
    "f1a7fd25a6bda8d8dbb0f5a0272c5df1c9d748944a81afeefc63422bb4b13f7d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nTable table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nChain chain = Chain.Start(custom).Next(finalStatus);\n\nStateMachine sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "1"
        },
        "$": {
          "source": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 367
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#tableName",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.CustomState",
        "@aws-cdk/aws-stepfunctions.CustomStateProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 46,
        "100": 1,
        "104": 4,
        "193": 8,
        "194": 12,
        "196": 4,
        "197": 4,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4d254ae18591942a00e50e4f14653ee406d0992a3db4af7b2db77182e93cec0f"
    },
    "8b97703ad211b924488633c3a7b94b0640736a76312e2bd46f9c77f00af7a67b": {
      "translations": {
        "python": {
          "source": "step1 = sfn.Pass(self, \"Step1\")\nstep2 = sfn.Pass(self, \"Step2\")\nstep3 = sfn.Pass(self, \"Step3\")\nstep4 = sfn.Pass(self, \"Step4\")\nstep5 = sfn.Pass(self, \"Step5\")\nstep6 = sfn.Pass(self, \"Step6\")\nstep7 = sfn.Pass(self, \"Step7\")\nstep8 = sfn.Pass(self, \"Step8\")\nstep9 = sfn.Pass(self, \"Step9\")\nstep10 = sfn.Pass(self, \"Step10\")\nchoice = sfn.Choice(self, \"Choice\")\ncondition1 = sfn.Condition.string_equals(\"$.status\", \"SUCCESS\")\nparallel = sfn.Parallel(self, \"Parallel\")\nfinish = sfn.Pass(self, \"Finish\")\n\ndefinition = step1.next(step2).next(choice.when(condition1, step3.next(step4).next(step5)).otherwise(step6).afterwards()).next(parallel.branch(step7.next(step8)).branch(step9.next(step10))).next(finish)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\nPass step4 = new Pass(this, \"Step4\");\nPass step5 = new Pass(this, \"Step5\");\nPass step6 = new Pass(this, \"Step6\");\nPass step7 = new Pass(this, \"Step7\");\nPass step8 = new Pass(this, \"Step8\");\nPass step9 = new Pass(this, \"Step9\");\nPass step10 = new Pass(this, \"Step10\");\nChoice choice = new Choice(this, \"Choice\");\nCondition condition1 = Condition.StringEquals(\"$.status\", \"SUCCESS\");\nParallel parallel = new Parallel(this, \"Parallel\");\nPass finish = new Pass(this, \"Finish\");\n\nChain definition = step1.Next(step2).Next(choice.When(condition1, step3.Next(step4).Next(step5)).Otherwise(step6).Afterwards()).Next(parallel.Branch(step7.Next(step8)).Branch(step9.Next(step10))).Next(finish);\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\nPass step4 = new Pass(this, \"Step4\");\nPass step5 = new Pass(this, \"Step5\");\nPass step6 = new Pass(this, \"Step6\");\nPass step7 = new Pass(this, \"Step7\");\nPass step8 = new Pass(this, \"Step8\");\nPass step9 = new Pass(this, \"Step9\");\nPass step10 = new Pass(this, \"Step10\");\nChoice choice = new Choice(this, \"Choice\");\nCondition condition1 = Condition.stringEquals(\"$.status\", \"SUCCESS\");\nParallel parallel = new Parallel(this, \"Parallel\");\nPass finish = new Pass(this, \"Finish\");\n\nChain definition = step1.next(step2).next(choice.when(condition1, step3.next(step4).next(step5)).otherwise(step6).afterwards()).next(parallel.branch(step7.next(step8)).branch(step9.next(step10))).next(finish);\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\nconst step4 = new sfn.Pass(this, 'Step4');\nconst step5 = new sfn.Pass(this, 'Step5');\nconst step6 = new sfn.Pass(this, 'Step6');\nconst step7 = new sfn.Pass(this, 'Step7');\nconst step8 = new sfn.Pass(this, 'Step8');\nconst step9 = new sfn.Pass(this, 'Step9');\nconst step10 = new sfn.Pass(this, 'Step10');\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.status', 'SUCCESS');\nconst parallel = new sfn.Parallel(this, 'Parallel');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = step1\n  .next(step2)\n  .next(choice\n    .when(condition1, step3.next(step4).next(step5))\n    .otherwise(step6)\n    .afterwards())\n  .next(parallel\n    .branch(step7.next(step8))\n    .branch(step9.next(step10)))\n  .next(finish);\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 421
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#afterwards",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.Pass#next",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\nconst step4 = new sfn.Pass(this, 'Step4');\nconst step5 = new sfn.Pass(this, 'Step5');\nconst step6 = new sfn.Pass(this, 'Step6');\nconst step7 = new sfn.Pass(this, 'Step7');\nconst step8 = new sfn.Pass(this, 'Step8');\nconst step9 = new sfn.Pass(this, 'Step9');\nconst step10 = new sfn.Pass(this, 'Step10');\nconst choice = new sfn.Choice(this, 'Choice');\nconst condition1 = sfn.Condition.stringEquals('$.status', 'SUCCESS');\nconst parallel = new sfn.Parallel(this, 'Parallel');\nconst finish = new sfn.Pass(this, 'Finish');\n\nconst definition = step1\n  .next(step2)\n  .next(choice\n    .when(condition1, step3.next(step4).next(step5))\n    .otherwise(step6)\n    .afterwards())\n  .next(parallel\n    .branch(step7.next(step8))\n    .branch(step9.next(step10)))\n  .next(finish);\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 16,
        "75": 74,
        "104": 14,
        "193": 1,
        "194": 29,
        "196": 14,
        "197": 14,
        "225": 15,
        "226": 1,
        "242": 15,
        "243": 15,
        "282": 1
      },
      "fqnsFingerprint": "fbff9cc40201c78a4eefd13c65f42d95c5469b2d3ffd2d45bf07f324e478f84c"
    },
    "4f94de47e0e561df30ac2856dc47575b70078fe7640fa3da0123163f78d4ce74": {
      "translations": {
        "python": {
          "source": "step1 = sfn.Pass(self, \"Step1\")\nstep2 = sfn.Pass(self, \"Step2\")\nstep3 = sfn.Pass(self, \"Step3\")\n\ndefinition = sfn.Chain.start(step1).next(step2).next(step3)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\n\nChain definition = Chain.Start(step1).Next(step2).Next(step3);",
          "version": "1"
        },
        "java": {
          "source": "Pass step1 = new Pass(this, \"Step1\");\nPass step2 = new Pass(this, \"Step2\");\nPass step3 = new Pass(this, \"Step3\");\n\nChain definition = Chain.start(step1).next(step2).next(step3);",
          "version": "1"
        },
        "$": {
          "source": "const step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\n\nconst definition = sfn.Chain\n  .start(step1)\n  .next(step2)\n  .next(step3)\n  // ...",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 456
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst step1 = new sfn.Pass(this, 'Step1');\nconst step2 = new sfn.Pass(this, 'Step2');\nconst step3 = new sfn.Pass(this, 'Step3');\n\nconst definition = sfn.Chain\n  .start(step1)\n  .next(step2)\n  .next(step3)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 3,
        "194": 7,
        "196": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4
      },
      "fqnsFingerprint": "63026dcd94199c33e22bbf4522477abd3ab5c4c54aee3e5513843b6320f9d8d8"
    },
    "5c623e3872540e293ebb4dbe73ad5ba6ecbbdd9442f34310830ef9ad9706e1b2": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Construct, Stack\nimport aws_cdk.aws_stepfunctions as sfn\nimport aws_cdk.aws_stepfunctions_tasks as tasks\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        Choice choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Construct;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 487
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain#endStates",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#afterwards",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
      "syntaxKindCounter": {
        "10": 17,
        "62": 2,
        "75": 64,
        "102": 2,
        "104": 9,
        "119": 2,
        "138": 2,
        "143": 3,
        "153": 2,
        "156": 5,
        "158": 1,
        "159": 2,
        "162": 2,
        "169": 5,
        "174": 1,
        "193": 3,
        "194": 21,
        "196": 13,
        "197": 7,
        "209": 2,
        "216": 2,
        "223": 2,
        "225": 1,
        "226": 5,
        "242": 1,
        "243": 1,
        "245": 2,
        "246": 1,
        "254": 3,
        "255": 3,
        "256": 2,
        "257": 1,
        "258": 2,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8bfe289f8a92181835f471ae7310f7b653995fac6285ad3ddb32441378216beb"
    },
    "b935d978138e9a99fb6a73b910ade83dd33bd6e7d9aea06fffc647fa8a372dfa": {
      "translations": {
        "python": {
          "source": "activity = sfn.Activity(self, \"Activity\")\n\n# Read this CloudFormation Output from your application and use it to poll for work on\n# the activity.\nCfnOutput(self, \"ActivityArn\", value=activity.activity_arn)",
          "version": "1"
        },
        "csharp": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, \"ActivityArn\", new CfnOutputProps { Value = activity.ActivityArn });",
          "version": "1"
        },
        "java": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nCfnOutput.Builder.create(this, \"ActivityArn\").value(activity.getActivityArn()).build();",
          "version": "1"
        },
        "$": {
          "source": "const activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 541
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.Activity#activityArn",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "faefc4c795f91f22a87fa87af062217528eb8476507853ed62061de6acd2a0cd"
    },
    "f7e11e96e15862db03b4aee794e84c4c382a0b9f775e9a08a4a78271b530a49c": {
      "translations": {
        "python": {
          "source": "activity = sfn.Activity(self, \"Activity\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\n\nactivity.grant(role, \"states:SendTaskSuccess\")",
          "version": "1"
        },
        "csharp": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\n\nactivity.Grant(role, \"states:SendTaskSuccess\");",
          "version": "1"
        },
        "java": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\n\nactivity.grant(role, \"states:SendTaskSuccess\");",
          "version": "1"
        },
        "$": {
          "source": "const activity = new sfn.Activity(this, 'Activity');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\nactivity.grant(role, 'states:SendTaskSuccess');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 553
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.Activity#grant"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\nactivity.grant(role, 'states:SendTaskSuccess');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "375fc5b74089ffc699031a0c0523fb70da2c86e09974b0e45bcc67fae6d47941"
    },
    "d97a84fa1cdb61ea017948bb1d7b915732e4702365f1a8f3f98d7040429806b4": {
      "translations": {
        "python": {
          "source": "# task is of type Task\n\ncloudwatch.Alarm(self, \"TaskAlarm\",\n    metric=task.metric_failed(),\n    threshold=1,\n    evaluation_periods=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Task task;\n\nnew Alarm(this, \"TaskAlarm\", new AlarmProps {\n    Metric = task.MetricFailed(),\n    Threshold = 1,\n    EvaluationPeriods = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "Task task;\n\nAlarm.Builder.create(this, \"TaskAlarm\")\n        .metric(task.metricFailed())\n        .threshold(1)\n        .evaluationPeriods(1)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const task: sfn.Task;\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n  metric: task.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 570
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-stepfunctions.Task#metricFailed"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const task: sfn.Task;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n  metric: task.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "4d347b1d8d317d532fd957cd86829ad831169baabd9800f5f5434126be3c8555"
    },
    "887b09300f4b75043173c6b8a4abfb456644a0f39ebb6413243c039c869fd0b6": {
      "translations": {
        "python": {
          "source": "# state_machine is of type StateMachine\n\ncloudwatch.Alarm(self, \"StateMachineAlarm\",\n    metric=state_machine.metric_failed(),\n    threshold=1,\n    evaluation_periods=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "StateMachine stateMachine;\n\nnew Alarm(this, \"StateMachineAlarm\", new AlarmProps {\n    Metric = stateMachine.MetricFailed(),\n    Threshold = 1,\n    EvaluationPeriods = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine;\n\nAlarm.Builder.create(this, \"StateMachineAlarm\")\n        .metric(stateMachine.metricFailed())\n        .threshold(1)\n        .evaluationPeriods(1)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const stateMachine: sfn.StateMachine;\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n  metric: stateMachine.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 581
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const stateMachine: sfn.StateMachine;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n  metric: stateMachine.metricFailed(),\n  threshold: 1,\n  evaluationPeriods: 1,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a4624a58a12ede4e3d223f0c432bca962cd75f58d6b4a48194bdcfe72d531811"
    },
    "fd9f8138ad6aa3aa123a574ef4d936018033cbe4149bf34b311308a938209704": {
      "translations": {
        "python": {
          "source": "cloudwatch.Alarm(self, \"ThrottledAlarm\",\n    metric=sfn.StateTransitionMetric.metric_throttled_events(),\n    threshold=10,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Alarm(this, \"ThrottledAlarm\", new AlarmProps {\n    Metric = StateTransitionMetric.MetricThrottledEvents(),\n    Threshold = 10,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm.Builder.create(this, \"ThrottledAlarm\")\n        .metric(StateTransitionMetric.metricThrottledEvents())\n        .threshold(10)\n        .evaluationPeriods(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 592
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-stepfunctions.StateTransitionMetric",
        "@aws-cdk/aws-stepfunctions.StateTransitionMetric#metricThrottledEvents"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "c8fc11ffa0b1cdb4b234e42b671708345b5e3c2911a9add01a7cd51198e86b00"
    },
    "eb729d4bac2d83a91384b64fdd3fb67ea6dec22375993c67bbbb2031f08ae9e8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 621
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.LogLevel",
        "@aws-cdk/aws-stepfunctions.LogLevel#ALL",
        "@aws-cdk/aws-stepfunctions.LogOptions",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "30bdd213a3c8b3c2a34702d1254681900824b7b4cfdeb545ece69325f915ccf3"
    },
    "21109a748e6f7b98ba4f415b4b24bcb357671f00b731eccac26803669172508e": {
      "translations": {
        "python": {
          "source": "sfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    tracing_enabled=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    TracingEnabled = true\n});",
          "version": "1"
        },
        "java": {
          "source": "StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .tracingEnabled(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  tracingEnabled: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 639
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  tracingEnabled: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "106": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "5faada6232bf74412cbd029b52729719d4ee1ae20f7d838172c8c907e003c1f3"
    },
    "06188f104789e85511682559743862ca211781c4ba8e1ee601104a79fa36d852": {
      "translations": {
        "python": {
          "source": "# definition is of type IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role permission to start execution of state machine\nstate_machine.grant_start_execution(role)",
          "version": "1"
        },
        "csharp": {
          "source": "IChainable definition;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role permission to start execution of state machine\nstateMachine.GrantStartExecution(role);",
          "version": "1"
        },
        "java": {
          "source": "IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 665
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to start execution of state machine\nstateMachine.grantStartExecution(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "43bf0f0d8e5f185ea1253d5201160e030d6e9aae36999acaaa5fa7917879be99"
    },
    "cae53105e6e37074392426e6236e3e1d95c05662b4359199f244c1ac6082cf78": {
      "translations": {
        "python": {
          "source": "# definition is of type IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role read access to state machine\nstate_machine.grant_read(role)",
          "version": "1"
        },
        "csharp": {
          "source": "IChainable definition;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role read access to state machine\nstateMachine.GrantRead(role);",
          "version": "1"
        },
        "java": {
          "source": "IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role read access to state machine\nstateMachine.grantRead(role);",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role read access to state machine\nstateMachine.grantRead(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 687
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role read access to state machine\nstateMachine.grantRead(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "43bf0f0d8e5f185ea1253d5201160e030d6e9aae36999acaaa5fa7917879be99"
    },
    "2a3f3d0a242ba776a3d14d3743593b8c3f32f27ba8cd2b4d59b44275d8d73911": {
      "translations": {
        "python": {
          "source": "# definition is of type IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role task response permissions to the state machine\nstate_machine.grant_task_response(role)",
          "version": "1"
        },
        "csharp": {
          "source": "IChainable definition;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role task response permissions to the state machine\nstateMachine.GrantTaskResponse(role);",
          "version": "1"
        },
        "java": {
          "source": "IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 716
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role task response permissions to the state machine\nstateMachine.grantTaskResponse(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "43bf0f0d8e5f185ea1253d5201160e030d6e9aae36999acaaa5fa7917879be99"
    },
    "8a4d57b553060b5a9f71018cb331018bf696c6aa6eb0f479f8d0f44fd1730b3c": {
      "translations": {
        "python": {
          "source": "# definition is of type IChainable\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# Give role permission to get execution history of ALL executions for the state machine\nstate_machine.grant_execution(role, \"states:GetExecutionHistory\")",
          "version": "1"
        },
        "csharp": {
          "source": "IChainable definition;\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.GrantExecution(role, \"states:GetExecutionHistory\");",
          "version": "1"
        },
        "java": {
          "source": "IChainable definition;\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, \"states:GetExecutionHistory\");",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, 'states:GetExecutionHistory');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 740
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n// Give role permission to get execution history of ALL executions for the state machine\nstateMachine.grantExecution(role, 'states:GetExecutionHistory');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "43bf0f0d8e5f185ea1253d5201160e030d6e9aae36999acaaa5fa7917879be99"
    },
    "4c095d485ca2a81dc944e46efd75f89cc1dd77829d71c80ea181c694ba93509a": {
      "translations": {
        "python": {
          "source": "# definition is of type IChainable\nuser = iam.User(self, \"MyUser\")\nstate_machine = sfn.StateMachine(self, \"StateMachine\",\n    definition=definition\n)\n\n# give user permission to send task success to the state machine\nstate_machine.grant(user, \"states:SendTaskSuccess\")",
          "version": "1"
        },
        "csharp": {
          "source": "IChainable definition;\nUser user = new User(this, \"MyUser\");\nStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition\n});\n\n//give user permission to send task success to the state machine\nstateMachine.Grant(user, \"states:SendTaskSuccess\");",
          "version": "1"
        },
        "java": {
          "source": "IChainable definition;\nUser user = new User(this, \"MyUser\");\nStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .build();\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, \"states:SendTaskSuccess\");",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'MyUser');\n\ndeclare const definition: sfn.IChainable;\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, 'states:SendTaskSuccess');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 758
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const definition: sfn.IChainable;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser');\nconst stateMachine = new sfn.StateMachine(this, 'StateMachine', {\n  definition,\n});\n\n//give user permission to send task success to the state machine\nstateMachine.grant(user, 'states:SendTaskSuccess');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "778f6f7cd77480a3b281b8f37098b67a35f3a761c0395b7590ddefb33ad3cb2f"
    },
    "337d476c24f4d100e73ad2a2a96fa5ab28050626f6591369081e9b744b76fa9f": {
      "translations": {
        "python": {
          "source": "app = App()\nstack = Stack(app, \"MyStack\")\nsfn.StateMachine.from_state_machine_arn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\")",
          "version": "1"
        },
        "csharp": {
          "source": "App app = new App();\nStack stack = new Stack(app, \"MyStack\");\nStateMachine.FromStateMachineArn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\");",
          "version": "1"
        },
        "java": {
          "source": "App app = new App();\nStack stack = new Stack(app, \"MyStack\");\nStateMachine.fromStateMachineArn(stack, \"ImportedStateMachine\", \"arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ\");",
          "version": "1"
        },
        "$": {
          "source": "const app = new App();\nconst stack = new Stack(app, 'MyStack');\nsfn.StateMachine.fromStateMachineArn(\n  stack,\n  'ImportedStateMachine',\n  'arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-stepfunctions"
        },
        "field": {
          "field": "markdown",
          "line": 777
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst app = new App();\nconst stack = new Stack(app, 'MyStack');\nsfn.StateMachine.fromStateMachineArn(\n  stack,\n  'ImportedStateMachine',\n  'arn:aws:states:us-east-1:123456789012:stateMachine:StateMachine2E01A3A5-N5TJppzoevKQ',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "f8244923a21e9e05b59d549160382de35b7fc35b17430148c8362536c505cc55"
    },
    "c57e777037d80fe4924f1a62529c62c42c2fd32d3dea9f34b38c6d1947c30293": {
      "translations": {
        "python": {
          "source": "activity = sfn.Activity(self, \"Activity\")\n\n# Read this CloudFormation Output from your application and use it to poll for work on\n# the activity.\nCfnOutput(self, \"ActivityArn\", value=activity.activity_arn)",
          "version": "1"
        },
        "csharp": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, \"ActivityArn\", new CfnOutputProps { Value = activity.ActivityArn });",
          "version": "1"
        },
        "java": {
          "source": "Activity activity = new Activity(this, \"Activity\");\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nCfnOutput.Builder.create(this, \"ActivityArn\").value(activity.getActivityArn()).build();",
          "version": "1"
        },
        "$": {
          "source": "const activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Activity"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Activity",
        "@aws-cdk/aws-stepfunctions.Activity#activityArn",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst activity = new sfn.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "faefc4c795f91f22a87fa87af062217528eb8476507853ed62061de6acd2a0cd"
    },
    "d4ca2692d50fee5ab98dfc8f79796f759353487958469d6633204481fa873557": {
      "translations": {
        "python": {
          "source": "# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});",
          "version": "1"
        },
        "java": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Chain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 32,
        "104": 4,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "c25e23add18eae8cfa973998350e7d4dda575fdf2bca843abc874621cabd461d"
    },
    "a394961e07993ace84bd792d2e0bbd45940d827768240fb7a8502cbbf188364d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda is of type Function\n# get_status_lambda is of type Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nWait waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nLambdaInvoke getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nFail jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nLambdaInvoke finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nChain definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Choice"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 66,
        "104": 7,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 6,
        "194": 20,
        "196": 10,
        "197": 7,
        "225": 8,
        "226": 1,
        "242": 8,
        "243": 8,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "498f8d65c070ee3ced6829715cf2b39afc012d5c33fba7393022171e32ba9d19"
    },
    "a255fff048570a3dd0f26c7563b391f8994dea78517f61067c8cd09d27bd3ff3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda is of type Function\n# get_status_lambda is of type Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nWait waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nLambdaInvoke getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nFail jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nLambdaInvoke finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nChain definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Condition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 66,
        "104": 7,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 6,
        "194": 20,
        "196": 10,
        "197": 7,
        "225": 8,
        "226": 1,
        "242": 8,
        "243": 8,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "498f8d65c070ee3ced6829715cf2b39afc012d5c33fba7393022171e32ba9d19"
    },
    "9b29578e0e029e05b986dab974592d5ca72ac6d0173d72a5636a41b5a73fb3a1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nTable table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nChain chain = Chain.Start(custom).Next(finalStatus);\n\nStateMachine sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "1"
        },
        "$": {
          "source": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.CustomState"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#tableName",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.CustomState",
        "@aws-cdk/aws-stepfunctions.CustomStateProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 46,
        "100": 1,
        "104": 4,
        "193": 8,
        "194": 12,
        "196": 4,
        "197": 4,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4d254ae18591942a00e50e4f14653ee406d0992a3db4af7b2db77182e93cec0f"
    },
    "0d89d2817146e7a2dd3df36d4091122dbf6a80f607d22360778d18901993c80d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_dynamodb as dynamodb\n\n\n# create a table\ntable = dynamodb.Table(self, \"montable\",\n    partition_key=dynamodb.Attribute(\n        name=\"id\",\n        type=dynamodb.AttributeType.STRING\n    )\n)\n\nfinal_status = sfn.Pass(self, \"final step\")\n\n# States language JSON to put an item into DynamoDB\n# snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nstate_json = {\n    \"Type\": \"Task\",\n    \"Resource\": \"arn:aws:states:::dynamodb:putItem\",\n    \"Parameters\": {\n        \"TableName\": table.table_name,\n        \"Item\": {\n            \"id\": {\n                \"S\": \"MyEntry\"\n            }\n        }\n    },\n    \"ResultPath\": null\n}\n\n# custom state which represents a task to insert data into DynamoDB\ncustom = sfn.CustomState(self, \"my custom task\",\n    state_json=state_json\n)\n\nchain = sfn.Chain.start(custom).next(final_status)\n\nsm = sfn.StateMachine(self, \"StateMachine\",\n    definition=chain,\n    timeout=Duration.seconds(30)\n)\n\n# don't forget permissions. You need to assign them\ntable.grant_write_data(sm)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.DynamoDB;\n\n\n// create a table\nTable table = new Table(this, \"montable\", new TableProps {\n    PartitionKey = new Attribute {\n        Name = \"id\",\n        Type = AttributeType.STRING\n    }\n});\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nIDictionary<string, object> stateJson = new Dictionary<string, object> {\n    { \"Type\", \"Task\" },\n    { \"Resource\", \"arn:aws:states:::dynamodb:putItem\" },\n    { \"Parameters\", new Dictionary<string, object> {\n        { \"TableName\", table.TableName },\n        { \"Item\", new Dictionary<string, IDictionary<string, string>> {\n            { \"id\", new Dictionary<string, string> {\n                { \"S\", \"MyEntry\" }\n            } }\n        } }\n    } },\n    { \"ResultPath\", null }\n};\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = new CustomState(this, \"my custom task\", new CustomStateProps {\n    StateJson = stateJson\n});\n\nChain chain = Chain.Start(custom).Next(finalStatus);\n\nStateMachine sm = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = chain,\n    Timeout = Duration.Seconds(30)\n});\n\n// don't forget permissions. You need to assign them\ntable.GrantWriteData(sm);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.dynamodb.*;\n\n\n// create a table\nTable table = Table.Builder.create(this, \"montable\")\n        .partitionKey(Attribute.builder()\n                .name(\"id\")\n                .type(AttributeType.STRING)\n                .build())\n        .build();\n\nPass finalStatus = new Pass(this, \"final step\");\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nMap<String, Object> stateJson = Map.of(\n        \"Type\", \"Task\",\n        \"Resource\", \"arn:aws:states:::dynamodb:putItem\",\n        \"Parameters\", Map.of(\n                \"TableName\", table.getTableName(),\n                \"Item\", Map.of(\n                        \"id\", Map.of(\n                                \"S\", \"MyEntry\"))),\n        \"ResultPath\", null);\n\n// custom state which represents a task to insert data into DynamoDB\nCustomState custom = CustomState.Builder.create(this, \"my custom task\")\n        .stateJson(stateJson)\n        .build();\n\nChain chain = Chain.start(custom).next(finalStatus);\n\nStateMachine sm = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(chain)\n        .timeout(Duration.seconds(30))\n        .build();\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "1"
        },
        "$": {
          "source": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.CustomStateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#tableName",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.CustomState",
        "@aws-cdk/aws-stepfunctions.CustomStateProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a table\nconst table = new dynamodb.Table(this, 'montable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst finalStatus = new sfn.Pass(this, 'final step');\n\n// States language JSON to put an item into DynamoDB\n// snippet generated from https://docs.aws.amazon.com/step-functions/latest/dg/tutorial-code-snippet.html#tutorial-code-snippet-1\nconst stateJson = {\n  Type: 'Task',\n  Resource: 'arn:aws:states:::dynamodb:putItem',\n  Parameters: {\n    TableName: table.tableName,\n    Item: {\n      id: {\n        S: 'MyEntry',\n      },\n    },\n  },\n  ResultPath: null,\n};\n\n// custom state which represents a task to insert data into DynamoDB\nconst custom = new sfn.CustomState(this, 'my custom task', {\n  stateJson,\n});\n\nconst chain = sfn.Chain.start(custom)\n  .next(finalStatus);\n\nconst sm = new sfn.StateMachine(this, 'StateMachine', {\n  definition: chain,\n  timeout: Duration.seconds(30),\n});\n\n// don't forget permissions. You need to assign them\ntable.grantWriteData(sm);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 46,
        "100": 1,
        "104": 4,
        "193": 8,
        "194": 12,
        "196": 4,
        "197": 4,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4d254ae18591942a00e50e4f14653ee406d0992a3db4af7b2db77182e93cec0f"
    },
    "a3a3ab2a65fec7ea762e78cfb44d5388a69ee4eca3156ca3a9bd7bb25ccc3ff4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda is of type Function\n# get_status_lambda is of type Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nWait waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nLambdaInvoke getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nFail jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nLambdaInvoke finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nChain definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Fail"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 66,
        "104": 7,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 6,
        "194": 20,
        "196": 10,
        "197": 7,
        "225": 8,
        "226": 1,
        "242": 8,
        "243": 8,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "498f8d65c070ee3ced6829715cf2b39afc012d5c33fba7393022171e32ba9d19"
    },
    "b00932f61693a3a0e23c8a8a0f44bb9579420dae050fcb5a728dd8990bfa4bc8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# submit_lambda is of type Function\n# get_status_lambda is of type Function\n\n\nsubmit_job = tasks.LambdaInvoke(self, \"Submit Job\",\n    lambda_function=submit_lambda,\n    # Lambda's result is in the attribute `Payload`\n    output_path=\"$.Payload\"\n)\n\nwait_x = sfn.Wait(self, \"Wait X Seconds\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nget_status = tasks.LambdaInvoke(self, \"Get Job Status\",\n    lambda_function=get_status_lambda,\n    # Pass just the field named \"guid\" into the Lambda, put the\n    # Lambda's result in a field called \"status\" in the response\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\njob_failed = sfn.Fail(self, \"Job Failed\",\n    cause=\"AWS Batch Job Failed\",\n    error=\"DescribeJob returned FAILED\"\n)\n\nfinal_status = tasks.LambdaInvoke(self, \"Get Final Job Status\",\n    lambda_function=get_status_lambda,\n    # Use \"guid\" field as input\n    input_path=\"$.guid\",\n    output_path=\"$.Payload\"\n)\n\ndefinition = submit_job.next(wait_x).next(get_status).next(sfn.Choice(self, \"Job Complete?\").when(sfn.Condition.string_equals(\"$.status\", \"FAILED\"), job_failed).when(sfn.Condition.string_equals(\"$.status\", \"SUCCEEDED\"), final_status).otherwise(wait_x))\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=definition,\n    timeout=Duration.minutes(5)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = new LambdaInvoke(this, \"Submit Job\", new LambdaInvokeProps {\n    LambdaFunction = submitLambda,\n    // Lambda's result is in the attribute `Payload`\n    OutputPath = \"$.Payload\"\n});\n\nWait waitX = new Wait(this, \"Wait X Seconds\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nLambdaInvoke getStatus = new LambdaInvoke(this, \"Get Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\" in the response\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nFail jobFailed = new Fail(this, \"Job Failed\", new FailProps {\n    Cause = \"AWS Batch Job Failed\",\n    Error = \"DescribeJob returned FAILED\"\n});\n\nLambdaInvoke finalStatus = new LambdaInvoke(this, \"Get Final Job Status\", new LambdaInvokeProps {\n    LambdaFunction = getStatusLambda,\n    // Use \"guid\" field as input\n    InputPath = \"$.guid\",\n    OutputPath = \"$.Payload\"\n});\n\nChain definition = submitJob.Next(waitX).Next(getStatus).Next(new Choice(this, \"Job Complete?\").When(Condition.StringEquals(\"$.status\", \"FAILED\"), jobFailed).When(Condition.StringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).Otherwise(waitX));\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = definition,\n    Timeout = Duration.Minutes(5)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction submitLambda;\nFunction getStatusLambda;\n\n\nLambdaInvoke submitJob = LambdaInvoke.Builder.create(this, \"Submit Job\")\n        .lambdaFunction(submitLambda)\n        // Lambda's result is in the attribute `Payload`\n        .outputPath(\"$.Payload\")\n        .build();\n\nWait waitX = Wait.Builder.create(this, \"Wait X Seconds\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nLambdaInvoke getStatus = LambdaInvoke.Builder.create(this, \"Get Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Pass just the field named \"guid\" into the Lambda, put the\n        // Lambda's result in a field called \"status\" in the response\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nFail jobFailed = Fail.Builder.create(this, \"Job Failed\")\n        .cause(\"AWS Batch Job Failed\")\n        .error(\"DescribeJob returned FAILED\")\n        .build();\n\nLambdaInvoke finalStatus = LambdaInvoke.Builder.create(this, \"Get Final Job Status\")\n        .lambdaFunction(getStatusLambda)\n        // Use \"guid\" field as input\n        .inputPath(\"$.guid\")\n        .outputPath(\"$.Payload\")\n        .build();\n\nChain definition = submitJob.next(waitX).next(getStatus).next(new Choice(this, \"Job Complete?\").when(Condition.stringEquals(\"$.status\", \"FAILED\"), jobFailed).when(Condition.stringEquals(\"$.status\", \"SUCCEEDED\"), finalStatus).otherwise(waitX));\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(definition)\n        .timeout(Duration.minutes(5))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.FailProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.Fail",
        "@aws-cdk/aws-stepfunctions.FailProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const submitLambda: lambda.Function;\ndeclare const getStatusLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst submitJob = new tasks.LambdaInvoke(this, 'Submit Job', {\n  lambdaFunction: submitLambda,\n  // Lambda's result is in the attribute `Payload`\n  outputPath: '$.Payload',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nconst getStatus = new tasks.LambdaInvoke(this, 'Get Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Pass just the field named \"guid\" into the Lambda, put the\n  // Lambda's result in a field called \"status\" in the response\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n  cause: 'AWS Batch Job Failed',\n  error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new tasks.LambdaInvoke(this, 'Get Final Job Status', {\n  lambdaFunction: getStatusLambda,\n  // Use \"guid\" field as input\n  inputPath: '$.guid',\n  outputPath: '$.Payload',\n});\n\nconst definition = submitJob\n  .next(waitX)\n  .next(getStatus)\n  .next(new sfn.Choice(this, 'Job Complete?')\n    // Look at the \"status\" field\n    .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n    .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n    .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition,\n  timeout: Duration.minutes(5),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 20,
        "75": 66,
        "104": 7,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 6,
        "194": 20,
        "196": 10,
        "197": 7,
        "225": 8,
        "226": 1,
        "242": 8,
        "243": 8,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "498f8d65c070ee3ced6829715cf2b39afc012d5c33fba7393022171e32ba9d19"
    },
    "66e705fadf94407eb69cae551815bdff79d32b4703ad8e4e08a0c7dfd15d1bfb": {
      "translations": {
        "python": {
          "source": "# Define a state machine with one Pass state\nchild = sfn.StateMachine(self, \"ChildStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"PassState\"))\n)\n\n# Include the state machine in a Task state with callback pattern\ntask = tasks.StepFunctionsStartExecution(self, \"ChildTask\",\n    state_machine=child,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"foo\": \"bar\"\n    }),\n    name=\"MyExecutionName\"\n)\n\n# Define a second state machine with the Task state above\nsfn.StateMachine(self, \"ParentStateMachine\",\n    definition=task\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = new StateMachine(this, \"ChildStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"PassState\"))\n});\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = new StepFunctionsStartExecution(this, \"ChildTask\", new StepFunctionsStartExecutionProps {\n    StateMachine = child,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Input = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"foo\", \"bar\" }\n    }),\n    Name = \"MyExecutionName\"\n});\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nnew StateMachine(this, \"ParentStateMachine\", new StateMachineProps {\n    Definition = task\n});",
          "version": "1"
        },
        "java": {
          "source": "// Define a state machine with one Pass state\nStateMachine child = StateMachine.Builder.create(this, \"ChildStateMachine\")\n        .definition(Chain.start(new Pass(this, \"PassState\")))\n        .build();\n\n// Include the state machine in a Task state with callback pattern\nStepFunctionsStartExecution task = StepFunctionsStartExecution.Builder.create(this, \"ChildTask\")\n        .stateMachine(child)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .input(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"foo\", \"bar\")))\n        .name(\"MyExecutionName\")\n        .build();\n\n// Define a second state machine with the Task state above\n// Define a second state machine with the Task state above\nStateMachine.Builder.create(this, \"ParentStateMachine\")\n        .definition(task)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.IntegrationPattern"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecution",
        "@aws-cdk/aws-stepfunctions-tasks.StepFunctionsStartExecutionProps",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(this, 'ChildStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new tasks.StepFunctionsStartExecution(this, 'ChildTask', {\n  stateMachine: child,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  input: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    foo: 'bar',\n  }),\n  name: 'MyExecutionName',\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(this, 'ParentStateMachine', {\n  definition: task,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 32,
        "104": 4,
        "193": 4,
        "194": 12,
        "196": 2,
        "197": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "c25e23add18eae8cfa973998350e7d4dda575fdf2bca843abc874621cabd461d"
    },
    "b23ff05f5c3301345c225a10f976eef5f92ec39b1a2982d09a15ddf662be18ed": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\ntasks.LambdaInvoke(self, \"Invoke Handler\",\n    lambda_function=fn,\n    result_selector={\n        \"lambda_output\": sfn.JsonPath.string_at(\"$.Payload\"),\n        \"invoke_request_id\": sfn.JsonPath.string_at(\"$.SdkResponseMetadata.RequestId\"),\n        \"static_value\": {\n            \"foo\": \"bar\"\n        },\n        \"state_name\": sfn.JsonPath.string_at(\"$.State.Name\")\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke Handler\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    ResultSelector = new Dictionary<string, object> {\n        { \"lambdaOutput\", JsonPath.StringAt(\"$.Payload\") },\n        { \"invokeRequestId\", JsonPath.StringAt(\"$.SdkResponseMetadata.RequestId\") },\n        { \"staticValue\", new Dictionary<string, string> {\n            { \"foo\", \"bar\" }\n        } },\n        { \"stateName\", JsonPath.StringAt(\"$.State.Name\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke Handler\")\n        .lambdaFunction(fn)\n        .resultSelector(Map.of(\n                \"lambdaOutput\", JsonPath.stringAt(\"$.Payload\"),\n                \"invokeRequestId\", JsonPath.stringAt(\"$.SdkResponseMetadata.RequestId\"),\n                \"staticValue\", Map.of(\n                        \"foo\", \"bar\"),\n                \"stateName\", JsonPath.stringAt(\"$.State.Name\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$$.State.Name'),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.JsonPath"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke Handler', {\n  lambdaFunction: fn,\n  resultSelector: {\n    lambdaOutput: sfn.JsonPath.stringAt('$.Payload'),\n    invokeRequestId: sfn.JsonPath.stringAt('$.SdkResponseMetadata.RequestId'),\n    staticValue: {\n      foo: 'bar',\n    },\n    stateName: sfn.JsonPath.stringAt('$.State.Name'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 22,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "0efe11037f6150a18e65eb155964cd52070c8dc7ee04bfe89b15c1ca313c432e"
    },
    "2babee09883620acaa87c436f7782e033f3d206a2f5af4f82ca0576fee211863": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.LogLevel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.LogLevel",
        "@aws-cdk/aws-stepfunctions.LogLevel#ALL",
        "@aws-cdk/aws-stepfunctions.LogOptions",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "30bdd213a3c8b3c2a34702d1254681900824b7b4cfdeb545ece69325f915ccf3"
    },
    "5c5a9c96fb86cb28387a6399d8a17d73de1c421f97dc739830efe139a76313b5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\")\n\nsfn.StateMachine(self, \"MyStateMachine\",\n    definition=sfn.Chain.start(sfn.Pass(self, \"Pass\")),\n    logs=sfn.LogOptions(\n        destination=log_group,\n        level=sfn.LogLevel.ALL\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nnew StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\")),\n    Logs = new LogOptions {\n        Destination = logGroup,\n        Level = LogLevel.ALL\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\");\n\nStateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .logs(LogOptions.builder()\n                .destination(logGroup)\n                .level(LogLevel.ALL)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.LogOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.LogLevel",
        "@aws-cdk/aws-stepfunctions.LogLevel#ALL",
        "@aws-cdk/aws-stepfunctions.LogOptions",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup');\n\nnew sfn.StateMachine(this, 'MyStateMachine', {\n  definition: sfn.Chain.start(new sfn.Pass(this, 'Pass')),\n  logs: {\n    destination: logGroup,\n    level: sfn.LogLevel.ALL,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 3,
        "193": 2,
        "194": 7,
        "196": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "30bdd213a3c8b3c2a34702d1254681900824b7b4cfdeb545ece69325f915ccf3"
    },
    "a8a50c0853214999efe2a589b3ea3488993c9ecb5b04054d8579f2d5d3df3953": {
      "translations": {
        "python": {
          "source": "map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Map map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "java": {
          "source": "Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "$": {
          "source": "const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Map"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.Map",
        "@aws-cdk/aws-stepfunctions.Map#iterator",
        "@aws-cdk/aws-stepfunctions.MapProps",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3190831da8aa577cf3a1aa3180dea5d0ce4c34b988f3955552f7f0a3ac4a0ab8"
    },
    "5c1d1e08f495f4a0a23eb51d73d9e23cc61872f66a6ed1bb60305c26695929bd": {
      "translations": {
        "python": {
          "source": "map = sfn.Map(self, \"Map State\",\n    max_concurrency=1,\n    items_path=sfn.JsonPath.string_at(\"$.inputForMap\")\n)\nmap.iterator(sfn.Pass(self, \"Pass State\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Map map = new Map(this, \"Map State\", new MapProps {\n    MaxConcurrency = 1,\n    ItemsPath = JsonPath.StringAt(\"$.inputForMap\")\n});\nmap.Iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "java": {
          "source": "Map map = Map.Builder.create(this, \"Map State\")\n        .maxConcurrency(1)\n        .itemsPath(JsonPath.stringAt(\"$.inputForMap\"))\n        .build();\nmap.iterator(new Pass(this, \"Pass State\"));",
          "version": "1"
        },
        "$": {
          "source": "const map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.MapProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.Map",
        "@aws-cdk/aws-stepfunctions.Map#iterator",
        "@aws-cdk/aws-stepfunctions.MapProps",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst map = new sfn.Map(this, 'Map State', {\n  maxConcurrency: 1,\n  itemsPath: sfn.JsonPath.stringAt('$.inputForMap'),\n});\nmap.iterator(new sfn.Pass(this, 'Pass State'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "3190831da8aa577cf3a1aa3180dea5d0ce4c34b988f3955552f7f0a3ac4a0ab8"
    },
    "1b14137999cf97ff836a15699bb58123367415123ea640d52f886d8ca516a228": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Construct, Stack\nimport aws_cdk.aws_stepfunctions as sfn\nimport aws_cdk.aws_stepfunctions_tasks as tasks\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        Choice choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Construct;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain#endStates",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#afterwards",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
      "syntaxKindCounter": {
        "10": 17,
        "62": 2,
        "75": 64,
        "102": 2,
        "104": 9,
        "119": 2,
        "138": 2,
        "143": 3,
        "153": 2,
        "156": 5,
        "158": 1,
        "159": 2,
        "162": 2,
        "169": 5,
        "174": 1,
        "193": 3,
        "194": 21,
        "196": 13,
        "197": 7,
        "209": 2,
        "216": 2,
        "223": 2,
        "225": 1,
        "226": 5,
        "242": 1,
        "243": 1,
        "245": 2,
        "246": 1,
        "254": 3,
        "255": 3,
        "256": 2,
        "257": 1,
        "258": 2,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8bfe289f8a92181835f471ae7310f7b653995fac6285ad3ddb32441378216beb"
    },
    "84bef338f74cc53afa2735f2628e390dadd09023dc4f65511fab2563ecd74960": {
      "translations": {
        "python": {
          "source": "choice = sfn.Choice(self, \"Did it work?\")\n\n# Add conditions with .when()\nsuccess_state = sfn.Pass(self, \"SuccessState\")\nfailure_state = sfn.Pass(self, \"FailureState\")\nchoice.when(sfn.Condition.string_equals(\"$.status\", \"SUCCESS\"), success_state)\nchoice.when(sfn.Condition.number_greater_than(\"$.attempts\", 5), failure_state)\n\n# Use .otherwise() to indicate what should be done if none of the conditions match\ntry_again_state = sfn.Pass(self, \"TryAgainState\")\nchoice.otherwise(try_again_state)",
          "version": "1"
        },
        "csharp": {
          "source": "Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.When(Condition.StringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.When(Condition.NumberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.Otherwise(tryAgainState);",
          "version": "1"
        },
        "java": {
          "source": "Choice choice = new Choice(this, \"Did it work?\");\n\n// Add conditions with .when()\nPass successState = new Pass(this, \"SuccessState\");\nPass failureState = new Pass(this, \"FailureState\");\nchoice.when(Condition.stringEquals(\"$.status\", \"SUCCESS\"), successState);\nchoice.when(Condition.numberGreaterThan(\"$.attempts\", 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nPass tryAgainState = new Pass(this, \"TryAgainState\");\nchoice.otherwise(tryAgainState);",
          "version": "1"
        },
        "$": {
          "source": "const choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Pass"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#otherwise",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#numberGreaterThan",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst choice = new sfn.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nconst successState = new sfn.Pass(this, 'SuccessState');\nconst failureState = new sfn.Pass(this, 'FailureState');\nchoice.when(sfn.Condition.stringEquals('$.status', 'SUCCESS'), successState);\nchoice.when(sfn.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nconst tryAgainState = new sfn.Pass(this, 'TryAgainState');\nchoice.otherwise(tryAgainState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 27,
        "104": 4,
        "194": 11,
        "196": 5,
        "197": 4,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4
      },
      "fqnsFingerprint": "4874dd68056b2aa6d0a65ed00e763ec37b38010d082b456c6289db4522d236ae"
    },
    "761b93ebda88570e8158a3b622f43be62250e6e713e9f1950efc8362899d5648": {
      "translations": {
        "python": {
          "source": "# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)",
          "version": "1"
        },
        "csharp": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.Next(nextState);",
          "version": "1"
        },
        "java": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);",
          "version": "1"
        },
        "$": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.PassProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.Pass#next",
        "@aws-cdk/aws-stepfunctions.PassProps",
        "@aws-cdk/aws-stepfunctions.Result",
        "@aws-cdk/aws-stepfunctions.Result#fromObject"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "7e62e46b2373a0217cbda1436523aa5bacebbc594f789519120e343e8a4ae270"
    },
    "ae668996f0a4ade931519b174b563efaddb29ea597eca5ed6c55d3eff65d860f": {
      "translations": {
        "python": {
          "source": "# Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\npass = sfn.Pass(self, \"Add Hello World\",\n    result=sfn.Result.from_object({\"hello\": \"world\"}),\n    result_path=\"$.subObject\"\n)\n\n# Set the next state\nnext_state = sfn.Pass(self, \"NextState\")\npass.next(next_state)",
          "version": "1"
        },
        "csharp": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = new Pass(this, \"Add Hello World\", new PassProps {\n    Result = Result.FromObject(new Dictionary<string, object> { { \"hello\", \"world\" } }),\n    ResultPath = \"$.subObject\"\n});\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.Next(nextState);",
          "version": "1"
        },
        "java": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nPass pass = Pass.Builder.create(this, \"Add Hello World\")\n        .result(Result.fromObject(Map.of(\"hello\", \"world\")))\n        .resultPath(\"$.subObject\")\n        .build();\n\n// Set the next state\nPass nextState = new Pass(this, \"NextState\");\npass.next(nextState);",
          "version": "1"
        },
        "$": {
          "source": "// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Result"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.Pass#next",
        "@aws-cdk/aws-stepfunctions.PassProps",
        "@aws-cdk/aws-stepfunctions.Result",
        "@aws-cdk/aws-stepfunctions.Result#fromObject"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new sfn.Pass(this, 'Add Hello World', {\n  result: sfn.Result.fromObject({ hello: 'world' }),\n  resultPath: '$.subObject',\n});\n\n// Set the next state\nconst nextState = new sfn.Pass(this, 'NextState');\npass.next(nextState);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "7e62e46b2373a0217cbda1436523aa5bacebbc594f789519120e343e8a4ae270"
    },
    "ffeda94a617cdf7cead45923fcd48e1fca65511fa20c23e9ce80c7eafcd4ed7f": {
      "translations": {
        "python": {
          "source": "parallel = sfn.Parallel(self, \"Do the work in parallel\")\n\n# Add branches to be executed in parallel\nship_item = sfn.Pass(self, \"ShipItem\")\nsend_invoice = sfn.Pass(self, \"SendInvoice\")\nrestock = sfn.Pass(self, \"Restock\")\nparallel.branch(ship_item)\nparallel.branch(send_invoice)\nparallel.branch(restock)\n\n# Retry the whole workflow if something goes wrong\nparallel.add_retry(max_attempts=1)\n\n# How to recover from errors\nsend_failure_notification = sfn.Pass(self, \"SendFailureNotification\")\nparallel.add_catch(send_failure_notification)\n\n# What to do in case everything succeeded\nclose_order = sfn.Pass(self, \"CloseOrder\")\nparallel.next(close_order)",
          "version": "1"
        },
        "csharp": {
          "source": "Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.Branch(shipItem);\nparallel.Branch(sendInvoice);\nparallel.Branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.AddRetry(new RetryProps { MaxAttempts = 1 });\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.AddCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.Next(closeOrder);",
          "version": "1"
        },
        "java": {
          "source": "Parallel parallel = new Parallel(this, \"Do the work in parallel\");\n\n// Add branches to be executed in parallel\nPass shipItem = new Pass(this, \"ShipItem\");\nPass sendInvoice = new Pass(this, \"SendInvoice\");\nPass restock = new Pass(this, \"Restock\");\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry(RetryProps.builder().maxAttempts(1).build());\n\n// How to recover from errors\nPass sendFailureNotification = new Pass(this, \"SendFailureNotification\");\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nPass closeOrder = new Pass(this, \"CloseOrder\");\nparallel.next(closeOrder);",
          "version": "1"
        },
        "$": {
          "source": "const parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#addCatch",
        "@aws-cdk/aws-stepfunctions.Parallel#addRetry",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Parallel#next",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.RetryProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parallel = new sfn.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nconst shipItem = new sfn.Pass(this, 'ShipItem');\nconst sendInvoice = new sfn.Pass(this, 'SendInvoice');\nconst restock = new sfn.Pass(this, 'Restock');\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nconst sendFailureNotification = new sfn.Pass(this, 'SendFailureNotification');\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nconst closeOrder = new sfn.Pass(this, 'CloseOrder');\nparallel.next(closeOrder);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 36,
        "104": 6,
        "193": 1,
        "194": 12,
        "196": 6,
        "197": 6,
        "225": 6,
        "226": 6,
        "242": 6,
        "243": 6,
        "281": 1
      },
      "fqnsFingerprint": "9baee2438a1808777a67ae230bc9ffbeae47463a0ea5d2697331d93e576792df"
    },
    "ddce5ed702a2c2120bbc407e52071b29a7b8be689368c0d2528f647493d79436": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.literal({\"IsHelloWorldExample\": True})\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.Literal(new Dictionary<string, boolean> { { \"IsHelloWorldExample\", true } })\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.literal(Map.of(\"IsHelloWorldExample\", true)))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.StateMachine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#literal",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.literal({ IsHelloWorldExample: true }),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "21e5cdd213d87d9799e19ecbafe4260dbef988ee1f5468d2e658535f71606a7e"
    },
    "42d4ca6a488c5cb158c844a24c414cbe4522f11c2c5848d2f2dccd3a2191763c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Construct, Stack\nimport aws_cdk.aws_stepfunctions as sfn\nimport aws_cdk.aws_stepfunctions_tasks as tasks\n\nclass MyJob(sfn.StateMachineFragment):\n\n    def __init__(self, parent, id, *, jobFlavor):\n        super().__init__(parent, id)\n\n        choice = sfn.Choice(self, \"Choice\").when(sfn.Condition.string_equals(\"$.branch\", \"left\"), sfn.Pass(self, \"Left Branch\")).when(sfn.Condition.string_equals(\"$.branch\", \"right\"), sfn.Pass(self, \"Right Branch\"))\n\n        # ...\n\n        self.start_state = choice\n        self.end_states = choice.afterwards().end_states\n\nclass MyStack(Stack):\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        # Do 3 different variants of MyJob in parallel\n        sfn.Parallel(self, \"All jobs\").branch(MyJob(self, \"Quick\", job_flavor=\"quick\").prefix_states()).branch(MyJob(self, \"Medium\", job_flavor=\"medium\").prefix_states()).branch(MyJob(self, \"Slow\", job_flavor=\"slow\").prefix_states())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.StepFunctions;\nusing Amazon.CDK.AWS.StepFunctions.Tasks;\n\nclass MyJobProps\n{\n    public string JobFlavor { get; set; }\n}\n\nclass MyJob : StateMachineFragment\n{\n    public State StartState { get; }\n    public INextable[] EndStates { get; }\n\n    public MyJob(Construct parent, string id, MyJobProps props) : base(parent, id)\n    {\n\n        Choice choice = new Choice(this, \"Choice\").When(Condition.StringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).When(Condition.StringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        StartState = choice;\n        EndStates = choice.Afterwards().EndStates;\n    }\n}\n\nclass MyStack : Stack\n{\n    public MyStack(Construct scope, string id) : base(scope, id)\n    {\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").Branch(new MyJob(this, \"Quick\", new MyJobProps { JobFlavor = \"quick\" }).PrefixStates()).Branch(new MyJob(this, \"Medium\", new MyJobProps { JobFlavor = \"medium\" }).PrefixStates()).Branch(new MyJob(this, \"Slow\", new MyJobProps { JobFlavor = \"slow\" }).PrefixStates());\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Construct;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.stepfunctions.*;\nimport software.amazon.awscdk.services.stepfunctions.tasks.*;\n\npublic class MyJobProps {\n    private String jobFlavor;\n    public String getJobFlavor() {\n        return this.jobFlavor;\n    }\n    public MyJobProps jobFlavor(String jobFlavor) {\n        this.jobFlavor = jobFlavor;\n        return this;\n    }\n}\n\npublic class MyJob extends StateMachineFragment {\n    public final State startState;\n    public final INextable[] endStates;\n\n    public MyJob(Construct parent, String id, MyJobProps props) {\n        super(parent, id);\n\n        Choice choice = new Choice(this, \"Choice\").when(Condition.stringEquals(\"$.branch\", \"left\"), new Pass(this, \"Left Branch\")).when(Condition.stringEquals(\"$.branch\", \"right\"), new Pass(this, \"Right Branch\"));\n\n        // ...\n\n        this.startState = choice;\n        this.endStates = choice.afterwards().getEndStates();\n    }\n}\n\npublic class MyStack extends Stack {\n    public MyStack(Construct scope, String id) {\n        super(scope, id);\n        // Do 3 different variants of MyJob in parallel\n        // Do 3 different variants of MyJob in parallel\n        new Parallel(this, \"All jobs\").branch(new MyJob(this, \"Quick\", new MyJobProps().jobFlavor(\"quick\")).prefixStates()).branch(new MyJob(this, \"Medium\", new MyJobProps().jobFlavor(\"medium\")).prefixStates()).branch(new MyJob(this, \"Slow\", new MyJobProps().jobFlavor(\"slow\")).prefixStates());\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.StateMachineFragment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Chain#endStates",
        "@aws-cdk/aws-stepfunctions.Choice",
        "@aws-cdk/aws-stepfunctions.Choice#afterwards",
        "@aws-cdk/aws-stepfunctions.Choice#when",
        "@aws-cdk/aws-stepfunctions.Condition",
        "@aws-cdk/aws-stepfunctions.Condition#stringEquals",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.Parallel",
        "@aws-cdk/aws-stepfunctions.Parallel#branch",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment",
        "@aws-cdk/aws-stepfunctions.StateMachineFragment#prefixStates",
        "@aws-cdk/core.Construct",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Construct, Stack } from '@aws-cdk/core';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\ninterface MyJobProps {\n  jobFlavor: string;\n}\n\nclass MyJob extends sfn.StateMachineFragment {\n  public readonly startState: sfn.State;\n  public readonly endStates: sfn.INextable[];\n\n  constructor(parent: Construct, id: string, props: MyJobProps) {\n    super(parent, id);\n\n    const choice = new sfn.Choice(this, 'Choice')\n      .when(sfn.Condition.stringEquals('$.branch', 'left'), new sfn.Pass(this, 'Left Branch'))\n      .when(sfn.Condition.stringEquals('$.branch', 'right'), new sfn.Pass(this, 'Right Branch'));\n\n    // ...\n\n    this.startState = choice;\n    this.endStates = choice.afterwards().endStates;\n  }\n}\n\nclass MyStack extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Do 3 different variants of MyJob in parallel\n    new sfn.Parallel(this, 'All jobs')\n      .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n      .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n      .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n  }\n}",
      "syntaxKindCounter": {
        "10": 17,
        "62": 2,
        "75": 64,
        "102": 2,
        "104": 9,
        "119": 2,
        "138": 2,
        "143": 3,
        "153": 2,
        "156": 5,
        "158": 1,
        "159": 2,
        "162": 2,
        "169": 5,
        "174": 1,
        "193": 3,
        "194": 21,
        "196": 13,
        "197": 7,
        "209": 2,
        "216": 2,
        "223": 2,
        "225": 1,
        "226": 5,
        "242": 1,
        "243": 1,
        "245": 2,
        "246": 1,
        "254": 3,
        "255": 3,
        "256": 2,
        "257": 1,
        "258": 2,
        "279": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8bfe289f8a92181835f471ae7310f7b653995fac6285ad3ddb32441378216beb"
    },
    "90b500120a67596323986789db002bae179db9f326dd9f6c020111a07a7780b6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ninput_artifact = codepipeline.Artifact()\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.FilePath(inputArtifact.AtPath(\"assets/input.json\"))\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.filePath(inputArtifact.atPath(\"assets/input.json\")))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.StateMachineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#filePath",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 5,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0fe1c8c7664ea5c1f54e2b01645e650c4459644840f8e37259483fb0d773303c"
    },
    "0d309e596de8b85832f2e3ea487506702d96eb5833abb4e10653ffda38a87ffa": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.StateMachineType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a02c88ccf3998f1830d820178346d518087063ad6908362e2d21fd0e755e69e1"
    },
    "803a63e70232c580bb13a70e4b3dedfc7c13a9d6954eb2e9d9ec98a5f8081b12": {
      "translations": {
        "python": {
          "source": "cloudwatch.Alarm(self, \"ThrottledAlarm\",\n    metric=sfn.StateTransitionMetric.metric_throttled_events(),\n    threshold=10,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Alarm(this, \"ThrottledAlarm\", new AlarmProps {\n    Metric = StateTransitionMetric.MetricThrottledEvents(),\n    Threshold = 10,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm.Builder.create(this, \"ThrottledAlarm\")\n        .metric(StateTransitionMetric.metricThrottledEvents())\n        .threshold(10)\n        .evaluationPeriods(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.StateTransitionMetric"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-stepfunctions.StateTransitionMetric",
        "@aws-cdk/aws-stepfunctions.StateTransitionMetric#metricThrottledEvents"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n  metric: sfn.StateTransitionMetric.metricThrottledEvents(),\n  threshold: 10,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "c8fc11ffa0b1cdb4b234e42b671708345b5e3c2911a9add01a7cd51198e86b00"
    },
    "1258642c2356f96ab2dc36159d651a2c6e87893e3559daca6d12d493fa413d6e": {
      "translations": {
        "python": {
          "source": "success = sfn.Succeed(self, \"We did it!\")",
          "version": "1"
        },
        "csharp": {
          "source": "Succeed success = new Succeed(this, \"We did it!\");",
          "version": "1"
        },
        "java": {
          "source": "Succeed success = new Succeed(this, \"We did it!\");",
          "version": "1"
        },
        "$": {
          "source": "const success = new sfn.Succeed(this, 'We did it!');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Succeed"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-stepfunctions.Succeed"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { App, CfnOutput, Duration, Stack } from '@aws-cdk/core';\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\nimport cloudwatch = require('@aws-cdk/aws-cloudwatch');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst success = new sfn.Succeed(this, 'We did it!');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "8bc0c45f66e10b81fc1817ff367a0cc169d0743fbdde432ba4237e9701f5ad44"
    },
    "a46b16020486ca23fd452eecd456ee685ddd5942d2d57f97be542da6a9073a8d": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\ntasks.LambdaInvoke(self, \"Invoke with callback\",\n    lambda_function=fn,\n    integration_pattern=sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    payload=sfn.TaskInput.from_object({\n        \"token\": sfn.JsonPath.task_token,\n        \"input\": sfn.JsonPath.string_at(\"$.someField\")\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\nnew LambdaInvoke(this, \"Invoke with callback\", new LambdaInvokeProps {\n    LambdaFunction = fn,\n    IntegrationPattern = IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    Payload = TaskInput.FromObject(new Dictionary<string, object> {\n        { \"token\", JsonPath.TaskToken },\n        { \"input\", JsonPath.StringAt(\"$.someField\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\nLambdaInvoke.Builder.create(this, \"Invoke with callback\")\n        .lambdaFunction(fn)\n        .integrationPattern(IntegrationPattern.WAIT_FOR_TASK_TOKEN)\n        .payload(TaskInput.fromObject(Map.of(\n                \"token\", JsonPath.getTaskToken(),\n                \"input\", JsonPath.stringAt(\"$.someField\"))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvoke",
        "@aws-cdk/aws-stepfunctions-tasks.LambdaInvokeProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#WAIT_FOR_TASK_TOKEN",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromObject"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew tasks.LambdaInvoke(this, 'Invoke with callback', {\n  lambdaFunction: fn,\n  integrationPattern: sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  payload: sfn.TaskInput.fromObject({\n    token: sfn.JsonPath.taskToken,\n    input: sfn.JsonPath.stringAt('$.someField'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 23,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ce595484fc04fa0c000be4ff541637cb9d0d118e3fc91fc54451f1dd2cf55f07"
    },
    "96c875fdb1cd103cbca4af1d880e7a44957276efc8208001738f0a4a9217b9f8": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.Wait"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "c146c30ed0548aba38efb628dcd92bb71235c356efb3b404b20c99e36b728537"
    },
    "42cb2d5906acb30b6db3d596a94172e8c2a7524bc6cc593da21039080b335ac2": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.WaitProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "c146c30ed0548aba38efb628dcd92bb71235c356efb3b404b20c99e36b728537"
    },
    "33987d48544a0be8a828c089da3ba36c52676047a95544e80c3303cd45dfbb78": {
      "translations": {
        "python": {
          "source": "convert_to_seconds = tasks.EvaluateExpression(self, \"Convert to seconds\",\n    expression=\"$.waitMilliseconds / 1000\",\n    result_path=\"$.waitSeconds\"\n)\n\ncreate_message = tasks.EvaluateExpression(self, \"Create message\",\n    # Note: this is a string inside a string.\n    expression=\"`Now waiting ${$.waitSeconds} seconds...`\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    result_path=\"$.message\"\n)\n\npublish_message = tasks.SnsPublish(self, \"Publish message\",\n    topic=sns.Topic(self, \"cool-topic\"),\n    message=sfn.TaskInput.from_json_path_at(\"$.message\"),\n    result_path=\"$.sns\"\n)\n\nwait = sfn.Wait(self, \"Wait\",\n    time=sfn.WaitTime.seconds_path(\"$.waitSeconds\")\n)\n\nsfn.StateMachine(self, \"StateMachine\",\n    definition=convert_to_seconds.next(create_message).next(publish_message).next(wait)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EvaluateExpression convertToSeconds = new EvaluateExpression(this, \"Convert to seconds\", new EvaluateExpressionProps {\n    Expression = \"$.waitMilliseconds / 1000\",\n    ResultPath = \"$.waitSeconds\"\n});\n\nEvaluateExpression createMessage = new EvaluateExpression(this, \"Create message\", new EvaluateExpressionProps {\n    // Note: this is a string inside a string.\n    Expression = \"`Now waiting ${$.waitSeconds} seconds...`\",\n    Runtime = Runtime.NODEJS_14_X,\n    ResultPath = \"$.message\"\n});\n\nSnsPublish publishMessage = new SnsPublish(this, \"Publish message\", new SnsPublishProps {\n    Topic = new Topic(this, \"cool-topic\"),\n    Message = TaskInput.FromJsonPathAt(\"$.message\"),\n    ResultPath = \"$.sns\"\n});\n\nWait wait = new Wait(this, \"Wait\", new WaitProps {\n    Time = WaitTime.SecondsPath(\"$.waitSeconds\")\n});\n\nnew StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = convertToSeconds.Next(createMessage).Next(publishMessage).Next(wait)\n});",
          "version": "1"
        },
        "java": {
          "source": "EvaluateExpression convertToSeconds = EvaluateExpression.Builder.create(this, \"Convert to seconds\")\n        .expression(\"$.waitMilliseconds / 1000\")\n        .resultPath(\"$.waitSeconds\")\n        .build();\n\nEvaluateExpression createMessage = EvaluateExpression.Builder.create(this, \"Create message\")\n        // Note: this is a string inside a string.\n        .expression(\"`Now waiting ${$.waitSeconds} seconds...`\")\n        .runtime(Runtime.NODEJS_14_X)\n        .resultPath(\"$.message\")\n        .build();\n\nSnsPublish publishMessage = SnsPublish.Builder.create(this, \"Publish message\")\n        .topic(new Topic(this, \"cool-topic\"))\n        .message(TaskInput.fromJsonPathAt(\"$.message\"))\n        .resultPath(\"$.sns\")\n        .build();\n\nWait wait = Wait.Builder.create(this, \"Wait\")\n        .time(WaitTime.secondsPath(\"$.waitSeconds\"))\n        .build();\n\nStateMachine.Builder.create(this, \"StateMachine\")\n        .definition(convertToSeconds.next(createMessage).next(publishMessage).next(wait))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpression",
        "@aws-cdk/aws-stepfunctions-tasks.EvaluateExpressionProps",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublish",
        "@aws-cdk/aws-stepfunctions-tasks.SnsPublishProps",
        "@aws-cdk/aws-stepfunctions.Chain#next",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.TaskInput",
        "@aws-cdk/aws-stepfunctions.TaskInput#fromJsonPathAt",
        "@aws-cdk/aws-stepfunctions.TaskStateBase#next",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#secondsPath"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst convertToSeconds = new tasks.EvaluateExpression(this, 'Convert to seconds', {\n  expression: '$.waitMilliseconds / 1000',\n  resultPath: '$.waitSeconds',\n});\n\nconst createMessage = new tasks.EvaluateExpression(this, 'Create message', {\n  // Note: this is a string inside a string.\n  expression: '`Now waiting ${$.waitSeconds} seconds...`',\n  runtime: lambda.Runtime.NODEJS_14_X,\n  resultPath: '$.message',\n});\n\nconst publishMessage = new tasks.SnsPublish(this, 'Publish message', {\n  topic: new sns.Topic(this, 'cool-topic'),\n  message: sfn.TaskInput.fromJsonPathAt('$.message'),\n  resultPath: '$.sns',\n});\n\nconst wait = new sfn.Wait(this, 'Wait', {\n  time: sfn.WaitTime.secondsPath('$.waitSeconds'),\n});\n\nnew sfn.StateMachine(this, 'StateMachine', {\n  definition: convertToSeconds\n    .next(createMessage)\n    .next(publishMessage)\n    .next(wait),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 42,
        "104": 6,
        "193": 5,
        "194": 15,
        "196": 5,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 10
      },
      "fqnsFingerprint": "c146c30ed0548aba38efb628dcd92bb71235c356efb3b404b20c99e36b728537"
    }
  }
}
