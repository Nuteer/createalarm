{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "9b3365b0b516f3f406547311fb9155a01fc5d7a33ff5432f1098fc522e7713e4": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 29
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "ce17411c919d15c168f171bebb6ffb92399317ea2e6354bde1eb9f25a35b7660"
    },
    "3b4a129e1ea865e816668e13c4bdb5567da59db6b866cfb10e24c74fef37ffcb": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(\"https://foobar.com/\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4790130202d560a6dfc5b9a2860e8da5968c146b50a73489c53b1be46084b284"
    },
    "7ed66238a915019fe0d4117b757d70dc1897c710048ce146982d0c852b518f63": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nurl = CfnParameter(self, \"url-param\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(url.value_as_string))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.AddSubscription(new UrlSubscription(url.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nCfnParameter url = new CfnParameter(this, \"url-param\");\n\nmyTopic.addSubscription(new UrlSubscription(url.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 48
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nconst url = new CfnParameter(this, 'url-param');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription(url.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "dda7884fbf1c1d2f10d83a513dd6d01c8aa3ef98a5fda4174da7d9f7e5184a88"
    },
    "c179ec018819784d9c003621d0568d6b4de9364512a34c3728ea4631a1e3431f": {
      "translations": {
        "python": {
          "source": "my_queue = sqs.Queue(self, \"MyQueue\")\nmy_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.SqsSubscription(my_queue))",
          "version": "1"
        },
        "csharp": {
          "source": "Queue myQueue = new Queue(this, \"MyQueue\");\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new SqsSubscription(myQueue));",
          "version": "1"
        },
        "java": {
          "source": "Queue myQueue = new Queue(this, \"MyQueue\");\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new SqsSubscription(myQueue));",
          "version": "1"
        },
        "$": {
          "source": "const myQueue = new sqs.Queue(this, 'MyQueue');\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(myQueue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myQueue = new sqs.Queue(this, 'MyQueue');\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(myQueue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "13ea6417c354e410e4d53a06df8d7275ccbc3324fc11bf06317ab04eb277b5a6"
    },
    "41cf3e91f1e955b71deb95ce41cb1db22d64be929b774a373fcc9073d3796b70": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# my_function is of type Function\n\n\nmy_topic = sns.Topic(self, \"myTopic\")\nmy_topic.add_subscription(subscriptions.LambdaSubscription(my_function))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction myFunction;\n\n\nTopic myTopic = new Topic(this, \"myTopic\");\nmyTopic.AddSubscription(new LambdaSubscription(myFunction));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction myFunction;\n\n\nTopic myTopic = new Topic(this, \"myTopic\");\nmyTopic.addSubscription(new LambdaSubscription(myFunction));",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'myTopic');\ndeclare const myFunction: lambda.Function;\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(myFunction));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const myFunction: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'myTopic');\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(myFunction));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "094f7c290f903e7991042f1dc4047ef449b642e50116d2a6dac29cac02ded092"
    },
    "2b67aa0f3757e800fc0c1c22636ffdfb57fea49967be36859d6e8f400395e93e": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\nmy_topic.add_subscription(subscriptions.EmailSubscription(\"foo@bar.com\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nmyTopic.AddSubscription(new EmailSubscription(\"foo@bar.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\nmyTopic.addSubscription(new EmailSubscription(\"foo@bar.com\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\nmyTopic.addSubscription(new subscriptions.EmailSubscription('foo@bar.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 88
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\nmyTopic.addSubscription(new subscriptions.EmailSubscription('foo@bar.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "686bab0cc0b50d38a7acd3294812f281e66333d632aa058c89df43adb25fd21a"
    },
    "ccb1682470afb3f95d509ec23552acfd02b418f0b612389b815323d75ae75b69": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nemail_address = CfnParameter(self, \"email-param\")\n\nmy_topic.add_subscription(subscriptions.EmailSubscription(email_address.value_as_string))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.AddSubscription(new EmailSubscription(emailAddress.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.addSubscription(new EmailSubscription(emailAddress.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 98
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "ca3e5b02eb698d54a0887f23554c701d7dcd35824886c61d0a009ce348ad1f68"
    },
    "c4739a06bd84768cf5ba449d0b60f337d00fd78c0434201ca05c3d684735ad16": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(\"+15551231234\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.AddSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.addSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "0d99abb0e78a590dcf3abf002d1249105629358c091eaf344844d9c51cc59a97"
    },
    "8e8f301b4e7e195059248abb88cbf9003617b0b86ac76260b20c64a86e7b9cf5": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nsms_number = CfnParameter(self, \"sms-param\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(sms_number.value_as_string))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter smsNumber = new CfnParameter(this, \"sms-param\");\n\nmyTopic.AddSubscription(new SmsSubscription(smsNumber.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter smsNumber = new CfnParameter(this, \"sms-param\");\n\nmyTopic.addSubscription(new SmsSubscription(smsNumber.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst smsNumber = new CfnParameter(this, 'sms-param');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription(smsNumber.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-sns-subscriptions"
        },
        "field": {
          "field": "markdown",
          "line": 123
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst smsNumber = new CfnParameter(this, 'sms-param');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription(smsNumber.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "4c97ac4dd7dad0dd6ed19720ce54d07dd206265f9b83556ca4f5666920cd1b2e"
    },
    "add82c474b189ca8363addd16cdb05177b55c883778d731d1e06dd240dcf7ebd": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\nemail_address = CfnParameter(self, \"email-param\")\n\nmy_topic.add_subscription(subscriptions.EmailSubscription(email_address.value_as_string))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.AddSubscription(new EmailSubscription(emailAddress.ValueAsString));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\nCfnParameter emailAddress = new CfnParameter(this, \"email-param\");\n\nmyTopic.addSubscription(new EmailSubscription(emailAddress.getValueAsString()));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.EmailSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.CfnParameter"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\nconst emailAddress = new CfnParameter(this, 'email-param');\n\nmyTopic.addSubscription(new subscriptions.EmailSubscription(emailAddress.valueAsString));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "ca3e5b02eb698d54a0887f23554c701d7dcd35824886c61d0a009ce348ad1f68"
    },
    "f99f142a0061092d21483a8e177670bec399468591b00c4fe65f5613c3417e8a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.LambdaSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "c1cf045bb87ee13ce2b83ec8e7ee134717581c05e272f71e50be3948efffbc45": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n# fn is of type Function\n\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\n# Lambda should receive only message matching the following conditions on attributes:\n# color: 'red' or 'orange' or begins with 'bl'\n# size: anything but 'small' or 'medium'\n# price: between 100 and 200 or greater than 300\n# store: attribute must be present\nmy_topic.add_subscription(subscriptions.LambdaSubscription(fn,\n    filter_policy={\n        \"color\": sns.SubscriptionFilter.string_filter(\n            allowlist=[\"red\", \"orange\"],\n            match_prefixes=[\"bl\"]\n        ),\n        \"size\": sns.SubscriptionFilter.string_filter(\n            denylist=[\"small\", \"medium\"]\n        ),\n        \"price\": sns.SubscriptionFilter.numeric_filter(\n            between=sns.BetweenCondition(start=100, stop=200),\n            greater_than=300\n        ),\n        \"store\": sns.SubscriptionFilter.exists_filter()\n    }\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.AddSubscription(new LambdaSubscription(fn, new LambdaSubscriptionProps {\n    FilterPolicy = new Dictionary<string, SubscriptionFilter> {\n        { \"color\", SubscriptionFilter.StringFilter(new StringConditions {\n            Allowlist = new [] { \"red\", \"orange\" },\n            MatchPrefixes = new [] { \"bl\" }\n        }) },\n        { \"size\", SubscriptionFilter.StringFilter(new StringConditions {\n            Denylist = new [] { \"small\", \"medium\" }\n        }) },\n        { \"price\", SubscriptionFilter.NumericFilter(new NumericConditions {\n            Between = new BetweenCondition { Start = 100, Stop = 200 },\n            GreaterThan = 300\n        }) },\n        { \"store\", SubscriptionFilter.ExistsFilter() }\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nFunction fn;\n\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(LambdaSubscription.Builder.create(fn)\n        .filterPolicy(Map.of(\n                \"color\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .allowlist(List.of(\"red\", \"orange\"))\n                        .matchPrefixes(List.of(\"bl\"))\n                        .build()),\n                \"size\", SubscriptionFilter.stringFilter(StringConditions.builder()\n                        .denylist(List.of(\"small\", \"medium\"))\n                        .build()),\n                \"price\", SubscriptionFilter.numericFilter(NumericConditions.builder()\n                        .between(BetweenCondition.builder().start(100).stop(200).build())\n                        .greaterThan(300)\n                        .build()),\n                \"store\", SubscriptionFilter.existsFilter()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\ndeclare const fn: lambda.Function;\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscription",
        "@aws-cdk/aws-sns-subscriptions.LambdaSubscriptionProps",
        "@aws-cdk/aws-sns.BetweenCondition",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.NumericConditions",
        "@aws-cdk/aws-sns.StringConditions",
        "@aws-cdk/aws-sns.SubscriptionFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#existsFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#numericFilter",
        "@aws-cdk/aws-sns.SubscriptionFilter#stringFilter",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\n// Lambda should receive only message matching the following conditions on attributes:\n// color: 'red' or 'orange' or begins with 'bl'\n// size: anything but 'small' or 'medium'\n// price: between 100 and 200 or greater than 300\n// store: attribute must be present\nmyTopic.addSubscription(new subscriptions.LambdaSubscription(fn, {\n  filterPolicy: {\n    color: sns.SubscriptionFilter.stringFilter({\n      allowlist: ['red', 'orange'],\n      matchPrefixes: ['bl'],\n    }),\n    size: sns.SubscriptionFilter.stringFilter({\n      denylist: ['small', 'medium'],\n    }),\n    price: sns.SubscriptionFilter.numericFilter({\n      between: { start: 100, stop: 200 },\n      greaterThan: 300,\n    }),\n    store: sns.SubscriptionFilter.existsFilter(),\n  },\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 11,
        "196": 5,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "3b05a3a2d65b75f482c5d121f3e04ab8f0eaaee9754a95e11b116ea9f2a80e8a"
    },
    "09befa91b21168c1918ff559193c3c7e98ca19bbd582346e97ebcfda34be9a7c": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"Topic\")\n\nmy_topic.add_subscription(subscriptions.SmsSubscription(\"+15551231234\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.AddSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"Topic\");\n\nmyTopic.addSubscription(new SmsSubscription(\"+15551231234\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SmsSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SmsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnParameter, Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'Topic');\n\nmyTopic.addSubscription(new subscriptions.SmsSubscription('+15551231234'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "0d99abb0e78a590dcf3abf002d1249105629358c091eaf344844d9c51cc59a97"
    },
    "3c42a2514e26b094bc5f3b561e8725ed1716b38d52c4126cb57072720928cdbe": {
      "translations": {
        "python": {
          "source": "# queue is of type Queue\n\nmy_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.SqsSubscription(queue))",
          "version": "1"
        },
        "csharp": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "java": {
          "source": "Queue queue;\n\nTopic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new SqsSubscription(queue));",
          "version": "1"
        },
        "$": {
          "source": "declare const queue: sqs.Queue;\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.SqsSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.SqsSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const queue: sqs.Queue;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.SqsSubscription(queue));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "38ca28e7ac935e96db8742e22aaa58b69ca9c8733cb141e4629d5a0977d0f786"
    },
    "9b338fbb1a2988613373399dfc81778c10c5aefcb2b2c7b22c74a4cfd7206765": {
      "translations": {
        "python": {
          "source": "my_topic = sns.Topic(self, \"MyTopic\")\n\nmy_topic.add_subscription(subscriptions.UrlSubscription(\"https://foobar.com/\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.AddSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "java": {
          "source": "Topic myTopic = new Topic(this, \"MyTopic\");\n\nmyTopic.addSubscription(new UrlSubscription(\"https://foobar.com/\"));",
          "version": "1"
        },
        "$": {
          "source": "const myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-sns-subscriptions.UrlSubscription"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.UrlSubscription",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myTopic = new sns.Topic(this, 'MyTopic');\n\nmyTopic.addSubscription(new subscriptions.UrlSubscription('https://foobar.com/'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4790130202d560a6dfc5b9a2860e8da5968c146b50a73489c53b1be46084b284"
    }
  }
}
