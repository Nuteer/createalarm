{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "7576cf6db2954e7ed69d6826499818f0dac282fd656c4d2de60655b2588364bd": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage()\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage() // get the latest Amazon Linux image\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 22
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage() // get the latest Amazon Linux image\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c700063bcfbf19bbde14f23a9e6fb23fdb3783a8c72b7d55c2d739031dd889f5"
    },
    "15df7d95919fcecb82b127b0df79c11d29a1377d87821a924079f06f71d180c2": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nmy_security_group = ec2.SecurityGroup(self, \"SecurityGroup\", vpc=vpc)\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage(),\n    security_group=my_security_group\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps { Vpc = vpc });\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage(),\n    SecurityGroup = mySecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\").vpc(vpc).build();\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .securityGroup(mySecurityGroup)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0b12bbd230cf361ca00240a9f992b0b3eb7c520a5047001c4d98a8402d5c28"
    },
    "a75ef8447b3ae4828f03e804aca48584d50400c0151deb68daa7cfd14c1554d1": {
      "translations": {
        "python": {
          "source": "# Pick a Windows edition to use\nwindows = ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE)\n\n# Pick the right Amazon Linux edition. All arguments shown are optional\n# and will default to these values when omitted.\namzn_linux = ec2.AmazonLinuxImage(\n    generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n    edition=ec2.AmazonLinuxEdition.STANDARD,\n    virtualization=ec2.AmazonLinuxVirt.HVM,\n    storage=ec2.AmazonLinuxStorage.GENERAL_PURPOSE\n)\n\n# For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n# a map giving the AMI to in for each region:\n\nlinux = ec2.GenericLinuxImage({\n    \"us-east-1\": \"ami-97785bed\",\n    \"eu-west-1\": \"ami-12345678\"\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = new AmazonLinuxImage(new AmazonLinuxImageProps {\n    Generation = AmazonLinuxGeneration.AMAZON_LINUX,\n    Edition = AmazonLinuxEdition.STANDARD,\n    Virtualization = AmazonLinuxVirt.HVM,\n    Storage = AmazonLinuxStorage.GENERAL_PURPOSE\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(new Dictionary<string, string> {\n    { \"us-east-1\", \"ami-97785bed\" },\n    { \"eu-west-1\", \"ami-12345678\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Pick a Windows edition to use\nWindowsImage windows = new WindowsImage(WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nAmazonLinuxImage amznLinux = AmazonLinuxImage.Builder.create()\n        .generation(AmazonLinuxGeneration.AMAZON_LINUX)\n        .edition(AmazonLinuxEdition.STANDARD)\n        .virtualization(AmazonLinuxVirt.HVM)\n        .storage(AmazonLinuxStorage.GENERAL_PURPOSE)\n        .build();\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nGenericLinuxImage linux = new GenericLinuxImage(Map.of(\n        \"us-east-1\", \"ami-97785bed\",\n        \"eu-west-1\", \"ami-12345678\"));",
          "version": "1"
        },
        "$": {
          "source": "// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxEdition",
        "@aws-cdk/aws-ec2.AmazonLinuxEdition#STANDARD",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.AmazonLinuxImageProps",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage",
        "@aws-cdk/aws-ec2.AmazonLinuxStorage#GENERAL_PURPOSE",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt",
        "@aws-cdk/aws-ec2.AmazonLinuxVirt#HVM",
        "@aws-cdk/aws-ec2.GenericLinuxImage",
        "@aws-cdk/aws-ec2.WindowsImage",
        "@aws-cdk/aws-ec2.WindowsVersion",
        "@aws-cdk/aws-ec2.WindowsVersion#WINDOWS_SERVER_2019_ENGLISH_FULL_BASE"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\n\n/// !show\n// Pick a Windows edition to use\nconst windows = new ec2.WindowsImage(ec2.WindowsVersion.WINDOWS_SERVER_2019_ENGLISH_FULL_BASE);\n\n// Pick the right Amazon Linux edition. All arguments shown are optional\n// and will default to these values when omitted.\nconst amznLinux = new ec2.AmazonLinuxImage({\n  generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX,\n  edition: ec2.AmazonLinuxEdition.STANDARD,\n  virtualization: ec2.AmazonLinuxVirt.HVM,\n  storage: ec2.AmazonLinuxStorage.GENERAL_PURPOSE,\n});\n\n// For other custom (Linux) images, instantiate a `GenericLinuxImage` with\n// a map giving the AMI to in for each region:\n\nconst linux = new ec2.GenericLinuxImage({\n  'us-east-1': 'ami-97785bed',\n  'eu-west-1': 'ami-12345678',\n  // ...\n});\n/// !hide\n\nArray.isArray(windows);\nArray.isArray(amznLinux);\nArray.isArray(linux);\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "193": 2,
        "194": 13,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6
      },
      "fqnsFingerprint": "6d4f386af5c46de124cd13713b296cf8bb7c257958c2942c27686549a7bc616d"
    },
    "66e093282ca74963dd17d35a5ccaaa4c646fe73c56034556a556c24c78b4e942": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    min_capacity=5,\n    max_capacity=100\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    MinCapacity = 5,\n    MaxCapacity = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        .minCapacity(5)\n        .maxCapacity(100)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  minCapacity: 5,\n  maxCapacity: 100\n  // ...\n});\n\n// Then call one of the scaling methods (explained below)\n//\n// autoScalingGroup.scaleOnMetric(...);\n//\n// autoScalingGroup.scaleOnCpuUtilization(...);\n// autoScalingGroup.scaleOnIncomingBytes(...);\n// autoScalingGroup.scaleOnOutgoingBytes(...);\n// autoScalingGroup.scaleOnRequestCount(...);\n// autoScalingGroup.scaleToTrackMetric(...);\n//\n// autoScalingGroup.scaleOnSchedule(...);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 113
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  minCapacity: 5,\n  maxCapacity: 100\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 17,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "86caf05ab8830580c204c92f54eb8ae7374571557885df9454fec54c3b75684f"
    },
    "653122b050aebce752403b92b99bfc2088b9564d7199e8a0fe4ac97c427029c3": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nworker_utilization_metric = cloudwatch.Metric(\n    namespace=\"MyService\",\n    metric_name=\"WorkerUtilization\"\n)\n\nauto_scaling_group.scale_on_metric(\"ScaleToCPU\",\n    metric=worker_utilization_metric,\n    scaling_steps=[autoscaling.ScalingInterval(upper=10, change=-1), autoscaling.ScalingInterval(lower=50, change=+1), autoscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=autoscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = new Metric(new MetricProps {\n    Namespace = \"MyService\",\n    MetricName = \"WorkerUtilization\"\n});\n\nautoScalingGroup.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = workerUtilizationMetric,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = Metric.Builder.create()\n        .namespace(\"MyService\")\n        .metricName(\"WorkerUtilization\")\n        .build();\n\nautoScalingGroup.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(workerUtilizationMetric)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AdjustmentType",
        "@aws-cdk/aws-autoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-autoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 4,
        "196": 1,
        "197": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "e41451ef7e2e14c6f7a0a751e4d6543cb0347073128b195555073bc6e1ef585f"
    },
    "f5b2caf68c49d2f110d2a48d48f4864b0a252dbba749e2d4dabd55f6b910ecf2": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_cpu_utilization(\"KeepSpareCPU\",\n    target_utilization_percent=50\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnCpuUtilization(\"KeepSpareCPU\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnCpuUtilization(\"KeepSpareCPU\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnCpuUtilization('KeepSpareCPU', {\n  targetUtilizationPercent: 50\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 203
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.CpuUtilizationScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnCpuUtilization('KeepSpareCPU', {\n  targetUtilizationPercent: 50\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "32d9b0a4fd1e2099a4f92fbd343d041d4c78ca4be3e1074e5fd08c122d3222a0"
    },
    "2c93b45aeffbf2fa4116c6fb5adc42be870ebaab037d25296ee5e5d930dd783b": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_incoming_bytes(\"LimitIngressPerInstance\",\n    target_bytes_per_second=10 * 1024 * 1024\n)\nauto_scaling_group.scale_on_outgoing_bytes(\"LimitEgressPerInstance\",\n    target_bytes_per_second=10 * 1024 * 1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnIncomingBytes(\"LimitIngressPerInstance\", new NetworkUtilizationScalingProps {\n    TargetBytesPerSecond = 10 * 1024 * 1024\n});\nautoScalingGroup.ScaleOnOutgoingBytes(\"LimitEgressPerInstance\", new NetworkUtilizationScalingProps {\n    TargetBytesPerSecond = 10 * 1024 * 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnIncomingBytes(\"LimitIngressPerInstance\", NetworkUtilizationScalingProps.builder()\n        .targetBytesPerSecond(10 * 1024 * 1024)\n        .build());\nautoScalingGroup.scaleOnOutgoingBytes(\"LimitEgressPerInstance\", NetworkUtilizationScalingProps.builder()\n        .targetBytesPerSecond(10 * 1024 * 1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnIncomingBytes('LimitIngressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\nautoScalingGroup.scaleOnOutgoingBytes('LimitEgressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 213
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.NetworkUtilizationScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnIncomingBytes('LimitIngressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\nautoScalingGroup.scaleOnOutgoingBytes('LimitEgressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 2,
        "41": 4,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "209": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d37ae9d93577e661d44e93218d19e0bed5ee5c4694b4040c98be4389418e25ed"
    },
    "6e5fbe6a934dd523634471248064942038ecb3aa9b252189130b65752ac7d750": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_request_count(\"LimitRPS\",\n    target_requests_per_second=1000\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnRequestCount(\"LimitRPS\", new RequestCountScalingProps {\n    TargetRequestsPerSecond = 1000\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnRequestCount(\"LimitRPS\", RequestCountScalingProps.builder()\n        .targetRequestsPerSecond(1000)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnRequestCount('LimitRPS', {\n    targetRequestsPerSecond: 1000\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 228
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.RequestCountScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnRequestCount('LimitRPS', {\n    targetRequestsPerSecond: 1000\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "32f5ca61395d25ef805734ff50c15bca3ed30bff28bad6ff111a7d0c2bad5f42"
    },
    "ec3294294145b787a64638410310ece199ee57ddcb472055df4bad07b3f0e251": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_schedule(\"PrescaleInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)\n\nauto_scaling_group.scale_on_schedule(\"AllowDownscalingAtNight\",\n    schedule=autoscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnSchedule(\"PrescaleInTheMorning\", new BasicScheduledActionProps {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});\n\nautoScalingGroup.ScaleOnSchedule(\"AllowDownscalingAtNight\", new BasicScheduledActionProps {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnSchedule(\"PrescaleInTheMorning\", BasicScheduledActionProps.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());\n\nautoScalingGroup.scaleOnSchedule(\"AllowDownscalingAtNight\", BasicScheduledActionProps.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nautoScalingGroup.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: autoscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 253
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.BasicScheduledActionProps",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nautoScalingGroup.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: autoscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 21,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "743295ef28e5e27a3ee68b97a83abdd7b4c9f9b56f3b5e92b80f454c8c9a0807"
    },
    "19a2fc9c8f3b9a4786c4766e96f88b20d8015d8ecb86a6a86f8d2d37e91fdd7d": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 287
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "f941227b98d4af1acda40c3a590e7e485581a7c701be23bb0eff5bef0070f6eb"
    },
    "652ceae555af355fdda334b6e8c690c9d81aaf96ca1ab0fb220538c3a9354224": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\n# Enable monitoring of all group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics.all()]\n)\n\n# Enable monitoring for a subset of group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { GroupMetrics.All() }\n});\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(GroupMetrics.all()))\n        .build();\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 396
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.GroupMetric",
        "@aws-cdk/aws-autoscaling.GroupMetric#MAX_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetric#MIN_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetrics",
        "@aws-cdk/aws-autoscaling.GroupMetrics#all",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "457ed30f6ea755592b6a8a26ce7062ba60e140642f359bad5588ee6c078ba5f6"
    },
    "311335bec2d4fad4404ee852c0cf7984bf9588e4606e3bdfb9afe51fc9c77bfa": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    new_instances_protected_from_scale_in=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    NewInstancesProtectedFromScaleIn = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .newInstancesProtectedFromScaleIn(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  newInstancesProtectedFromScaleIn: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 435
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  newInstancesProtectedFromScaleIn: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "86caf05ab8830580c204c92f54eb8ae7374571557885df9454fec54c3b75684f"
    },
    "40481614c209632fa767760cee7a382d3a9bce2dcf502051be63984228b7d804": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    require_imdsv2=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    RequireImdsv2 = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .requireImdsv2(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 461
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  requireImdsv2: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "86caf05ab8830580c204c92f54eb8ae7374571557885df9454fec54c3b75684f"
    },
    "9bc853528c0aa9b037a65a9f898bac7689ee28e3ffd276e96b88655c95e7ba91": {
      "translations": {
        "python": {
          "source": "aspect = autoscaling.AutoScalingGroupRequireImdsv2Aspect()\n\nAspects.of(self).add(aspect)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroupRequireImdsv2Aspect aspect = new AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroupRequireImdsv2Aspect aspect = new AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new autoscaling.AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-autoscaling"
        },
        "field": {
          "field": "markdown",
          "line": 480
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroupRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new autoscaling.AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "2852375e04945c38ce10a480415c902044dc46450e3eafdb60f7a56014c27966"
    },
    "28ae5b05845d46b2e8189cb3397a5565e8c4594ad255bd27587ab88259a1e97f": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"MyRole\",\n    assumed_by=iam.ServicePrincipal(\"ec2.amazonaws.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"MyRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"ec2.amazonaws.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"MyRole\")\n        .assumedBy(new ServicePrincipal(\"ec2.amazonaws.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "   const role = new iam.Role(this, 'MyRole', {\n     assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n   });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
          "memberName": "role"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const role = new iam.Role(this, 'MyRole', {\n     assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com')\n   });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "04832edc32fdaca25979a28ee80037f33d7a00355bec024d209fbfe27788d33e"
    },
    "ad22e947e96c070e1ec5f52bcd39c08c9124922cb9bcc15590d24b5080d01f33": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nworker_utilization_metric = cloudwatch.Metric(\n    namespace=\"MyService\",\n    metric_name=\"WorkerUtilization\"\n)\n\nauto_scaling_group.scale_on_metric(\"ScaleToCPU\",\n    metric=worker_utilization_metric,\n    scaling_steps=[autoscaling.ScalingInterval(upper=10, change=-1), autoscaling.ScalingInterval(lower=50, change=+1), autoscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=autoscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = new Metric(new MetricProps {\n    Namespace = \"MyService\",\n    MetricName = \"WorkerUtilization\"\n});\n\nautoScalingGroup.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = workerUtilizationMetric,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = Metric.Builder.create()\n        .namespace(\"MyService\")\n        .metricName(\"WorkerUtilization\")\n        .build();\n\nautoScalingGroup.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(workerUtilizationMetric)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.AdjustmentType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AdjustmentType",
        "@aws-cdk/aws-autoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-autoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 4,
        "196": 1,
        "197": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "e41451ef7e2e14c6f7a0a751e4d6543cb0347073128b195555073bc6e1ef585f"
    },
    "70c2e753c1c7c377fc37768a249073090e2ed02dcad158a605e94f237631428b": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nmy_security_group = ec2.SecurityGroup(self, \"SecurityGroup\", vpc=vpc)\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n    machine_image=ec2.AmazonLinuxImage(),\n    security_group=my_security_group\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = new SecurityGroup(this, \"SecurityGroup\", new SecurityGroupProps { Vpc = vpc });\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = InstanceType.Of(InstanceClass.BURSTABLE2, InstanceSize.MICRO),\n    MachineImage = new AmazonLinuxImage(),\n    SecurityGroup = mySecurityGroup\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup mySecurityGroup = SecurityGroup.Builder.create(this, \"SecurityGroup\").vpc(vpc).build();\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(InstanceType.of(InstanceClass.BURSTABLE2, InstanceSize.MICRO))\n        .machineImage(new AmazonLinuxImage())\n        .securityGroup(mySecurityGroup)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.AmazonLinuxImage",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceClass",
        "@aws-cdk/aws-ec2.InstanceClass#BURSTABLE2",
        "@aws-cdk/aws-ec2.InstanceSize",
        "@aws-cdk/aws-ec2.InstanceSize#MICRO",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.InstanceType#of",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst mySecurityGroup = new ec2.SecurityGroup(this, 'SecurityGroup', { vpc });\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: new ec2.AmazonLinuxImage(),\n  securityGroup: mySecurityGroup,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 25,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ee0b12bbd230cf361ca00240a9f992b0b3eb7c520a5047001c4d98a8402d5c28"
    },
    "712eceec2699c8efafbeb360c932caf7efee6bc75149a1dae04c9691f0e8f2f7": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "f941227b98d4af1acda40c3a590e7e485581a7c701be23bb0eff5bef0070f6eb"
    },
    "dea925ebb274e65be14ec78ac461418fadc1b9611546a14b6ec6598fd87d5a92": {
      "translations": {
        "python": {
          "source": "aspect = autoscaling.AutoScalingGroupRequireImdsv2Aspect()\n\nAspects.of(self).add(aspect)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroupRequireImdsv2Aspect aspect = new AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.Of(this).Add(aspect);",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroupRequireImdsv2Aspect aspect = new AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);",
          "version": "1"
        },
        "$": {
          "source": "const aspect = new autoscaling.AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.AutoScalingGroupRequireImdsv2Aspect"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroupRequireImdsv2Aspect",
        "@aws-cdk/core.Aspects#add",
        "@aws-cdk/core.Aspects#of",
        "@aws-cdk/core.IAspect",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst aspect = new autoscaling.AutoScalingGroupRequireImdsv2Aspect();\n\nAspects.of(this).add(aspect);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "2852375e04945c38ce10a480415c902044dc46450e3eafdb60f7a56014c27966"
    },
    "e17eac75536bbac681c339a227125a1ad18b1b7a6295eba0cd2d2e3a482026df": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_schedule(\"PrescaleInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)\n\nauto_scaling_group.scale_on_schedule(\"AllowDownscalingAtNight\",\n    schedule=autoscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    min_capacity=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnSchedule(\"PrescaleInTheMorning\", new BasicScheduledActionProps {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});\n\nautoScalingGroup.ScaleOnSchedule(\"AllowDownscalingAtNight\", new BasicScheduledActionProps {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MinCapacity = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnSchedule(\"PrescaleInTheMorning\", BasicScheduledActionProps.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());\n\nautoScalingGroup.scaleOnSchedule(\"AllowDownscalingAtNight\", BasicScheduledActionProps.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .minCapacity(1)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nautoScalingGroup.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: autoscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.BasicScheduledActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.BasicScheduledActionProps",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnSchedule('PrescaleInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nautoScalingGroup.scaleOnSchedule('AllowDownscalingAtNight', {\n  schedule: autoscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  minCapacity: 1\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 21,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "743295ef28e5e27a3ee68b97a83abdd7b4c9f9b56f3b5e92b80f454c8c9a0807"
    },
    "03ab1ad048626d98bdec2acf8fc2d1b791a63446d9105fa20422876717eebd94": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nworker_utilization_metric = cloudwatch.Metric(\n    namespace=\"MyService\",\n    metric_name=\"WorkerUtilization\"\n)\n\nauto_scaling_group.scale_on_metric(\"ScaleToCPU\",\n    metric=worker_utilization_metric,\n    scaling_steps=[autoscaling.ScalingInterval(upper=10, change=-1), autoscaling.ScalingInterval(lower=50, change=+1), autoscaling.ScalingInterval(lower=70, change=+3)\n    ],\n\n    # Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    # 'change' numbers before as percentages instead of capacity counts.\n    adjustment_type=autoscaling.AdjustmentType.CHANGE_IN_CAPACITY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = new Metric(new MetricProps {\n    Namespace = \"MyService\",\n    MetricName = \"WorkerUtilization\"\n});\n\nautoScalingGroup.ScaleOnMetric(\"ScaleToCPU\", new BasicStepScalingPolicyProps {\n    Metric = workerUtilizationMetric,\n    ScalingSteps = new [] { new ScalingInterval { Upper = 10, Change = -1 }, new ScalingInterval { Lower = 50, Change = +1 }, new ScalingInterval { Lower = 70, Change = +3 } },\n\n    // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n    // 'change' numbers before as percentages instead of capacity counts.\n    AdjustmentType = AdjustmentType.CHANGE_IN_CAPACITY\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nMetric workerUtilizationMetric = Metric.Builder.create()\n        .namespace(\"MyService\")\n        .metricName(\"WorkerUtilization\")\n        .build();\n\nautoScalingGroup.scaleOnMetric(\"ScaleToCPU\", BasicStepScalingPolicyProps.builder()\n        .metric(workerUtilizationMetric)\n        .scalingSteps(List.of(ScalingInterval.builder().upper(10).change(-1).build(), ScalingInterval.builder().lower(50).change(+1).build(), ScalingInterval.builder().lower(70).change(+3).build()))\n\n        // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n        // 'change' numbers before as percentages instead of capacity counts.\n        .adjustmentType(AdjustmentType.CHANGE_IN_CAPACITY)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.BasicStepScalingPolicyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AdjustmentType",
        "@aws-cdk/aws-autoscaling.AdjustmentType#CHANGE_IN_CAPACITY",
        "@aws-cdk/aws-autoscaling.BasicStepScalingPolicyProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst workerUtilizationMetric = new cloudwatch.Metric({\n    namespace: 'MyService',\n    metricName: 'WorkerUtilization'\n});\n\nautoScalingGroup.scaleOnMetric('ScaleToCPU', {\n  metric: workerUtilizationMetric,\n  scalingSteps: [\n    { upper: 10, change: -1 },\n    { lower: 50, change: +1 },\n    { lower: 70, change: +3 },\n  ],\n\n  // Change this to AdjustmentType.PERCENT_CHANGE_IN_CAPACITY to interpret the\n  // 'change' numbers before as percentages instead of capacity counts.\n  adjustmentType: autoscaling.AdjustmentType.CHANGE_IN_CAPACITY,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 3,
        "75": 23,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 4,
        "196": 1,
        "197": 1,
        "207": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "e41451ef7e2e14c6f7a0a751e4d6543cb0347073128b195555073bc6e1ef585f"
    },
    "797f7a90872bedc03b66dc9fe67feb3852dfa862629ea4f517371be624d731bd": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_cpu_utilization(\"KeepSpareCPU\",\n    target_utilization_percent=50\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnCpuUtilization(\"KeepSpareCPU\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnCpuUtilization(\"KeepSpareCPU\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnCpuUtilization('KeepSpareCPU', {\n  targetUtilizationPercent: 50\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.CpuUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.CpuUtilizationScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnCpuUtilization('KeepSpareCPU', {\n  targetUtilizationPercent: 50\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "32d9b0a4fd1e2099a4f92fbd343d041d4c78ca4be3e1074e5fd08c122d3222a0"
    },
    "b21bb8ccac881b622e40067dd00211abd3930e5ad3ed742c78c82ae730a7a04d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.CronOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "b9356ccbcd0e33061049f99484ec04b956be63b73eb0cf4a722dbea68ef82e17": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\n# Enable monitoring of all group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics.all()]\n)\n\n# Enable monitoring for a subset of group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { GroupMetrics.All() }\n});\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(GroupMetrics.all()))\n        .build();\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.GroupMetric"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.GroupMetric",
        "@aws-cdk/aws-autoscaling.GroupMetric#MAX_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetric#MIN_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetrics",
        "@aws-cdk/aws-autoscaling.GroupMetrics#all",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "457ed30f6ea755592b6a8a26ce7062ba60e140642f359bad5588ee6c078ba5f6"
    },
    "b31eca0ecdc9be247e856c9f68136c123b00fb44ff611a3034d01cdac53f5951": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\n# Enable monitoring of all group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics.all()]\n)\n\n# Enable monitoring for a subset of group metrics\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    group_metrics=[autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { GroupMetrics.All() }\n});\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    GroupMetrics = new [] { new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\n// Enable monitoring of all group metrics\n// Enable monitoring of all group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(GroupMetrics.all()))\n        .build();\n\n// Enable monitoring for a subset of group metrics\n// Enable monitoring for a subset of group metrics\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .groupMetrics(List.of(new GroupMetrics(GroupMetric.MIN_SIZE, GroupMetric.MAX_SIZE)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.GroupMetrics"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.GroupMetric",
        "@aws-cdk/aws-autoscaling.GroupMetric#MAX_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetric#MIN_SIZE",
        "@aws-cdk/aws-autoscaling.GroupMetrics",
        "@aws-cdk/aws-autoscaling.GroupMetrics#all",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Enable monitoring of all group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [autoscaling.GroupMetrics.all()],\n});\n\n// Enable monitoring for a subset of group metrics\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  groupMetrics: [new autoscaling.GroupMetrics(autoscaling.GroupMetric.MIN_SIZE, autoscaling.GroupMetric.MAX_SIZE)],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 32,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 9,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "457ed30f6ea755592b6a8a26ce7062ba60e140642f359bad5588ee6c078ba5f6"
    },
    "b39d6ada08f8fd13b38dae95e7341f4c56730953cd1a384842bf51bfe0d031a4": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_incoming_bytes(\"LimitIngressPerInstance\",\n    target_bytes_per_second=10 * 1024 * 1024\n)\nauto_scaling_group.scale_on_outgoing_bytes(\"LimitEgressPerInstance\",\n    target_bytes_per_second=10 * 1024 * 1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnIncomingBytes(\"LimitIngressPerInstance\", new NetworkUtilizationScalingProps {\n    TargetBytesPerSecond = 10 * 1024 * 1024\n});\nautoScalingGroup.ScaleOnOutgoingBytes(\"LimitEgressPerInstance\", new NetworkUtilizationScalingProps {\n    TargetBytesPerSecond = 10 * 1024 * 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnIncomingBytes(\"LimitIngressPerInstance\", NetworkUtilizationScalingProps.builder()\n        .targetBytesPerSecond(10 * 1024 * 1024)\n        .build());\nautoScalingGroup.scaleOnOutgoingBytes(\"LimitEgressPerInstance\", NetworkUtilizationScalingProps.builder()\n        .targetBytesPerSecond(10 * 1024 * 1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnIncomingBytes('LimitIngressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\nautoScalingGroup.scaleOnOutgoingBytes('LimitEgressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.NetworkUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.NetworkUtilizationScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnIncomingBytes('LimitIngressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\nautoScalingGroup.scaleOnOutgoingBytes('LimitEgressPerInstance', {\n    targetBytesPerSecond: 10 * 1024 * 1024 // 10 MB/s\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 2,
        "41": 4,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "209": 4,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d37ae9d93577e661d44e93218d19e0bed5ee5c4694b4040c98be4389418e25ed"
    },
    "c798aa8bc00660b77fc190c489f764e591b43dc9918002a40b2a871dc72ddc59": {
      "translations": {
        "python": {
          "source": "# auto_scaling_group is of type AutoScalingGroup\n\n\nauto_scaling_group.scale_on_request_count(\"LimitRPS\",\n    target_requests_per_second=1000\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.ScaleOnRequestCount(\"LimitRPS\", new RequestCountScalingProps {\n    TargetRequestsPerSecond = 1000\n});",
          "version": "1"
        },
        "java": {
          "source": "AutoScalingGroup autoScalingGroup;\n\n\nautoScalingGroup.scaleOnRequestCount(\"LimitRPS\", RequestCountScalingProps.builder()\n        .targetRequestsPerSecond(1000)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const autoScalingGroup: autoscaling.AutoScalingGroup;\n\nautoScalingGroup.scaleOnRequestCount('LimitRPS', {\n    targetRequestsPerSecond: 1000\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.RequestCountScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.RequestCountScalingProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const autoScalingGroup: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nautoScalingGroup.scaleOnRequestCount('LimitRPS', {\n    targetRequestsPerSecond: 1000\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "32f5ca61395d25ef805734ff50c15bca3ed30bff28bad6ff111a7d0c2bad5f42"
    },
    "293c184bf19fa69a06a728d3c66f047c8e451ce9b7629622a8b1bbe240fbe65c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\n\n# fn is of type Function\n\nalias = lambda_.Alias(self, \"Alias\",\n    alias_name=\"prod\",\n    version=fn.latest_version\n)\n\n# Create AutoScaling target\nas = alias.add_auto_scaling(max_capacity=50)\n\n# Configure Target Tracking\nas.scale_on_utilization(\n    utilization_target=0.5\n)\n\n# Configure Scheduled Scaling\nas.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=autoscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\n\nFunction fn;\n\nAlias alias = new Alias(this, \"Alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = fn.LatestVersion\n});\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.AddAutoScaling(new AutoScalingOptions { MaxCapacity = 50 });\n\n// Configure Target Tracking\nas.ScaleOnUtilization(new UtilizationScalingOptions {\n    UtilizationTarget = 0.5\n});\n\n// Configure Scheduled Scaling\nas.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\n\nFunction fn;\n\nAlias alias = Alias.Builder.create(this, \"Alias\")\n        .aliasName(\"prod\")\n        .version(fn.getLatestVersion())\n        .build();\n\n// Create AutoScaling target\nIScalableFunctionAttribute as = alias.addAutoScaling(AutoScalingOptions.builder().maxCapacity(50).build());\n\n// Configure Target Tracking\nas.scaleOnUtilization(UtilizationScalingOptions.builder()\n        .utilizationTarget(0.5)\n        .build());\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.Schedule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.CronOptions",
        "@aws-cdk/aws-autoscaling.Schedule",
        "@aws-cdk/aws-autoscaling.Schedule#cron",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.Alias#addAutoScaling",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.AutoScalingOptions",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnSchedule",
        "@aws-cdk/aws-lambda.IScalableFunctionAttribute#scaleOnUtilization",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.UtilizationScalingOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alias = new lambda.Alias(this, 'Alias', {\n  aliasName: 'prod',\n  version: fn.latestVersion,\n});\n\n// Create AutoScaling target\nconst as = alias.addAutoScaling({ maxCapacity: 50 });\n\n// Configure Target Tracking\nas.scaleOnUtilization({\n  utilizationTarget: 0.5,\n});\n\n// Configure Scheduled Scaling\nas.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: autoscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 20,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 6,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ab2ee8ff798c22a792ab27490c50b7707074300e6362477a1d37e5b604fb0502"
    },
    "5de0be728d02050594e0b9e10e7e004732f50e7558efd3b37ad935cf2197172d": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.Signals"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "f941227b98d4af1acda40c3a590e7e485581a7c701be23bb0eff5bef0070f6eb"
    },
    "766194e33eab5b17884eff630ba171917cffc0c71dfa3ef15871cf089a4a7747": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# instance_type is of type InstanceType\n# machine_image is of type IMachineImage\n\n\nautoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=instance_type,\n    machine_image=machine_image,\n\n    # ...\n\n    init=ec2.CloudFormationInit.from_elements(\n        ec2.InitFile.from_string(\"/etc/my_instance\", \"This got written during instance startup\")),\n    signals=autoscaling.Signals.wait_for_all(\n        timeout=Duration.minutes(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nnew AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = instanceType,\n    MachineImage = machineImage,\n\n    // ...\n\n    Init = CloudFormationInit.FromElements(InitFile.FromString(\"/etc/my_instance\", \"This got written during instance startup\")),\n    Signals = Signals.WaitForAll(new SignalsOptions {\n        Timeout = Duration.Minutes(10)\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nInstanceType instanceType;\nIMachineImage machineImage;\n\n\nAutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(instanceType)\n        .machineImage(machineImage)\n\n        // ...\n\n        .init(CloudFormationInit.fromElements(InitFile.fromString(\"/etc/my_instance\", \"This got written during instance startup\")))\n        .signals(Signals.waitForAll(SignalsOptions.builder()\n                .timeout(Duration.minutes(10))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-autoscaling.SignalsOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.Signals",
        "@aws-cdk/aws-autoscaling.Signals#waitForAll",
        "@aws-cdk/aws-autoscaling.SignalsOptions",
        "@aws-cdk/aws-ec2.CloudFormationInit",
        "@aws-cdk/aws-ec2.CloudFormationInit#fromElements",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InitElement",
        "@aws-cdk/aws-ec2.InitFile",
        "@aws-cdk/aws-ec2.InitFile#fromString",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const instanceType: ec2.InstanceType;\ndeclare const machineImage: ec2.IMachineImage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { Aspects, CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType,\n  machineImage,\n\n  // ...\n\n  init: ec2.CloudFormationInit.fromElements(\n    ec2.InitFile.fromString('/etc/my_instance', 'This got written during instance startup'),\n  ),\n  signals: autoscaling.Signals.waitForAll({\n    timeout: Duration.minutes(10),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 28,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 8,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "f941227b98d4af1acda40c3a590e7e485581a7c701be23bb0eff5bef0070f6eb"
    }
  }
}
