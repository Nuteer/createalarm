"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleTransition = exports.DefaultResult = exports.LifecycleHook = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const autoscaling_generated_1 = require("./autoscaling.generated");
/**
 * Define a life cycle hook.
 *
 * @stability stable
 */
class LifecycleHook extends core_1.Resource {
    /**
     * @stability stable
     */
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.lifecycleHookName,
        });
        jsiiDeprecationWarnings._aws_cdk_aws_autoscaling_LifecycleHookProps(props);
        const targetProps = props.notificationTarget ? props.notificationTarget.bind(this, { lifecycleHook: this, role: props.role }) : undefined;
        if (props.role) {
            this._role = props.role;
            if (!props.notificationTarget) {
                throw new Error("'notificationTarget' parameter required when 'role' parameter is specified");
            }
        }
        else {
            this._role = targetProps ? targetProps.createdRole : undefined;
        }
        const l1NotificationTargetArn = targetProps ? targetProps.notificationTargetArn : undefined;
        const l1RoleArn = this._role ? this.role.roleArn : undefined;
        const resource = new autoscaling_generated_1.CfnLifecycleHook(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeout && props.heartbeatTimeout.toSeconds(),
            lifecycleHookName: this.physicalName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: l1NotificationTargetArn,
            roleArn: l1RoleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        if (this._role) {
            resource.node.addDependency(this.role);
        }
        this.lifecycleHookName = resource.ref;
    }
    /**
     * The role that allows the ASG to publish to the notification target.
     *
     * @default - A default role is created if 'notificationTarget' is specified.
     * Otherwise, no role is created.
     * @stability stable
     */
    get role() {
        if (!this._role) {
            throw new Error('\'role\' is undefined. Please specify a \'role\' or specify a \'notificationTarget\' to have a role provided for you.');
        }
        return this._role;
    }
}
exports.LifecycleHook = LifecycleHook;
_a = JSII_RTTI_SYMBOL_1;
LifecycleHook[_a] = { fqn: "@aws-cdk/aws-autoscaling.LifecycleHook", version: "1.137.0" };
/**
 * @stability stable
 */
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["CONTINUE"] = "CONTINUE";
    DefaultResult["ABANDON"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to.
 *
 * @stability stable
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    LifecycleTransition["INSTANCE_LAUNCHING"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    LifecycleTransition["INSTANCE_TERMINATING"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,