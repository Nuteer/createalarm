{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "190af510314f50d39e6fe88c9e20dcae317c3d0b167f75f1644d5bec66057f75": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_acmpca as acmpca",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ACMPCA;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.acmpca.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as acmpca from '@aws-cdk/aws-acmpca';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 17
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as acmpca from '@aws-cdk/aws-acmpca';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "424163479954ffeb49f7709206f6ea77506eabc23f2251b86badb12d825a2780": {
      "translations": {
        "python": {
          "source": "certificate_authority = acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")",
          "version": "1"
        },
        "csharp": {
          "source": "var certificateAuthority = acmpca.CertificateAuthority.FromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\");",
          "version": "1"
        },
        "java": {
          "source": "Object certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\");",
          "version": "1"
        },
        "$": {
          "source": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n  'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 27
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CA',\n  'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77');",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b84646258ecf1de8e18f2fec9068757519808c1956908d6d8ad0547a4ac57323": {
      "translations": {
        "python": {
          "source": "cfn_certificate_authority = acmpca.CfnCertificateAuthority(self, \"CA\",\n    type=\"ROOT\",\n    key_algorithm=\"RSA_2048\",\n    signing_algorithm=\"SHA256WITHRSA\",\n    subject={\n        \"country\": \"US\",\n        \"organization\": \"string\",\n        \"organizational_unit\": \"string\",\n        \"distinguished_name_qualifier\": \"string\",\n        \"state\": \"string\",\n        \"common_name\": \"123\",\n        \"serial_number\": \"string\",\n        \"locality\": \"string\",\n        \"title\": \"string\",\n        \"surname\": \"string\",\n        \"given_name\": \"string\",\n        \"initials\": \"DG\",\n        \"pseudonym\": \"string\",\n        \"generation_qualifier\": \"DBG\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, \"CA\", new Struct {\n    Type = \"ROOT\",\n    KeyAlgorithm = \"RSA_2048\",\n    SigningAlgorithm = \"SHA256WITHRSA\",\n    Subject = new Struct {\n        Country = \"US\",\n        Organization = \"string\",\n        OrganizationalUnit = \"string\",\n        DistinguishedNameQualifier = \"string\",\n        State = \"string\",\n        CommonName = \"123\",\n        SerialNumber = \"string\",\n        Locality = \"string\",\n        Title = \"string\",\n        Surname = \"string\",\n        GivenName = \"string\",\n        Initials = \"DG\",\n        Pseudonym = \"string\",\n        GenerationQualifier = \"DBG\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object cfnCertificateAuthority = CfnCertificateAuthority.Builder.create(this, \"CA\")\n        .type(\"ROOT\")\n        .keyAlgorithm(\"RSA_2048\")\n        .signingAlgorithm(\"SHA256WITHRSA\")\n        .subject(Map.of(\n                \"country\", \"US\",\n                \"organization\", \"string\",\n                \"organizationalUnit\", \"string\",\n                \"distinguishedNameQualifier\", \"string\",\n                \"state\", \"string\",\n                \"commonName\", \"123\",\n                \"serialNumber\", \"string\",\n                \"locality\", \"string\",\n                \"title\", \"string\",\n                \"surname\", \"string\",\n                \"givenName\", \"string\",\n                \"initials\", \"DG\",\n                \"pseudonym\", \"string\",\n                \"generationQualifier\", \"DBG\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'CA', {\n  type: 'ROOT',\n  keyAlgorithm: 'RSA_2048',\n  signingAlgorithm: 'SHA256WITHRSA',\n  subject: {\n    country: 'US',\n    organization: 'string',\n    organizationalUnit: 'string',\n    distinguishedNameQualifier: 'string',\n    state: 'string',\n    commonName: '123',\n    serialNumber: 'string',\n    locality: 'string',\n    title: 'string',\n    surname: 'string',\n    givenName: 'string',\n    initials: 'DG',\n    pseudonym: 'string',\n    generationQualifier: 'DBG',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 37
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const cfnCertificateAuthority = new acmpca.CfnCertificateAuthority(this, 'CA', {\n  type: 'ROOT',\n  keyAlgorithm: 'RSA_2048',\n  signingAlgorithm: 'SHA256WITHRSA',\n  subject: {\n    country: 'US',\n    organization: 'string',\n    organizationalUnit: 'string',\n    distinguishedNameQualifier: 'string',\n    state: 'string',\n    commonName: '123',\n    serialNumber: 'string',\n    locality: 'string',\n    title: 'string',\n    surname: 'string',\n    givenName: 'string',\n    initials: 'DG',\n    pseudonym: 'string',\n    generationQualifier: 'DBG',\n  },\n});",
      "syntaxKindCounter": {
        "10": 18,
        "75": 21,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "4cf50d0e188db35c92e250b3909a8a8d233add83b01f583a48827d556327f45b": {
      "translations": {
        "python": {
          "source": "certificate_authority = acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"CertificateAuthority\", cfn_certificate_authority.attr_arn)",
          "version": "1"
        },
        "csharp": {
          "source": "var certificateAuthority = acmpca.CertificateAuthority.FromCertificateAuthorityArn(this, \"CertificateAuthority\", cfnCertificateAuthority.AttrArn);",
          "version": "1"
        },
        "java": {
          "source": "Object certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, \"CertificateAuthority\", cfnCertificateAuthority.getAttrArn());",
          "version": "1"
        },
        "$": {
          "source": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CertificateAuthority',\n  cfnCertificateAuthority.attrArn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-acmpca"
        },
        "field": {
          "field": "markdown",
          "line": 64
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const certificateAuthority = acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'CertificateAuthority',\n  cfnCertificateAuthority.attrArn);",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 3,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7d92ba39483a5efbd958c48a126ca3f12b1db9bc1585f02fe6b70fdb97b3c64c": {
      "translations": {
        "python": {
          "source": "# mesh is of type Mesh\n\ncertificate_authority_arn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\"\n\ngateway = appmesh.VirtualGateway(self, \"gateway\",\n    mesh=mesh,\n    listeners=[appmesh.VirtualGatewayListener.http(\n        port=443,\n        health_check=appmesh.HealthCheck.http(\n            interval=cdk.Duration.seconds(10)\n        )\n    )],\n    backend_defaults=appmesh.BackendDefaults(\n        tls_client_policy=appmesh.TlsClientPolicy(\n            ports=[8080, 8081],\n            validation=appmesh.TlsValidation(\n                trust=appmesh.TlsValidationTrust.acm([\n                    acmpca.CertificateAuthority.from_certificate_authority_arn(self, \"certificate\", certificate_authority_arn)\n                ])\n            )\n        )\n    ),\n    access_log=appmesh.AccessLog.from_file_path(\"/dev/stdout\"),\n    virtual_gateway_name=\"virtualGateway\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Mesh mesh;\n\nstring certificateAuthorityArn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\";\n\nVirtualGateway gateway = new VirtualGateway(this, \"gateway\", new VirtualGatewayProps {\n    Mesh = mesh,\n    Listeners = new [] { VirtualGatewayListener.Http(new HttpGatewayListenerOptions {\n        Port = 443,\n        HealthCheck = HealthCheck.Http(new HttpHealthCheckOptions {\n            Interval = Duration.Seconds(10)\n        })\n    }) },\n    BackendDefaults = new BackendDefaults {\n        TlsClientPolicy = new TlsClientPolicy {\n            Ports = new [] { 8080, 8081 },\n            Validation = new TlsValidation {\n                Trust = TlsValidationTrust.Acm(new [] { CertificateAuthority.FromCertificateAuthorityArn(this, \"certificate\", certificateAuthorityArn) })\n            }\n        }\n    },\n    AccessLog = AccessLog.FromFilePath(\"/dev/stdout\"),\n    VirtualGatewayName = \"virtualGateway\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n\nString certificateAuthorityArn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\";\n\nVirtualGateway gateway = VirtualGateway.Builder.create(this, \"gateway\")\n        .mesh(mesh)\n        .listeners(List.of(VirtualGatewayListener.http(HttpGatewayListenerOptions.builder()\n                .port(443)\n                .healthCheck(HealthCheck.http(HttpHealthCheckOptions.builder()\n                        .interval(Duration.seconds(10))\n                        .build()))\n                .build())))\n        .backendDefaults(BackendDefaults.builder()\n                .tlsClientPolicy(TlsClientPolicy.builder()\n                        .ports(List.of(8080, 8081))\n                        .validation(TlsValidation.builder()\n                                .trust(TlsValidationTrust.acm(List.of(CertificateAuthority.fromCertificateAuthorityArn(this, \"certificate\", certificateAuthorityArn))))\n                                .build())\n                        .build())\n                .build())\n        .accessLog(AccessLog.fromFilePath(\"/dev/stdout\"))\n        .virtualGatewayName(\"virtualGateway\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mesh: appmesh.Mesh;\nconst certificateAuthorityArn = 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012';\n\nconst gateway = new appmesh.VirtualGateway(this, 'gateway', {\n  mesh: mesh,\n  listeners: [appmesh.VirtualGatewayListener.http({\n    port: 443,\n    healthCheck: appmesh.HealthCheck.http({\n      interval: cdk.Duration.seconds(10),\n    }),\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      ports: [8080, 8081],\n      validation: {\n        trust: appmesh.TlsValidationTrust.acm([\n          acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'certificate', certificateAuthorityArn)]),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n  virtualGatewayName: 'virtualGateway',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-acmpca.CertificateAuthority"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CertificateAuthority",
        "@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn",
        "@aws-cdk/aws-appmesh.AccessLog",
        "@aws-cdk/aws-appmesh.AccessLog#fromFilePath",
        "@aws-cdk/aws-appmesh.BackendDefaults",
        "@aws-cdk/aws-appmesh.HealthCheck",
        "@aws-cdk/aws-appmesh.HealthCheck#http",
        "@aws-cdk/aws-appmesh.HttpGatewayListenerOptions",
        "@aws-cdk/aws-appmesh.HttpHealthCheckOptions",
        "@aws-cdk/aws-appmesh.IMesh",
        "@aws-cdk/aws-appmesh.TlsClientPolicy",
        "@aws-cdk/aws-appmesh.TlsValidation",
        "@aws-cdk/aws-appmesh.TlsValidationTrust",
        "@aws-cdk/aws-appmesh.TlsValidationTrust#acm",
        "@aws-cdk/aws-appmesh.VirtualGateway",
        "@aws-cdk/aws-appmesh.VirtualGatewayListener",
        "@aws-cdk/aws-appmesh.VirtualGatewayListener#http",
        "@aws-cdk/aws-appmesh.VirtualGatewayProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certificateAuthorityArn = 'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012';\n\nconst gateway = new appmesh.VirtualGateway(this, 'gateway', {\n  mesh: mesh,\n  listeners: [appmesh.VirtualGatewayListener.http({\n    port: 443,\n    healthCheck: appmesh.HealthCheck.http({\n      interval: cdk.Duration.seconds(10),\n    }),\n  })],\n  backendDefaults: {\n    tlsClientPolicy: {\n      ports: [8080, 8081],\n      validation: {\n        trust: appmesh.TlsValidationTrust.acm([\n          acmpca.CertificateAuthority.fromCertificateAuthorityArn(this, 'certificate', certificateAuthorityArn)]),\n      },\n    },\n  },\n  accessLog: appmesh.AccessLog.fromFilePath('/dev/stdout'),\n  virtualGatewayName: 'virtualGateway',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 39,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 6,
        "194": 13,
        "196": 6,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "461ac0d490c257871f798aa7c4ac3b3b91dc9fe24ae6fb263e1d0d1f68ff84f8"
    }
  }
}
