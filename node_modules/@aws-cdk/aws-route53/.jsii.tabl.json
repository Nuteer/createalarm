{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "f5c52d35c47f05643976ae51790c88ce720757d89f6089dacd3bbcbbd8b0655d": {
      "translations": {
        "python": {
          "source": "route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "bd7230347d7bd133f0cd415c7e81a67bdba255b0937288c4862d60d6a487dd6a"
    },
    "44b7e4cc5ada0fe26a7eb15501d431f36b51df57acbb2c4d041bfe92ad3fae6a": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 26
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf160a9a20e1fbad7bce5c6cf66d82cafe62f449b65c929fd40571c74870a13a"
    },
    "3da5b4161e6fea19506fd53bbc7484096932267c3a6a04e4b4ccc9f1ad033c0b": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.TxtRecord(self, \"TXTRecord\",\n    zone=my_zone,\n    record_name=\"_foo\",  # If the name ends with a \".\", it will be used as-is;\n    # if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    # otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    # Defaults to zone root if not specified.\n    values=[\"Bar!\", \"Baz?\"],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew TxtRecord(this, \"TXTRecord\", new TxtRecordProps {\n    Zone = myZone,\n    RecordName = \"_foo\",  // If the name ends with a \".\", it will be used as-is;\n    // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    // Defaults to zone root if not specified.\n    Values = new [] { \"Bar!\", \"Baz?\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nTxtRecord.Builder.create(this, \"TXTRecord\")\n        .zone(myZone)\n        .recordName(\"_foo\") // If the name ends with a \".\", it will be used as-is;\n        // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n        // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n        // Defaults to zone root if not specified.\n        .values(List.of(\"Bar!\", \"Baz?\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 41
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0a5f6df5cafd02be3325e06ad928c7d6996c1ff94ad40694c20d4ea1c66eca10"
    },
    "5591aba5382e8dd8361a206628ff2d897c64cfebe3ef8998b928e058168bed1c": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 60
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "979aa04258ed3b15c1f155a66fab5b8131ee05d54711900f98640497f2085ba3"
    },
    "adc8480f9bd145ba3af2564093018f93893404762c4421e2e795120e9ff9b34d": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b240bbd0e00f9380b57a972e4b706aac39aa56062c3728399fa202c9710c4827"
    },
    "cb4a4082f6230ab9e8e53dddb5577598a2a3a3ad50f5ec760e2e4ae3e955ca2d": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(\"1.2.3.4\", \"5.6.7.8\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(\"1.2.3.4\", \"5.6.7.8\")\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(\"1.2.3.4\", \"5.6.7.8\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses('1.2.3.4', '5.6.7.8'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses('1.2.3.4', '5.6.7.8'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a860596ea9f251e8c4f74ad6dc36aa6e7696fb1229019c9b905d851e47006b3a"
    },
    "123bfbf6b812c08ae0bf1ae5fecabcd4095055bd480989e747f4e1b803d07b92": {
      "translations": {
        "python": {
          "source": "# instance is of type Instance\n\n# my_zone is of type HostedZone\n\n\nelastic_ip = ec2.CfnEIP(self, \"EIP\",\n    domain=\"vpc\",\n    instance_id=instance.instance_id\n)\nroute53.ARecord(self, \"ARecord\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_ip_addresses(elastic_ip.ref)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = new CfnEIP(this, \"EIP\", new CfnEIPProps {\n    Domain = \"vpc\",\n    InstanceId = instance.InstanceId\n});\nnew ARecord(this, \"ARecord\", new ARecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromIpAddresses(elasticIp.Ref)\n});",
          "version": "1"
        },
        "java": {
          "source": "Instance instance;\n\nHostedZone myZone;\n\n\nCfnEIP elasticIp = CfnEIP.Builder.create(this, \"EIP\")\n        .domain(\"vpc\")\n        .instanceId(instance.getInstanceId())\n        .build();\nARecord.Builder.create(this, \"ARecord\")\n        .zone(myZone)\n        .target(RecordTarget.fromIpAddresses(elasticIp.getRef()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const instance: ec2.Instance;\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\n\ndeclare const myZone: route53.HostedZone;\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.CfnEIP",
        "@aws-cdk/aws-ec2.CfnEIPProps",
        "@aws-cdk/aws-ec2.Instance#instanceId",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromIpAddresses",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const instance: ec2.Instance;\n\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst elasticIp = new ec2.CfnEIP(this, 'EIP', {\n  domain: 'vpc',\n  instanceId: instance.instanceId,\n});\nnew route53.ARecord(this, 'ARecord', {\n  zone: myZone,\n  target: route53.RecordTarget.fromIpAddresses(elasticIp.ref),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c6e415c67975c40d5afd3861cf0116dd4b3706e0d8ad2331ffa6a3ccd44eb51c"
    },
    "7f61f8dcc4902fe7af498737c7dd526e56191f7d8346864294cd17b5122dfc75": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone is of type HostedZone\n# distribution is of type CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 119
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9e764f5fc725245204ceafc7df91cc52714d171f92bd3f8e75928dac0355967"
    },
    "3d2a69ae7d292e745749c73c61f0803920cbcba3daae77d7b7265c83836f876f": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 139
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "48202e27f5d937d257cbaaf79a0bf4445114cbab50c8dd4532dcbf8ff24eddf0"
    },
    "e1b78adef4b73ff13307d457a6d8408f40b85fd56ade7a4f8536afe4fd514e13": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 149
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "67d8156ceb803b361c9f77f34401b0835dc9f4ac0014a9729a0c9c88a03630b4"
    },
    "9d7011c271262218c32ed43b48d9790d66279653a5b11a31080763116ec63716": {
      "translations": {
        "python": {
          "source": "route53.HostedZone.from_lookup(self, \"MyZone\",\n    domain_name=\"example.com\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone.FromLookup(this, \"MyZone\", new HostedZoneProviderProps {\n    DomainName = \"example.com\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone.fromLookup(this, \"MyZone\", HostedZoneProviderProps.builder()\n        .domainName(\"example.com\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "route53.HostedZone.fromLookup(this, 'MyZone', {\n  domainName: 'example.com',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nroute53.HostedZone.fromLookup(this, 'MyZone', {\n  domainName: 'example.com',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "231aee46885a39e15beb48edd33cd399c9f28fdf779c372547b01015029af739"
    },
    "dd02f3a7b30325e9d34ae7316f233ce1c5f472f6707ff15cb3925be18ca0386e": {
      "translations": {
        "python": {
          "source": "zone = route53.HostedZone.from_hosted_zone_attributes(self, \"MyZone\",\n    zone_name=\"example.com\",\n    hosted_zone_id=\"ZOJJZC49E0EPZ\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"MyZone\", new HostedZoneAttributes {\n    ZoneName = \"example.com\",\n    HostedZoneId = \"ZOJJZC49E0EPZ\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"MyZone\", HostedZoneAttributes.builder()\n        .zoneName(\"example.com\")\n        .hostedZoneId(\"ZOJJZC49E0EPZ\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 199
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "fd3824abcab82da5bcab7d39044b2b233faaa6911aad2e12409914314acc06d4"
    },
    "642bb75f37a36ef44ba3cc3c3e311e904601a22d7509cb5541ccb04f5224c556": {
      "translations": {
        "python": {
          "source": "zone = route53.HostedZone.from_hosted_zone_id(self, \"MyZone\", \"ZOJJZC49E0EPZ\")",
          "version": "1"
        },
        "csharp": {
          "source": "IHostedZone zone = HostedZone.FromHostedZoneId(this, \"MyZone\", \"ZOJJZC49E0EPZ\");",
          "version": "1"
        },
        "java": {
          "source": "IHostedZone zone = HostedZone.fromHostedZoneId(this, \"MyZone\", \"ZOJJZC49E0EPZ\");",
          "version": "1"
        },
        "$": {
          "source": "const zone = route53.HostedZone.fromHostedZoneId(this, 'MyZone', 'ZOJJZC49E0EPZ');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 209
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneId",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst zone = route53.HostedZone.fromHostedZoneId(this, 'MyZone', 'ZOJJZC49E0EPZ');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "6258fe91aa308a99f76aedc165c63261f2947ce7e6ef994e00bea86b6dbcf618"
    },
    "615799be62e233b505cbfd7a1e068144f983d446ea236fcea99e04bd855e671e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Stack\nfrom aws_cdk.aws_ec2 import Vpc, VpcEndpointService\nfrom aws_cdk.aws_elasticloadbalancingv2 import NetworkLoadBalancer\nfrom aws_cdk.aws_route53 import PublicHostedZone, VpcEndpointServiceDomainName\n\nstack = Stack()\nvpc = Vpc(stack, \"VPC\")\nnlb = NetworkLoadBalancer(stack, \"NLB\",\n    vpc=vpc\n)\nvpces = VpcEndpointService(stack, \"VPCES\",\n    vpc_endpoint_service_load_balancers=[nlb]\n)\n# You must use a public hosted zone so domain ownership can be verified\nzone = PublicHostedZone(stack, \"PHZ\",\n    zone_name=\"aws-cdk.dev\"\n)\nVpcEndpointServiceDomainName(stack, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK.AWS.Route53;\n\nStack stack = new Stack();\nVpc vpc = new Vpc(stack, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(stack, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcEndpointService vpces = new VpcEndpointService(stack, \"VPCES\", new VpcEndpointServiceProps {\n    VpcEndpointServiceLoadBalancers = new [] { nlb }\n});\n// You must use a public hosted zone so domain ownership can be verified\nPublicHostedZone zone = new PublicHostedZone(stack, \"PHZ\", new PublicHostedZoneProps {\n    ZoneName = \"aws-cdk.dev\"\n});\nnew VpcEndpointServiceDomainName(stack, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.ec2.Vpc;\nimport software.amazon.awscdk.services.ec2.VpcEndpointService;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.NetworkLoadBalancer;\nimport software.amazon.awscdk.services.route53.PublicHostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\n\nStack stack = new Stack();\nVpc vpc = new Vpc(stack, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(stack, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcEndpointService vpces = VpcEndpointService.Builder.create(stack, \"VPCES\")\n        .vpcEndpointServiceLoadBalancers(List.of(nlb))\n        .build();\n// You must use a public hosted zone so domain ownership can be verified\nPublicHostedZone zone = PublicHostedZone.Builder.create(stack, \"PHZ\")\n        .zoneName(\"aws-cdk.dev\")\n        .build();\nVpcEndpointServiceDomainName.Builder.create(stack, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { Stack } from '@aws-cdk/core';\nimport { Vpc, VpcEndpointService } from '@aws-cdk/aws-ec2';\nimport { NetworkLoadBalancer } from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { PublicHostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\n\nconst stack = new Stack();\nconst vpc = new Vpc(stack, 'VPC');\nconst nlb = new NetworkLoadBalancer(stack, 'NLB', {\n  vpc,\n});\nconst vpces = new VpcEndpointService(stack, 'VPCES', {\n  vpcEndpointServiceLoadBalancers: [nlb],\n});\n// You must use a public hosted zone so domain ownership can be verified\nconst zone = new PublicHostedZone(stack, 'PHZ', {\n  zoneName: 'aws-cdk.dev',\n});\nnew VpcEndpointServiceDomainName(stack, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-route53"
        },
        "field": {
          "field": "markdown",
          "line": 236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcEndpointService",
        "@aws-cdk/aws-ec2.VpcEndpointServiceProps",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Stack } from '@aws-cdk/core';\nimport { Vpc, VpcEndpointService } from '@aws-cdk/aws-ec2';\nimport { NetworkLoadBalancer } from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { PublicHostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\n\nconst stack = new Stack();\nconst vpc = new Vpc(stack, 'VPC');\nconst nlb = new NetworkLoadBalancer(stack, 'NLB', {\n  vpc,\n});\nconst vpces = new VpcEndpointService(stack, 'VPCES', {\n  vpcEndpointServiceLoadBalancers: [nlb],\n});\n// You must use a public hosted zone so domain ownership can be verified\nconst zone = new PublicHostedZone(stack, 'PHZ', {\n  zoneName: 'aws-cdk.dev',\n});\nnew VpcEndpointServiceDomainName(stack, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
      "syntaxKindCounter": {
        "10": 11,
        "75": 31,
        "192": 1,
        "193": 4,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8df6bd7530943c5673c05a88de1dcb52e7eb050c7f3f42c0655878b79ffa0eeb"
    },
    "de43d9436a2ba511b8b570cbeb5378b980d7f81089ca9f8c07a868a3d8ae3f4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigw\n\n# zone is of type HostedZone\n# rest_api is of type LambdaRestApi\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGateway(restApi))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGateway(restApi)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ARecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "da84de034b74e4ee36190669dac356d7cf084bee4a06d9ccb841837ea5846c14"
    },
    "8a44ee7c02c9eeec7c97eda8f8f3b9a7191e02b1745e94be5a8fce6839dd8e10": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as apigw\n\n# zone is of type HostedZone\n# rest_api is of type LambdaRestApi\n\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(rest_api))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    Target = RecordTarget.FromAlias(new ApiGateway(restApi))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\n\nHostedZone zone;\nLambdaRestApi restApi;\n\n\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .target(RecordTarget.fromAlias(new ApiGateway(restApi)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.ARecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as apigw from '@aws-cdk/aws-apigateway';\n\ndeclare const zone: route53.HostedZone;\ndeclare const restApi: apigw.LambdaRestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(restApi)),\n  // or - route53.RecordTarget.fromAlias(new alias.ApiGatewayDomain(domainName)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "da84de034b74e4ee36190669dac356d7cf084bee4a06d9ccb841837ea5846c14"
    },
    "d613ba5cdbfcf62662ca81c0ced5f30971e695a1c53596fd1be7dcfdc81fccc9": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone is of type HostedZone\n# distribution is of type CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AaaaRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9e764f5fc725245204ceafc7df91cc52714d171f92bd3f8e75928dac0355967"
    },
    "3835a7014a54a586d93bda9139dad15d314e95d01a37b00cf809387e26864cd1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone is of type HostedZone\n# distribution is of type CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.AaaaRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9e764f5fc725245204ceafc7df91cc52714d171f92bd3f8e75928dac0355967"
    },
    "8ea3cd37e28d0972ffdc1473b539763cee3b675a0c90508f7554e62c81928f3b": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "67d8156ceb803b361c9f77f34401b0835dc9f4ac0014a9729a0c9c88a03630b4"
    },
    "821cca2d9c024a20e89a231560ed4d58d10dc86bfa4aeb52c72b6d95512f8034": {
      "translations": {
        "python": {
          "source": "sub_zone = route53.PublicHostedZone(self, \"SubZone\",\n    zone_name=\"sub.someexample.com\"\n)\n\n# import the delegation role by constructing the roleArn\ndelegation_role_arn = Stack.of(self).format_arn(\n    region=\"\",  # IAM is global in each partition\n    service=\"iam\",\n    account=\"parent-account-id\",\n    resource=\"role\",\n    resource_name=\"MyDelegationRole\"\n)\ndelegation_role = iam.Role.from_role_arn(self, \"DelegationRole\", delegation_role_arn)\n\n# create the record\nroute53.CrossAccountZoneDelegationRecord(self, \"delegate\",\n    delegated_zone=sub_zone,\n    parent_hosted_zone_name=\"someexample.com\",  # or you can use parentHostedZoneId\n    delegation_role=delegation_role\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone subZone = new PublicHostedZone(this, \"SubZone\", new PublicHostedZoneProps {\n    ZoneName = \"sub.someexample.com\"\n});\n\n// import the delegation role by constructing the roleArn\nstring delegationRoleArn = Stack.Of(this).FormatArn(new ArnComponents {\n    Region = \"\",  // IAM is global in each partition\n    Service = \"iam\",\n    Account = \"parent-account-id\",\n    Resource = \"role\",\n    ResourceName = \"MyDelegationRole\"\n});\nIRole delegationRole = Role.FromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nnew CrossAccountZoneDelegationRecord(this, \"delegate\", new CrossAccountZoneDelegationRecordProps {\n    DelegatedZone = subZone,\n    ParentHostedZoneName = \"someexample.com\",  // or you can use parentHostedZoneId\n    DelegationRole = delegationRole\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone subZone = PublicHostedZone.Builder.create(this, \"SubZone\")\n        .zoneName(\"sub.someexample.com\")\n        .build();\n\n// import the delegation role by constructing the roleArn\nString delegationRoleArn = Stack.of(this).formatArn(ArnComponents.builder()\n        .region(\"\") // IAM is global in each partition\n        .service(\"iam\")\n        .account(\"parent-account-id\")\n        .resource(\"role\")\n        .resourceName(\"MyDelegationRole\")\n        .build());\nIRole delegationRole = Role.fromRoleArn(this, \"DelegationRole\", delegationRoleArn);\n\n// create the record\n// create the record\nCrossAccountZoneDelegationRecord.Builder.create(this, \"delegate\")\n        .delegatedZone(subZone)\n        .parentHostedZoneName(\"someexample.com\") // or you can use parentHostedZoneId\n        .delegationRole(delegationRole)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecord",
        "@aws-cdk/aws-route53.CrossAccountZoneDelegationRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps",
        "@aws-cdk/core.ArnComponents",
        "@aws-cdk/core.Stack#formatArn",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst subZone = new route53.PublicHostedZone(this, 'SubZone', {\n  zoneName: 'sub.someexample.com',\n});\n\n// import the delegation role by constructing the roleArn\nconst delegationRoleArn = Stack.of(this).formatArn({\n  region: '', // IAM is global in each partition\n  service: 'iam',\n  account: 'parent-account-id',\n  resource: 'role',\n  resourceName: 'MyDelegationRole',\n});\nconst delegationRole = iam.Role.fromRoleArn(this, 'DelegationRole', delegationRoleArn);\n\n// create the record\nnew route53.CrossAccountZoneDelegationRecord(this, 'delegate', {\n  delegatedZone: subZone,\n  parentHostedZoneName: 'someexample.com', // or you can use parentHostedZoneId\n  delegationRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 24,
        "104": 4,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 1
      },
      "fqnsFingerprint": "67d8156ceb803b361c9f77f34401b0835dc9f4ac0014a9729a0c9c88a03630b4"
    },
    "7dd26f066b01075ed274ccbdbe4f5a441000cb0b86d33206aba359df3ae41041": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.DsRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b240bbd0e00f9380b57a972e4b706aac39aa56062c3728399fa202c9710c4827"
    },
    "36cd116cf0e7e97401b692efc4bdf26e308ea91cd53482f28e25940ec52f74e2": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.DsRecord(self, \"DSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"12345 3 1 123456789abcdef67890123456789abcdef67890\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew DsRecord(this, \"DSRecord\", new DsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"12345 3 1 123456789abcdef67890123456789abcdef67890\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nDsRecord.Builder.create(this, \"DSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"12345 3 1 123456789abcdef67890123456789abcdef67890\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.DsRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.DsRecord",
        "@aws-cdk/aws-route53.DsRecordProps",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.DsRecord(this, 'DSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    '12345 3 1 123456789abcdef67890123456789abcdef67890',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b240bbd0e00f9380b57a972e4b706aac39aa56062c3728399fa202c9710c4827"
    },
    "1910d02f98b187cccbce7993a30e24c71a9b3711c14f1c7fc91ac8bbe491cf4a": {
      "translations": {
        "python": {
          "source": "patterns.HttpsRedirect(self, \"Redirect\",\n    record_names=[\"foo.example.com\"],\n    target_domain=\"bar.example.com\",\n    zone=route53.HostedZone.from_hosted_zone_attributes(self, \"HostedZone\",\n        hosted_zone_id=\"ID\",\n        zone_name=\"example.com\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new HttpsRedirect(this, \"Redirect\", new HttpsRedirectProps {\n    RecordNames = new [] { \"foo.example.com\" },\n    TargetDomain = \"bar.example.com\",\n    Zone = HostedZone.FromHostedZoneAttributes(this, \"HostedZone\", new HostedZoneAttributes {\n        HostedZoneId = \"ID\",\n        ZoneName = \"example.com\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpsRedirect.Builder.create(this, \"Redirect\")\n        .recordNames(List.of(\"foo.example.com\"))\n        .targetDomain(\"bar.example.com\")\n        .zone(HostedZone.fromHostedZoneAttributes(this, \"HostedZone\", HostedZoneAttributes.builder()\n                .hostedZoneId(\"ID\")\n                .zoneName(\"example.com\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new patterns.HttpsRedirect(this, 'Redirect', {\n  recordNames: ['foo.example.com'],\n  targetDomain: 'bar.example.com',\n  zone: route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {\n    hostedZoneId: 'ID',\n    zoneName: 'example.com',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-patterns.HttpsRedirect",
        "@aws-cdk/aws-route53-patterns.HttpsRedirectProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as patterns from '@aws-cdk/aws-route53-patterns';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew patterns.HttpsRedirect(this, 'Redirect', {\n  recordNames: ['foo.example.com'],\n  targetDomain: 'bar.example.com',\n  zone: route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {\n    hostedZoneId: 'ID',\n    zoneName: 'example.com',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "104": 2,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "0be1dfd84a3de4aea536859a93c976af749eb5a31a8babfbdc6d8b36687aea01"
    },
    "b45d8e8442a6648b9e607c3962817320703f5a3f62cd2e63c224deb5fd1c0d33": {
      "translations": {
        "python": {
          "source": "zone = route53.HostedZone.from_hosted_zone_attributes(self, \"MyZone\",\n    zone_name=\"example.com\",\n    hosted_zone_id=\"ZOJJZC49E0EPZ\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IHostedZone zone = HostedZone.FromHostedZoneAttributes(this, \"MyZone\", new HostedZoneAttributes {\n    ZoneName = \"example.com\",\n    HostedZoneId = \"ZOJJZC49E0EPZ\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IHostedZone zone = HostedZone.fromHostedZoneAttributes(this, \"MyZone\", HostedZoneAttributes.builder()\n        .zoneName(\"example.com\")\n        .hostedZoneId(\"ZOJJZC49E0EPZ\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromHostedZoneAttributes",
        "@aws-cdk/aws-route53.HostedZoneAttributes",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, 'MyZone', {\n  zoneName: 'example.com',\n  hostedZoneId: 'ZOJJZC49E0EPZ',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "fd3824abcab82da5bcab7d39044b2b233faaa6911aad2e12409914314acc06d4"
    },
    "36efdf5727823bfd0f2e4e33b66e26f954fe65da79c6fcc9a240c6d4ffa408a2": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "3a0762222d93e0e9bf4c9edbd189a6ccec37a81cdbcdc6ccda470f57823712e7"
    },
    "1322f3a73b59e57cd09d5444d149ac651dd693fce86ef206bdcebe3669d98867": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\n\nrecord_name = \"www\"\ndomain_name = \"example.com\"\n\nbucket_website = s3.Bucket(self, \"BucketWebsite\",\n    bucket_name=[record_name, domain_name].join(\".\"),  # www.example.com\n    public_read_access=True,\n    website_index_document=\"index.html\"\n)\n\nzone = route53.HostedZone.from_lookup(self, \"Zone\", domain_name=domain_name) # example.com\n\nroute53.ARecord(self, \"AliasRecord\",\n    zone=zone,\n    record_name=record_name,  # www\n    target=route53.RecordTarget.from_alias(targets.BucketWebsiteTarget(bucket_website))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\n\nstring recordName = \"www\";\nstring domainName = \"example.com\";\n\nBucket bucketWebsite = new Bucket(this, \"BucketWebsite\", new BucketProps {\n    BucketName = new [] { recordName, domainName }.Join(\".\"),  // www.example.com\n    PublicReadAccess = true,\n    WebsiteIndexDocument = \"index.html\"\n});\n\nIHostedZone zone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = domainName }); // example.com\n\n // example.com\nnew ARecord(this, \"AliasRecord\", new ARecordProps {\n    Zone = zone,\n    RecordName = recordName,  // www\n    Target = RecordTarget.FromAlias(new BucketWebsiteTarget(bucketWebsite))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\n\nString recordName = \"www\";\nString domainName = \"example.com\";\n\nBucket bucketWebsite = Bucket.Builder.create(this, \"BucketWebsite\")\n        .bucketName(List.of(recordName, domainName).join(\".\")) // www.example.com\n        .publicReadAccess(true)\n        .websiteIndexDocument(\"index.html\")\n        .build();\n\nIHostedZone zone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(domainName).build()); // example.com\n\n // example.com\nARecord.Builder.create(this, \"AliasRecord\")\n        .zone(zone)\n        .recordName(recordName) // www\n        .target(RecordTarget.fromAlias(new BucketWebsiteTarget(bucketWebsite)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.HostedZoneProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53-targets.BucketWebsiteTarget",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst recordName = 'www';\nconst domainName = 'example.com';\n\nconst bucketWebsite = new s3.Bucket(this, 'BucketWebsite', {\n  bucketName: [recordName, domainName].join('.'), // www.example.com\n  publicReadAccess: true,\n  websiteIndexDocument: 'index.html',\n});\n\nconst zone = route53.HostedZone.fromLookup(this, 'Zone', {domainName}); // example.com\n\nnew route53.ARecord(this, 'AliasRecord', {\n  zone,\n  recordName, // www\n  target: route53.RecordTarget.fromAlias(new targets.BucketWebsiteTarget(bucketWebsite)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "635187c383413abaaed5ae4622382593c87336d541e663f480c6f3086235bb87"
    },
    "b985e48fa351fb2feabfd99ca2a358b7abeea011bb6de094bd191137f7339cfc": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.NsRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "979aa04258ed3b15c1f155a66fab5b8131ee05d54711900f98640497f2085ba3"
    },
    "ff248824caf38e61437ba55b1e8804bd9bc41b9911ca32b11f0dafb286348ff5": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.NsRecord(self, \"NSRecord\",\n    zone=my_zone,\n    record_name=\"foo\",\n    values=[\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"\n    ],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew NsRecord(this, \"NSRecord\", new NsRecordProps {\n    Zone = myZone,\n    RecordName = \"foo\",\n    Values = new [] { \"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nNsRecord.Builder.create(this, \"NSRecord\")\n        .zone(myZone)\n        .recordName(\"foo\")\n        .values(List.of(\"ns-1.awsdns.co.uk.\", \"ns-2.awsdns.com.\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.NsRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.NsRecord",
        "@aws-cdk/aws-route53.NsRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.NsRecord(this, 'NSRecord', {\n  zone: myZone,\n  recordName: 'foo',\n  values: [\n    'ns-1.awsdns.co.uk.',\n    'ns-2.awsdns.com.',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "979aa04258ed3b15c1f155a66fab5b8131ee05d54711900f98640497f2085ba3"
    },
    "e162e1e0485169bb91c7c51b96bac5353a94d93281a655f9e001044e2808ca89": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PrivateHostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf160a9a20e1fbad7bce5c6cf66d82cafe62f449b65c929fd40571c74870a13a"
    },
    "747890b930cf0c1af48ba22cdbcf51a6df27219d186aeb983c2451a0f521f964": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nzone = route53.PrivateHostedZone(self, \"HostedZone\",\n    zone_name=\"fully.qualified.domain.com\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = new PrivateHostedZone(this, \"HostedZone\", new PrivateHostedZoneProps {\n    ZoneName = \"fully.qualified.domain.com\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nPrivateHostedZone zone = PrivateHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"fully.qualified.domain.com\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PrivateHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-route53.PrivateHostedZone",
        "@aws-cdk/aws-route53.PrivateHostedZoneProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst zone = new route53.PrivateHostedZone(this, 'HostedZone', {\n  zoneName: 'fully.qualified.domain.com',\n  vpc,    // At least one VPC has to be added to a Private Hosted Zone.\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cf160a9a20e1fbad7bce5c6cf66d82cafe62f449b65c929fd40571c74870a13a"
    },
    "891576970f66d352bdd54585ba852e024e86393b14abb4944a9ecffec524c838": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PublicHostedZone"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "48202e27f5d937d257cbaaf79a0bf4445114cbab50c8dd4532dcbf8ff24eddf0"
    },
    "5ac1c3390f44911cfb8beb681961b9f453c4d2f0e125a9f035f105d133a7c14f": {
      "translations": {
        "python": {
          "source": "parent_zone = route53.PublicHostedZone(self, \"HostedZone\",\n    zone_name=\"someexample.com\",\n    cross_account_zone_delegation_principal=iam.AccountPrincipal(\"12345678901\"),\n    cross_account_zone_delegation_role_name=\"MyDelegationRole\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PublicHostedZone parentZone = new PublicHostedZone(this, \"HostedZone\", new PublicHostedZoneProps {\n    ZoneName = \"someexample.com\",\n    CrossAccountZoneDelegationPrincipal = new AccountPrincipal(\"12345678901\"),\n    CrossAccountZoneDelegationRoleName = \"MyDelegationRole\"\n});",
          "version": "1"
        },
        "java": {
          "source": "PublicHostedZone parentZone = PublicHostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"someexample.com\")\n        .crossAccountZoneDelegationPrincipal(new AccountPrincipal(\"12345678901\"))\n        .crossAccountZoneDelegationRoleName(\"MyDelegationRole\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.PublicHostedZoneProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-route53.PublicHostedZone",
        "@aws-cdk/aws-route53.PublicHostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst parentZone = new route53.PublicHostedZone(this, 'HostedZone', {\n  zoneName: 'someexample.com',\n  crossAccountZoneDelegationPrincipal: new iam.AccountPrincipal('12345678901'),\n  crossAccountZoneDelegationRoleName: 'MyDelegationRole',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "48202e27f5d937d257cbaaf79a0bf4445114cbab50c8dd4532dcbf8ff24eddf0"
    },
    "6e23a9e4620d41debc278be69838198a56b8f2c09626693121f19ad901233312": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudfront as cloudfront\n\n# my_zone is of type HostedZone\n# distribution is of type CloudFrontWebDistribution\n\nroute53.AaaaRecord(self, \"Alias\",\n    zone=my_zone,\n    target=route53.RecordTarget.from_alias(targets.CloudFrontTarget(distribution))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudFront;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nnew AaaaRecord(this, \"Alias\", new AaaaRecordProps {\n    Zone = myZone,\n    Target = RecordTarget.FromAlias(new CloudFrontTarget(distribution))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudfront.*;\n\nHostedZone myZone;\nCloudFrontWebDistribution distribution;\n\nAaaaRecord.Builder.create(this, \"Alias\")\n        .zone(myZone)\n        .target(RecordTarget.fromAlias(new CloudFrontTarget(distribution)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.RecordTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.IDistribution",
        "@aws-cdk/aws-route53-targets.CloudFrontTarget",
        "@aws-cdk/aws-route53.AaaaRecord",
        "@aws-cdk/aws-route53.AaaaRecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\n\ndeclare const myZone: route53.HostedZone;\ndeclare const distribution: cloudfront.CloudFrontWebDistribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew route53.AaaaRecord(this, 'Alias', {\n  zone: myZone,\n  target: route53.RecordTarget.fromAlias(new targets.CloudFrontTarget(distribution)),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f9e764f5fc725245204ceafc7df91cc52714d171f92bd3f8e75928dac0355967"
    },
    "74508907f58d8a4cac2c36580f602d1b08382b4e70613d8beaa3d7683fc3b2b1": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.TxtRecord(self, \"TXTRecord\",\n    zone=my_zone,\n    record_name=\"_foo\",  # If the name ends with a \".\", it will be used as-is;\n    # if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    # otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    # Defaults to zone root if not specified.\n    values=[\"Bar!\", \"Baz?\"],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew TxtRecord(this, \"TXTRecord\", new TxtRecordProps {\n    Zone = myZone,\n    RecordName = \"_foo\",  // If the name ends with a \".\", it will be used as-is;\n    // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    // Defaults to zone root if not specified.\n    Values = new [] { \"Bar!\", \"Baz?\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nTxtRecord.Builder.create(this, \"TXTRecord\")\n        .zone(myZone)\n        .recordName(\"_foo\") // If the name ends with a \".\", it will be used as-is;\n        // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n        // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n        // Defaults to zone root if not specified.\n        .values(List.of(\"Bar!\", \"Baz?\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.TxtRecord"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0a5f6df5cafd02be3325e06ad928c7d6996c1ff94ad40694c20d4ea1c66eca10"
    },
    "a4b6441052a4fea976e8e0addd1175f337b97fa9bc2a2022f46c4048417bc6f9": {
      "translations": {
        "python": {
          "source": "# my_zone is of type HostedZone\n\n\nroute53.TxtRecord(self, \"TXTRecord\",\n    zone=my_zone,\n    record_name=\"_foo\",  # If the name ends with a \".\", it will be used as-is;\n    # if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    # otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    # Defaults to zone root if not specified.\n    values=[\"Bar!\", \"Baz?\"],\n    ttl=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone myZone;\n\n\nnew TxtRecord(this, \"TXTRecord\", new TxtRecordProps {\n    Zone = myZone,\n    RecordName = \"_foo\",  // If the name ends with a \".\", it will be used as-is;\n    // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n    // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n    // Defaults to zone root if not specified.\n    Values = new [] { \"Bar!\", \"Baz?\" },\n    Ttl = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone myZone;\n\n\nTxtRecord.Builder.create(this, \"TXTRecord\")\n        .zone(myZone)\n        .recordName(\"_foo\") // If the name ends with a \".\", it will be used as-is;\n        // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n        // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n        // Defaults to zone root if not specified.\n        .values(List.of(\"Bar!\", \"Baz?\"))\n        .ttl(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myZone: route53.HostedZone;\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.TxtRecordProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.TxtRecord",
        "@aws-cdk/aws-route53.TxtRecordProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myZone: route53.HostedZone;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.TxtRecord(this, 'TXTRecord', {\n  zone: myZone,\n  recordName: '_foo',  // If the name ends with a \".\", it will be used as-is;\n                       // if it ends with a \".\" followed by the zone name, a trailing \".\" will be added automatically;\n                       // otherwise, a \".\", the zone name, and a trailing \".\" will be added automatically.\n                       // Defaults to zone root if not specified.\n  values: [            // Will be quoted for you, and \" will be escaped automatically.\n    'Bar!',\n    'Baz?',\n  ],\n  ttl: Duration.minutes(90),       // Optional - default is 30 minutes\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "0a5f6df5cafd02be3325e06ad928c7d6996c1ff94ad40694c20d4ea1c66eca10"
    },
    "1d0770bb01842df6619fbe2875e69d59bacaf4f327b1fa685a5452f9495dafbc": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone is of type HostedZone\n# vpces is of type VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.VpcEndpointServiceDomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6f133d86c53e4fad7a4eb422a2de7f88b3c4a13386cf83297b82edc9053f528a"
    },
    "762a5d83e6790ae34a1882a74a1a80b5535d00764e950d87a4a9399f4a7b4deb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone, VpcEndpointServiceDomainName\n# zone is of type HostedZone\n# vpces is of type VpcEndpointService\n\n\nVpcEndpointServiceDomainName(self, \"EndpointDomain\",\n    endpoint_service=vpces,\n    domain_name=\"my-stuff.aws-cdk.dev\",\n    public_hosted_zone=zone\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nnew VpcEndpointServiceDomainName(this, \"EndpointDomain\", new VpcEndpointServiceDomainNameProps {\n    EndpointService = vpces,\n    DomainName = \"my-stuff.aws-cdk.dev\",\n    PublicHostedZone = zone\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.route53.VpcEndpointServiceDomainName;\nHostedZone zone;\nVpcEndpointService vpces;\n\n\nVpcEndpointServiceDomainName.Builder.create(this, \"EndpointDomain\")\n        .endpointService(vpces)\n        .domainName(\"my-stuff.aws-cdk.dev\")\n        .publicHostedZone(zone)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpcEndpointService",
        "@aws-cdk/aws-route53.IPublicHostedZone",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainName",
        "@aws-cdk/aws-route53.VpcEndpointServiceDomainNameProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone, VpcEndpointServiceDomainName } from '@aws-cdk/aws-route53';\ndeclare const zone: HostedZone;\ndeclare const vpces: ec2.VpcEndpointService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Aspects, Construct, Duration, Fn, Size, Stack, StackProps } from '@aws-cdk/core';\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport s3 = require('@aws-cdk/aws-s3');\nimport iam = require('@aws-cdk/aws-iam');\nimport logs = require('@aws-cdk/aws-logs');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport rds = require('@aws-cdk/aws-rds');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew VpcEndpointServiceDomainName(this, 'EndpointDomain', {\n  endpointService: vpces,\n  domainName: 'my-stuff.aws-cdk.dev',\n  publicHostedZone: zone,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 1,
        "169": 2,
        "193": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6f133d86c53e4fad7a4eb422a2de7f88b3c4a13386cf83297b82edc9053f528a"
    }
  }
}
