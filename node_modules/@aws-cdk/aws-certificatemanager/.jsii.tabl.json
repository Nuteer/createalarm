{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "486b9f1fb72cee6d4a52c51b50dc485518307a5bf76b618ac7592a59e976d74a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\nmy_hosted_zone = route53.HostedZone(self, \"HostedZone\",\n    zone_name=\"example.com\"\n)\nacm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone myHostedZone = new HostedZone(this, \"HostedZone\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nnew Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone myHostedZone = HostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"example.com\")\n        .build();\nCertificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 42
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.CertificateValidation",
        "@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0f7f5a0ee7115200d446e9888ffdc0f542cfb95419b57443683fba6b58c80c62"
    },
    "3358a2b9bd99fbc696c49e03b972e5059cf27112cc4142bd4dd6a466690884af": {
      "translations": {
        "python": {
          "source": "acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new acm.Certificate(this, \"Certificate\", new Struct {\n    DomainName = \"hello.example.com\",\n    Validation = acm.CertificateValidation.FromDns()\n});",
          "version": "1"
        },
        "java": {
          "source": "Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(acm.CertificateValidation.fromDns())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(), // Records must be added manually\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 58
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(), // Records must be added manually\n});",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "e11e50b93a415ed94712745ef99bb0b86aa326d2656219083f35f65037199165": {
      "translations": {
        "python": {
          "source": "example_com = route53.HostedZone(self, \"ExampleCom\",\n    zone_name=\"example.com\"\n)\nexample_net = route53.HostedZone(self, \"ExampleNet\",\n    zone_name=\"example.net\"\n)\n\ncert = acm.Certificate(self, \"Certificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],\n    validation=acm.CertificateValidation.from_dns_multi_zone(\n        test.example.com=example_com,\n        cool.example.com=example_com,\n        test.example.net=example_net\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var exampleCom = new route53.HostedZone(this, \"ExampleCom\", new Struct {\n    ZoneName = \"example.com\"\n});\nvar exampleNet = new route53.HostedZone(this, \"ExampleNet\", new Struct {\n    ZoneName = \"example.net\"\n});\n\nvar cert = new acm.Certificate(this, \"Certificate\", new Struct {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },\n    Validation = acm.CertificateValidation.FromDnsMultiZone(new Struct {\n        Test.example.com = exampleCom,\n        Cool.example.com = exampleCom,\n        Test.example.net = exampleNet\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Object exampleCom = HostedZone.Builder.create(this, \"ExampleCom\")\n        .zoneName(\"example.com\")\n        .build();\nObject exampleNet = HostedZone.Builder.create(this, \"ExampleNet\")\n        .zoneName(\"example.net\")\n        .build();\n\nObject cert = Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\"))\n        .validation(acm.CertificateValidation.fromDnsMultiZone(Map.of(\n                \"test.example.com\", exampleCom,\n                \"cool.example.com\", exampleCom,\n                \"test.example.net\", exampleNet)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const exampleCom = new route53.HostedZone(this, 'ExampleCom', {\n  zoneName: 'example.com',\n});\nconst exampleNet = new route53.HostedZone(this, 'ExampleNet', {\n  zoneName: 'example.net',\n});\n\nconst cert = new acm.Certificate(this, 'Certificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'],\n  validation: acm.CertificateValidation.fromDnsMultiZone({\n    'test.example.com': exampleCom,\n    'cool.example.com': exampleCom,\n    'test.example.net': exampleNet,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 67
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const exampleCom = new route53.HostedZone(this, 'ExampleCom', {\n  zoneName: 'example.com',\n});\nconst exampleNet = new route53.HostedZone(this, 'ExampleNet', {\n  zoneName: 'example.net',\n});\n\nconst cert = new acm.Certificate(this, 'Certificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'],\n  validation: acm.CertificateValidation.fromDnsMultiZone({\n    'test.example.com': exampleCom,\n    'cool.example.com': exampleCom,\n    'test.example.net': exampleNet,\n  }),\n});",
      "syntaxKindCounter": {
        "10": 11,
        "75": 20,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "f4318609f3e0e429d6a40e73a40a59a06ab98df1a19831c9afc849eba078dc2d": {
      "translations": {
        "python": {
          "source": "acm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_email()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new acm.Certificate(this, \"Certificate\", new Struct {\n    DomainName = \"hello.example.com\",\n    Validation = acm.CertificateValidation.FromEmail()\n});",
          "version": "1"
        },
        "java": {
          "source": "Certificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(acm.CertificateValidation.fromEmail())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromEmail(), // Optional, this is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 95
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromEmail(), // Optional, this is the default\n});",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "df7235c79cb47d1a2be5ae446f7a261181e53add47019ec50d2eb8392bd3b55a": {
      "translations": {
        "python": {
          "source": "acm.DnsValidatedCertificate(self, \"CrossRegionCertificate\",\n    domain_name=\"hello.example.com\",\n    hosted_zone=my_hosted_zone,\n    region=\"us-east-1\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new acm.DnsValidatedCertificate(this, \"CrossRegionCertificate\", new Struct {\n    DomainName = \"hello.example.com\",\n    HostedZone = myHostedZone,\n    Region = \"us-east-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "DnsValidatedCertificate.Builder.create(this, \"CrossRegionCertificate\")\n        .domainName(\"hello.example.com\")\n        .hostedZone(myHostedZone)\n        .region(\"us-east-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 108
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "new acm.DnsValidatedCertificate(this, 'CrossRegionCertificate', {\n  domainName: 'hello.example.com',\n  hostedZone: myHostedZone,\n  region: 'us-east-1',\n});",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "0cdea6d376ab8ed388b6201300b0e05a3a2ba2f58cab595e795159c379519b76": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_acmpca as acmpca\n\nacm.PrivateCertificate(stack, \"PrivateCertificate\",\n    domain_name=\"test.example.com\",\n    subject_alternative_names=[\"cool.example.com\", \"test.example.net\"],  # optional\n    certificate_authority=acmpca.CertificateAuthority.from_certificate_authority_arn(stack, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ACMPCA;\n\nnew acm.PrivateCertificate(stack, \"PrivateCertificate\", new Struct {\n    DomainName = \"test.example.com\",\n    SubjectAlternativeNames = new [] { \"cool.example.com\", \"test.example.net\" },  // optional\n    CertificateAuthority = CertificateAuthority.FromCertificateAuthorityArn(stack, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.acmpca.*;\n\nPrivateCertificate.Builder.create(stack, \"PrivateCertificate\")\n        .domainName(\"test.example.com\")\n        .subjectAlternativeNames(List.of(\"cool.example.com\", \"test.example.net\")) // optional\n        .certificateAuthority(CertificateAuthority.fromCertificateAuthorityArn(stack, \"CA\", \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acmpca from '@aws-cdk/aws-acmpca';\n\nnew acm.PrivateCertificate(stack, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 120
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-acmpca.CertificateAuthority",
        "@aws-cdk/aws-acmpca.CertificateAuthority#fromCertificateAuthorityArn",
        "@aws-cdk/aws-acmpca.ICertificateAuthority"
      ],
      "fullSource": "import * as acmpca from '@aws-cdk/aws-acmpca';\n\nnew acm.PrivateCertificate(stack, 'PrivateCertificate', {\n  domainName: 'test.example.com',\n  subjectAlternativeNames: ['cool.example.com', 'test.example.net'], // optional\n  certificateAuthority: acmpca.CertificateAuthority.fromCertificateAuthorityArn(stack, 'CA',\n    'arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/023077d8-2bfa-4eb0-8f22-05c96deade77'),\n});",
      "syntaxKindCounter": {
        "10": 7,
        "75": 11,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ce3cab5b9787cdbf65a823aa09a8dabbff4a826b1137023db2d31db138ef7cbe"
    },
    "5cfe85e4543fa6ae448f42c874b4ea7fc06453822e4836756bf7713fd9de5af1": {
      "translations": {
        "python": {
          "source": "arn = \"arn:aws:...\"\ncertificate = Certificate.from_certificate_arn(self, \"Certificate\", arn)",
          "version": "1"
        },
        "csharp": {
          "source": "string arn = \"arn:aws:...\";\nvar certificate = Certificate.FromCertificateArn(this, \"Certificate\", arn);",
          "version": "1"
        },
        "java": {
          "source": "String arn = \"arn:aws:...\";\nObject certificate = Certificate.fromCertificateArn(this, \"Certificate\", arn);",
          "version": "1"
        },
        "$": {
          "source": "const arn = 'arn:aws:...';\nconst certificate = Certificate.fromCertificateArn(this, 'Certificate', arn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const arn = 'arn:aws:...';\nconst certificate = Certificate.fromCertificateArn(this, 'Certificate', arn);",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "83da3dcb13153cfd03afacb607d75e214197b7bc1418f1db8a7871bcc9def7f8": {
      "translations": {
        "python": {
          "source": "certificate = Certificate(self, \"Certificate\")\ncertificate.metric_days_to_expiry().create_alarm(\n    comparison_operator=cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n    evaluation_periods=1,\n    threshold=45\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var certificate = new Certificate(this, \"Certificate\", new Struct { });\ncertificate.MetricDaysToExpiry().CreateAlarm(new Struct {\n    ComparisonOperator = cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n    EvaluationPeriods = 1,\n    Threshold = 45\n});",
          "version": "1"
        },
        "java": {
          "source": "Object certificate = Certificate.Builder.create(this, \"Certificate\").build();\ncertificate.metricDaysToExpiry().createAlarm(Map.of(\n        \"comparisonOperator\", cloudwatch.getComparisonOperator().getLESS_THAN_THRESHOLD(),\n        \"evaluationPeriods\", 1,\n        \"threshold\", 45));",
          "version": "1"
        },
        "$": {
          "source": "const certificate = new Certificate(this, 'Certificate', { /* ... */ });\ncertificate.metricDaysToExpiry().createAlarm({\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-certificatemanager"
        },
        "field": {
          "field": "markdown",
          "line": 154
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const certificate = new Certificate(this, 'Certificate', { /* ... */ });\ncertificate.metricDaysToExpiry().createAlarm({\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n  evaluationPeriods: 1,\n  threshold: 45, // Automatic rotation happens between 60 and 45 days before expiry\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b01df0bfbf3b383d8545d31d7f9b95115c9f4277216d0276cec064ff20cc6f0a": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nstring certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-certificatemanager.Certificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.CustomDomainOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 19,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "e939ee8dd280a23cce9e29116548f642d5b0f4bcaa666ea68c69268ae1c9c054"
    },
    "83ea950f4fc51a1a6bad625911d52de5826ddfa07c475582aeab6c38151b330d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\nmy_hosted_zone = route53.HostedZone(self, \"HostedZone\",\n    zone_name=\"example.com\"\n)\nacm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone myHostedZone = new HostedZone(this, \"HostedZone\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nnew Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone myHostedZone = HostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"example.com\")\n        .build();\nCertificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-certificatemanager.CertificateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.CertificateValidation",
        "@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0f7f5a0ee7115200d446e9888ffdc0f542cfb95419b57443683fba6b58c80c62"
    },
    "b505ca9d77c0cc14e7a55d8f817a18f5918628dae709952c6906a0d515dee9b3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\nmy_hosted_zone = route53.HostedZone(self, \"HostedZone\",\n    zone_name=\"example.com\"\n)\nacm.Certificate(self, \"Certificate\",\n    domain_name=\"hello.example.com\",\n    validation=acm.CertificateValidation.from_dns(my_hosted_zone)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone myHostedZone = new HostedZone(this, \"HostedZone\", new HostedZoneProps {\n    ZoneName = \"example.com\"\n});\nnew Certificate(this, \"Certificate\", new CertificateProps {\n    DomainName = \"hello.example.com\",\n    Validation = CertificateValidation.FromDns(myHostedZone)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone myHostedZone = HostedZone.Builder.create(this, \"HostedZone\")\n        .zoneName(\"example.com\")\n        .build();\nCertificate.Builder.create(this, \"Certificate\")\n        .domainName(\"hello.example.com\")\n        .validation(CertificateValidation.fromDns(myHostedZone))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-certificatemanager.CertificateValidation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.CertificateProps",
        "@aws-cdk/aws-certificatemanager.CertificateValidation",
        "@aws-cdk/aws-certificatemanager.CertificateValidation#fromDns",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZoneProps",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\nconst myHostedZone = new route53.HostedZone(this, 'HostedZone', {\n  zoneName: 'example.com',\n});\nnew acm.Certificate(this, 'Certificate', {\n  domainName: 'hello.example.com',\n  validation: acm.CertificateValidation.fromDns(myHostedZone),\n});",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "0f7f5a0ee7115200d446e9888ffdc0f542cfb95419b57443683fba6b58c80c62"
    },
    "802e3af62d85b46b6522e631bd4d4589765a3dc25447cd832290fcfffe7fd548": {
      "translations": {
        "python": {
          "source": "# To use your own domain name in a Distribution, you must associate a certificate\nimport aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone is of type HostedZone\n\n# my_bucket is of type Bucket\n\nmy_certificate = acm.DnsValidatedCertificate(self, \"mySiteCert\",\n    domain_name=\"www.example.com\",\n    hosted_zone=hosted_zone\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    certificate=my_certificate\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = new DnsValidatedCertificate(this, \"mySiteCert\", new DnsValidatedCertificateProps {\n    DomainName = \"www.example.com\",\n    HostedZone = hostedZone\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(myBucket) },\n    DomainNames = new [] { \"www.example.com\" },\n    Certificate = myCertificate\n});",
          "version": "1"
        },
        "java": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = DnsValidatedCertificate.Builder.create(this, \"mySiteCert\")\n        .domainName(\"www.example.com\")\n        .hostedZone(hostedZone)\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(myBucket)).build())\n        .domainNames(List.of(\"www.example.com\"))\n        .certificate(myCertificate)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-certificatemanager.DnsValidatedCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificate",
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "22a61764c28f7afead8fbe014b95736ef49cdbc0911c70a94f861aa1e928701c"
    },
    "68ac67ba90cb0c6e46ccc5079eb466fc472b8859bf578ba5f17fca86c1dcbcc9": {
      "translations": {
        "python": {
          "source": "# To use your own domain name in a Distribution, you must associate a certificate\nimport aws_cdk.aws_certificatemanager as acm\nimport aws_cdk.aws_route53 as route53\n\n# hosted_zone is of type HostedZone\n\n# my_bucket is of type Bucket\n\nmy_certificate = acm.DnsValidatedCertificate(self, \"mySiteCert\",\n    domain_name=\"www.example.com\",\n    hosted_zone=hosted_zone\n)\ncloudfront.Distribution(self, \"myDist\",\n    default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket)),\n    domain_names=[\"www.example.com\"],\n    certificate=my_certificate\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.Route53;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = new DnsValidatedCertificate(this, \"mySiteCert\", new DnsValidatedCertificateProps {\n    DomainName = \"www.example.com\",\n    HostedZone = hostedZone\n});\nnew Distribution(this, \"myDist\", new DistributionProps {\n    DefaultBehavior = new BehaviorOptions { Origin = new S3Origin(myBucket) },\n    DomainNames = new [] { \"www.example.com\" },\n    Certificate = myCertificate\n});",
          "version": "1"
        },
        "java": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.route53.*;\n\nHostedZone hostedZone;\n\nBucket myBucket;\n\nDnsValidatedCertificate myCertificate = DnsValidatedCertificate.Builder.create(this, \"mySiteCert\")\n        .domainName(\"www.example.com\")\n        .hostedZone(hostedZone)\n        .build();\nDistribution.Builder.create(this, \"myDist\")\n        .defaultBehavior(BehaviorOptions.builder().origin(new S3Origin(myBucket)).build())\n        .domainNames(List.of(\"www.example.com\"))\n        .certificate(myCertificate)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\n\ndeclare const myBucket: s3.Bucket;\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificate",
        "@aws-cdk/aws-certificatemanager.DnsValidatedCertificateProps",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cloudfront-origins.S3Origin",
        "@aws-cdk/aws-cloudfront.BehaviorOptions",
        "@aws-cdk/aws-cloudfront.Distribution",
        "@aws-cdk/aws-cloudfront.DistributionProps",
        "@aws-cdk/aws-cloudfront.IOrigin",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// To use your own domain name in a Distribution, you must associate a certificate\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n\ndeclare const myBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\nimport * as origins from '@aws-cdk/aws-cloudfront-origins';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myCertificate = new acm.DnsValidatedCertificate(this, 'mySiteCert', {\n  domainName: 'www.example.com',\n  hostedZone,\n});\nnew cloudfront.Distribution(this, 'myDist', {\n  defaultBehavior: { origin: new origins.S3Origin(myBucket) },\n  domainNames: ['www.example.com'],\n  certificate: myCertificate,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 23,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "22a61764c28f7afead8fbe014b95736ef49cdbc0911c70a94f861aa1e928701c"
    }
  }
}
