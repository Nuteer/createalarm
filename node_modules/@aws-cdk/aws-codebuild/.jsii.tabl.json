{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "59de3f29276699716966954464d5d541f50ecc96424793d9e62a92a9253649ff": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 33
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as codebuild from '@aws-cdk/aws-codebuild';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "3970ad5bd47707446409ba245638da5596c2b45f360633ea7af617726920f3bb": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 52
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    /// !show\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              'echo \"Hello, CodeBuild!\"',\n            ],\n          },\n        },\n      }),\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'codebuild-default-project');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "fd86cd5f88ea17c669a2f2f3ac3b839de365e1a93e9020c11dec2ab32a2674ba"
    },
    "5d79ef20e7ffe45d90b05d1de72bb6bb228a9a5c4db298c44179a59a2fb323c4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\n\nrepository = codecommit.Repository(self, \"MyRepo\", repository_name=\"foo\")\ncodebuild.Project(self, \"MyFirstCodeCommitProject\",\n    source=codebuild.Source.code_commit(repository=repository)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repository = new Repository(this, \"MyRepo\", new RepositoryProps { RepositoryName = \"foo\" });\nnew Project(this, \"MyFirstCodeCommitProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repository })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repository = Repository.Builder.create(this, \"MyRepo\").repositoryName(\"foo\").build();\nProject.Builder.create(this, \"MyFirstCodeCommitProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repository).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repository = new codecommit.Repository(this, 'MyRepo', { repositoryName: 'foo' });\nnew codebuild.Project(this, 'MyFirstCodeCommitProject', {\n  source: codebuild.Source.codeCommit({ repository }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 71
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repository = new codecommit.Repository(this, 'MyRepo', { repositoryName: 'foo' });\nnew codebuild.Project(this, 'MyFirstCodeCommitProject', {\n  source: codebuild.Source.codeCommit({ repository }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 2,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ab0401126974b4b94b4da7250a44bc5bc6854b85698f6e807f3bd0f4a1dba8a5"
    },
    "8187801863c4733be74d82111cdfad1bfbde8c5920dc2fa622ecc347337f2531": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\n\ncodebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.s3(\n        bucket=bucket,\n        path=\"path/to/file.zip\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nnew Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.S3(new S3SourceProps {\n        Bucket = bucket,\n        Path = \"path/to/file.zip\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nProject.Builder.create(this, \"MyProject\")\n        .source(Source.s3(S3SourceProps.builder()\n                .bucket(bucket)\n                .path(\"path/to/file.zip\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 84
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3SourceProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#s3",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "2074d7993efcf4150db27824fce3e246429d60ff8f5e0e8f22921dd71065c4e2"
    },
    "e2da1a73c78678cc6f5af77c56de51a4abccd13a5293e8e263bf7da2fb18ed2d": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0fffca90dfb0745873c0f47f530909a756d06267a17f15c76c9aa661f9ecb8ff"
    },
    "472459439f1eb9ec3fe2c925771012d81b6316028d6f18953d33fa0ba0e005fa": {
      "translations": {
        "python": {
          "source": "bb_source = codebuild.Source.bit_bucket(\n    owner=\"owner\",\n    repo=\"repo\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource bbSource = Source.BitBucket(new BitBucketSourceProps {\n    Owner = \"owner\",\n    Repo = \"repo\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource bbSource = Source.bitBucket(BitBucketSourceProps.builder()\n        .owner(\"owner\")\n        .repo(\"repo\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "626f3f34e9672d9da695110f5923e5b21e929ef813df255e00a8501ea7b5b926"
    },
    "050d470b4e7dff1a04d98e73687df3fe6ef11f3a89c615aa368f19954ad6cba9": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    fetch_submodules=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    FetchSubmodules = true\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .fetchSubmodules(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  fetchSubmodules: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 140
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  fetchSubmodules: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e0f8c5b7a99564b5acec9b53d60fcbaf090c51f05371cb241642397314f41d54"
    },
    "085bab3997a9782fe5d20d3896437ac8b3d8ecaeecc743c2f6569b035e0baca9": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ed81c8b9d936b8a9db52b43c720e17f5ae5a5e516acac352d72b3058195246a"
    },
    "9ee1cc80c888172237de1bf978384fb3c090dbb8fb656f7ee27a2ee51207e075": {
      "translations": {
        "python": {
          "source": "project = codebuild.PipelineProject(self, \"Project\")",
          "version": "1"
        },
        "csharp": {
          "source": "PipelineProject project = new PipelineProject(this, \"Project\", new PipelineProjectProps { });",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project = PipelineProject.Builder.create(this, \"Project\").build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.PipelineProject(this, 'Project', {\n  // properties as above...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 186
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.PipelineProject(this, 'Project', {\n  // properties as above...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "bea83995a09da3cb9e73054d771c57105088975e41692d313d4404fe68952a32"
    },
    "c081d3235425908f1614a405543c91f4d49a9b98c80a24d50488156deea0bfac": {
      "translations": {
        "python": {
          "source": "# my_caching_bucket is of type Bucket\n\n\ncodebuild.Project(self, \"Project\",\n    source=codebuild.Source.bit_bucket(\n        owner=\"awslabs\",\n        repo=\"aws-cdk\"\n    ),\n\n    cache=codebuild.Cache.bucket(my_caching_bucket),\n\n    # BuildSpec with a 'cache' section necessary for S3 caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myCachingBucket;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Source = Source.BitBucket(new BitBucketSourceProps {\n        Owner = \"awslabs\",\n        Repo = \"aws-cdk\"\n    }),\n\n    Cache = Cache.Bucket(myCachingBucket),\n\n    // BuildSpec with a 'cache' section necessary for S3 caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myCachingBucket;\n\n\nProject.Builder.create(this, \"Project\")\n        .source(Source.bitBucket(BitBucketSourceProps.builder()\n                .owner(\"awslabs\")\n                .repo(\"aws-cdk\")\n                .build()))\n\n        .cache(Cache.bucket(myCachingBucket))\n\n        // BuildSpec with a 'cache' section necessary for S3 caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myCachingBucket: s3.Bucket;\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 205
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#bucket",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myCachingBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "079855e72cce5bed0da08b76f4b22a35827d3303ac30de4b728b4015d7a961d9"
    },
    "49ba5fc28107f7c5b9111da310b960dafb8432ec94240e6fb1ace9f78a8e0f41": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 252
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "abb73784a4c2a7bd626f35bdcaf80db7faee1d9286e6c28369f0f9be8cfa58c4"
    },
    "2fde47a725abd4b31e5e7b55933be824ea191a7ff58774802cb539b3f5fc63f1": {
      "translations": {
        "python": {
          "source": "# ecr_repository is of type Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 321
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fd1d2895cccd9f2bfa628b11830fbd9b66ced51f84cb1a04cf39b90d28a9399e"
    },
    "06821509fd03f9107ebbb67c99e6a3ddddafacd047771212a5b941ef1fd59d48": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_asset(self, \"MyImage\",\n        directory=path.join(__dirname, \"demo-image\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromAsset(this, \"MyImage\", new DockerImageAssetProps {\n        Directory = Join(__dirname, \"demo-image\")\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromAsset(this, \"MyImage\", DockerImageAssetProps.builder()\n                .directory(join(__dirname, \"demo-image\"))\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'MyImage', {\n    directory: path.join(__dirname, 'demo-image'),\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 339
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps"
      ],
      "fullSource": "import * as path from 'path';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'MyImage', {\n          directory: path.join(__dirname, 'demo-image'),\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "281": 3
      },
      "fqnsFingerprint": "9f3d99d46694e6cb69588a49ba21b7640251ecefd678c13134fe30fe10678516"
    },
    "e57c6d976be31743cd46e9669624bbbd14740e4c68e0fe43bc23801cbdefbd96": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_ecr_repository(ecr_repository, \"v1.0\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromEcrRepository(ecrRepository, \"v1.0\")\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromEcrRepository(ecrRepository, \"v1.0\"))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromEcrRepository(ecrRepository, 'v1.0'),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 349
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromEcrRepository",
        "@aws-cdk/aws-ecr.IRepository"
      ],
      "fullSource": "import * as ecr from '@aws-cdk/aws-ecr';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const ecrRepository = new ecr.Repository(this, 'MyRepo');\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromEcrRepository(ecrRepository, 'v1.0'),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "281": 2
      },
      "fqnsFingerprint": "cf7337b0d0938f7af2e5ad1ab4e5a2fca66c6fdb596f52a3d202f5ebe52f9ff0"
    },
    "d1afbafd1cc338ff445fddd0059e5a8d247c54859ca21811bf512d0a788b530c": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_docker_registry(\"my-registry/my-repo\",\n        secrets_manager_credentials=secrets\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromDockerRegistry(\"my-registry/my-repo\", new DockerImageOptions {\n        SecretsManagerCredentials = secrets\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromDockerRegistry(\"my-registry/my-repo\", DockerImageOptions.builder()\n                .secretsManagerCredentials(secrets)\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n    secretsManagerCredentials: secrets,\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.DockerImageOptions",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromDockerRegistry",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const secrets = secretsmanager.Secret.fromSecretCompleteArn(this, 'MySecrets',\n      `arn:aws:secretsmanager:${this.region}:${this.account}:secret:my-secrets-123456`);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n          secretsManagerCredentials: secrets,\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "193": 2,
        "194": 2,
        "196": 1,
        "281": 3
      },
      "fqnsFingerprint": "a18ac865c337a05887219b4abcc22b0654bf09323d930f35c1cfcc9c83288052"
    },
    "3f255c63368b24d3bcbd2d199834fd4c949a237fb6dde82c5561a8aeed3c8130": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#DLC_TENSORFLOW_2_1_0_INFERENCE",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "678be868e09dc23013edd6c47b1bfe3ef7fc6ee336ddba45134d86ff222c6fdc"
    },
    "833eff6ac33a175bd6707454a69471a1e43cc98a0e1b684b7cba4b7cc4126a52": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.aws_deep_learning_containers_image(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.AwsDeepLearningContainersImage(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.awsDeepLearningContainersImage(\"tensorflow-inference\", \"2.1.0-gpu-py36-cu101-ubuntu18.04\", \"123456789012\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.awsDeepLearningContainersImage(\n      'tensorflow-inference', '2.1.0-gpu-py36-cu101-ubuntu18.04', '123456789012'),\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 389
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#awsDeepLearningContainersImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.awsDeepLearningContainersImage(\n      'tensorflow-inference', '2.1.0-gpu-py36-cu101-ubuntu18.04', '123456789012'),\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "f08a264315043063b3bb1d3f3aec4335c2a6352c144720f4667f36219c3c4e99"
    },
    "163a307da121f9d7cb4f6c31d5f2f1ac24e6d31c4cc09e5dda11c934bc553b33": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 409
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "339d28828190a3ecebe877ecd7dcd5daba636f57d24771fe7632eed9f2145c50"
    },
    "736f0029ef7cfa66bc584036a3b38aa5d9a6d70341cf8b03b53ed1c149268030": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        s3=codebuild.S3LoggingOptions(\n            bucket=s3.Bucket(self, \"LogBucket\")\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        S3 = new S3LoggingOptions {\n            Bucket = new Bucket(this, \"LogBucket\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .s3(S3LoggingOptions.builder()\n                        .bucket(new Bucket(this, \"LogBucket\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 421
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3LoggingOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "4808bff450766189292b43478f467d88eac9ef0af2e97b94f0f7f4a9088e26b5"
    },
    "d411d130a5b4901592d76f497d6357da07f1adfd2808907d36d55f7f131313d3": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 436
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "0f500bb6ed8e3243f073909671b57bdde7ff551a125fc4e21ac56f262410e8bd"
    },
    "f6adcbe526fd67c217a995246719eec8325f47a0c4d17e7a664257c2a1ed94a0": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 446
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "dd0ffff4c1061acc9465b9145d76758cd057125201ba5089a976ac4e175739ae"
    },
    "cba200dd9eb0e992c71e49b7ad86c6496cef63542e6a889d50808b6aa64412f0": {
      "translations": {
        "python": {
          "source": "project = codebuild.Project(self, \"Project\",\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            \"my_report\": {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Project project = new Project(this, \"Project\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { \"myReport\", new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project project = Project.Builder.create(this, \"Project\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        \"myReport\", Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.Project(this, 'Project', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      myReport: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 466
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.Project(this, 'Project', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      myReport: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "104": 1,
        "193": 4,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "fd86cd5f88ea17c669a2f2f3ac3b839de365e1a93e9020c11dec2ab32a2674ba"
    },
    "81547318bd3357e78b52a37cafe918a84b941e1073d1454ebfa2cba51b1b0138": {
      "translations": {
        "python": {
          "source": "# source is of type Source\n\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    grant_report_group_permissions=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Source source;\n\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    GrantReportGroupPermissions = false\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .grantReportGroupPermissions(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  grantReportGroupPermissions: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 488
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  grantReportGroupPermissions: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b02c7843280aa766a56efd47efd96214dfe734b977bc74de12012d916362701e"
    },
    "f537b87fb19b5980a2103d9913b54390545ea623899ba2941ebac2c5dd57605c": {
      "translations": {
        "python": {
          "source": "# source is of type Source\n\n\n# create a new ReportGroup\nreport_group = codebuild.ReportGroup(self, \"ReportGroup\")\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            report_group.report_group_arn: {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { reportGroup.ReportGroupArn, new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        reportGroup.getReportGroupArn(), Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.ReportGroup",
        "@aws-cdk/aws-codebuild.ReportGroup#reportGroupArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "130": 1,
        "153": 1,
        "154": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "effa22c24e30fcdb659bbc4946aeeac44aba8fad1d811b5d090fc43243d695f7"
    },
    "2ee1c7e1f3c1a77aac68711b946df53e22d080e0da2bf4463a9a84fa0f82b66a": {
      "translations": {
        "python": {
          "source": "# project is of type Project\n# report_group is of type ReportGroup\n\n\nreport_group.grant_write(project)",
          "version": "1"
        },
        "csharp": {
          "source": "Project project;\nReportGroup reportGroup;\n\n\nreportGroup.GrantWrite(project);",
          "version": "1"
        },
        "java": {
          "source": "Project project;\nReportGroup reportGroup;\n\n\nreportGroup.grantWrite(project);",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\ndeclare const reportGroup: codebuild.ReportGroup;\n\nreportGroup.grantWrite(project);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 522
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\ndeclare const reportGroup: codebuild.ReportGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nreportGroup.grantWrite(project);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "04a525ba5e65d544d0e149f4a81a425d5520b317ab51095d98b612e377acb280": {
      "translations": {
        "python": {
          "source": "# start build when a commit is pushed\nimport aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\n# code_commit_repository is of type Repository\n# project is of type Project\n\n\ncode_commit_repository.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// start build when a commit is pushed\nusing Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository codeCommitRepository;\nProject project;\n\n\ncodeCommitRepository.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project)\n});",
          "version": "1"
        },
        "java": {
          "source": "// start build when a commit is pushed\nimport software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository codeCommitRepository;\nProject project;\n\n\ncodeCommitRepository.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new CodeBuildProject(project))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// start build when a commit is pushed\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const codeCommitRepository: codecommit.Repository;\ndeclare const project: codebuild.Project;\n\ncodeCommitRepository.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 542
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events.IRuleTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// start build when a commit is pushed\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const codeCommitRepository: codecommit.Repository;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncodeCommitRepository.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0deb6217823c4ae8d18a5b19d54dd8efaf708a1751251978eb5d3e12f02d407b"
    },
    "f4a4e7d1ef4ed8abd44f7f87802fc4831ca1f3e92c694a028c560c27f708564d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_events_targets as targets\n# fn is of type Function\n# project is of type Project\n\n\nrule = project.on_state_change(\"BuildStateChange\",\n    target=targets.LambdaFunction(fn)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events.Targets;\nFunction fn;\nProject project;\n\n\nRule rule = project.OnStateChange(\"BuildStateChange\", new OnEventOptions {\n    Target = new LambdaFunction(fn)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.targets.*;\nFunction fn;\nProject project;\n\n\nRule rule = project.onStateChange(\"BuildStateChange\", OnEventOptions.builder()\n        .target(new LambdaFunction(fn))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as targets from '@aws-cdk/aws-events-targets';\ndeclare const fn: lambda.Function;\ndeclare const project: codebuild.Project;\n\nconst rule = project.onStateChange('BuildStateChange', {\n  target: new targets.LambdaFunction(fn)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 560
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as targets from '@aws-cdk/aws-events-targets';\ndeclare const fn: lambda.Function;\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = project.onStateChange('BuildStateChange', {\n  target: new targets.LambdaFunction(fn)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "27e8ee2eed979ae8dc22c4e6cfe1e20326edcf876971d1a0035eefb353523916"
    },
    "8c011e77ea0214c9491ac66ffee9b433aed38dcfa390f3788fe395438fe2985d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_chatbot as chatbot\n\n# project is of type Project\n\n\ntarget = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\n\nrule = project.notify_on_build_succeeded(\"NotifyOnBuildSucceeded\", target)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Chatbot;\n\nProject project;\n\n\nSlackChannelConfiguration target = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\n\nINotificationRule rule = project.NotifyOnBuildSucceeded(\"NotifyOnBuildSucceeded\", target);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.chatbot.*;\n\nProject project;\n\n\nSlackChannelConfiguration target = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\n\nINotificationRule rule = project.notifyOnBuildSucceeded(\"NotifyOnBuildSucceeded\", target);",
          "version": "1"
        },
        "$": {
          "source": "import * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const project: codebuild.Project;\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = project.notifyOnBuildSucceeded('NotifyOnBuildSucceeded', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 575
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codestarnotifications.INotificationRule",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\nconst rule = project.notifyOnBuildSucceeded('NotifyOnBuildSucceeded', target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3bd44664e926f7cd171f55653d41fdce35c807ead6f3a78dcbad8cbb18c0ecbb"
    },
    "b745341d13424305a35d2de64aee7a8b1d9bb7da284ba24c771a3c45dc89b41d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n# repo is of type Repository\n# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    secondary_sources=[\n        codebuild.Source.code_commit(\n            identifier=\"source2\",\n            repository=repo\n        )\n    ],\n    secondary_artifacts=[\n        codebuild.Artifacts.s3(\n            identifier=\"artifact2\",\n            bucket=bucket,\n            path=\"some/path\",\n            name=\"file.zip\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nRepository repo;\nBucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    SecondarySources = new [] { Source.CodeCommit(new CodeCommitSourceProps {\n        Identifier = \"source2\",\n        Repository = repo\n    }) },\n    SecondaryArtifacts = new [] { Artifacts.S3(new S3ArtifactsProps {\n        Identifier = \"artifact2\",\n        Bucket = bucket,\n        Path = \"some/path\",\n        Name = \"file.zip\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nRepository repo;\nBucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .secondarySources(List.of(Source.codeCommit(CodeCommitSourceProps.builder()\n                .identifier(\"source2\")\n                .repository(repo)\n                .build())))\n        .secondaryArtifacts(List.of(Artifacts.s3(S3ArtifactsProps.builder()\n                .identifier(\"artifact2\")\n                .bucket(bucket)\n                .path(\"some/path\")\n                .name(\"file.zip\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 594
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ba9c2db4325f8f28129585a0aed9410d863a797fe35e01232ddb8eae1334ecdc"
    },
    "c2572beccfc7b923471a8200c7564cec0a713c4454429f0a4287e243dd6b05d1": {
      "translations": {
        "python": {
          "source": "project = codebuild.Project(self, \"MyProject\",\n    # secondary sources and artifacts as above...\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\"\n                ]\n            }\n        },\n        \"artifacts\": {\n            \"secondary-artifacts\": {\n                \"artifact2\": {\n                    \"base-directory\": \"$CODEBUILD_SRC_DIR_source2\",\n                    \"files\": [\"output2.txt\"\n                    ]\n                }\n            }\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Project project = new Project(this, \"MyProject\", new ProjectProps {\n    // secondary sources and artifacts as above...\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\" }\n            } }\n        } },\n        { \"artifacts\", new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n            { \"secondary-artifacts\", new Struct {\n                Artifact2 = new Struct {\n                    Base-directory = \"$CODEBUILD_SRC_DIR_source2\",\n                    Files = new [] { \"output2.txt\" }\n                }\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project project = Project.Builder.create(this, \"MyProject\")\n        // secondary sources and artifacts as above...\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"cd $CODEBUILD_SRC_DIR_source2\", \"touch output2.txt\"))),\n                \"artifacts\", Map.of(\n                        \"secondary-artifacts\", Map.of(\n                                \"artifact2\", Map.of(\n                                        \"base-directory\", \"$CODEBUILD_SRC_DIR_source2\",\n                                        \"files\", List.of(\"output2.txt\")))))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const project = new codebuild.Project(this, 'MyProject', {\n  // secondary sources and artifacts as above...\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'cd $CODEBUILD_SRC_DIR_source2',\n          'touch output2.txt',\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact2': {\n          'base-directory': '$CODEBUILD_SRC_DIR_source2',\n          'files': [\n            'output2.txt',\n          ],\n        },\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst project = new codebuild.Project(this, 'MyProject', {\n  // secondary sources and artifacts as above...\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'cd $CODEBUILD_SRC_DIR_source2',\n          'touch output2.txt',\n        ],\n      },\n    },\n    artifacts: {\n      'secondary-artifacts': {\n        'artifact2': {\n          'base-directory': '$CODEBUILD_SRC_DIR_source2',\n          'files': [\n            'output2.txt',\n          ],\n        },\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 12,
        "104": 1,
        "192": 2,
        "193": 7,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "fd86cd5f88ea17c669a2f2f3ac3b839de365e1a93e9020c11dec2ab32a2674ba"
    },
    "a07d3a675edcd24b3a0e8da92b80eac50dc094ddf39c6e1ce256522305f26fc0": {
      "translations": {
        "python": {
          "source": "# load_balancer is of type ApplicationLoadBalancer\n\n\nvpc = ec2.Vpc(self, \"MyVPC\")\nproject = codebuild.Project(self, \"MyProject\",\n    vpc=vpc,\n    build_spec=codebuild.BuildSpec.from_object({})\n)\n\nproject.connections.allow_to(load_balancer, ec2.Port.tcp(443))",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Vpc = vpc,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> { })\n});\n\nproject.Connections.AllowTo(loadBalancer, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer loadBalancer;\n\n\nVpc vpc = new Vpc(this, \"MyVPC\");\nProject project = Project.Builder.create(this, \"MyProject\")\n        .vpc(vpc)\n        .buildSpec(BuildSpec.fromObject(Map.of()))\n        .build();\n\nproject.connections.allowTo(loadBalancer, Port.tcp(443));",
          "version": "1"
        },
        "$": {
          "source": "declare const loadBalancer: elbv2.ApplicationLoadBalancer;\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 689
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-ec2.Connections#allowTo",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const loadBalancer: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'MyVPC');\nconst project = new codebuild.Project(this, 'MyProject', {\n  vpc: vpc,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n  }),\n});\n\nproject.connections.allowTo(loadBalancer, ec2.Port.tcp(443));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 22,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "4218f2fe4b849d9dc3cedac9a7e4759c755eb3b5641b0c13847e652b30c16717"
    },
    "d4d9387c7776d058afd51fa2dd6a33b5085d4ed8d7eb2bfe7f183775aca46936": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 713
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "1e1bae053f1a71baba6009d2ee5432c27d015b0c1a7588be5b07e4e08a90fa98"
    },
    "84efef45c8e3ccf3d367228ccca1c0f7190039137d7966cea1adc2e59850c14e": {
      "translations": {
        "python": {
          "source": "# source is of type Source\n\n\nproject = codebuild.Project(self, \"MyProject\", source=source)\n\nif project.enable_batch_builds():\n    print(\"Batch builds were enabled\")",
          "version": "1"
        },
        "csharp": {
          "source": "Source source;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps { Source = source });\n\nif (project.EnableBatchBuilds())\n{\n    Console.WriteLine(\"Batch builds were enabled\");\n}",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\nProject project = Project.Builder.create(this, \"MyProject\").source(source).build();\n\nif (project.enableBatchBuilds()) {\n    System.out.println(\"Batch builds were enabled\");\n}",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\nconst project = new codebuild.Project(this, 'MyProject', { source, });\n\nif (project.enableBatchBuilds()) {\n  console.log('Batch builds were enabled');\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 740
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.Project#enableBatchBuilds",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', { source, });\n\nif (project.enableBatchBuilds()) {\n  console.log('Batch builds were enabled');\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "223": 1,
        "225": 2,
        "226": 1,
        "227": 1,
        "242": 2,
        "243": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7f665a97bc5c89d8b1614c3c6a35ce45472a89031f5d9bf15b6f47350f17673d"
    },
    "f69eaf8ad81bb214d4ad3090f768ad86f23d09cca3aa9be2a81398f4f3483e02": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    timeout=Duration.minutes(90)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    Timeout = Duration.Minutes(90)\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .timeout(Duration.minutes(90))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  timeout: Duration.minutes(90)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 757
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  timeout: Duration.minutes(90)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a43e6ca9fee38c566345355df2cd6243799e2fda2cc1c63f2f4ca53e5d91756"
    },
    "70aaab82e5c2f22abf413efbc6ebc9192a4d8b333735f9db16b7bcb71d8fa06b": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    queued_timeout=Duration.minutes(30)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    QueuedTimeout = Duration.Minutes(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .queuedTimeout(Duration.minutes(30))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  queuedTimeout: Duration.minutes(30)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 768
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  queuedTimeout: Duration.minutes(30)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "7a43e6ca9fee38c566345355df2cd6243799e2fda2cc1c63f2f4ca53e5d91756"
    },
    "a2ed46d800d2e4f9861f0f2cedac3a02cd2ba6a2ea69a3de891db1b40b0a5eb6": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    concurrent_build_limit=1\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    ConcurrentBuildLimit = 1\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .concurrentBuildLimit(1)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  concurrentBuildLimit: 1\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codebuild"
        },
        "field": {
          "field": "markdown",
          "line": 780
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  concurrentBuildLimit: 1\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "c66fd15f32ab6f32b4bbde71f5e0596f39435b389a7e80f85bd81e346233aeaf"
    },
    "62f962f4ccef0389e69bd90eb89aab0dc4b1e8c2291f90fa6e461713643363c7": {
      "translations": {
        "python": {
          "source": "\"awslabs\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "java": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "$": {
          "source": "'awslabs'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "owner"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'awslabs'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7eb1938d4f55ac9346ea67b8831c2609fe3559830953c0f2c23ccd83ed1db0b2": {
      "translations": {
        "python": {
          "source": "\"aws-cdk\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "$": {
          "source": "'aws-cdk'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "repo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws-cdk'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c300fb2cb9185abc00d7b80fc1587c147178bae66ce4041587d618e71d0c8d51": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "630b45a60f0c51f1bd4bd2cb73c6ccb4dc7c0fc25b0d59b45cea8993e03d1ce3": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "09b71c3bd2b9a88f6d645ea70552fdfb3d5713a4275da75849d914c84b3dcc44": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a15d3be37f55c41466cc4f559696c801ff1965c9ce61a88e15b318c60415b219": {
      "translations": {
        "python": {
          "source": "\"awslabs\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "java": {
          "source": "\"awslabs\";",
          "version": "1"
        },
        "$": {
          "source": "'awslabs'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "owner"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'awslabs'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c327722c61aab900cfec6c01cf2e971ad96d1096be15c59ba6e5508483325afa": {
      "translations": {
        "python": {
          "source": "\"aws-cdk\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws-cdk\";",
          "version": "1"
        },
        "$": {
          "source": "'aws-cdk'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "repo"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws-cdk'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "1f576f6e52e44b7129bda7fd4b9aca7a5d28a4685866ce526af4d8ce5bd96548": {
      "translations": {
        "python": {
          "source": "\"mybranch\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "java": {
          "source": "\"mybranch\";",
          "version": "1"
        },
        "$": {
          "source": "'mybranch'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps",
          "memberName": "branchOrRef"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'mybranch'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "626080556d4abd8d1763413ad515e08d9cba67ef7b7f678f2e4b52deb983c3c3": {
      "translations": {
        "python": {
          "source": "\"aws/codebuild/standard:4.0\"",
          "version": "1"
        },
        "csharp": {
          "source": "\"aws/codebuild/standard:4.0\";",
          "version": "1"
        },
        "java": {
          "source": "\"aws/codebuild/standard:4.0\";",
          "version": "1"
        },
        "$": {
          "source": "'aws/codebuild/standard:4.0'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-codebuild.LinuxBuildImage",
          "memberName": "fromCodeBuildImageId"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n'aws/codebuild/standard:4.0'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "b89337cd317ad525ae7940d93d21103525a290ea94f4262febe86b26f471f412": {
      "translations": {
        "python": {
          "source": "# project is of type Project\n\niam.PermissionsBoundary.of(project).apply(codebuild.UntrustedCodeBoundaryPolicy(self, \"Boundary\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Project project;\n\nPermissionsBoundary.Of(project).Apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "java": {
          "source": "Project project;\n\nPermissionsBoundary.of(project).apply(new UntrustedCodeBoundaryPolicy(this, \"Boundary\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.Project;\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.UntrustedCodeBoundaryPolicy",
        "@aws-cdk/aws-iam.IManagedPolicy",
        "@aws-cdk/aws-iam.PermissionsBoundary",
        "@aws-cdk/aws-iam.PermissionsBoundary#apply",
        "@aws-cdk/aws-iam.PermissionsBoundary#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\niam.PermissionsBoundary.of(project).apply(new codebuild.UntrustedCodeBoundaryPolicy(this, 'Boundary'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "12f1ef67d4822c62b6e21c5bc6bee554f7deee2a202cb325b85fb248668dd2bc"
    },
    "36eedea6217d174af1419c798bc1214efac26819ac83f983d3b175cd990aa02f": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Artifacts"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ed81c8b9d936b8a9db52b43c720e17f5ae5a5e516acac352d72b3058195246a"
    },
    "74a20c38a4d56164a5e46818b7bc2bc1ad5b1e095114cdde8cf1969b1b0b8bb5": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "dd0ffff4c1061acc9465b9145d76758cd057125201ba5089a976ac4e175739ae"
    },
    "98c452bf9c64ba2f221d78bd78045b7d7f8237c7470f03b3dbb41cf577875b11": {
      "translations": {
        "python": {
          "source": "codebuild.BitBucketSourceCredentials(self, \"CodeBuildBitBucketCreds\",\n    username=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"username\"),\n    password=SecretValue.secrets_manager(\"my-bitbucket-creds\", json_field=\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new BitBucketSourceCredentials(this, \"CodeBuildBitBucketCreds\", new BitBucketSourceCredentialsProps {\n    Username = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"username\" }),\n    Password = SecretValue.SecretsManager(\"my-bitbucket-creds\", new SecretsManagerSecretOptions { JsonField = \"password\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "BitBucketSourceCredentials.Builder.create(this, \"CodeBuildBitBucketCreds\")\n        .username(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"username\").build()))\n        .password(SecretValue.secretsManager(\"my-bitbucket-creds\", SecretsManagerSecretOptions.builder().jsonField(\"password\").build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentials",
        "@aws-cdk/aws-codebuild.BitBucketSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/core.SecretsManagerSecretOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.BitBucketSourceCredentials(this, 'CodeBuildBitBucketCreds', {\n  username: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'username' }),\n  password: SecretValue.secretsManager('my-bitbucket-creds', { jsonField: 'password' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "dd0ffff4c1061acc9465b9145d76758cd057125201ba5089a976ac4e175739ae"
    },
    "5a9f49b2527e750da70e7261d5d95a32fad5d4ff6320cb504ac68b4da4d1297a": {
      "translations": {
        "python": {
          "source": "bb_source = codebuild.Source.bit_bucket(\n    owner=\"owner\",\n    repo=\"repo\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource bbSource = Source.BitBucket(new BitBucketSourceProps {\n    Owner = \"owner\",\n    Repo = \"repo\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource bbSource = Source.bitBucket(BitBucketSourceProps.builder()\n        .owner(\"owner\")\n        .repo(\"repo\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BitBucketSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bbSource = codebuild.Source.bitBucket({\n  owner: 'owner',\n  repo: 'repo',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "626f3f34e9672d9da695110f5923e5b21e929ef813df255e00a8501ea7b5b926"
    },
    "2c623026499b4ffcb9bae6287fc18112192e89a38ed9fa446bc65305514be441": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# my_security_group is of type SecurityGroup\n\npipelines.CodePipeline(self, \"Pipeline\",\n    # Standard CodePipeline properties\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    ),\n\n    # Defaults for all CodeBuild projects\n    code_build_defaults=pipelines.CodeBuildOptions(\n        # Prepend commands and configuration to all projects\n        partial_build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\"\n        }),\n\n        # Control the build environment\n        build_environment=codebuild.BuildEnvironment(\n            compute_type=codebuild.ComputeType.LARGE\n        ),\n\n        # Control Elastic Network Interface creation\n        vpc=vpc,\n        subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n        security_groups=[my_security_group],\n\n        # Additional policy statements for the execution role\n        role_policy=[\n            iam.PolicyStatement()\n        ]\n    ),\n\n    synth_code_build_defaults=pipelines.CodeBuildOptions(),\n    asset_publishing_code_build_defaults=pipelines.CodeBuildOptions(),\n    self_mutation_code_build_defaults=pipelines.CodeBuildOptions()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Standard CodePipeline properties\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Defaults for all CodeBuild projects\n    CodeBuildDefaults = new CodeBuildOptions {\n        // Prepend commands and configuration to all projects\n        PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" }\n        }),\n\n        // Control the build environment\n        BuildEnvironment = new BuildEnvironment {\n            ComputeType = ComputeType.LARGE\n        },\n\n        // Control Elastic Network Interface creation\n        Vpc = vpc,\n        SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n        SecurityGroups = new [] { mySecurityGroup },\n\n        // Additional policy statements for the execution role\n        RolePolicy = new [] {\n            new PolicyStatement(new PolicyStatementProps { }) }\n    },\n\n    SynthCodeBuildDefaults = new CodeBuildOptions { },\n    AssetPublishingCodeBuildDefaults = new CodeBuildOptions { },\n    SelfMutationCodeBuildDefaults = new CodeBuildOptions { }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodePipeline.Builder.create(this, \"Pipeline\")\n        // Standard CodePipeline properties\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Defaults for all CodeBuild projects\n        .codeBuildDefaults(CodeBuildOptions.builder()\n                // Prepend commands and configuration to all projects\n                .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\")))\n\n                // Control the build environment\n                .buildEnvironment(BuildEnvironment.builder()\n                        .computeType(ComputeType.LARGE)\n                        .build())\n\n                // Control Elastic Network Interface creation\n                .vpc(vpc)\n                .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n                .securityGroups(List.of(mySecurityGroup))\n\n                // Additional policy statements for the execution role\n                .rolePolicy(List.of(\n                    PolicyStatement.Builder.create().build()))\n                .build())\n\n        .synthCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .assetPublishingCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .selfMutationCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildOptions",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 43,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 11,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "fad176046deb77f5e3f2bcd6199991e786333c32c3c709128cfd9d038e683dc7"
    },
    "d1fb29a93b3425657dfce4f7de7e253c630e86b5137438dfa358d732948d2bd6": {
      "translations": {
        "python": {
          "source": "# ecr_repository is of type Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fd1d2895cccd9f2bfa628b11830fbd9b66ced51f84cb1a04cf39b90d28a9399e"
    },
    "8fd781d9fabc604e1402994267fe8e3ae0a01ca1e3cde4bf5dbda49703e1fc5b": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution is of type Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariable"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "f8cce53259785c93ca39351ff8f88a36c3ff1a1ce38ad8fff5959bd9cb6b5deb"
    },
    "0a0a3f5623acc3438226dc4afa5cada0b31dcb71a415c9acc25b7d8d7ed71612": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\n\n\ncodebuild_project = codebuild.Project(self, \"Project\",\n    project_name=\"MyTestProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"echo \\\"Hello, CodeBuild!\\\"\"\n                ]\n            }\n        }\n    })\n)\n\ntask = tasks.CodeBuildStartBuild(self, \"Task\",\n    project=codebuild_project,\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    environment_variables_override={\n        \"ZONE\": codebuild.BuildEnvironmentVariable(\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n            value=sfn.JsonPath.string_at(\"$.envVariables.zone\")\n        )\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\n\n\nProject codebuildProject = new Project(this, \"Project\", new ProjectProps {\n    ProjectName = \"MyTestProject\",\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"echo \\\"Hello, CodeBuild!\\\"\" }\n            } }\n        } }\n    })\n});\n\nCodeBuildStartBuild task = new CodeBuildStartBuild(this, \"Task\", new CodeBuildStartBuildProps {\n    Project = codebuildProject,\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    EnvironmentVariablesOverride = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"ZONE\", new BuildEnvironmentVariable {\n            Type = BuildEnvironmentVariableType.PLAINTEXT,\n            Value = JsonPath.StringAt(\"$.envVariables.zone\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\n\n\nProject codebuildProject = Project.Builder.create(this, \"Project\")\n        .projectName(\"MyTestProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"echo \\\"Hello, CodeBuild!\\\"\"))))))\n        .build();\n\nCodeBuildStartBuild task = CodeBuildStartBuild.Builder.create(this, \"Task\")\n        .project(codebuildProject)\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .environmentVariablesOverride(Map.of(\n                \"ZONE\", BuildEnvironmentVariable.builder()\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .value(JsonPath.stringAt(\"$.envVariables.zone\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuild",
        "@aws-cdk/aws-stepfunctions-tasks.CodeBuildStartBuildProps",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst codebuildProject = new codebuild.Project(this, 'Project', {\n  projectName: 'MyTestProject',\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: [\n          'echo \"Hello, CodeBuild!\"',\n        ],\n      },\n    },\n  }),\n});\n\nconst task = new tasks.CodeBuildStartBuild(this, 'Task', {\n  project: codebuildProject,\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  environmentVariablesOverride: {\n    ZONE: {\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      value: sfn.JsonPath.stringAt('$.envVariables.zone'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 2,
        "192": 1,
        "193": 7,
        "194": 10,
        "196": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "71e2ecbcc744035408e22cdf94419e196c6e6bc75753a58a96bd9ab8b50ec983"
    },
    "e83bd0ff1b37490bcfc493934b211d43b530bd81c763a4c9e4150a91b04ae7a6": {
      "translations": {
        "python": {
          "source": "# later:\n# project is of type PipelineProject\nsource_output = codepipeline.Artifact()\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"Build1\",\n    input=source_output,\n    project=codebuild.PipelineProject(self, \"Project\",\n        build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\",\n            \"env\": {\n                \"exported-variables\": [\"MY_VAR\"\n                ]\n            },\n            \"phases\": {\n                \"build\": {\n                    \"commands\": \"export MY_VAR=\\\"some value\\\"\"\n                }\n            }\n        })\n    ),\n    variables_namespace=\"MyNamespace\"\n)\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=build_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"Build1\",\n    Input = sourceOutput,\n    Project = new PipelineProject(this, \"Project\", new PipelineProjectProps {\n        BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" },\n            { \"env\", new Dictionary<string, string[]> {\n                { \"exported-variables\", new [] { \"MY_VAR\" } }\n            } },\n            { \"phases\", new Dictionary<string, IDictionary<string, string>> {\n                { \"build\", new Struct {\n                    Commands = \"export MY_VAR=\\\"some value\\\"\"\n                } }\n            } }\n        })\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = buildAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nArtifact sourceOutput = new Artifact();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"Build1\")\n        .input(sourceOutput)\n        .project(PipelineProject.Builder.create(this, \"Project\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"env\", Map.of(\n                                \"exported-variables\", List.of(\"MY_VAR\")),\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", \"export MY_VAR=\\\"some value\\\"\")))))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(buildAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.BuildSpec"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline.Artifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceOutput = new codepipeline.Artifact();\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'Build1',\n  input: sourceOutput,\n  project: new codebuild.PipelineProject(this, 'Project', {\n    buildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      env: {\n        'exported-variables': [\n          'MY_VAR',\n        ],\n      },\n      phases: {\n        build: {\n          commands: 'export MY_VAR=\"some value\"',\n        },\n      },\n    }),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: buildAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 9,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fdd0b794055f3b3f13ba0eefe15b6eee72f316f5c81fab3f52811e62bd63f331"
    },
    "b4c5b3d24caf5fc844bf3e20a8a5c136501dbde4798ae52c9364d454f1ffc08c": {
      "translations": {
        "python": {
          "source": "# my_caching_bucket is of type Bucket\n\n\ncodebuild.Project(self, \"Project\",\n    source=codebuild.Source.bit_bucket(\n        owner=\"awslabs\",\n        repo=\"aws-cdk\"\n    ),\n\n    cache=codebuild.Cache.bucket(my_caching_bucket),\n\n    # BuildSpec with a 'cache' section necessary for S3 caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket myCachingBucket;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Source = Source.BitBucket(new BitBucketSourceProps {\n        Owner = \"awslabs\",\n        Repo = \"aws-cdk\"\n    }),\n\n    Cache = Cache.Bucket(myCachingBucket),\n\n    // BuildSpec with a 'cache' section necessary for S3 caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket myCachingBucket;\n\n\nProject.Builder.create(this, \"Project\")\n        .source(Source.bitBucket(BitBucketSourceProps.builder()\n                .owner(\"awslabs\")\n                .repo(\"aws-cdk\")\n                .build()))\n\n        .cache(Cache.bucket(myCachingBucket))\n\n        // BuildSpec with a 'cache' section necessary for S3 caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myCachingBucket: s3.Bucket;\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Cache"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BitBucketSourceProps",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#bucket",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#bitBucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myCachingBucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.bitBucket({\n    owner: 'awslabs',\n    repo: 'aws-cdk',\n  }),\n\n  cache: codebuild.Cache.bucket(myCachingBucket),\n\n  // BuildSpec with a 'cache' section necessary for S3 caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 7,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "079855e72cce5bed0da08b76f4b22a35827d3303ac30de4b728b4015d7a961d9"
    },
    "86fb495089074b6da289bcd5def47cc70077c65aae568d5e4a48dfb7455536c2": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "339d28828190a3ecebe877ecd7dcd5daba636f57d24771fe7632eed9f2145c50"
    },
    "22c08f9e98db04a9b7924599a024ba73bf17c74c393456121bc3915e6ad277bd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n# repo is of type Repository\n# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    secondary_sources=[\n        codebuild.Source.code_commit(\n            identifier=\"source2\",\n            repository=repo\n        )\n    ],\n    secondary_artifacts=[\n        codebuild.Artifacts.s3(\n            identifier=\"artifact2\",\n            bucket=bucket,\n            path=\"some/path\",\n            name=\"file.zip\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nRepository repo;\nBucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    SecondarySources = new [] { Source.CodeCommit(new CodeCommitSourceProps {\n        Identifier = \"source2\",\n        Repository = repo\n    }) },\n    SecondaryArtifacts = new [] { Artifacts.S3(new S3ArtifactsProps {\n        Identifier = \"artifact2\",\n        Bucket = bucket,\n        Path = \"some/path\",\n        Name = \"file.zip\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nRepository repo;\nBucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .secondarySources(List.of(Source.codeCommit(CodeCommitSourceProps.builder()\n                .identifier(\"source2\")\n                .repository(repo)\n                .build())))\n        .secondaryArtifacts(List.of(Artifacts.s3(S3ArtifactsProps.builder()\n                .identifier(\"artifact2\")\n                .bucket(bucket)\n                .path(\"some/path\")\n                .name(\"file.zip\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.CodeCommitSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\ndeclare const repo: codecommit.Repository;\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  secondarySources: [\n    codebuild.Source.codeCommit({\n      identifier: 'source2',\n      repository: repo,\n    }),\n  ],\n  secondaryArtifacts: [\n    codebuild.Artifacts.s3({\n      identifier: 'artifact2',\n      bucket: bucket,\n      path: 'some/path',\n      name: 'file.zip',\n    }),\n  ],\n  // ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "ba9c2db4325f8f28129585a0aed9410d863a797fe35e01232ddb8eae1334ecdc"
    },
    "0ddbcc988f206624f778a59bc78809375a4709ff91a440792f170649b1aee341": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# my_security_group is of type SecurityGroup\n\npipelines.CodeBuildStep(\"Synth\",\n    # ...standard ShellStep props...\n    commands=[],\n    env={},\n\n    # If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    # to be the synth step's output.\n    primary_output_directory=\"cdk.out\",\n\n    # Control the name of the project\n    project_name=\"MyProject\",\n\n    # Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    partial_build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n\n    # Control the build environment\n    build_environment=codebuild.BuildEnvironment(\n        compute_type=codebuild.ComputeType.LARGE\n    ),\n\n    # Control Elastic Network Interface creation\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n    security_groups=[my_security_group],\n\n    # Additional policy statements for the execution role\n    role_policy_statements=[\n        iam.PolicyStatement()\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n    // ...standard ShellStep props...\n    Commands = new [] {  },\n    Env = new Dictionary<string, object> { },\n\n    // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    // to be the synth step's output.\n    PrimaryOutputDirectory = \"cdk.out\",\n\n    // Control the name of the project\n    ProjectName = \"MyProject\",\n\n    // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n\n    // Control the build environment\n    BuildEnvironment = new BuildEnvironment {\n        ComputeType = ComputeType.LARGE\n    },\n\n    // Control Elastic Network Interface creation\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n    SecurityGroups = new [] { mySecurityGroup },\n\n    // Additional policy statements for the execution role\n    RolePolicyStatements = new [] {\n        new PolicyStatement(new PolicyStatementProps { }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodeBuildStep.Builder.create(\"Synth\")\n        // ...standard ShellStep props...\n        .commands(List.of())\n        .env(Map.of())\n\n        // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n        // to be the synth step's output.\n        .primaryOutputDirectory(\"cdk.out\")\n\n        // Control the name of the project\n        .projectName(\"MyProject\")\n\n        // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n        .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n\n        // Control the build environment\n        .buildEnvironment(BuildEnvironment.builder()\n                .computeType(ComputeType.LARGE)\n                .build())\n\n        // Control Elastic Network Interface creation\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n        .securityGroups(List.of(mySecurityGroup))\n\n        // Additional policy statements for the execution role\n        .rolePolicyStatements(List.of(\n            PolicyStatement.Builder.create().build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ComputeType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 6,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "87378e89d6595299810972d881c1f6d28a81da9beae42a54a300f863ba00825a"
    },
    "18acf8b4e5f782f066a01fb40d5f45a8e42eccd355e783bc9ee182e92dc78d6f": {
      "translations": {
        "python": {
          "source": "environment=codebuild.BuildEnvironment(\n    build_image=codebuild.LinuxBuildImage.from_docker_registry(\"my-registry/my-repo\",\n        secrets_manager_credentials=secrets\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Environment = new BuildEnvironment {\n    BuildImage = LinuxBuildImage.FromDockerRegistry(\"my-registry/my-repo\", new DockerImageOptions {\n        SecretsManagerCredentials = secrets\n    })\n}",
          "version": "1"
        },
        "java": {
          "source": ".environment(BuildEnvironment.builder()\n        .buildImage(LinuxBuildImage.fromDockerRegistry(\"my-registry/my-repo\", DockerImageOptions.builder()\n                .secretsManagerCredentials(secrets)\n                .build()))\n        .build())\n.build();",
          "version": "1"
        },
        "$": {
          "source": "environment: {\n  buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n    secretsManagerCredentials: secrets,\n  }),\n},",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.DockerImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.DockerImageOptions",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromDockerRegistry",
        "@aws-cdk/aws-secretsmanager.ISecret"
      ],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as cdk from '@aws-cdk/core';\nimport * as codebuild from '../lib';\n\nclass TestStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const secrets = secretsmanager.Secret.fromSecretCompleteArn(this, 'MySecrets',\n      `arn:aws:secretsmanager:${this.region}:${this.account}:secret:my-secrets-123456`);\n\n    new codebuild.Project(this, 'MyProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: ['ls'],\n          },\n        },\n      }),\n      grantReportGroupPermissions: false,\n      /// !show\n      environment: {\n        buildImage: codebuild.LinuxBuildImage.fromDockerRegistry('my-registry/my-repo', {\n          secretsManagerCredentials: secrets,\n        }),\n      },\n      /// !hide\n    });\n  }\n}\n\nconst app = new cdk.App();\n\nnew TestStack(app, 'test-codebuild-docker-asset');\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "193": 2,
        "194": 2,
        "196": 1,
        "281": 3
      },
      "fqnsFingerprint": "a18ac865c337a05887219b4abcc22b0654bf09323d930f35c1cfcc9c83288052"
    },
    "2884707b14332cb4216e0a18e50519097333598d159a2328243278e67e7904ae": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "1e1bae053f1a71baba6009d2ee5432c27d015b0c1a7588be5b07e4e08a90fa98"
    },
    "5777b8becfb33de861c6ca35cd8474622936784493a2a10f009397f053d69c10": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.EventAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0fffca90dfb0745873c0f47f530909a756d06267a17f15c76c9aa661f9ecb8ff"
    },
    "ca9bebe35945dfb5fbb90230d0ce25deec911036a8ebf74daf5a48a3798ae57c": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    file_system_locations=[\n        codebuild.FileSystemLocation.efs(\n            identifier=\"myidentifier2\",\n            location=\"myclodation.mydnsroot.com:/loc\",\n            mount_point=\"/media\",\n            mount_options=\"opts\"\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    FileSystemLocations = new [] { FileSystemLocation.Efs(new EfsFileSystemLocationProps {\n        Identifier = \"myidentifier2\",\n        Location = \"myclodation.mydnsroot.com:/loc\",\n        MountPoint = \"/media\",\n        MountOptions = \"opts\"\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .fileSystemLocations(List.of(FileSystemLocation.efs(EfsFileSystemLocationProps.builder()\n                .identifier(\"myidentifier2\")\n                .location(\"myclodation.mydnsroot.com:/loc\")\n                .mountPoint(\"/media\")\n                .mountOptions(\"opts\")\n                .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.FileSystemLocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.EfsFileSystemLocationProps",
        "@aws-cdk/aws-codebuild.FileSystemLocation",
        "@aws-cdk/aws-codebuild.FileSystemLocation#efs",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  fileSystemLocations: [\n    codebuild.FileSystemLocation.efs({\n      identifier: \"myidentifier2\",\n      location: \"myclodation.mydnsroot.com:/loc\",\n      mountPoint: \"/media\",\n      mountOptions: \"opts\"\n    })\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "1e1bae053f1a71baba6009d2ee5432c27d015b0c1a7588be5b07e4e08a90fa98"
    },
    "96360de23965e68479554fd5985a0a4ddf971b4880ac5f4843aa54f1baebb0bc": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.FilterGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0fffca90dfb0745873c0f47f530909a756d06267a17f15c76c9aa661f9ecb8ff"
    },
    "ed143761e6d8d84888af4bd53e1ee6758eebf11ec7db83a10fac8eb95f0bf98d": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "abb73784a4c2a7bd626f35bdcaf80db7faee1d9286e6c28369f0f9be8cfa58c4"
    },
    "200ace3c239c5438fe8693860b91dd66bda2d4bc766844a876b8fef26c90ab08": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceCredentials"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "0f500bb6ed8e3243f073909671b57bdde7ff551a125fc4e21ac56f262410e8bd"
    },
    "3080fca91a720582aadbe4b43f83262942bb6a84d7a7f366e001992059a25888": {
      "translations": {
        "python": {
          "source": "codebuild.GitHubSourceCredentials(self, \"CodeBuildGitHubCreds\",\n    access_token=SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new GitHubSourceCredentials(this, \"CodeBuildGitHubCreds\", new GitHubSourceCredentialsProps {\n    AccessToken = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "GitHubSourceCredentials.Builder.create(this, \"CodeBuildGitHubCreds\")\n        .accessToken(SecretValue.secretsManager(\"my-token\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n// GitHub Enterprise is almost the same,\n// except the class is called GitHubEnterpriseSourceCredentials",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.GitHubSourceCredentials",
        "@aws-cdk/aws-codebuild.GitHubSourceCredentialsProps",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.GitHubSourceCredentials(this, 'CodeBuildGitHubCreds', {\n  accessToken: SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "0f500bb6ed8e3243f073909671b57bdde7ff551a125fc4e21ac56f262410e8bd"
    },
    "89bdc44abe7e98788b883256a2dd65582c56a502ba6a3f9ba4bd1f991e4a420a": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.GitHubSourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0fffca90dfb0745873c0f47f530909a756d06267a17f15c76c9aa661f9ecb8ff"
    },
    "9825227c4276b22dcac0360fcf34bd1f50278d874009fab73a5e608957f503dc": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the pipeline uses Docker image assets\n    docker_enabled_for_self_mutation=True\n)\n\npipeline.add_wave(\"MyWave\",\n    post=[\n        pipelines.CodeBuildStep(\"RunApproval\",\n            commands=[\"command-from-image\"],\n            build_environment=codebuild.BuildEnvironment(\n                # The user of a Docker image asset in the pipeline requires turning on\n                # 'dockerEnabledForSelfMutation'.\n                build_image=codebuild.LinuxBuildImage.from_asset(self, \"Image\",\n                    directory=\"./docker-image\"\n                )\n            )\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the pipeline uses Docker image assets\n    DockerEnabledForSelfMutation = true\n});\n\npipeline.AddWave(\"MyWave\", new WaveOptions {\n    Post = new [] {\n        new CodeBuildStep(\"RunApproval\", new CodeBuildStepProps {\n            Commands = new [] { \"command-from-image\" },\n            BuildEnvironment = new BuildEnvironment {\n                // The user of a Docker image asset in the pipeline requires turning on\n                // 'dockerEnabledForSelfMutation'.\n                BuildImage = LinuxBuildImage.FromAsset(this, \"Image\", new DockerImageAssetProps {\n                    Directory = \"./docker-image\"\n                })\n            }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the pipeline uses Docker image assets\n        .dockerEnabledForSelfMutation(true)\n        .build();\n\npipeline.addWave(\"MyWave\", WaveOptions.builder()\n        .post(List.of(\n            CodeBuildStep.Builder.create(\"RunApproval\")\n                    .commands(List.of(\"command-from-image\"))\n                    .buildEnvironment(BuildEnvironment.builder()\n                            // The user of a Docker image asset in the pipeline requires turning on\n                            // 'dockerEnabledForSelfMutation'.\n                            .buildImage(LinuxBuildImage.fromAsset(this, \"Image\", DockerImageAssetProps.builder()\n                                    .directory(\"./docker-image\")\n                                    .build()))\n                            .build())\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LinuxBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "@aws-cdk/pipelines.WaveOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "a6ee2aa9e1a837926f4f424c0334b6b456d35446bc56bad0e1d2f2a829f8d2f0"
    },
    "7071c4e2c7719bb499bfab37e78b8d236b37bf36778e192b35d54d3be6f93e06": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LinuxGpuBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage",
        "@aws-cdk/aws-codebuild.LinuxGpuBuildImage#DLC_TENSORFLOW_2_1_0_INFERENCE",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.LinuxGpuBuildImage.DLC_TENSORFLOW_2_1_0_INFERENCE,\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "678be868e09dc23013edd6c47b1bfe3ef7fc6ee336ddba45134d86ff222c6fdc"
    },
    "2d590b961e78355682c91488c194a03a1bed0b38f18234c609a5d81cee2ced87": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    source=codebuild.Source.git_hub_enterprise(\n        https_clone_url=\"https://my-github-enterprise.com/owner/repo\"\n    ),\n\n    # Enable Docker AND custom caching\n    cache=codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n    # BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    # also come from 'buildspec.yml' in your source.\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"...\"]\n            }\n        },\n        \"cache\": {\n            \"paths\": [\"/root/cachedir/**/*\"\n            ]\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Source = Source.GitHubEnterprise(new GitHubEnterpriseSourceProps {\n        HttpsCloneUrl = \"https://my-github-enterprise.com/owner/repo\"\n    }),\n\n    // Enable Docker AND custom caching\n    Cache = Cache.Local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM),\n\n    // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n    // also come from 'buildspec.yml' in your source.\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"...\" }\n            } }\n        } },\n        { \"cache\", new Dictionary<string, string[]> {\n            { \"paths\", new [] { \"/root/cachedir/**/*\" } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .source(Source.gitHubEnterprise(GitHubEnterpriseSourceProps.builder()\n                .httpsCloneUrl(\"https://my-github-enterprise.com/owner/repo\")\n                .build()))\n\n        // Enable Docker AND custom caching\n        .cache(Cache.local(LocalCacheMode.DOCKER_LAYER, LocalCacheMode.CUSTOM))\n\n        // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n        // also come from 'buildspec.yml' in your source.\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"...\"))),\n                \"cache\", Map.of(\n                        \"paths\", List.of(\"/root/cachedir/**/*\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LocalCacheMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.Cache",
        "@aws-cdk/aws-codebuild.Cache#local",
        "@aws-cdk/aws-codebuild.GitHubEnterpriseSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.LocalCacheMode",
        "@aws-cdk/aws-codebuild.LocalCacheMode#CUSTOM",
        "@aws-cdk/aws-codebuild.LocalCacheMode#DOCKER_LAYER",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHubEnterprise"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  source: codebuild.Source.gitHubEnterprise({\n    httpsCloneUrl: 'https://my-github-enterprise.com/owner/repo',\n  }),\n\n  // Enable Docker AND custom caching\n  cache: codebuild.Cache.local(codebuild.LocalCacheMode.DOCKER_LAYER, codebuild.LocalCacheMode.CUSTOM),\n\n  // BuildSpec with a 'cache' section necessary for 'CUSTOM' caching. This can\n  // also come from 'buildspec.yml' in your source.\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands: ['...'],\n      },\n    },\n    cache: {\n      paths: [\n        // The '**/*' is required to indicate all files in this directory\n        '/root/cachedir/**/*',\n      ],\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 27,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 11,
        "196": 3,
        "197": 1,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "abb73784a4c2a7bd626f35bdcaf80db7faee1d9286e6c28369f0f9be8cfa58c4"
    },
    "3e30c10e7c7b1d84d10caa9b0e6248e0815982654679f70ee25fc44909de69bc": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        cloud_watch=codebuild.CloudWatchLoggingOptions(\n            log_group=logs.LogGroup(self, \"MyLogGroup\")\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        CloudWatch = new CloudWatchLoggingOptions {\n            LogGroup = new LogGroup(this, \"MyLogGroup\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .cloudWatch(CloudWatchLoggingOptions.builder()\n                        .logGroup(new LogGroup(this, \"MyLogGroup\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.LoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CloudWatchLoggingOptions",
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    cloudWatch: {\n      logGroup: new logs.LogGroup(this, `MyLogGroup`),\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "339d28828190a3ecebe877ecd7dcd5daba636f57d24771fe7632eed9f2145c50"
    },
    "bcdc90c261155ee4c696ad209e01cc21178a3a27798250604049bb86e9268ca4": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution is of type Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.PipelineProject"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "f8cce53259785c93ca39351ff8f88a36c3ff1a1ce38ad8fff5959bd9cb6b5deb"
    },
    "fe67243d1fd6c692f5fca71bcdb30809f7b21aebb073e2e4f3ed41180c0b5f96": {
      "translations": {
        "python": {
          "source": "# Create a Cloudfront Web Distribution\nimport aws_cdk.aws_cloudfront as cloudfront\n# distribution is of type Distribution\n\n\n# Create the build project that will invalidate the cache\ninvalidate_build_project = codebuild.PipelineProject(self, \"InvalidateProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\",\n        \"phases\": {\n            \"build\": {\n                \"commands\": [\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"\n                ]\n            }\n        }\n    }),\n    environment_variables={\n        \"CLOUDFRONT_ID\": codebuild.BuildEnvironmentVariable(value=distribution.distribution_id)\n    }\n)\n\n# Add Cloudfront invalidation permissions to the project\ndistribution_arn = f\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\"\ninvalidate_build_project.add_to_role_policy(iam.PolicyStatement(\n    resources=[distribution_arn],\n    actions=[\"cloudfront:CreateInvalidation\"\n    ]\n))\n\n# Create the pipeline (here only the S3 deploy and Invalidate cache build)\ndeploy_bucket = s3.Bucket(self, \"DeployBucket\")\ndeploy_input = codepipeline.Artifact()\ncodepipeline.Pipeline(self, \"Pipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Deploy\",\n        actions=[\n            codepipeline_actions.S3DeployAction(\n                action_name=\"S3Deploy\",\n                bucket=deploy_bucket,\n                input=deploy_input,\n                run_order=1\n            ),\n            codepipeline_actions.CodeBuildAction(\n                action_name=\"InvalidateCache\",\n                project=invalidate_build_project,\n                input=deploy_input,\n                run_order=2\n            )\n        ]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Cloudfront Web Distribution\nusing Amazon.CDK.AWS.CloudFront;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = new PipelineProject(this, \"InvalidateProject\", new PipelineProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" },\n        { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n            { \"build\", new Struct {\n                Commands = new [] { \"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\" }\n            } }\n        } }\n    }),\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"CLOUDFRONT_ID\", new BuildEnvironmentVariable { Value = distribution.DistributionId } }\n    }\n});\n\n// Add Cloudfront invalidation permissions to the project\nstring distributionArn = $\"arn:aws:cloudfront::{this.account}:distribution/{distribution.distributionId}\";\ninvalidateBuildProject.AddToRolePolicy(new PolicyStatement(new PolicyStatementProps {\n    Resources = new [] { distributionArn },\n    Actions = new [] { \"cloudfront:CreateInvalidation\" }\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nnew Pipeline(this, \"Pipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Deploy\",\n        Actions = new [] {\n            new S3DeployAction(new S3DeployActionProps {\n                ActionName = \"S3Deploy\",\n                Bucket = deployBucket,\n                Input = deployInput,\n                RunOrder = 1\n            }),\n            new CodeBuildAction(new CodeBuildActionProps {\n                ActionName = \"InvalidateCache\",\n                Project = invalidateBuildProject,\n                Input = deployInput,\n                RunOrder = 2\n            }) }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Cloudfront Web Distribution\nimport software.amazon.awscdk.services.cloudfront.*;\nDistribution distribution;\n\n\n// Create the build project that will invalidate the cache\nPipelineProject invalidateBuildProject = PipelineProject.Builder.create(this, \"InvalidateProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\",\n                \"phases\", Map.of(\n                        \"build\", Map.of(\n                                \"commands\", List.of(\"aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \\\"/*\\\"\"))))))\n        .environmentVariables(Map.of(\n                \"CLOUDFRONT_ID\", BuildEnvironmentVariable.builder().value(distribution.getDistributionId()).build()))\n        .build();\n\n// Add Cloudfront invalidation permissions to the project\nString distributionArn = String.format(\"arn:aws:cloudfront::%s:distribution/%s\", this.account, distribution.getDistributionId());\ninvalidateBuildProject.addToRolePolicy(PolicyStatement.Builder.create()\n        .resources(List.of(distributionArn))\n        .actions(List.of(\"cloudfront:CreateInvalidation\"))\n        .build());\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nBucket deployBucket = new Bucket(this, \"DeployBucket\");\nArtifact deployInput = new Artifact();\nPipeline.Builder.create(this, \"Pipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Deploy\")\n                .actions(List.of(\n                    S3DeployAction.Builder.create()\n                            .actionName(\"S3Deploy\")\n                            .bucket(deployBucket)\n                            .input(deployInput)\n                            .runOrder(1)\n                            .build(),\n                    CodeBuildAction.Builder.create()\n                            .actionName(\"InvalidateCache\")\n                            .project(invalidateBuildProject)\n                            .input(deployInput)\n                            .runOrder(2)\n                            .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.PipelineProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudfront.Distribution#distributionId",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Create a Cloudfront Web Distribution\nimport * as cloudfront from '@aws-cdk/aws-cloudfront';\ndeclare const distribution: cloudfront.Distribution;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the build project that will invalidate the cache\nconst invalidateBuildProject = new codebuild.PipelineProject(this, `InvalidateProject`, {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    phases: {\n      build: {\n        commands:[\n          'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths \"/*\"',\n          // Choose whatever files or paths you'd like, or all files as specified here\n        ],\n      },\n    },\n  }),\n  environmentVariables: {\n    CLOUDFRONT_ID: { value: distribution.distributionId },\n  },\n});\n\n// Add Cloudfront invalidation permissions to the project\nconst distributionArn = `arn:aws:cloudfront::${this.account}:distribution/${distribution.distributionId}`;\ninvalidateBuildProject.addToRolePolicy(new iam.PolicyStatement({\n  resources: [distributionArn],\n  actions: [\n    'cloudfront:CreateInvalidation',\n  ],\n}));\n\n// Create the pipeline (here only the S3 deploy and Invalidate cache build)\nconst deployBucket = new s3.Bucket(this, 'DeployBucket');\nconst deployInput = new codepipeline.Artifact();\nnew codepipeline.Pipeline(this, 'Pipeline', {\n  stages: [\n    // ...\n    {\n      stageName: 'Deploy',\n      actions: [\n        new codepipeline_actions.S3DeployAction({\n          actionName: 'S3Deploy',\n          bucket: deployBucket,\n          input: deployInput,\n          runOrder: 1,\n        }),\n        new codepipeline_actions.CodeBuildAction({\n          actionName: 'InvalidateCache',\n          project: invalidateBuildProject,\n          input: deployInput,\n          runOrder: 2,\n        }),\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "14": 1,
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 58,
        "104": 4,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 5,
        "193": 11,
        "194": 13,
        "196": 2,
        "197": 7,
        "211": 1,
        "221": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "f8cce53259785c93ca39351ff8f88a36c3ff1a1ce38ad8fff5959bd9cb6b5deb"
    },
    "40a75377090a436bbb91899554738126b0375c7cc3f21880126afd6ade2029f2": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Project"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ed81c8b9d936b8a9db52b43c720e17f5ae5a5e516acac352d72b3058195246a"
    },
    "41d3d3c017e451967a878e04156362cae86e4d1af9665bb7407873fa060caa54": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ed81c8b9d936b8a9db52b43c720e17f5ae5a5e516acac352d72b3058195246a"
    },
    "939953e2f2ffb1ffc68312e08925d831b47f8b510bab928d0eedcf6803b4e3ba": {
      "translations": {
        "python": {
          "source": "# source is of type Source\n\n\n# create a new ReportGroup\nreport_group = codebuild.ReportGroup(self, \"ReportGroup\")\n\nproject = codebuild.Project(self, \"Project\",\n    source=source,\n    build_spec=codebuild.BuildSpec.from_object({\n        # ...\n        \"reports\": {\n            report_group.report_group_arn: {\n                \"files\": \"**/*\",\n                \"base-directory\": \"build/test-results\"\n            }\n        }\n    })\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = new Project(this, \"Project\", new ProjectProps {\n    Source = source,\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        // ...\n        { \"reports\", new Dictionary<string, IDictionary<string, string>> {\n            { reportGroup.ReportGroupArn, new Struct {\n                Files = \"**/*\",\n                Base-directory = \"build/test-results\"\n            } }\n        } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Source source;\n\n\n// create a new ReportGroup\nReportGroup reportGroup = new ReportGroup(this, \"ReportGroup\");\n\nProject project = Project.Builder.create(this, \"Project\")\n        .source(source)\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                // ...\n                \"reports\", Map.of(\n                        reportGroup.getReportGroupArn(), Map.of(\n                                \"files\", \"**/*\",\n                                \"base-directory\", \"build/test-results\")))))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: codebuild.Source;\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.ReportGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.ReportGroup",
        "@aws-cdk/aws-codebuild.ReportGroup#reportGroupArn"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: codebuild.Source;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new ReportGroup\nconst reportGroup = new codebuild.ReportGroup(this, 'ReportGroup');\n\nconst project = new codebuild.Project(this, 'Project', {\n  source,\n  buildSpec: codebuild.BuildSpec.fromObject({\n    // ...\n    reports: {\n      [reportGroup.reportGroupArn]: {\n        files: '**/*',\n        'base-directory': 'build/test-results',\n      },\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 2,
        "130": 1,
        "153": 1,
        "154": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "effa22c24e30fcdb659bbc4946aeeac44aba8fad1d811b5d090fc43243d695f7"
    },
    "6428292198afbec28f5e8a455c9033f34f7a770a16a1667e8585e5a842948bc5": {
      "translations": {
        "python": {
          "source": "# bucket is of type Bucket\n\n\nproject = codebuild.Project(self, \"MyProject\",\n    build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n    artifacts=codebuild.Artifacts.s3(\n        bucket=bucket,\n        include_build_id=False,\n        package_zip=True,\n        path=\"another/path\",\n        identifier=\"AddArtifact1\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket;\n\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n    Artifacts = Artifacts.S3(new S3ArtifactsProps {\n        Bucket = bucket,\n        IncludeBuildId = false,\n        PackageZip = true,\n        Path = \"another/path\",\n        Identifier = \"AddArtifact1\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .buildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n        .artifacts(Artifacts.s3(S3ArtifactsProps.builder()\n                .bucket(bucket)\n                .includeBuildId(false)\n                .packageZip(true)\n                .path(\"another/path\")\n                .identifier(\"AddArtifact1\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3ArtifactsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.Artifacts",
        "@aws-cdk/aws-codebuild.Artifacts#s3",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IArtifacts",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3ArtifactsProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  buildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n  }),\n  artifacts: codebuild.Artifacts.s3({\n      bucket,\n      includeBuildId: false,\n      packageZip: true,\n      path: 'another/path',\n      identifier: 'AddArtifact1',\n    }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "91": 1,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9ed81c8b9d936b8a9db52b43c720e17f5ae5a5e516acac352d72b3058195246a"
    },
    "4be538ea75c1428ae9ea2380ca42c85c8741d74da1ec15cfce6c1bfa80417f8b": {
      "translations": {
        "python": {
          "source": "codebuild.Project(self, \"Project\",\n    logging=codebuild.LoggingOptions(\n        s3=codebuild.S3LoggingOptions(\n            bucket=s3.Bucket(self, \"LogBucket\")\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Project(this, \"Project\", new ProjectProps {\n    Logging = new LoggingOptions {\n        S3 = new S3LoggingOptions {\n            Bucket = new Bucket(this, \"LogBucket\")\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Project.Builder.create(this, \"Project\")\n        .logging(LoggingOptions.builder()\n                .s3(S3LoggingOptions.builder()\n                        .bucket(new Bucket(this, \"LogBucket\"))\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3LoggingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.LoggingOptions",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3LoggingOptions",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew codebuild.Project(this, 'Project', {\n  logging: {\n    s3: {\n      bucket: new s3.Bucket(this, `LogBucket`)\n    }\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "14": 1,
        "75": 7,
        "104": 2,
        "193": 3,
        "194": 2,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "4808bff450766189292b43478f467d88eac9ef0af2e97b94f0f7f4a9088e26b5"
    },
    "f2ad5c99f0143e9b4eb842b779f78562469af045ccd611a2bb40a1cdc9c134e7": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket(self, \"MyBucket\")\n\ncodebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.s3(\n        bucket=bucket,\n        path=\"path/to/file.zip\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nnew Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.S3(new S3SourceProps {\n        Bucket = bucket,\n        Path = \"path/to/file.zip\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket = new Bucket(this, \"MyBucket\");\n\nProject.Builder.create(this, \"MyProject\")\n        .source(Source.s3(S3SourceProps.builder()\n                .bucket(bucket)\n                .path(\"path/to/file.zip\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.S3SourceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.S3SourceProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#s3",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = new s3.Bucket(this, 'MyBucket');\n\nnew codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.s3({\n    bucket: bucket,\n    path: 'path/to/file.zip',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "2074d7993efcf4150db27824fce3e246429d60ff8f5e0e8f22921dd71065c4e2"
    },
    "89370d2ec947c944fb40f097910ba8136ff47ccebf874925ac4c2fe62be9b571": {
      "translations": {
        "python": {
          "source": "git_hub_source = codebuild.Source.git_hub(\n    owner=\"awslabs\",\n    repo=\"aws-cdk\",\n    webhook=True,  # optional, default: true if `webhookFilters` were provided, false otherwise\n    webhook_triggers_batch_build=True,  # optional, default is false\n    webhook_filters=[\n        codebuild.FilterGroup.in_event_of(codebuild.EventAction.PUSH).and_branch_is(\"master\").and_commit_message_is(\"the commit message\")\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ISource gitHubSource = Source.GitHub(new GitHubSourceProps {\n    Owner = \"awslabs\",\n    Repo = \"aws-cdk\",\n    Webhook = true,  // optional, default: true if `webhookFilters` were provided, false otherwise\n    WebhookTriggersBatchBuild = true,  // optional, default is false\n    WebhookFilters = new [] { FilterGroup.InEventOf(EventAction.PUSH).AndBranchIs(\"master\").AndCommitMessageIs(\"the commit message\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "ISource gitHubSource = Source.gitHub(GitHubSourceProps.builder()\n        .owner(\"awslabs\")\n        .repo(\"aws-cdk\")\n        .webhook(true) // optional, default: true if `webhookFilters` were provided, false otherwise\n        .webhookTriggersBatchBuild(true) // optional, default is false\n        .webhookFilters(List.of(FilterGroup.inEventOf(EventAction.PUSH).andBranchIs(\"master\").andCommitMessageIs(\"the commit message\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.Source"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.EventAction",
        "@aws-cdk/aws-codebuild.EventAction#PUSH",
        "@aws-cdk/aws-codebuild.FilterGroup",
        "@aws-cdk/aws-codebuild.FilterGroup#andBranchIs",
        "@aws-cdk/aws-codebuild.FilterGroup#andCommitMessageIs",
        "@aws-cdk/aws-codebuild.FilterGroup#inEventOf",
        "@aws-cdk/aws-codebuild.GitHubSourceProps",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst gitHubSource = codebuild.Source.gitHub({\n  owner: 'awslabs',\n  repo: 'aws-cdk',\n  webhook: true, // optional, default: true if `webhookFilters` were provided, false otherwise\n  webhookTriggersBatchBuild: true, // optional, default is false\n  webhookFilters: [\n    codebuild.FilterGroup\n      .inEventOf(codebuild.EventAction.PUSH)\n      .andBranchIs('master')\n      .andCommitMessageIs('the commit message'),\n  ], // optional, by default all pushes and Pull Requests will trigger a build\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "106": 2,
        "192": 1,
        "193": 1,
        "194": 8,
        "196": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "0fffca90dfb0745873c0f47f530909a756d06267a17f15c76c9aa661f9ecb8ff"
    },
    "a1f02cfc253beb6a8c7d21034bceced0fd0ec32d8cbcc6a993290fe9a1614892": {
      "translations": {
        "python": {
          "source": "# ecr_repository is of type Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.WindowsBuildImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fd1d2895cccd9f2bfa628b11830fbd9b66ced51f84cb1a04cf39b90d28a9399e"
    },
    "c2dc8c60a9e1614473ea8b65730dfc9dca1e369ee49e4be6d0e400516b6afcbc": {
      "translations": {
        "python": {
          "source": "# ecr_repository is of type Repository\n\n\ncodebuild.Project(self, \"Project\",\n    environment=codebuild.BuildEnvironment(\n        build_image=codebuild.WindowsBuildImage.from_ecr_repository(ecr_repository, \"v1.0\", codebuild.WindowsImageType.SERVER_2019),\n        # optional certificate to include in the build image\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\"),\n            object_key=\"path/to/cert.pem\"\n        )\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Repository ecrRepository;\n\n\nnew Project(this, \"Project\", new ProjectProps {\n    Environment = new BuildEnvironment {\n        BuildImage = WindowsBuildImage.FromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019),\n        // optional certificate to include in the build image\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\"),\n            ObjectKey = \"path/to/cert.pem\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Repository ecrRepository;\n\n\nProject.Builder.create(this, \"Project\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(WindowsBuildImage.fromEcrRepository(ecrRepository, \"v1.0\", WindowsImageType.SERVER_2019))\n                // optional certificate to include in the build image\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\"))\n                        .objectKey(\"path/to/cert.pem\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const ecrRepository: ecr.Repository;\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codebuild.WindowsImageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.WindowsBuildImage",
        "@aws-cdk/aws-codebuild.WindowsBuildImage#fromEcrRepository",
        "@aws-cdk/aws-codebuild.WindowsImageType",
        "@aws-cdk/aws-codebuild.WindowsImageType#SERVER_2019",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const ecrRepository: ecr.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration, SecretValue } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport iam = require('@aws-cdk/aws-iam');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as logs from '@aws-cdk/aws-logs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew codebuild.Project(this, 'Project', {\n  environment: {\n    buildImage: codebuild.WindowsBuildImage.fromEcrRepository(ecrRepository, 'v1.0', codebuild.WindowsImageType.SERVER_2019),\n    // optional certificate to include in the build image\n    certificate: {\n      bucket: s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket'),\n      objectKey: 'path/to/cert.pem',\n    },\n  },\n  // ...\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "fd1d2895cccd9f2bfa628b11830fbd9b66ced51f84cb1a04cf39b90d28a9399e"
    }
  }
}
