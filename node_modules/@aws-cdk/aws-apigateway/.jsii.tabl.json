{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "4fd0399b4fd7c1099faf9e898ec1684c3175c16096b3531a6d5d7eb804e583e7": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\n\napi.root.add_method(\"ANY\")\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\")\nbooks.add_method(\"POST\")\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")\nbook.add_method(\"DELETE\")",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\n\napi.Root.AddMethod(\"ANY\");\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\");\nbooks.AddMethod(\"POST\");\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");\nbook.AddMethod(\"DELETE\");",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\n\napi.root.addMethod(\"ANY\");\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\");\nbooks.addMethod(\"POST\");\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");\nbook.addMethod(\"DELETE\");",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 59
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\n\napi.root.addMethod('ANY');\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');\nbooks.addMethod('POST');\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\nbook.addMethod('DELETE');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 21,
        "104": 1,
        "194": 10,
        "196": 7,
        "197": 1,
        "225": 3,
        "226": 5,
        "242": 3,
        "243": 3
      },
      "fqnsFingerprint": "c23b7ff64db38bcc3c086e2a15f8486e67a3dacb3a4f18b22c1de40d4af3e7fa"
    },
    "2eaba6a5e320a4862b6b0f9a08c4279904e44543ef0012f501a75271a1892897": {
      "translations": {
        "python": {
          "source": "# backend is of type Function\n\napigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function backend;\n\nnew LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend\n});",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c9625506bb4b976527493ea57768f66f5243fd485907840813ccdf876c5e12b9"
    },
    "a30531d2bf118939ef7f53aa2d06e758bb6e20f346109b41e761c617da8b7fbd": {
      "translations": {
        "python": {
          "source": "# backend is of type Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "499853a35cf9a783349b47e3c5788ea99e49a44ab87bfce9bc95e5187d09901b"
    },
    "d819d3b744072040d45e398edfd8f8b6c298adda9d8e9bce08ea2721f0f63117": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a02c88ccf3998f1830d820178346d518087063ad6908362e2d21fd0e755e69e1"
    },
    "022fe0db36024bc807d1732719d8146d92334e00bd4346a2dd760d710c62addb": {
      "translations": {
        "python": {
          "source": "apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 190
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RequestContext",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineType"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "91": 2,
        "104": 1,
        "106": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "c355d9e4253caffbb14ad804536b4da2ed5f1320e772dbb0c69fb827ead348f2"
    },
    "70474cb3b94cee59d0d164f73644b0532c9db664a84020bf93b212f5ee48fdc8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "684d7cadc8d7451c5165008ff56a4576cfb2b2c4c46d8ece716a1473f80ea5aa"
    },
    "35085d5dae8ad75ae1c8d2836861b17932e24ba368084fa3f11cabb16fe38d78": {
      "translations": {
        "python": {
          "source": "# get_book_handler is of type Function\n# book is of type Resource\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler)\nbook.add_method(\"GET\", get_book_integration)",
          "version": "1"
        },
        "csharp": {
          "source": "Function getBookHandler;\nResource book;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.AddMethod(\"GET\", getBookIntegration);",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nResource book;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler);\nbook.addMethod(\"GET\", getBookIntegration);",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 381
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const book: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler);\nbook.addMethod('GET', getBookIntegration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "02dedffacdb7c1bbbe5d9f1b562223e76369ab591657c9a47b6aac83f1132e55"
    },
    "a5e3f0eb9cc1cf4888ce6752ec22d2f93225157b21fdb778d574f347c50ab051": {
      "translations": {
        "python": {
          "source": "# get_book_handler is of type Function\n# get_book_integration is of type LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 391
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a9e0a103d7a88ba8c37e5462654b5ba0529a2cb582ba59dc7a5b973d8abdc35f"
    },
    "316d3f6198788a5c766e4781bf11eb581bde5fea82bf78687eb7e892f31c2b8d": {
      "translations": {
        "python": {
          "source": "# book is of type Resource\n# get_book_integration is of type LambdaIntegration\n\n\nbook.add_method(\"GET\", get_book_integration,\n    authorization_type=apigateway.AuthorizationType.IAM,\n    api_key_required=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.AddMethod(\"GET\", getBookIntegration, new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM,\n    ApiKeyRequired = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource book;\nLambdaIntegration getBookIntegration;\n\n\nbook.addMethod(\"GET\", getBookIntegration, MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .apiKeyRequired(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 403
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const book: apigateway.Resource;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbook.addMethod('GET', getBookIntegration, {\n  authorizationType: apigateway.AuthorizationType.IAM,\n  apiKeyRequired: true\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b31538ed7fbe67c3504b7c45fb10a5ae2b7976e9db3967b7996a3b257dfe62e3"
    },
    "3eb9ddc390d2d2751bdba892603ea67c398de0edb5b14c11bbc1be53ff7fbc1e": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 416
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "6cbc4a6165467d66007ff0ad50ee5d7dd04e6106af6e8d26fc5c798f898c04b3"
    },
    "197265bdcdde35bead095a8d1c7da8e380915ed3b2bec826ad49f29d8635377c": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 432
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9d95499536351ae41edde7e08a2a96b4d7cae8f745ea626735c7ca00a9d704"
    },
    "5ea2d245038589a627e01787d0e3167696dac12aae0d9cb6371454240241be73": {
      "translations": {
        "python": {
          "source": "# plan is of type UsagePlan\n# api is of type RestApi\n# echo_method is of type Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 455
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.RestApiBase#deploymentStage",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan#addApiStage",
        "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c086c75c64818c021441c9037de914fc69cf66e528a274f788ad33208fe5bfed"
    },
    "618b1e6d2fe6274f96ac3462f9855eaa8c97cdaa1ec6799269372e4891bca8e2": {
      "translations": {
        "python": {
          "source": "imported_usage_plan = apigateway.UsagePlan.from_usage_plan_id(self, \"imported-usage-plan\", \"<usage-plan-key-id>\")",
          "version": "1"
        },
        "csharp": {
          "source": "IUsagePlan importedUsagePlan = UsagePlan.FromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IUsagePlan importedUsagePlan = UsagePlan.fromUsagePlanId(this, \"imported-usage-plan\", \"<usage-plan-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 476
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IUsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlan#fromUsagePlanId"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedUsagePlan = apigateway.UsagePlan.fromUsagePlanId(this, 'imported-usage-plan', '<usage-plan-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "bd2389a3c45d34c789a164a261dcc73028fd1a5701da7da7685e1760d95abea4"
    },
    "c28981862422025fdf6ea03211c6af55b84788cba48d3c618d6a5846f7b350cd": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\nIApiKey key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 483
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7bb7d3b2bf0b4be7afa748c63c37b0424dc74d10861a367bc91f8ba2c5a13800"
    },
    "245d9ea723386e50babafe53326ca1cea5fb4c76ea287e4f3db0d7e1e519c12d": {
      "translations": {
        "python": {
          "source": "imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")",
          "version": "1"
        },
        "csharp": {
          "source": "IApiKey importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 493
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKey",
        "@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "15fb6ca782fb121a4f410cc2c00ca6564fafa455dc7c403f518e54bc82cb25dc"
    },
    "89940aea7ab63592ca64bce7cd6f2598e9ce25f084d711948143b12436b8df6d": {
      "translations": {
        "python": {
          "source": "# imported_key is of type ApiKey\n# lambda_fn is of type Function\n\nimported_key.grant_read(lambda_fn)",
          "version": "1"
        },
        "csharp": {
          "source": "ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.GrantRead(lambdaFn);",
          "version": "1"
        },
        "java": {
          "source": "ApiKey importedKey;\nFunction lambdaFn;\n\nimportedKey.grantRead(lambdaFn);",
          "version": "1"
        },
        "$": {
          "source": "declare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\nimportedKey.grantRead(lambdaFn);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 500
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const importedKey: apigateway.ApiKey;\ndeclare const lambdaFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nimportedKey.grantRead(lambdaFn);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1323b60ab94a88d4cf4c7c846ab0af5927a24713050028234cb9426c28ace47b"
    },
    "916ce623a432bf9ec0a81a5f56bd8766872dc8b5dab729aa045703843057e32d": {
      "translations": {
        "python": {
          "source": "# usageplan is of type UsagePlan\n# api_key is of type ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 518
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AddApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5c6d76a82108bfbaca4317272b68bb8233c62de420963616396460ee95af63d5"
    },
    "5d7a97eb79c0c5b95575c110fb43d4d9093e8f83d3390b6abef8db5f7790625a": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 538
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b9eeff5b2086cd8c2c13cb2cc1b636247a54a79012debdadac956a60e7621126"
    },
    "2925616340b65ab93774fdf5de6219be2dcaff6ac370400385b65f28ae804552": {
      "translations": {
        "python": {
          "source": "hello = lambda_.Function(self, \"hello\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"hello.handler\",\n    code=lambda_.Code.from_asset(\"lambda\")\n)\n\napi = apigateway.RestApi(self, \"hello-api\")\nresource = api.root.add_resource(\"v1\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function hello = new Function(this, \"hello\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"hello.handler\",\n    Code = Code.FromAsset(\"lambda\")\n});\n\nRestApi api = new RestApi(this, \"hello-api\", new RestApiProps { });\nResource resource = api.Root.AddResource(\"v1\");",
          "version": "1"
        },
        "java": {
          "source": "Function hello = Function.Builder.create(this, \"hello\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"hello.handler\")\n        .code(Code.fromAsset(\"lambda\"))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"hello-api\").build();\nResource resource = api.root.addResource(\"v1\");",
          "version": "1"
        },
        "$": {
          "source": "const hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 556
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 2,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3
      },
      "fqnsFingerprint": "eccd6470b43e364cc6552bf8269daffb641821f444f164882b1d7bf3f8ac6fc3"
    },
    "db6c4f6a6eb35aa883a060075269c67181db729f6c3d0dedd2bc1e3ca462438f": {
      "translations": {
        "python": {
          "source": "# hello is of type Function\n\n\nintegration = apigateway.LambdaIntegration(hello,\n    proxy=False,\n    request_parameters={\n        # You can define mapping parameters from your method to your integration\n        # - Destination parameters (the key) are the integration parameters (used in mappings)\n        # - Source parameters (the value) are the source request parameters or expressions\n        # @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        \"integration.request.querystring.who\": \"method.request.querystring.who\"\n    },\n    allow_test_invoke=True,\n    request_templates={\n        # You can define a mapping that will build a payload for your integration, based\n        #  on the integration parameters that you have specified\n        # Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        \"application/json\": JSON.stringify({\"action\": \"sayHello\", \"poll_id\": \"$util.escapeJavaScript($input.params('who'))\"})\n    },\n    # This parameter defines the behavior of the engine is no suitable response template is found\n    passthrough_behavior=apigateway.PassthroughBehavior.NEVER,\n    integration_responses=[apigateway.IntegrationResponse(\n        # Successful response from the Lambda function, no filter defined\n        #  - the selectionPattern filter only tests the error message\n        # We will set the response status code to 200\n        status_code=\"200\",\n        response_templates={\n            # This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            # Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            \"application/json\": JSON.stringify({\"state\": \"ok\", \"greeting\": \"$util.escapeJavaScript($input.body)\"})\n        },\n        response_parameters={\n            # We can map response parameters\n            # - Destination parameters (the key) are the response parameters (used in mappings)\n            # - Source parameters (the value) are the integration response parameters or expressions\n            \"method.response.header._content-_type\": \"'application/json'\",\n            \"method.response.header._access-_control-_allow-_origin\": \"'*'\",\n            \"method.response.header._access-_control-_allow-_credentials\": \"'true'\"\n        }\n    ), apigateway.IntegrationResponse(\n        # For errors, we check if the error message is not empty, get the error data\n        selection_pattern=\"\"\"(\n        |.)+\"\"\",\n        # We will set the response status code to 200\n        status_code=\"400\",\n        response_templates={\n            \"application/json\": JSON.stringify({\"state\": \"error\", \"message\": \"$util.escapeJavaScript($input.path('$.errorMessage'))\"})\n        },\n        response_parameters={\n            \"method.response.header._content-_type\": \"'application/json'\",\n            \"method.response.header._access-_control-_allow-_origin\": \"'*'\",\n            \"method.response.header._access-_control-_allow-_credentials\": \"'true'\"\n        }\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function hello;\n\n\nLambdaIntegration integration = new LambdaIntegration(hello, new LambdaIntegrationOptions {\n    Proxy = false,\n    RequestParameters = new Dictionary<string, string> {\n        // You can define mapping parameters from your method to your integration\n        // - Destination parameters (the key) are the integration parameters (used in mappings)\n        // - Source parameters (the value) are the source request parameters or expressions\n        // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n        { \"integration.request.querystring.who\", \"method.request.querystring.who\" }\n    },\n    AllowTestInvoke = true,\n    RequestTemplates = new Dictionary<string, string> {\n        // You can define a mapping that will build a payload for your integration, based\n        //  on the integration parameters that you have specified\n        // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"action\", \"sayHello\" }, { \"pollId\", \"$util.escapeJavaScript($input.params('who'))\" } }) }\n    },\n    // This parameter defines the behavior of the engine is no suitable response template is found\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    IntegrationResponses = new [] { new IntegrationResponse {\n        // Successful response from the Lambda function, no filter defined\n        //  - the selectionPattern filter only tests the error message\n        // We will set the response status code to 200\n        StatusCode = \"200\",\n        ResponseTemplates = new Dictionary<string, string> {\n            // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n            // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"ok\" }, { \"greeting\", \"$util.escapeJavaScript($input.body)\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            // We can map response parameters\n            // - Destination parameters (the key) are the response parameters (used in mappings)\n            // - Source parameters (the value) are the integration response parameters or expressions\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    }, new IntegrationResponse {\n        // For errors, we check if the error message is not empty, get the error data\n        SelectionPattern = @\"(\n        |.)+\",\n        // We will set the response status code to 200\n        StatusCode = \"400\",\n        ResponseTemplates = new Dictionary<string, string> {\n            { \"application/json\", JSON.Stringify(new Dictionary<string, string> { { \"state\", \"error\" }, { \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\" } }) }\n        },\n        ResponseParameters = new Dictionary<string, string> {\n            { \"method.response.header.Content-Type\", \"'application/json'\" },\n            { \"method.response.header.Access-Control-Allow-Origin\", \"'*'\" },\n            { \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\" }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function hello;\n\n\nLambdaIntegration integration = LambdaIntegration.Builder.create(hello)\n        .proxy(false)\n        .requestParameters(Map.of(\n                // You can define mapping parameters from your method to your integration\n                // - Destination parameters (the key) are the integration parameters (used in mappings)\n                // - Source parameters (the value) are the source request parameters or expressions\n                // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n                \"integration.request.querystring.who\", \"method.request.querystring.who\"))\n        .allowTestInvoke(true)\n        .requestTemplates(Map.of(\n                // You can define a mapping that will build a payload for your integration, based\n                //  on the integration parameters that you have specified\n                // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                \"application/json\", JSON.stringify(Map.of(\"action\", \"sayHello\", \"pollId\", \"$util.escapeJavaScript($input.params('who'))\"))))\n        // This parameter defines the behavior of the engine is no suitable response template is found\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .integrationResponses(List.of(IntegrationResponse.builder()\n                // Successful response from the Lambda function, no filter defined\n                //  - the selectionPattern filter only tests the error message\n                // We will set the response status code to 200\n                .statusCode(\"200\")\n                .responseTemplates(Map.of(\n                        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n                        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"ok\", \"greeting\", \"$util.escapeJavaScript($input.body)\"))))\n                .responseParameters(Map.of(\n                        // We can map response parameters\n                        // - Destination parameters (the key) are the response parameters (used in mappings)\n                        // - Source parameters (the value) are the integration response parameters or expressions\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build(), IntegrationResponse.builder()\n                // For errors, we check if the error message is not empty, get the error data\n                .selectionPattern(\"(\\n|.)+\")\n                // We will set the response status code to 200\n                .statusCode(\"400\")\n                .responseTemplates(Map.of(\n                        \"application/json\", JSON.stringify(Map.of(\"state\", \"error\", \"message\", \"$util.escapeJavaScript($input.path('$.errorMessage'))\"))))\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", \"'application/json'\",\n                        \"method.response.header.Access-Control-Allow-Origin\", \"'*'\",\n                        \"method.response.header.Access-Control-Allow-Credentials\", \"'true'\"))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const hello: lambda.Function;\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 569
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hello: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst integration = new apigateway.LambdaIntegration(hello, {\n  proxy: false,\n  requestParameters: {\n    // You can define mapping parameters from your method to your integration\n    // - Destination parameters (the key) are the integration parameters (used in mappings)\n    // - Source parameters (the value) are the source request parameters or expressions\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html\n    'integration.request.querystring.who': 'method.request.querystring.who'\n  },\n  allowTestInvoke: true,\n  requestTemplates: {\n    // You can define a mapping that will build a payload for your integration, based\n    //  on the integration parameters that you have specified\n    // Check: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n    'application/json': JSON.stringify({ action: 'sayHello', pollId: \"$util.escapeJavaScript($input.params('who'))\" })\n  },\n  // This parameter defines the behavior of the engine is no suitable response template is found\n  passthroughBehavior: apigateway.PassthroughBehavior.NEVER,\n  integrationResponses: [\n    {\n      // Successful response from the Lambda function, no filter defined\n      //  - the selectionPattern filter only tests the error message\n      // We will set the response status code to 200\n      statusCode: \"200\",\n      responseTemplates: {\n        // This template takes the \"message\" result from the Lambda function, and embeds it in a JSON response\n        // Check https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n        'application/json': JSON.stringify({ state: 'ok', greeting: '$util.escapeJavaScript($input.body)' })\n      },\n      responseParameters: {\n        // We can map response parameters\n        // - Destination parameters (the key) are the response parameters (used in mappings)\n        // - Source parameters (the value) are the integration response parameters or expressions\n        'method.response.header.Content-Type': \"'application/json'\",\n        'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n        'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    },\n    {\n      // For errors, we check if the error message is not empty, get the error data\n      selectionPattern: '(\\n|.)+',\n      // We will set the response status code to 200\n      statusCode: \"400\",\n      responseTemplates: {\n          'application/json': JSON.stringify({ state: 'error', message: \"$util.escapeJavaScript($input.path('$.errorMessage'))\" })\n      },\n      responseParameters: {\n          'method.response.header.Content-Type': \"'application/json'\",\n          'method.response.header.Access-Control-Allow-Origin': \"'*'\",\n          'method.response.header.Access-Control-Allow-Credentials': \"'true'\"\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 26,
        "75": 35,
        "91": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 12,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 29,
        "290": 1
      },
      "fqnsFingerprint": "b2120afe45eb63d953e1edcc41120b1a9bc26a85fd19555e1cdc73644ace69b4"
    },
    "1770d7e910f52898ed79714cdc0969bf9b4bd9f1cbba70998c3affd645ee2267": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "ed589b7a75fd3e1ca230dea114d2eb8779b33df23bf485cb63d629cb66097e3a": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n# resource is of type Resource\n# response_model is of type Model\n# error_response_model is of type Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 668
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 29,
        "91": 1,
        "106": 8,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 9,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "c480bf1c8ed4f7e54c4664cc774a02b7a32c809931cb1257a78b232e3c505ce7"
    },
    "9ce1fa303b7589f417f7bd27f7c7f8a951cdaf30d2edbdf5c9efe8305d0c0dda": {
      "translations": {
        "python": {
          "source": "# books_backend is of type LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");",
          "version": "1"
        },
        "$": {
          "source": "declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 733
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 7,
        "196": 5,
        "197": 1,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "16627da5ee968612bed3ec3a76826a49bb4956edc890798839dd921dd8e1d5a8"
    },
    "0539e3468eec25ab01ad21ea98eb163bc02419369dbb38ceac2ea275728038a4": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\n\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.COGNITO,\n    authorization_scopes=[\"Scope1\", \"Scope2\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\n\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.COGNITO,\n    AuthorizationScopes = new [] { \"Scope1\", \"Scope2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\n\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.COGNITO)\n        .authorizationScopes(List.of(\"Scope1\", \"Scope2\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 755
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n  authorizationScopes: ['Scope1','Scope2']\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6cff428993b6f4b131c639401da3453a9795105b46adf175e932f08cac48c19c"
    },
    "1c543ddf834ffbf0a405f3ffa14df2a8c4cd15ed1ca0f9a9e72c86d8ff7d9f4f": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n# handler is of type Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 769
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8fa38e19fe22bcd876f7a5b0a58200ba668cbebb9ba9975d19b90ff97299a1b6"
    },
    "75142646447bd454d2115e268452cb8aa8b85f350168c7b0330782dec7bd17a7": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\n# iam_user is of type User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 789
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "dce79b91f7d902fb8c9abcf47f4c1999080baa3002f491481cb3b463a902f912"
    },
    "b23bcd6e448ef607bcca3e58e424511be4f6952fee21cb57c03073f9dba70576": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 826
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a1c71eb30cd3fa1a11c3c0ff4418bb5e6caa80399e98ef9fa504d49d24069ed4"
    },
    "7e171f59842f0ba999d5e75de30ef99a4e9fdb93d68f903daea47630a54cf6ce": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer\n\n#\n# Stack verification steps:\n# * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n# * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n#\n\napp = App()\nstack = Stack(app, \"TokenAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.token-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = TokenAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.token-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = new TokenAuthorizer(stack, \"MyAuthorizer\", new TokenAuthorizerProps {\n    Handler = authorizerFn\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.TokenAuthorizer;\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nApp app = new App();\nStack stack = new Stack(app, \"TokenAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.token-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nTokenAuthorizer authorizer = TokenAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 842
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi, TokenAuthorizer } from '../../lib';\n\n/*\n * Stack verification steps:\n * * `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>` should return 403\n * * `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>` should return 200\n */\n\nconst app = new App();\nconst stack = new Stack(app, 'TokenAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.token-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new TokenAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 50,
        "192": 2,
        "193": 7,
        "194": 9,
        "196": 3,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 4,
        "255": 4,
        "256": 2,
        "257": 2,
        "258": 6,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "5154c7228628acb7d6f76269d351c28075c2af342114eaa5ae63f0db00695227"
    },
    "69697a1a79c30244816c20325c2fedfc5e15af364d8245c836506bbe4d6c8304": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 910
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "13ee7923e4f09aa07a899f3e31eb4eda3c7a6efccdb45131868bbe3d173932ca"
    },
    "460dd31a9d3076ddca2879de1b83308e30b105198197b7c72236400b1696b4da": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 927
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c90459652dbd193a3f7020ed8afa29b935ad51f42d4198c9c173fa3582c63038"
    },
    "e892b0a6beca09c212d7c7e80f3cb88249c9a37040ca17a8f3b7b26d265d3d06": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 986
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee3b976001dafe477fea89f5935654526c56bcce835d548de4338af3170576c8"
    },
    "9b53bee34f3daf385bf407a2159ebd0726976d90ce9e9780fac875a9ea4fc81a": {
      "translations": {
        "python": {
          "source": "# acm is of type object\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1004
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ee1c5b160ba67ab2a2a7cb297689c10b97accfc653651db6ca7bbcf02b555be8"
    },
    "6a07cf508d613278e7a4d6f68cfcab75161a77b4c87cbe9d7f4c9badbfa0fb12": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1052
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "3fd0efe83ab2bbad762e25ac276e988250034992b47214ff9891ef609d586b82"
    },
    "19c1f947f2fade3f30b809060178b549599bcb5721519af89930694758187e2a": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com is of type object\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nRestApi api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1085
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-certificatemanager.ICertificate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cfffb2db5a9fd5e7116a1b8bc76367237024cea620dc9b6a18439cf0151de890"
    },
    "fc1a0b9e3542f7a902a40408e510a0a338f2120b3772d2fb64d993ae2a50da1a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api is of type RestApi\n# hosted_zone_for_example_com is of type object\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1106
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "da84de034b74e4ee36190669dac356d7cf084bee4a06d9ccb841837ea5846c14"
    },
    "50b3e6d728f453b3bf6f3f9c5c8b7e44139e7bc3957c580053f5778e0a54f61b": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com is of type object\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1121
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2",
        "@aws-cdk/aws-certificatemanager.ICertificate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1d54d8466104551d3632d731373879366d46a8ed216c1275f5f4016a303024c9"
    },
    "2317c26e330a9b338d0728f02e68983b1f59c93d0fc4450ee62fba35817d2b4d": {
      "translations": {
        "python": {
          "source": "# domain is of type DomainName\n# api1 is of type RestApi\n# api2 is of type RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")",
          "version": "1"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1136
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5a59673e281a9e74fb8336a55216b7705043f1d1a55da92e4001e34411525ae3"
    },
    "4cb5a521e43f3a219dc476ea518ee7e58499626acc5573d938095f8cc5c91ff9": {
      "translations": {
        "python": {
          "source": "# domain is of type DomainName\n# restapi is of type RestApi\n\n\nbeta_deploy = apigateway.Deployment(self, \"beta-deployment\",\n    api=restapi\n)\nbeta_stage = apigateway.Stage(self, \"beta-stage\",\n    deployment=beta_deploy\n)\ndomain.add_base_path_mapping(restapi, base_path=\"api/beta\", stage=beta_stage)",
          "version": "1"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi restapi;\n\n\nDeployment betaDeploy = new Deployment(this, \"beta-deployment\", new DeploymentProps {\n    Api = restapi\n});\nStage betaStage = new Stage(this, \"beta-stage\", new StageProps {\n    Deployment = betaDeploy\n});\ndomain.AddBasePathMapping(restapi, new BasePathMappingOptions { BasePath = \"api/beta\", Stage = betaStage });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi restapi;\n\n\nDeployment betaDeploy = Deployment.Builder.create(this, \"beta-deployment\")\n        .api(restapi)\n        .build();\nStage betaStage = Stage.Builder.create(this, \"beta-stage\")\n        .deployment(betaDeploy)\n        .build();\ndomain.addBasePathMapping(restapi, BasePathMappingOptions.builder().basePath(\"api/beta\").stage(betaStage).build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1148
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const restapi: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst betaDeploy = new apigateway.Deployment(this, 'beta-deployment', {\n  api: restapi,\n});\nconst betaStage = new apigateway.Stage(this, 'beta-stage', {\n  deployment: betaDeploy,\n});\ndomain.addBasePathMapping(restapi, { basePath: 'api/beta', stage: betaStage });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 22,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "871afd091e33119d523f71207e4b8c6038a9483b4d0883357ffa32b823b6d8e8"
    },
    "5f72c885d458c547240b76fd6b60b7085fb3e1fa1a84827bdacde770ac46d9dc": {
      "translations": {
        "python": {
          "source": "# domain is of type DomainName\n# api is of type RestApi\n\ndomain.add_base_path_mapping(api)",
          "version": "1"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api;\n\ndomain.AddBasePathMapping(api);",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api;\n\ndomain.addBasePathMapping(api);",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\ndomain.addBasePathMapping(api);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1164
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\ndomain.addBasePathMapping(api);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "dfe4b02af5164e9fb6959559436de0593c9f4a24dd999d05223003f3f61259a3"
    },
    "22791ad83af50e8d8e0acb485c9be42618b8541951ee5801f9a644a0ca3fc956": {
      "translations": {
        "python": {
          "source": "# hosted_zone_for_example_com is of type object\n# domain_name is of type DomainName\n\nimport aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGatewayDomain(domain_name))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var hostedZoneForExampleCom;\nDomainName domainName;\n\nusing Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGatewayDomain(domainName))\n});",
          "version": "1"
        },
        "java": {
          "source": "Object hostedZoneForExampleCom;\nDomainName domainName;\n\nimport software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGatewayDomain(domainName)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1175
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IDomainName",
        "@aws-cdk/aws-route53-targets.ApiGatewayDomain",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const hostedZoneForExampleCom: any;\ndeclare const domainName: apigateway.DomainName;\n\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGatewayDomain(domainName))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f2045fe950961b273fce72bde22a037fde4a929761fe4a6441e3c671bf904059"
    },
    "a3ce1e514d0100fafa8e55f5fed60e8c4edc73d6065ee5bf970297b8b1e65773": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1200
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "719a940f7e05f4707bf342960f7ca484715a397b138a1c10dce2da53d3741085": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1232
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#clf",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "579d898be3e6b249cc7b5616de3afb627fb464be9a2cf1fa545ab27e44edd9a2"
    },
    "5c05b53c16a3be10ec5ea50b7f00928889b497b344814bc82704ea85093e2f3c": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1244
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "5c732640e9a2d4740d6156cef974c03e6985a9eb1f06af8b213403bc793b07c9"
    },
    "66a43c754f6e0b6c77fb7a89e1f89086fc1dd640c8d6ef945d02ca8839b18443": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nStage stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1261
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 14,
        "104": 3,
        "193": 4,
        "194": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "844c5b75622e245e36eae66ed03230b8bb9324c0e3fdd2e51e7a642a115d2105"
    },
    "b51f37227d138d22ee04a2e3f6d5a3396aaf54e32868abcf650eeef08744fa02": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        method_options={\n            \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n                throttling_rate_limit=100,\n                throttling_burst_limit=1000)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n            { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n                ThrottlingRateLimit = 100,\n                ThrottlingBurstLimit = 1000 } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .methodOptions(Map.of(\n                        \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                                .throttlingRateLimit(100)\n                                .throttlingBurstLimit(1000).build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1278
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    methodOptions: {\n      '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n        throttlingRateLimit: 100,\n        throttlingBurstLimit: 1000\n      }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "bde1ec9a4ab9e250a61589d4f0cf1f8b9cade72fc744921fc12e6cd296c19e63"
    },
    "13ef2cf637f6f4bfca217bff83de4935fea5c8cec670bdba0cd475594cff8b1c": {
      "translations": {
        "python": {
          "source": "apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1304
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Cors",
        "@aws-cdk/aws-apigateway.Cors#ALL_METHODS",
        "@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "e070aa581608a537d944144d084c5b9c9044fe0bb926743883c0e33a60e6bf65"
    },
    "b82921d67474b7692473c32bd8baa12f6cf46a5dc7ff5e57534cb1d1a975142e": {
      "translations": {
        "python": {
          "source": "# my_resource is of type Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1316
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"
    },
    "98880fc385fda4ff10efbab8015cf18addcd8ca91929798b887dd19c85a62a24": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\n\n\nResource subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1331
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.ResourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d3d27b9529164cca5abb04f8cbd8b6ef12bcb0116d88c43d128580a078ed9e24"
    },
    "08e6f8fc845119e691f5780a0c475289cb6d85b4a4975f5adf97c4ab432742cd": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1353
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "defabba417ac6358c1483989cab98d1bc48c30dc16a2746fadbd8aaa3fe3fbd6"
    },
    "e1523c5826b37470ecb84ea1aab3b9f4d096d64c97a4fd74bd49b157f1ce35e4": {
      "translations": {
        "python": {
          "source": "# some_endpoint is of type IVpcEndpoint\n\n\napi = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.PRIVATE],\n        vpc_endpoints=[some_endpoint]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpcEndpoint someEndpoint;\n\n\nRestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.PRIVATE },\n        VpcEndpoints = new [] { someEndpoint }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpcEndpoint someEndpoint;\n\n\nRestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.PRIVATE))\n                .vpcEndpoints(List.of(someEndpoint))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const someEndpoint: ec2.IVpcEndpoint;\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1368
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const someEndpoint: ec2.IVpcEndpoint;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.PRIVATE ],\n    vpcEndpoints: [ someEndpoint ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3f0e37aa75ff50b1fd51befde02581c7aef60410eb83fa5b73d3828486336d51"
    },
    "aa848ec0d21251e3de93f6b78355f2c2481e8363f1754520050190685a868421": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1395
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    },
    "bce659d86b25aaf66ce03981661cd65602edf55af61bd74c6dbf323e5ab000c7": {
      "translations": {
        "python": {
          "source": "awesome_link = apigateway.VpcLink.from_vpc_link_id(self, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\")",
          "version": "1"
        },
        "csharp": {
          "source": "IVpcLink awesomeLink = VpcLink.FromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");",
          "version": "1"
        },
        "java": {
          "source": "IVpcLink awesomeLink = VpcLink.fromVpcLinkId(this, \"awesome-vpc-link\", \"us-east-1_oiuR12Abd\");",
          "version": "1"
        },
        "$": {
          "source": "const awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1422
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLink#fromVpcLinkId"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst awesomeLink = apigateway.VpcLink.fromVpcLinkId(this, 'awesome-vpc-link', 'us-east-1_oiuR12Abd');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "abf9a3a77e3987d0c95c05eeae5b6b81d84302790b271106a8b130f66d0ed5f2"
    },
    "56c0be6a8ac0bd2e5f36733d6a115112d3ff959f2e553dac9410c73c0623ae9c": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1437
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "b1dacb0849e1cb6d98cf15355ee4c82d880a753f23df322385294b42335aef3b"
    },
    "87e475aa3bd736583b83911fa0e3a90389de38be9eca258d5b0b9a03966f3539": {
      "translations": {
        "python": {
          "source": "# integration is of type Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "1"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1460
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9346f36c9c0a68d422eb6d8f7b2e69e6808fe2938d4b349d9629b64b221ccd6"
    },
    "9e49b09450c7bb739e927e94e6cbce4cec43fa5e6b834334094df26377ee5366": {
      "translations": {
        "python": {
          "source": "# api_definition is of type ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1494
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6bc615bfe0d8aede3167ab4faf80c7274941d3c27ebb5fb2e2c9dca9c9fdb9b7"
    },
    "8289857d510360c2ec6afe77fa47d9df4bf44927813b5f95295c5ab853c6bede": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"my-api\")\nclient_error_metric = api.metric_client_error()",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"my-api\");\nMetric clientErrorMetric = api.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"my-api\");\nMetric clientErrorMetric = api.metricClientError();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigateway"
        },
        "field": {
          "field": "markdown",
          "line": 1515
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#metricClientError",
        "@aws-cdk/aws-cloudwatch.Metric"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "0f5d998767a7c79fc9a16da7ff162927f05bdf6e5b15f349058f5b0eb03b74e1"
    },
    "64dcec102ba8b8eff9279c8707c971bc33a21e4b52a145a7dfc6fc1018e381fe": {
      "translations": {
        "python": {
          "source": "apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))",
          "version": "1"
        },
        "csharp": {
          "source": "AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));",
          "version": "1"
        },
        "$": {
          "source": " apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogFormat",
          "memberName": "custom"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogField",
        "@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims",
        "@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod",
        "@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp",
        "@aws-cdk/aws-apigateway.AccessLogField#contextRequestId",
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "193": 2,
        "194": 13,
        "196": 7,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"
    },
    "391f19836943028f59a3e17128e1c7eea633e6869f3ad02327972d92aaf29271": {
      "translations": {
        "python": {
          "source": "apigateway.ApiDefinition.from_inline({\n    \"openapi\": \"3.0.2\",\n    \"paths\": {\n        \"/pets\": {\n            \"get\": {\n                \"responses\": {\n                    \"200\": {\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"x-amazon-apigateway-integration\": {\n                    \"responses\": {\n                        \"default\": {\n                            \"status_code\": \"200\"\n                        }\n                    },\n                    \"request_templates\": {\n                        \"application/json\": \"{\\\"statusCode\\\": 200}\"\n                    },\n                    \"passthrough_behavior\": \"when_no_match\",\n                    \"type\": \"mock\"\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Empty\": {\n                \"title\": \"Empty Schema\",\n                \"type\": \"object\"\n            }\n        }\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "ApiDefinition.FromInline(new Dictionary<string, object> {\n    { \"openapi\", \"3.0.2\" },\n    { \"paths\", new Struct {\n        /pets = new Struct {\n            Get = new Struct {\n                Responses = new Struct {\n                    200 = new Struct {\n                        Content = new Struct {\n                            Application/json = new Struct {\n                                Schema = new Struct {\n                                    $ref = \"#/components/schemas/Empty\"\n                                }\n                            }\n                        }\n                    }\n                },\n                X-amazon-apigateway-integration = new Struct {\n                    Responses = new Struct {\n                        Default = new Struct {\n                            StatusCode = \"200\"\n                        }\n                    },\n                    RequestTemplates = new Struct {\n                        Application/json = \"{\\\"statusCode\\\": 200}\"\n                    },\n                    PassthroughBehavior = \"when_no_match\",\n                    Type = \"mock\"\n                }\n            }\n        }\n    } },\n    { \"components\", new Struct {\n        Schemas = new Struct {\n            Empty = new Struct {\n                Title = \"Empty Schema\",\n                Type = \"object\"\n            }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition.fromInline(Map.of(\n        \"openapi\", \"3.0.2\",\n        \"paths\", Map.of(\n                \"/pets\", Map.of(\n                        \"get\", Map.of(\n                                \"responses\", Map.of(\n                                        200, Map.of(\n                                                \"content\", Map.of(\n                                                        \"application/json\", Map.of(\n                                                                \"schema\", Map.of(\n                                                                        \"$ref\", \"#/components/schemas/Empty\"))))),\n                                \"x-amazon-apigateway-integration\", Map.of(\n                                        \"responses\", Map.of(\n                                                \"default\", Map.of(\n                                                        \"statusCode\", \"200\")),\n                                        \"requestTemplates\", Map.of(\n                                                \"application/json\", \"{\\\"statusCode\\\": 200}\"),\n                                        \"passthroughBehavior\", \"when_no_match\",\n                                        \"type\", \"mock\")))),\n        \"components\", Map.of(\n                \"schemas\", Map.of(\n                        \"Empty\", Map.of(\n                                \"title\", \"Empty Schema\",\n                                \"type\", \"object\")))));",
          "version": "1"
        },
        "$": {
          "source": "  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinition",
          "memberName": "fromInline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromInline"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n  apigateway.ApiDefinition.fromInline({\n    openapi: '3.0.2',\n    paths: {\n      '/pets': {\n        get: {\n          'responses': {\n            200: {\n              content: {\n                'application/json': {\n                  schema: {\n                    $ref: '#/components/schemas/Empty',\n                  },\n                },\n              },\n            },\n          },\n          'x-amazon-apigateway-integration': {\n            responses: {\n              default: {\n                statusCode: '200',\n              },\n            },\n            requestTemplates: {\n              'application/json': '{\"statusCode\": 200}',\n            },\n            passthroughBehavior: 'when_no_match',\n            type: 'mock',\n          },\n        },\n      },\n    },\n    components: {\n      schemas: {\n        Empty: {\n          title: 'Empty Schema',\n          type: 'object',\n        },\n      },\n    },\n  });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 20,
        "193": 16,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 23
      },
      "fqnsFingerprint": "a32afc498307baae0259d5c64a8ffabe8651b632088597ea41b977effd55bbe2"
    },
    "719d9af1810f936230d7f03d2faea03667cd9818de3651aea5874208b80cd65d": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n# handler is of type Function\n\nresource.add_method(\"GET\", apigateway.LambdaIntegration(handler))",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nresource.AddMethod(\"GET\", new LambdaIntegration(handler));",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nresource.addMethod(\"GET\", new LambdaIntegration(handler));",
          "version": "1"
        },
        "$": {
          "source": "   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n   declare const resource: apigateway.Resource;\n   declare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n   resource.addMethod('GET', new apigateway.LambdaIntegration(handler));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "02dedffacdb7c1bbbe5d9f1b562223e76369ab591657c9a47b6aac83f1132e55"
    },
    "942e9aafe432b880714083f905eb96a1d7a318250e0af15fdeb2202645b6af91": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n# user_lambda is of type Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.MethodOptions",
          "memberName": "requestModels"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi#addModel",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 37,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 7,
        "194": 11,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "fd8f46dc6910c9b7600bfaedd93650454196531a244bbbddee34f960a1bbd59b"
    },
    "e8f6551f9aedee844205d01c7fc53ff5366e133f25dcf1d78b18000740ef68ab": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "1"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
          "memberName": "startExecution"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "b8e393f090b63cd40c57e98403af341f70e05e4c650cd22c347c5cbe6958c34f"
    },
    "fbc9e5debd0d5e84e0ad389271e69062e0238a0fab0f5a189c15574d60fad2bf": {
      "translations": {
        "python": {
          "source": "apigateway.AccessLogFormat.custom(JSON.stringify({\n    \"request_id\": apigateway.AccessLogField.context_request_id(),\n    \"source_ip\": apigateway.AccessLogField.context_identity_source_ip(),\n    \"method\": apigateway.AccessLogField.context_http_method(),\n    \"user_context\": {\n        \"sub\": apigateway.AccessLogField.context_authorizer_claims(\"sub\"),\n        \"email\": apigateway.AccessLogField.context_authorizer_claims(\"email\")\n    }\n}))",
          "version": "1"
        },
        "csharp": {
          "source": "AccessLogFormat.Custom(JSON.Stringify(new Dictionary<string, object> {\n    { \"requestId\", AccessLogField.ContextRequestId() },\n    { \"sourceIp\", AccessLogField.ContextIdentitySourceIp() },\n    { \"method\", AccessLogField.ContextHttpMethod() },\n    { \"userContext\", new Struct {\n        Sub = AccessLogField.ContextAuthorizerClaims(\"sub\"),\n        Email = AccessLogField.ContextAuthorizerClaims(\"email\")\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "AccessLogFormat.custom(JSON.stringify(Map.of(\n        \"requestId\", AccessLogField.contextRequestId(),\n        \"sourceIp\", AccessLogField.contextIdentitySourceIp(),\n        \"method\", AccessLogField.contextHttpMethod(),\n        \"userContext\", Map.of(\n                \"sub\", AccessLogField.contextAuthorizerClaims(\"sub\"),\n                \"email\", AccessLogField.contextAuthorizerClaims(\"email\")))));",
          "version": "1"
        },
        "$": {
          "source": " apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogField"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogField",
        "@aws-cdk/aws-apigateway.AccessLogField#contextAuthorizerClaims",
        "@aws-cdk/aws-apigateway.AccessLogField#contextHttpMethod",
        "@aws-cdk/aws-apigateway.AccessLogField#contextIdentitySourceIp",
        "@aws-cdk/aws-apigateway.AccessLogField#contextRequestId",
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n apigateway.AccessLogFormat.custom(JSON.stringify({\n     requestId: apigateway.AccessLogField.contextRequestId(),\n     sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),\n     method: apigateway.AccessLogField.contextHttpMethod(),\n     userContext: {\n       sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),\n       email: apigateway.AccessLogField.contextAuthorizerClaims('email')\n     }\n  }))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 26,
        "193": 2,
        "194": 13,
        "196": 7,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "7e1601768ddc90f99fdaea524b408af5131de71cdea9aeb7f5753cd688748607"
    },
    "e628493b57549d542d770cca34adae0722640618f11b0acef9f6369e5c3813e0": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AccessLogFormat"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "5c732640e9a2d4740d6156cef974c03e6985a9eb1f06af8b213403bc793b07c9"
    },
    "67b5dd13dddf57d612034da8eb7db1ada51e07259607cd0c606682d80032bf62": {
      "translations": {
        "python": {
          "source": "# usageplan is of type UsagePlan\n# api_key is of type ApiKey\n\n\nusageplan.add_api_key(api_key,\n    override_logical_id=\"...\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.AddApiKey(apiKey, new AddApiKeyOptions {\n    OverrideLogicalId = \"...\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan usageplan;\nApiKey apiKey;\n\n\nusageplan.addApiKey(apiKey, AddApiKeyOptions.builder()\n        .overrideLogicalId(\"...\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AddApiKeyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AddApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const usageplan: apigateway.UsagePlan;\ndeclare const apiKey: apigateway.ApiKey;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nusageplan.addApiKey(apiKey, {\n  overrideLogicalId: '...',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "5c6d76a82108bfbaca4317272b68bb8233c62de420963616396460ee95af63d5"
    },
    "901c16dcd0fcf9bd0e42822f8d61efbeead957c44765bd052ec31f545e003c9b": {
      "translations": {
        "python": {
          "source": "# integration is of type Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "1"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9346f36c9c0a68d422eb6d8f7b2e69e6808fe2938d4b349d9629b64b221ccd6"
    },
    "cd323548d73dc404ae4a6dc171e10f1256d523c29fb5626c5b52c6871a6b5591": {
      "translations": {
        "python": {
          "source": "imported_key = apigateway.ApiKey.from_api_key_id(self, \"imported-key\", \"<api-key-id>\")",
          "version": "1"
        },
        "csharp": {
          "source": "IApiKey importedKey = ApiKey.FromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "java": {
          "source": "IApiKey importedKey = ApiKey.fromApiKeyId(this, \"imported-key\", \"<api-key-id>\");",
          "version": "1"
        },
        "$": {
          "source": "const importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKey",
        "@aws-cdk/aws-apigateway.ApiKey#fromApiKeyId",
        "@aws-cdk/aws-apigateway.IApiKey"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedKey = apigateway.ApiKey.fromApiKeyId(this, 'imported-key', '<api-key-id>');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "15fb6ca782fb121a4f410cc2c00ca6564fafa455dc7c403f518e54bc82cb25dc"
    },
    "33d4bc1a897437a7cf234c6cf7dea8a79a494ad2d049d4236bcedf296bccf542": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\nkey = api.add_api_key(\"ApiKey\",\n    api_key_name=\"myApiKey1\",\n    value=\"MyApiKeyThatIsAtLeast20Characters\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\nIApiKey key = api.AddApiKey(\"ApiKey\", new ApiKeyOptions {\n    ApiKeyName = \"myApiKey1\",\n    Value = \"MyApiKeyThatIsAtLeast20Characters\"\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\nIApiKey key = api.addApiKey(\"ApiKey\", ApiKeyOptions.builder()\n        .apiKeyName(\"myApiKey1\")\n        .value(\"MyApiKeyThatIsAtLeast20Characters\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ApiKeyOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiKeyOptions",
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = api.addApiKey('ApiKey', {\n  apiKeyName: 'myApiKey1',\n  value: 'MyApiKeyThatIsAtLeast20Characters',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7bb7d3b2bf0b4be7afa748c63c37b0424dc74d10861a367bc91f8ba2c5a13800"
    },
    "86a134e0ba9d06aea7f20c31820c104d19e8b50f54b58bb27f1dde1ce7301a1b": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AuthorizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee3b976001dafe477fea89f5935654526c56bcce835d548de4338af3170576c8"
    },
    "b3f88f01b299f38ee9ffa551f7c0ec3474a22c5c1f027921881802d9b847c704": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AwsIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "6cbc4a6165467d66007ff0ad50ee5d7dd04e6106af6e8d26fc5c798f898c04b3"
    },
    "dd071be1f34b0cf0f605d29b0c9eea62fbcc801d80cab9786d656e4d63efbda5": {
      "translations": {
        "python": {
          "source": "get_message_integration = apigateway.AwsIntegration(\n    service=\"sqs\",\n    path=\"queueName\",\n    region=\"eu-west-1\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AwsIntegration getMessageIntegration = new AwsIntegration(new AwsIntegrationProps {\n    Service = \"sqs\",\n    Path = \"queueName\",\n    Region = \"eu-west-1\"\n});",
          "version": "1"
        },
        "java": {
          "source": "AwsIntegration getMessageIntegration = AwsIntegration.Builder.create()\n        .service(\"sqs\")\n        .path(\"queueName\")\n        .region(\"eu-west-1\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.AwsIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AwsIntegration",
        "@aws-cdk/aws-apigateway.AwsIntegrationProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst getMessageIntegration = new apigateway.AwsIntegration({\n  service: 'sqs',\n  path: 'queueName',\n  region: 'eu-west-1'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "6cbc4a6165467d66007ff0ad50ee5d7dd04e6106af6e8d26fc5c798f898c04b3"
    },
    "96a8fc350d4551d267e6e6ca19009921ac7a143f29e4ee6c01fcd03c66b916b1": {
      "translations": {
        "python": {
          "source": "# domain is of type DomainName\n# api1 is of type RestApi\n# api2 is of type RestApi\n\n\ndomain.add_base_path_mapping(api1, base_path=\"go-to-api1\")\ndomain.add_base_path_mapping(api2, base_path=\"boom\")",
          "version": "1"
        },
        "csharp": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.AddBasePathMapping(api1, new BasePathMappingOptions { BasePath = \"go-to-api1\" });\ndomain.AddBasePathMapping(api2, new BasePathMappingOptions { BasePath = \"boom\" });",
          "version": "1"
        },
        "java": {
          "source": "DomainName domain;\nRestApi api1;\nRestApi api2;\n\n\ndomain.addBasePathMapping(api1, BasePathMappingOptions.builder().basePath(\"go-to-api1\").build());\ndomain.addBasePathMapping(api2, BasePathMappingOptions.builder().basePath(\"boom\").build());",
          "version": "1"
        },
        "$": {
          "source": "declare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.BasePathMappingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.BasePathMappingOptions",
        "@aws-cdk/aws-apigateway.DomainName#addBasePathMapping",
        "@aws-cdk/aws-apigateway.IRestApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const domain: apigateway.DomainName;\ndeclare const api1: apigateway.RestApi;\ndeclare const api2: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndomain.addBasePathMapping(api1, { basePath: 'go-to-api1' });\ndomain.addBasePathMapping(api2, { basePath: 'boom' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5a59673e281a9e74fb8336a55216b7705043f1d1a55da92e4001e34411525ae3"
    },
    "d73fc0e20e76314d7b0fe38b45bdea2e2394253bb291b2af35c775ff1bd39f4e": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee3b976001dafe477fea89f5935654526c56bcce835d548de4338af3170576c8"
    },
    "b1d85685fc34a8f01b4c27420dda33f728294cb4c9ee2805580e07d7491667c4": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\nuser_pool = cognito.UserPool(self, \"UserPool\")\n\nauth = apigateway.CognitoUserPoolsAuthorizer(self, \"booksAuthorizer\",\n    cognito_user_pools=[user_pool]\n)\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth,\n    authorization_type=apigateway.AuthorizationType.COGNITO\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = new CognitoUserPoolsAuthorizer(this, \"booksAuthorizer\", new CognitoUserPoolsAuthorizerProps {\n    CognitoUserPools = new [] { userPool }\n});\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth,\n    AuthorizationType = AuthorizationType.COGNITO\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUserPool userPool = new UserPool(this, \"UserPool\");\n\nCognitoUserPoolsAuthorizer auth = CognitoUserPoolsAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .cognitoUserPools(List.of(userPool))\n        .build();\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .authorizationType(AuthorizationType.COGNITO)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\n\ndeclare const books: apigateway.Resource;\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#COGNITO",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizer",
        "@aws-cdk/aws-apigateway.CognitoUserPoolsAuthorizerProps",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-cognito.UserPool"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'UserPool');\n\nconst auth = new apigateway.CognitoUserPoolsAuthorizer(this, 'booksAuthorizer', {\n  cognitoUserPools: [userPool]\n});\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth,\n  authorizationType: apigateway.AuthorizationType.COGNITO,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "ee3b976001dafe477fea89f5935654526c56bcce835d548de4338af3170576c8"
    },
    "119e57157e0efa1b9623e1c0db0cce9381ea5317e1433c0bf7ca4be4a5d5718a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ConnectionType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    },
    "fa668ade48035ced59548cbba2d64008b4b452aad0e00a741a94246445fb7a84": {
      "translations": {
        "python": {
          "source": "# get_book_handler is of type Function\n# get_book_integration is of type LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ContentHandling"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a9e0a103d7a88ba8c37e5462654b5ba0529a2cb582ba59dc7a5b973d8abdc35f"
    },
    "cc4847886860c06c0bb24ae45782f5a353ba97ad7ead73a9d4d8bc2d9bbeba43": {
      "translations": {
        "python": {
          "source": "apigateway.RestApi(self, \"api\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=apigateway.Cors.ALL_ORIGINS,\n        allow_methods=apigateway.Cors.ALL_METHODS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new RestApi(this, \"api\", new RestApiProps {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = Cors.ALL_ORIGINS,\n        AllowMethods = Cors.ALL_METHODS\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi.Builder.create(this, \"api\")\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(Cors.ALL_ORIGINS)\n                .allowMethods(Cors.ALL_METHODS)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Cors"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Cors",
        "@aws-cdk/aws-apigateway.Cors#ALL_METHODS",
        "@aws-cdk/aws-apigateway.Cors#ALL_ORIGINS",
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.RestApi(this, 'api', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: apigateway.Cors.ALL_ORIGINS,\n    allowMethods: apigateway.Cors.ALL_METHODS // this is also the default\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "e070aa581608a537d944144d084c5b9c9044fe0bb926743883c0e33a60e6bf65"
    },
    "b8b473831ecffa3816682650f03479780d116f750f3b256d9365e205873b1521": {
      "translations": {
        "python": {
          "source": "# my_resource is of type Resource\n\n\nmy_resource.add_cors_preflight(\n    allow_origins=[\"https://amazon.com\"],\n    allow_methods=[\"GET\", \"PUT\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource myResource;\n\n\nmyResource.AddCorsPreflight(new CorsOptions {\n    AllowOrigins = new [] { \"https://amazon.com\" },\n    AllowMethods = new [] { \"GET\", \"PUT\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource myResource;\n\n\nmyResource.addCorsPreflight(CorsOptions.builder()\n        .allowOrigins(List.of(\"https://amazon.com\"))\n        .allowMethods(List.of(\"GET\", \"PUT\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const myResource: apigateway.Resource;\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.CorsOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addCorsPreflight"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myResource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nmyResource.addCorsPreflight({\n  allowOrigins: [ 'https://amazon.com' ],\n  allowMethods: [ 'GET', 'PUT' ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "03d368fcb97a4e9b67cd4575364de9f35d434ed3d40d1b3f167f0973dc05d5a9"
    },
    "982f4673255df7895703893d5a00f8805683e22af3fc280c0dcbd9db5b3d03a2": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Deployment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "b601ac6caa83f15d45a7e2c0de2b12a34c0b7671264df5700705d1c47a80c806": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "61feee2fe6f303fe07dfe5c0a697c8215ff87fee861648db06340b04d7597163": {
      "translations": {
        "python": {
          "source": "# acm is of type object\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ee1c5b160ba67ab2a2a7cb297689c10b97accfc653651db6ca7bbcf02b555be8"
    },
    "e748f71a2fcb59985735f2f0576c35644ded962a84f579661841d59d02e437ba": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com is of type object\n\n\napi = apigateway.RestApi(self, \"MyDomain\",\n    domain_name=apigateway.DomainNameOptions(\n        domain_name=\"example.com\",\n        certificate=acm_certificate_for_example_com\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nRestApi api = new RestApi(this, \"MyDomain\", new RestApiProps {\n    DomainName = new DomainNameOptions {\n        DomainName = \"example.com\",\n        Certificate = acmCertificateForExampleCom\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nRestApi api = RestApi.Builder.create(this, \"MyDomain\")\n        .domainName(DomainNameOptions.builder()\n                .domainName(\"example.com\")\n                .certificate(acmCertificateForExampleCom)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainNameOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainNameOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-certificatemanager.ICertificate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'MyDomain', {\n  domainName: {\n    domainName: 'example.com',\n    certificate: acmCertificateForExampleCom,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "cfffb2db5a9fd5e7116a1b8bc76367237024cea620dc9b6a18439cf0151de890"
    },
    "8959deca8b2a7bff7509fb1169b6d5ca0e7f8f0bc24499935be314a6953c6ba9": {
      "translations": {
        "python": {
          "source": "# acm is of type object\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.DomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ee1c5b160ba67ab2a2a7cb297689c10b97accfc653651db6ca7bbcf02b555be8"
    },
    "df373a627eea39c84a6a7a81ef92541b314ebe854f1279ec44dd33320087e1e2": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"api\",\n    endpoint_configuration=apigateway.EndpointConfiguration(\n        types=[apigateway.EndpointType.EDGE]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"api\", new RestApiProps {\n    EndpointConfiguration = new EndpointConfiguration {\n        Types = new [] { EndpointType.EDGE }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"api\")\n        .endpointConfiguration(EndpointConfiguration.builder()\n                .types(List.of(EndpointType.EDGE))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.EndpointConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.EndpointConfiguration",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'api', {\n  endpointConfiguration: {\n    types: [ apigateway.EndpointType.EDGE ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "defabba417ac6358c1483989cab98d1bc48c30dc16a2746fadbd8aaa3fe3fbd6"
    },
    "d53cbc8a78ff6cea28b66c588941fffadd429f4306f8889fc64461eef109a29f": {
      "translations": {
        "python": {
          "source": "# api_definition is of type ApiDefinition\n\n\napi = apigateway.SpecRestApi(self, \"ExampleRestApi\",\n    api_definition=api_definition,\n    endpoint_types=[apigateway.EndpointType.PRIVATE]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = new SpecRestApi(this, \"ExampleRestApi\", new SpecRestApiProps {\n    ApiDefinition = apiDefinition,\n    EndpointTypes = new [] { EndpointType.PRIVATE }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApiDefinition apiDefinition;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"ExampleRestApi\")\n        .apiDefinition(apiDefinition)\n        .endpointTypes(List.of(EndpointType.PRIVATE))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDefinition: apigateway.ApiDefinition;\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.EndpointType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#PRIVATE",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDefinition: apigateway.ApiDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'ExampleRestApi', {\n  apiDefinition,\n  endpointTypes: [apigateway.EndpointType.PRIVATE]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6bc615bfe0d8aede3167ab4faf80c7274941d3c27ebb5fb2e2c9dca9c9fdb9b7"
    },
    "7b172229469aface363a6f4b8b3794c351d8a5e3ec2db039423a2afb8f852111": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.GatewayResponseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "b1dacb0849e1cb6d98cf15355ee4c82d880a753f23df322385294b42335aef3b"
    },
    "91fa7128ae8cb030ec582672a404d0feef42cc1f6c9138ed37d3a8ff0af404e9": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.HttpIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "13ee7923e4f09aa07a899f3e31eb4eda3c7a6efccdb45131868bbe3d173932ca"
    },
    "5f83b0be83ec75b43eb18466df101a4ae15ce0bd65408a825df9db372951494a": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IdentitySource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "13ee7923e4f09aa07a899f3e31eb4eda3c7a6efccdb45131868bbe3d173932ca"
    },
    "de1258e93fd8259c85b48c1630963bf0430c7dfc2967a71ef4d71482a9255df2": {
      "translations": {
        "python": {
          "source": "# books is of type Resource\n# iam_user is of type User\n\n\nget_books = books.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorization_type=apigateway.AuthorizationType.IAM\n)\n\niam_user.attach_inline_policy(iam.Policy(self, \"AllowBooks\",\n    statements=[\n        iam.PolicyStatement(\n            actions=[\"execute-api:Invoke\"],\n            effect=iam.Effect.ALLOW,\n            resources=[get_books.method_arn]\n        )\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    AuthorizationType = AuthorizationType.IAM\n});\n\niamUser.AttachInlinePolicy(new Policy(this, \"AllowBooks\", new PolicyProps {\n    Statements = new [] {\n        new PolicyStatement(new PolicyStatementProps {\n            Actions = new [] { \"execute-api:Invoke\" },\n            Effect = Effect.ALLOW,\n            Resources = new [] { getBooks.MethodArn }\n        }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Resource books;\nUser iamUser;\n\n\nMethod getBooks = books.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizationType(AuthorizationType.IAM)\n        .build());\n\niamUser.attachInlinePolicy(Policy.Builder.create(this, \"AllowBooks\")\n        .statements(List.of(\n            PolicyStatement.Builder.create()\n                    .actions(List.of(\"execute-api:Invoke\"))\n                    .effect(Effect.ALLOW)\n                    .resources(List.of(getBooks.getMethodArn()))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Integration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AuthorizationType",
        "@aws-cdk/aws-apigateway.AuthorizationType#IAM",
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-iam.User#attachInlinePolicy"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const books: apigateway.Resource;\ndeclare const iamUser: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooks = books.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizationType: apigateway.AuthorizationType.IAM\n});\n\niamUser.attachInlinePolicy(new iam.Policy(this, 'AllowBooks', {\n  statements: [\n    new iam.PolicyStatement({\n      actions: [ 'execute-api:Invoke' ],\n      effect: iam.Effect.ALLOW,\n      resources: [ getBooks.methodArn ]\n    })\n  ]\n}))\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 30,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 3,
        "194": 10,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "dce79b91f7d902fb8c9abcf47f4c1999080baa3002f491481cb3b463a902f912"
    },
    "0c72c35ee2e0e2794c7934cf82a295ff6713494ba8860ae1086ca42cd005be07": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c90459652dbd193a3f7020ed8afa29b935ad51f42d4198c9c173fa3582c63038"
    },
    "82ab37307cd316e237643fac024bceb792a510ce2747af1eaeafb5308e8939f2": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    },
    "13b4f88e62b7732df11016e75b4c70d8d06b7e63bb1097a824c8c77242c0ab83": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.IntegrationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    },
    "82d15f03520da4e56864310985d1dd83bdff9ccdfd84bb702c4791fda1a3aed7": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchema"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "52277df4eca10a66e169dd752d300835fe2717eccee3f72ffe9c26a86b5b7a5d": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchemaType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "31e240e18d9a48d8e2f25b0651bd1e52ac6d5ce42360f4922c873d8d3be5b314": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonSchemaVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "d3764085ac9d5168d552100a9a418f9b9f257961786db1fff6ed54072861b024": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "0f577520710fdc1b706e7c2ffaf7a3bdc6b975973f144854df0d43af7d93c753": {
      "translations": {
        "python": {
          "source": "# get_book_handler is of type Function\n# get_book_integration is of type LambdaIntegration\n\n\nget_book_integration = apigateway.LambdaIntegration(get_book_handler,\n    content_handling=apigateway.ContentHandling.CONVERT_TO_TEXT,  # convert to base64\n    credentials_passthrough=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = new LambdaIntegration(getBookHandler, new LambdaIntegrationOptions {\n    ContentHandling = ContentHandling.CONVERT_TO_TEXT,  // convert to base64\n    CredentialsPassthrough = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Function getBookHandler;\nLambdaIntegration getBookIntegration;\n\n\nLambdaIntegration getBookIntegration = LambdaIntegration.Builder.create(getBookHandler)\n        .contentHandling(ContentHandling.CONVERT_TO_TEXT) // convert to base64\n        .credentialsPassthrough(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaIntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ContentHandling",
        "@aws-cdk/aws-apigateway.ContentHandling#CONVERT_TO_TEXT",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.LambdaIntegrationOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const getBookHandler: lambda.Function;\ndeclare const getBookIntegration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBookIntegration = new apigateway.LambdaIntegration(getBookHandler, {\n  contentHandling: apigateway.ContentHandling.CONVERT_TO_TEXT, // convert to base64\n  credentialsPassthrough: true, // use caller identity to invoke the function\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 15,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a9e0a103d7a88ba8c37e5462654b5ba0529a2cb582ba59dc7a5b973d8abdc35f"
    },
    "e659a8ae22d9d799945c3bc6d0eaf442d55a3eed8041bd8862e0104ae731f725": {
      "translations": {
        "python": {
          "source": "# backend is of type Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "499853a35cf9a783349b47e3c5788ea99e49a44ab87bfce9bc95e5187d09901b"
    },
    "7f38565073340f1ad668f744f4e19fd7e929564835bbbba7e1f6d566c93d166b": {
      "translations": {
        "python": {
          "source": "# backend is of type Function\n\napi = apigateway.LambdaRestApi(self, \"myapi\",\n    handler=backend,\n    proxy=False\n)\n\nitems = api.root.add_resource(\"items\")\nitems.add_method(\"GET\") # GET /items\nitems.add_method(\"POST\") # POST /items\n\nitem = items.add_resource(\"{item}\")\nitem.add_method(\"GET\") # GET /items/{item}\n\n# the default integration for methods is \"handler\", but one can\n# customize this behavior per method or even a sub path.\nitem.add_method(\"DELETE\", apigateway.HttpIntegration(\"http://amazon.com\"))",
          "version": "1"
        },
        "csharp": {
          "source": "Function backend;\n\nLambdaRestApi api = new LambdaRestApi(this, \"myapi\", new LambdaRestApiProps {\n    Handler = backend,\n    Proxy = false\n});\n\nResource items = api.Root.AddResource(\"items\");\nitems.AddMethod(\"GET\"); // GET /items\nitems.AddMethod(\"POST\"); // POST /items\n\nResource item = items.AddResource(\"{item}\");\nitem.AddMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.AddMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "java": {
          "source": "Function backend;\n\nLambdaRestApi api = LambdaRestApi.Builder.create(this, \"myapi\")\n        .handler(backend)\n        .proxy(false)\n        .build();\n\nResource items = api.root.addResource(\"items\");\nitems.addMethod(\"GET\"); // GET /items\nitems.addMethod(\"POST\"); // POST /items\n\nResource item = items.addResource(\"{item}\");\nitem.addMethod(\"GET\"); // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod(\"DELETE\", new HttpIntegration(\"http://amazon.com\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const backend: lambda.Function;\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LambdaRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const backend: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.LambdaRestApi(this, 'myapi', {\n  handler: backend,\n  proxy: false\n});\n\nconst items = api.root.addResource('items');\nitems.addMethod('GET');  // GET /items\nitems.addMethod('POST'); // POST /items\n\nconst item = items.addResource('{item}');\nitem.addMethod('GET');   // GET /items/{item}\n\n// the default integration for methods is \"handler\", but one can\n// customize this behavior per method or even a sub path.\nitem.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 9,
        "196": 6,
        "197": 2,
        "225": 4,
        "226": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "499853a35cf9a783349b47e3c5788ea99e49a44ab87bfce9bc95e5187d09901b"
    },
    "a87e3a2583b8ced0f40aca4194ecf0caa3ec9d41419b227a125450ab1d5514e7": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.custom(f\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nnew RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Custom($\"{apigateway.AccessLogField.contextRequestId()} {apigateway.AccessLogField.contextErrorMessage()} {apigateway.AccessLogField.contextErrorMessageString()}\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.custom(String.format(\"%s %s %s\", AccessLogField.contextRequestId(), AccessLogField.contextErrorMessage(), AccessLogField.contextErrorMessageString())))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.LogGroupLogDestination"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#custom",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nnew apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.custom(\n      `${apigateway.AccessLogField.contextRequestId()} ${apigateway.AccessLogField.contextErrorMessage()} ${apigateway.AccessLogField.contextErrorMessageString()}`\n    )\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "15": 1,
        "16": 2,
        "17": 1,
        "75": 23,
        "104": 2,
        "193": 2,
        "194": 11,
        "196": 4,
        "197": 3,
        "211": 1,
        "221": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "5c732640e9a2d4740d6156cef974c03e6985a9eb1f06af8b213403bc793b07c9"
    },
    "47477d7f0526bf0371ab6464c5446fef4c6b1ea07fd80ac9f22b2c0a480b3886": {
      "translations": {
        "python": {
          "source": "# acm is of type object\n\n\napigateway.DomainName(self, \"domain-name\",\n    domain_name=\"example.com\",\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    mtls=apigateway.MTLSConfig(\n        bucket=s3.Bucket(self, \"bucket\"),\n        key=\"truststore.pem\",\n        version=\"version\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acm;\n\n\nnew DomainName(this, \"domain-name\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acm.Certificate.FromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"),\n    Mtls = new MTLSConfig {\n        Bucket = new Bucket(this, \"bucket\"),\n        Key = \"truststore.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acm;\n\n\nDomainName.Builder.create(this, \"domain-name\")\n        .domainName(\"example.com\")\n        .certificate(acm.Certificate.fromCertificateArn(this, \"cert\", \"arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"))\n        .mtls(MTLSConfig.builder()\n                .bucket(new Bucket(this, \"bucket\"))\n                .key(\"truststore.pem\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acm: any;\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MTLSConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.MTLSConfig",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acm: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'domain-name', {\n  domainName: 'example.com',\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', 'arn:aws:acm:us-east-1:1111111:certificate/11-3336f1-44483d-adc7-9cd375c5169d'),\n  mtls: {\n    bucket: new s3.Bucket(this, 'bucket'),\n    key: 'truststore.pem',\n    version: 'version',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 14,
        "104": 3,
        "125": 1,
        "130": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ee1c5b160ba67ab2a2a7cb297689c10b97accfc653651db6ca7bbcf02b555be8"
    },
    "9d72f083c60fa79e8acd20e13625b6b0fbbef6d6780be2ae916060d52b94ae2d": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Method"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9d95499536351ae41edde7e08a2a96b4d7cae8f745ea626735c7ca00a9d704"
    },
    "efbad89941b47c00c1486986148281930c00f341df6ed37266f6d45527182818": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\")\ndeployment = apigateway.Deployment(self, \"my-deployment\", api=api)\nstage = apigateway.Stage(self, \"my-stage\",\n    deployment=deployment,\n    method_options={\n        \"/*/*\": apigateway.MethodDeploymentOptions( # This special path applies to all resource paths and all HTTP methods\n            throttling_rate_limit=100,\n            throttling_burst_limit=200)\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = new Deployment(this, \"my-deployment\", new DeploymentProps { Api = api });\nStage stage = new Stage(this, \"my-stage\", new StageProps {\n    Deployment = deployment,\n    MethodOptions = new Dictionary<string, MethodDeploymentOptions> {\n        { \"/*/*\", new MethodDeploymentOptions {  // This special path applies to all resource paths and all HTTP methods\n            ThrottlingRateLimit = 100,\n            ThrottlingBurstLimit = 200 } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books\");\nDeployment deployment = Deployment.Builder.create(this, \"my-deployment\").api(api).build();\nStage stage = Stage.Builder.create(this, \"my-stage\")\n        .deployment(deployment)\n        .methodOptions(Map.of(\n                \"/*/*\", MethodDeploymentOptions.builder() // This special path applies to all resource paths and all HTTP methods\n                        .throttlingRateLimit(100)\n                        .throttlingBurstLimit(200).build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodDeploymentOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.MethodDeploymentOptions",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books');\nconst deployment = new apigateway.Deployment(this, 'my-deployment', { api });\nconst stage = new apigateway.Stage(this, 'my-stage', {\n  deployment,\n  methodOptions: {\n    '/*/*': {  // This special path applies to all resource paths and all HTTP methods\n      throttlingRateLimit: 100,\n      throttlingBurstLimit: 200\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 14,
        "104": 3,
        "193": 4,
        "194": 3,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "282": 2
      },
      "fqnsFingerprint": "844c5b75622e245e36eae66ed03230b8bb9324c0e3fdd2e51e7a642a115d2105"
    },
    "a6c16c26c37f2c798c6029848246421810e3ea0d555ed6d637849c57fa3b0356": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        logging_level=apigateway.MethodLoggingLevel.INFO,\n        data_trace_enabled=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        LoggingLevel = MethodLoggingLevel.INFO,\n        DataTraceEnabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .loggingLevel(MethodLoggingLevel.INFO)\n                .dataTraceEnabled(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodLoggingLevel"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.MethodLoggingLevel",
        "@aws-cdk/aws-apigateway.MethodLoggingLevel#INFO",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    loggingLevel: apigateway.MethodLoggingLevel.INFO,\n    dataTraceEnabled: true\n  }\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "3fd0efe83ab2bbad762e25ac276e988250034992b47214ff9891ef609d586b82"
    },
    "fd2c4667764954cd23868dbb95585e4658fcd30d298bf3b7c66e294b479b0c37": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n# user_lambda is of type Function\n\n\nuser_model = api.add_model(\"UserModel\",\n    schema=apigateway.JsonSchema(\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"user_id\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            ),\n            \"name\": apigateway.JsonSchema(\n                type=apigateway.JsonSchemaType.STRING\n            )\n        },\n        required=[\"userId\"]\n    )\n)\napi.root.add_resource(\"user\").add_method(\"POST\",\n    apigateway.LambdaIntegration(user_lambda),\n        request_models={\n            \"application/json\": user_model\n        }\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.AddModel(\"UserModel\", new ModelOptions {\n    Schema = new JsonSchema {\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"userId\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } },\n            { \"name\", new JsonSchema {\n                Type = JsonSchemaType.STRING\n            } }\n        },\n        Required = new [] { \"userId\" }\n    }\n});\napi.Root.AddResource(\"user\").AddMethod(\"POST\",\nnew LambdaIntegration(userLambda), new MethodOptions {\n    RequestModels = new Dictionary<string, IModel> {\n        { \"application/json\", userModel }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\nFunction userLambda;\n\n\nModel userModel = api.addModel(\"UserModel\", ModelOptions.builder()\n        .schema(JsonSchema.builder()\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"userId\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build(),\n                        \"name\", JsonSchema.builder()\n                                .type(JsonSchemaType.STRING)\n                                .build()))\n                .required(List.of(\"userId\"))\n                .build())\n        .build());\napi.root.addResource(\"user\").addMethod(\"POST\",\nnew LambdaIntegration(userLambda), MethodOptions.builder()\n        .requestModels(Map.of(\n                \"application/json\", userModel))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MethodOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi#addModel",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n    declare const api: apigateway.RestApi;\n    declare const userLambda: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n    const userModel: apigateway.Model = api.addModel('UserModel', {\n        schema: {\n            type: apigateway.JsonSchemaType.OBJECT,\n            properties: {\n                userId: {\n                    type: apigateway.JsonSchemaType.STRING\n                },\n                name: {\n                    type: apigateway.JsonSchemaType.STRING\n                }\n            },\n            required: ['userId']\n        }\n    });\n    api.root.addResource('user').addMethod('POST',\n        new apigateway.LambdaIntegration(userLambda), {\n            requestModels: {\n                'application/json': userModel\n            }\n        }\n    );\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 37,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 7,
        "194": 11,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "fd8f46dc6910c9b7600bfaedd93650454196531a244bbbddee34f960a1bbd59b"
    },
    "3f7d371fe759afc5f8c95277870f2cabcc18571bf3fa9ec943cdaf9cbf040b8c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.MockIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c90459652dbd193a3f7020ed8afa29b935ad51f42d4198c9c173fa3582c63038"
    },
    "4c5ea291cefcfe1c4f31c5d47774dcd54cf511cafd8188840b26eaa39c85f464": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Model"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "e6735a31f958984220f7e6c4bdf43d78f3a7393f137472a3f5b494406c878874": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\n# We define the JSON Schema for the transformed valid response\nresponse_model = api.add_model(\"ResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"pollResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"greeting\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)\n\n# We define the JSON Schema for the transformed error response\nerror_response_model = api.add_model(\"ErrorResponseModel\",\n    content_type=\"application/json\",\n    model_name=\"ErrorResponseModel\",\n    schema=apigateway.JsonSchema(\n        schema=apigateway.JsonSchemaVersion.DRAFT4,\n        title=\"errorResponse\",\n        type=apigateway.JsonSchemaType.OBJECT,\n        properties={\n            \"state\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING),\n            \"message\": apigateway.JsonSchema(type=apigateway.JsonSchemaType.STRING)\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.AddModel(\"ResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"pollResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"greeting\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.AddModel(\"ErrorResponseModel\", new ModelOptions {\n    ContentType = \"application/json\",\n    ModelName = \"ErrorResponseModel\",\n    Schema = new JsonSchema {\n        Schema = JsonSchemaVersion.DRAFT4,\n        Title = \"errorResponse\",\n        Type = JsonSchemaType.OBJECT,\n        Properties = new Dictionary<string, JsonSchema> {\n            { \"state\", new JsonSchema { Type = JsonSchemaType.STRING } },\n            { \"message\", new JsonSchema { Type = JsonSchemaType.STRING } }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\n// We define the JSON Schema for the transformed valid response\nModel responseModel = api.addModel(\"ResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"pollResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"greeting\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());\n\n// We define the JSON Schema for the transformed error response\nModel errorResponseModel = api.addModel(\"ErrorResponseModel\", ModelOptions.builder()\n        .contentType(\"application/json\")\n        .modelName(\"ErrorResponseModel\")\n        .schema(JsonSchema.builder()\n                .schema(JsonSchemaVersion.DRAFT4)\n                .title(\"errorResponse\")\n                .type(JsonSchemaType.OBJECT)\n                .properties(Map.of(\n                        \"state\", JsonSchema.builder().type(JsonSchemaType.STRING).build(),\n                        \"message\", JsonSchema.builder().type(JsonSchemaType.STRING).build()))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ModelOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.JsonSchema",
        "@aws-cdk/aws-apigateway.JsonSchemaType",
        "@aws-cdk/aws-apigateway.JsonSchemaType#OBJECT",
        "@aws-cdk/aws-apigateway.JsonSchemaType#STRING",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion",
        "@aws-cdk/aws-apigateway.JsonSchemaVersion#DRAFT4",
        "@aws-cdk/aws-apigateway.Model",
        "@aws-cdk/aws-apigateway.ModelOptions",
        "@aws-cdk/aws-apigateway.RestApi#addModel"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// We define the JSON Schema for the transformed valid response\nconst responseModel = api.addModel('ResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'pollResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      greeting: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n\n// We define the JSON Schema for the transformed error response\nconst errorResponseModel = api.addModel('ErrorResponseModel', {\n  contentType: 'application/json',\n  modelName: 'ErrorResponseModel',\n  schema: {\n    schema: apigateway.JsonSchemaVersion.DRAFT4,\n    title: 'errorResponse',\n    type: apigateway.JsonSchemaType.OBJECT,\n    properties: {\n      state: { type: apigateway.JsonSchemaType.STRING },\n      message: { type: apigateway.JsonSchemaType.STRING }\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 55,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 10,
        "194": 18,
        "196": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 22,
        "290": 1
      },
      "fqnsFingerprint": "4e1ea3bf5b28c6498786a0d977caa9fde8f1a579d21c06a0cc488865f2600764"
    },
    "7380491354bf13610bbcb2c16fd2e8f6c4193bd7ede4a42144cb00c9e66af72c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse\nimport path as path\nimport aws_cdk.aws_lambda as lambda_\nfrom aws_cdk.core import App, Stack\nfrom aws_cdk.aws_apigateway import MockIntegration, PassthroughBehavior, RestApi\nfrom aws_cdk.aws_apigateway import RequestAuthorizer\nfrom aws_cdk.aws_apigateway import IdentitySource\n\n# Against the RestApi endpoint from the stack output, run\n# `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n# `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\napp = App()\nstack = Stack(app, \"RequestAuthorizerInteg\")\n\nauthorizer_fn = lambda_.Function(stack, \"MyAuthorizerFunction\",\n    runtime=lambda_.Runtime.NODEJS_14_X,\n    handler=\"index.handler\",\n    code=lambda_.AssetCode.from_asset(path.join(__dirname, \"integ.request-authorizer.handler\"))\n)\n\nrestapi = RestApi(stack, \"MyRestApi\")\n\nauthorizer = RequestAuthorizer(stack, \"MyAuthorizer\",\n    handler=authorizer_fn,\n    identity_sources=[IdentitySource.header(\"Authorization\"), IdentitySource.query_string(\"allow\")]\n)\n\nrestapi.root.add_method(\"ANY\", MockIntegration(\n    integration_responses=[IntegrationResponse(status_code=\"200\")\n    ],\n    passthrough_behavior=PassthroughBehavior.NEVER,\n    request_templates={\n        \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n    }\n),\n    method_responses=[MethodResponse(status_code=\"200\")\n    ],\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Path;\nusing Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.APIGateway;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = new Function(stack, \"MyAuthorizerFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_14_X,\n    Handler = \"index.handler\",\n    Code = AssetCode.FromAsset(Join(__dirname, \"integ.request-authorizer.handler\"))\n});\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = new RequestAuthorizer(stack, \"MyAuthorizer\", new RequestAuthorizerProps {\n    Handler = authorizerFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\"), IdentitySource.QueryString(\"allow\") }\n});\n\nrestapi.Root.AddMethod(\"ANY\", new MockIntegration(new IntegrationOptions {\n    IntegrationResponses = new [] { new IntegrationResponse { StatusCode = \"200\" } },\n    PassthroughBehavior = PassthroughBehavior.NEVER,\n    RequestTemplates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n    }\n}), new MethodOptions {\n    MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } },\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import path.*;\nimport software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.RequestAuthorizer;\nimport software.amazon.awscdk.services.apigateway.IdentitySource;\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nApp app = new App();\nStack stack = new Stack(app, \"RequestAuthorizerInteg\");\n\nFunction authorizerFn = Function.Builder.create(stack, \"MyAuthorizerFunction\")\n        .runtime(Runtime.NODEJS_14_X)\n        .handler(\"index.handler\")\n        .code(AssetCode.fromAsset(join(__dirname, \"integ.request-authorizer.handler\")))\n        .build();\n\nRestApi restapi = new RestApi(stack, \"MyRestApi\");\n\nRequestAuthorizer authorizer = RequestAuthorizer.Builder.create(stack, \"MyAuthorizer\")\n        .handler(authorizerFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\"), IdentitySource.queryString(\"allow\")))\n        .build();\n\nrestapi.root.addMethod(\"ANY\", MockIntegration.Builder.create()\n        .integrationResponses(List.of(IntegrationResponse.builder().statusCode(\"200\").build()))\n        .passthroughBehavior(PassthroughBehavior.NEVER)\n        .requestTemplates(Map.of(\n                \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n        .build(), MethodOptions.builder()\n        .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.PassthroughBehavior"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.IdentitySource#queryString",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-lambda.AssetCode",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_14_X",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "/// !cdk-integ pragma:ignore-assets\nimport * as path from 'path';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport { App, Stack } from '@aws-cdk/core';\nimport { MockIntegration, PassthroughBehavior, RestApi } from '../../lib';\nimport { RequestAuthorizer } from '../../lib/authorizers';\nimport { IdentitySource } from '../../lib/authorizers/identity-source';\n\n// Against the RestApi endpoint from the stack output, run\n// `curl -s -o /dev/null -w \"%{http_code}\" <url>` should return 401\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: deny' <url>?allow=yes` should return 403\n// `curl -s -o /dev/null -w \"%{http_code}\" -H 'Authorization: allow' <url>?allow=yes` should return 200\n\nconst app = new App();\nconst stack = new Stack(app, 'RequestAuthorizerInteg');\n\nconst authorizerFn = new lambda.Function(stack, 'MyAuthorizerFunction', {\n  runtime: lambda.Runtime.NODEJS_14_X,\n  handler: 'index.handler',\n  code: lambda.AssetCode.fromAsset(path.join(__dirname, 'integ.request-authorizer.handler')),\n});\n\nconst restapi = new RestApi(stack, 'MyRestApi');\n\nconst authorizer = new RequestAuthorizer(stack, 'MyAuthorizer', {\n  handler: authorizerFn,\n  identitySources: [IdentitySource.header('Authorization'), IdentitySource.queryString('allow')],\n});\n\nrestapi.root.addMethod('ANY', new MockIntegration({\n  integrationResponses: [\n    { statusCode: '200' },\n  ],\n  passthroughBehavior: PassthroughBehavior.NEVER,\n  requestTemplates: {\n    'application/json': '{ \"statusCode\": 200 }',\n  },\n}), {\n  methodResponses: [\n    { statusCode: '200' },\n  ],\n  authorizer,\n});\n",
      "syntaxKindCounter": {
        "10": 19,
        "75": 56,
        "192": 3,
        "193": 7,
        "194": 11,
        "196": 5,
        "197": 6,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 6,
        "255": 6,
        "256": 2,
        "257": 4,
        "258": 7,
        "281": 12,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c90459652dbd193a3f7020ed8afa29b935ad51f42d4198c9c173fa3582c63038"
    },
    "0fcb397fca532e43ed27fb8f51f793e651c511c74fee7dc7b960872b15d8e8d5": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Period"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b9eeff5b2086cd8c2c13cb2cc1b636247a54a79012debdadac956a60e7621126"
    },
    "b792db63fb671270e4b4031d74b79a900c25574c00aa99c7627acbb98238341b": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n# handler is of type Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ProxyResource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8fa38e19fe22bcd876f7a5b0a58200ba668cbebb9ba9975d19b90ff97299a1b6"
    },
    "97b7cabb219f3472be85660971dc3f8a35239913575872daf0658b31faa22aea": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n# handler is of type Function\n\nproxy = resource.add_proxy(\n    default_integration=apigateway.LambdaIntegration(handler),\n\n    # \"false\" will require explicitly adding methods on the `proxy` resource\n    any_method=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.AddProxy(new ProxyResourceOptions {\n    DefaultIntegration = new LambdaIntegration(handler),\n\n    // \"false\" will require explicitly adding methods on the `proxy` resource\n    AnyMethod = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nFunction handler;\n\nProxyResource proxy = resource.addProxy(ProxyResourceOptions.builder()\n        .defaultIntegration(new LambdaIntegration(handler))\n\n        // \"false\" will require explicitly adding methods on the `proxy` resource\n        .anyMethod(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ProxyResourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.LambdaIntegration",
        "@aws-cdk/aws-apigateway.ProxyResource",
        "@aws-cdk/aws-apigateway.ProxyResourceOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addProxy",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst proxy = resource.addProxy({\n  defaultIntegration: new apigateway.LambdaIntegration(handler),\n\n  // \"false\" will require explicitly adding methods on the `proxy` resource\n  anyMethod: true // \"true\" is the default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "8fa38e19fe22bcd876f7a5b0a58200ba668cbebb9ba9975d19b90ff97299a1b6"
    },
    "7ab2ef2542229a6236e527541dfded252231c0101eb27bd12fa7612e73629562": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.QuotaSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b9eeff5b2086cd8c2c13cb2cc1b636247a54a79012debdadac956a60e7621126"
    },
    "437d45321f494f04c631e447d80fda31d7202039af49a1b3e6398000dbbf49a3": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RateLimitedApiKey"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b9eeff5b2086cd8c2c13cb2cc1b636247a54a79012debdadac956a60e7621126"
    },
    "3d4e500801040a66cc030559c38ff487b6da002b768a719f4f7a65f73c38bd78": {
      "translations": {
        "python": {
          "source": "# api is of type RestApi\n\n\nkey = apigateway.RateLimitedApiKey(self, \"rate-limited-api-key\",\n    customer_id=\"hello-customer\",\n    resources=[api],\n    quota=apigateway.QuotaSettings(\n        limit=10000,\n        period=apigateway.Period.MONTH\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = new RateLimitedApiKey(this, \"rate-limited-api-key\", new RateLimitedApiKeyProps {\n    CustomerId = \"hello-customer\",\n    Resources = new [] { api },\n    Quota = new QuotaSettings {\n        Limit = 10000,\n        Period = Period.MONTH\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api;\n\n\nRateLimitedApiKey key = RateLimitedApiKey.Builder.create(this, \"rate-limited-api-key\")\n        .customerId(\"hello-customer\")\n        .resources(List.of(api))\n        .quota(QuotaSettings.builder()\n                .limit(10000)\n                .period(Period.MONTH)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigateway.RestApi;\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Period",
        "@aws-cdk/aws-apigateway.Period#MONTH",
        "@aws-cdk/aws-apigateway.QuotaSettings",
        "@aws-cdk/aws-apigateway.RateLimitedApiKey",
        "@aws-cdk/aws-apigateway.RateLimitedApiKeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigateway.RestApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst key = new apigateway.RateLimitedApiKey(this, 'rate-limited-api-key', {\n  customerId: 'hello-customer',\n  resources: [api],\n  quota: {\n    limit: 10000,\n    period: apigateway.Period.MONTH\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b9eeff5b2086cd8c2c13cb2cc1b636247a54a79012debdadac956a60e7621126"
    },
    "4e106cdc5dd169658306092a00006e3e6ae96da99a550ad30ce763e45b2d1796": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "13ee7923e4f09aa07a899f3e31eb4eda3c7a6efccdb45131868bbe3d173932ca"
    },
    "8f899e115af5fa88df7429e49aa9466858a7f8f159bc0c8c2de63ef23ca5252a": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.RequestAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn,\n    identity_sources=[apigateway.IdentitySource.header(\"Authorization\")]\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = new RequestAuthorizer(this, \"booksAuthorizer\", new RequestAuthorizerProps {\n    Handler = authFn,\n    IdentitySources = new [] { IdentitySource.Header(\"Authorization\") }\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nRequestAuthorizer auth = RequestAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .identitySources(List.of(IdentitySource.header(\"Authorization\")))\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.IdentitySource",
        "@aws-cdk/aws-apigateway.IdentitySource#header",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestAuthorizer",
        "@aws-cdk/aws-apigateway.RequestAuthorizerProps",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.RequestAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn,\n  identitySources: [apigateway.IdentitySource.header('Authorization')]\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "13ee7923e4f09aa07a899f3e31eb4eda3c7a6efccdb45131868bbe3d173932ca"
    },
    "1bc620a6f7ea1d224f1d7a1f805a49f20fcea5ae38185ebe4aa094172b80c0dc": {
      "translations": {
        "python": {
          "source": "apigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    state_machine=machine,\n    headers=True,\n    path=False,\n    querystring=False,\n    request_context=apigateway.RequestContext(\n        caller=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    StateMachine = machine,\n    Headers = true,\n    Path = false,\n    Querystring = false,\n    RequestContext = new RequestContext {\n        Caller = true,\n        User = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "StepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .stateMachine(machine)\n        .headers(true)\n        .path(false)\n        .querystring(false)\n        .requestContext(RequestContext.builder()\n                .caller(true)\n                .user(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestContext"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RequestContext",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineType"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const machine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n      definition: new stepfunctions.Pass(this, 'PassState'),\n      stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  stateMachine: machine,\n  headers: true,\n  path: false,\n  querystring: false,\n  requestContext: {\n    caller: true,\n    user: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "91": 2,
        "104": 1,
        "106": 3,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "c355d9e4253caffbb14ad804536b4da2ed5f1320e772dbb0c69fb827ead348f2"
    },
    "0feb6d576890b3ea755f50cf1a527a99db21ef112e790cb8288f004245a47638": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n# resource is of type Resource\n# response_model is of type Model\n# error_response_model is of type Model\n\n\nresource.add_method(\"GET\", integration,\n    # We can mark the parameters as required\n    request_parameters={\n        \"method.request.querystring.who\": True\n    },\n    # we can set request validator options like below\n    request_validator_options=apigateway.RequestValidatorOptions(\n        request_validator_name=\"test-validator\",\n        validate_request_body=True,\n        validate_request_parameters=False\n    ),\n    method_responses=[apigateway.MethodResponse(\n        # Successful response from the integration\n        status_code=\"200\",\n        # Define what parameters are allowed or not\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        # Validate the schema on the response\n        response_models={\n            \"application/json\": response_model\n        }\n    ), apigateway.MethodResponse(\n        # Same thing for the error responses\n        status_code=\"400\",\n        response_parameters={\n            \"method.response.header._content-_type\": True,\n            \"method.response.header._access-_control-_allow-_origin\": True,\n            \"method.response.header._access-_control-_allow-_credentials\": True\n        },\n        response_models={\n            \"application/json\": error_response_model\n        }\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.AddMethod(\"GET\", integration, new MethodOptions {\n    // We can mark the parameters as required\n    RequestParameters = new Dictionary<string, boolean> {\n        { \"method.request.querystring.who\", true }\n    },\n    // we can set request validator options like below\n    RequestValidatorOptions = new RequestValidatorOptions {\n        RequestValidatorName = \"test-validator\",\n        ValidateRequestBody = true,\n        ValidateRequestParameters = false\n    },\n    MethodResponses = new [] { new MethodResponse {\n        // Successful response from the integration\n        StatusCode = \"200\",\n        // Define what parameters are allowed or not\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        // Validate the schema on the response\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", responseModel }\n        }\n    }, new MethodResponse {\n        // Same thing for the error responses\n        StatusCode = \"400\",\n        ResponseParameters = new Dictionary<string, boolean> {\n            { \"method.response.header.Content-Type\", true },\n            { \"method.response.header.Access-Control-Allow-Origin\", true },\n            { \"method.response.header.Access-Control-Allow-Credentials\", true }\n        },\n        ResponseModels = new Dictionary<string, IModel> {\n            { \"application/json\", errorResponseModel }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\nResource resource;\nModel responseModel;\nModel errorResponseModel;\n\n\nresource.addMethod(\"GET\", integration, MethodOptions.builder()\n        // We can mark the parameters as required\n        .requestParameters(Map.of(\n                \"method.request.querystring.who\", true))\n        // we can set request validator options like below\n        .requestValidatorOptions(RequestValidatorOptions.builder()\n                .requestValidatorName(\"test-validator\")\n                .validateRequestBody(true)\n                .validateRequestParameters(false)\n                .build())\n        .methodResponses(List.of(MethodResponse.builder()\n                // Successful response from the integration\n                .statusCode(\"200\")\n                // Define what parameters are allowed or not\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                // Validate the schema on the response\n                .responseModels(Map.of(\n                        \"application/json\", responseModel))\n                .build(), MethodResponse.builder()\n                // Same thing for the error responses\n                .statusCode(\"400\")\n                .responseParameters(Map.of(\n                        \"method.response.header.Content-Type\", true,\n                        \"method.response.header.Access-Control-Allow-Origin\", true,\n                        \"method.response.header.Access-Control-Allow-Credentials\", true))\n                .responseModels(Map.of(\n                        \"application/json\", errorResponseModel))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RequestValidatorOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IModel",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.RequestValidatorOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\ndeclare const resource: apigateway.Resource;\ndeclare const responseModel: apigateway.Model;\ndeclare const errorResponseModel: apigateway.Model;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nresource.addMethod('GET', integration, {\n  // We can mark the parameters as required\n  requestParameters: {\n    'method.request.querystring.who': true\n  },\n  // we can set request validator options like below\n  requestValidatorOptions: {\n    requestValidatorName: 'test-validator',\n    validateRequestBody: true,\n    validateRequestParameters: false\n  },\n  methodResponses: [\n    {\n      // Successful response from the integration\n      statusCode: '200',\n      // Define what parameters are allowed or not\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      // Validate the schema on the response\n      responseModels: {\n        'application/json': responseModel\n      }\n    },\n    {\n      // Same thing for the error responses\n      statusCode: '400',\n      responseParameters: {\n        'method.response.header.Content-Type': true,\n        'method.response.header.Access-Control-Allow-Origin': true,\n        'method.response.header.Access-Control-Allow-Credentials': true\n      },\n      responseModels: {\n        'application/json': errorResponseModel\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 29,
        "91": 1,
        "106": 8,
        "130": 4,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 9,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 21,
        "290": 1
      },
      "fqnsFingerprint": "c480bf1c8ed4f7e54c4664cc774a02b7a32c809931cb1257a78b232e3c505ce7"
    },
    "bbeb2ab494c5bbcd5c9fd80a6ccf14164b8c552b8db27cd9658f9c3f749d95b4": {
      "translations": {
        "python": {
          "source": "# books_backend is of type LambdaIntegration\n\napi = apigateway.RestApi(self, \"books\",\n    default_integration=books_backend\n)\n\nbooks = api.root.add_resource(\"books\")\nbooks.add_method(\"GET\") # integrated with `booksBackend`\nbooks.add_method(\"POST\") # integrated with `booksBackend`\n\nbook = books.add_resource(\"{book_id}\")\nbook.add_method(\"GET\")",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DefaultIntegration = booksBackend\n});\n\nResource books = api.Root.AddResource(\"books\");\nbooks.AddMethod(\"GET\"); // integrated with `booksBackend`\nbooks.AddMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.AddResource(\"{book_id}\");\nbook.AddMethod(\"GET\");",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration booksBackend;\n\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .defaultIntegration(booksBackend)\n        .build();\n\nResource books = api.root.addResource(\"books\");\nbooks.addMethod(\"GET\"); // integrated with `booksBackend`\nbooks.addMethod(\"POST\"); // integrated with `booksBackend`\n\nResource book = books.addResource(\"{book_id}\");\nbook.addMethod(\"GET\");",
          "version": "1"
        },
        "$": {
          "source": "declare const booksBackend: apigateway.LambdaIntegration;\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');   // integrated with `booksBackend`",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Resource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const booksBackend: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst api = new apigateway.RestApi(this, 'books', {\n  defaultIntegration: booksBackend\n});\n\nconst books = api.root.addResource('books');\nbooks.addMethod('GET');  // integrated with `booksBackend`\nbooks.addMethod('POST'); // integrated with `booksBackend`\n\nconst book = books.addResource('{book_id}');\nbook.addMethod('GET');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 7,
        "196": 5,
        "197": 1,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "16627da5ee968612bed3ec3a76826a49bb4956edc890798839dd921dd8e1d5a8"
    },
    "41355a11c52571e06b17eede05c7d8624254531883f85fb47e5e90f5bc6d2519": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n\n\nsubtree = resource.add_resource(\"subtree\",\n    default_cors_preflight_options=apigateway.CorsOptions(\n        allow_origins=[\"https://amazon.com\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\n\n\nResource subtree = resource.AddResource(\"subtree\", new ResourceOptions {\n    DefaultCorsPreflightOptions = new CorsOptions {\n        AllowOrigins = new [] { \"https://amazon.com\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\n\n\nResource subtree = resource.addResource(\"subtree\", ResourceOptions.builder()\n        .defaultCorsPreflightOptions(CorsOptions.builder()\n                .allowOrigins(List.of(\"https://amazon.com\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: apigateway.Resource;\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.CorsOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.ResourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst subtree = resource.addResource('subtree', {\n  defaultCorsPreflightOptions: {\n    allowOrigins: [ 'https://amazon.com' ]\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d3d27b9529164cca5abb04f8cbd8b6ef12bcb0116d88c43d128580a078ed9e24"
    },
    "2af8c7d9d8f15c0e73eed1acdf23693ae890822ce467823bd2f33638f941431a": {
      "translations": {
        "python": {
          "source": "api = apigateway.RestApi(self, \"books-api\")\napi.add_gateway_response(\"test-response\",\n    type=apigateway.ResponseType.ACCESS_DENIED,\n    status_code=\"500\",\n    response_headers={\n        \"Access-Control-Allow-Origin\": \"test.com\",\n        \"test-key\": \"test-value\"\n    },\n    templates={\n        \"application/json\": \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.AddGatewayResponse(\"test-response\", new GatewayResponseOptions {\n    Type = ResponseType.ACCESS_DENIED,\n    StatusCode = \"500\",\n    ResponseHeaders = new Dictionary<string, string> {\n        { \"Access-Control-Allow-Origin\", \"test.com\" },\n        { \"test-key\", \"test-value\" }\n    },\n    Templates = new Dictionary<string, string> {\n        { \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "RestApi api = new RestApi(this, \"books-api\");\napi.addGatewayResponse(\"test-response\", GatewayResponseOptions.builder()\n        .type(ResponseType.ACCESS_DENIED)\n        .statusCode(\"500\")\n        .responseHeaders(Map.of(\n                \"Access-Control-Allow-Origin\", \"test.com\",\n                \"test-key\", \"test-value\"))\n        .templates(Map.of(\n                \"application/json\", \"{ \\\"message\\\": $context.error.messageString, \\\"statusCode\\\": \\\"488\\\", \\\"type\\\": \\\"$context.error.responseType\\\" }\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ResponseType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.GatewayResponseOptions",
        "@aws-cdk/aws-apigateway.ResponseType",
        "@aws-cdk/aws-apigateway.ResponseType#ACCESS_DENIED",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiBase#addGatewayResponse"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigateway.RestApi(this, 'books-api');\napi.addGatewayResponse('test-response', {\n  type: apigateway.ResponseType.ACCESS_DENIED,\n  statusCode: '500',\n  responseHeaders: {\n    'Access-Control-Allow-Origin': \"test.com\",\n    'test-key': 'test-value'\n  },\n  templates: {\n    'application/json': '{ \"message\": $context.error.messageString, \"statusCode\": \"488\", \"type\": \"$context.error.responseType\" }'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "104": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "b1dacb0849e1cb6d98cf15355ee4c82d880a753f23df322385294b42335aef3b"
    },
    "b92d3ca4e040e8ec0da18c968d3dae1c1b597e7028217db978758c8569b2dfd2": {
      "translations": {
        "python": {
          "source": "hello = lambda_.Function(self, \"hello\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"hello.handler\",\n    code=lambda_.Code.from_asset(\"lambda\")\n)\n\napi = apigateway.RestApi(self, \"hello-api\")\nresource = api.root.add_resource(\"v1\")",
          "version": "1"
        },
        "csharp": {
          "source": "Function hello = new Function(this, \"hello\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"hello.handler\",\n    Code = Code.FromAsset(\"lambda\")\n});\n\nRestApi api = new RestApi(this, \"hello-api\", new RestApiProps { });\nResource resource = api.Root.AddResource(\"v1\");",
          "version": "1"
        },
        "java": {
          "source": "Function hello = Function.Builder.create(this, \"hello\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"hello.handler\")\n        .code(Code.fromAsset(\"lambda\"))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"hello-api\").build();\nResource resource = api.root.addResource(\"v1\");",
          "version": "1"
        },
        "$": {
          "source": "const hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hello = new lambda.Function(this, 'hello', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'hello.handler',\n  code: lambda.Code.fromAsset('lambda')\n});\n\nconst api = new apigateway.RestApi(this, 'hello-api', { });\nconst resource = api.root.addResource('v1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 2,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3
      },
      "fqnsFingerprint": "eccd6470b43e364cc6552bf8269daffb641821f444f164882b1d7bf3f8ac6fc3"
    },
    "f33e9f5d7fa21bced6b4dcbf86d828af67f35f7607f5b2153972afb1a0eb50bf": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigateway import IntegrationResponse, MethodResponse, IntegrationResponse, MethodResponse\nfrom aws_cdk.core import App, CfnOutput, NestedStack, NestedStackProps, Stack\nfrom constructs import Construct\nfrom aws_cdk.aws_apigateway import Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage\n\n#\n# This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n#\n# The root stack 'RootStack' first defines a RestApi.\n# Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n# They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n#\n# To verify this worked, go to the APIGateway\n#\n\nclass RootStack(Stack):\n    def __init__(self, scope):\n        super().__init__(scope, \"integ-restapi-import-RootStack\")\n\n        rest_api = RestApi(self, \"RestApi\",\n            deploy=False\n        )\n        rest_api.root.add_method(\"ANY\")\n\n        pets_stack = PetsStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        books_stack = BooksStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            root_resource_id=rest_api.rest_api_root_resource_id\n        )\n        DeployStack(self,\n            rest_api_id=rest_api.rest_api_id,\n            methods=pets_stack.methods.concat(books_stack.methods)\n        )\n\n        CfnOutput(self, \"PetsURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        )\n\n        CfnOutput(self, \"BooksURL\",\n            value=f\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        )\n\nclass PetsStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-PetsStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"pets\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass BooksStack(NestedStack):\n\n    def __init__(self, scope, *, restApiId, rootResourceId, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-BooksStack\", restApiId=restApiId, rootResourceId=rootResourceId, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        api = RestApi.from_rest_api_attributes(self, \"RestApi\",\n            rest_api_id=rest_api_id,\n            root_resource_id=root_resource_id\n        )\n\n        method = api.root.add_resource(\"books\").add_method(\"GET\", MockIntegration(\n            integration_responses=[IntegrationResponse(\n                status_code=\"200\"\n            )],\n            passthrough_behavior=PassthroughBehavior.NEVER,\n            request_templates={\n                \"application/json\": \"{ \\\"statusCode\\\": 200 }\"\n            }\n        ),\n            method_responses=[MethodResponse(status_code=\"200\")]\n        )\n\n        self.methods.push(method)\n\nclass DeployStack(NestedStack):\n    def __init__(self, scope, *, restApiId, methods=None, parameters=None, timeout=None, notificationArns=None, removalPolicy=None):\n        super().__init__(scope, \"integ-restapi-import-DeployStack\", restApiId=restApiId, methods=methods, parameters=parameters, timeout=timeout, notificationArns=notificationArns, removalPolicy=removalPolicy)\n\n        deployment = Deployment(self, \"Deployment\",\n            api=RestApi.from_rest_api_id(self, \"RestApi\", rest_api_id)\n        )\n        if methods:\n            for method in methods:\n                deployment.node.add_dependency(method)\n        Stage(self, \"Stage\", deployment=deployment)\n\nRootStack(App())",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.APIGateway;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack : Stack\n{\n    public RootStack(Construct scope) : base(scope, \"integ-restapi-import-RootStack\")\n    {\n\n        RestApi restApi = new RestApi(this, \"RestApi\", new RestApiProps {\n            Deploy = false\n        });\n        restApi.Root.AddMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps {\n            RestApiId = restApi.RestApiId,\n            RootResourceId = restApi.RestApiRootResourceId\n        });\n        new DeployStack(this, new DeployStackProps {\n            RestApiId = restApi.RestApiId,\n            Methods = petsStack.Methods.Concat(booksStack.Methods)\n        });\n\n        new CfnOutput(this, \"PetsURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/pets\"\n        });\n\n        new CfnOutput(this, \"BooksURL\", new CfnOutputProps {\n            Value = $\"https://{restApi.restApiId}.execute-api.{this.region}.amazonaws.com/prod/books\"\n        });\n    }\n}\n\nclass ResourceNestedStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public string RootResourceId { get; set; }\n}\n\nclass PetsStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-PetsStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"pets\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass BooksStack : NestedStack\n{\n    public readonly Method[] Methods = new [] {  };\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) : base(scope, \"integ-restapi-import-BooksStack\", props)\n    {\n\n        IRestApi api = RestApi.FromRestApiAttributes(this, \"RestApi\", new RestApiAttributes {\n            RestApiId = props.RestApiId,\n            RootResourceId = props.RootResourceId\n        });\n\n        Method method = api.Root.AddResource(\"books\").AddMethod(\"GET\", new MockIntegration(new IntegrationOptions {\n            IntegrationResponses = new [] { new IntegrationResponse {\n                StatusCode = \"200\"\n            } },\n            PassthroughBehavior = PassthroughBehavior.NEVER,\n            RequestTemplates = new Dictionary<string, string> {\n                { \"application/json\", \"{ \\\"statusCode\\\": 200 }\" }\n            }\n        }), new MethodOptions {\n            MethodResponses = new [] { new MethodResponse { StatusCode = \"200\" } }\n        });\n\n        Methods.Push(method);\n    }\n}\n\nclass DeployStackProps : NestedStackProps\n{\n    public string RestApiId { get; set; }\n\n    public Method[]? Methods { get; set; }\n}\n\nclass DeployStack : NestedStack\n{\n    public DeployStack(Construct scope, DeployStackProps props) : base(scope, \"integ-restapi-import-DeployStack\", props)\n    {\n\n        Deployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps {\n            Api = RestApi.FromRestApiId(this, \"RestApi\", props.RestApiId)\n        });\n        if (props.Methods)\n        {\n            for (var method in props.Methods)\n            {\n                deployment.Node.AddDependency(method);\n            }\n        }\n        new Stage(this, \"Stage\", new StageProps { Deployment = deployment });\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.NestedStack;\nimport software.amazon.awscdk.core.NestedStackProps;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.apigateway.Deployment;\nimport software.amazon.awscdk.services.apigateway.Method;\nimport software.amazon.awscdk.services.apigateway.MockIntegration;\nimport software.amazon.awscdk.services.apigateway.PassthroughBehavior;\nimport software.amazon.awscdk.services.apigateway.RestApi;\nimport software.amazon.awscdk.services.apigateway.Stage;\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\npublic class RootStack extends Stack {\n    public RootStack(Construct scope) {\n        super(scope, \"integ-restapi-import-RootStack\");\n\n        RestApi restApi = RestApi.Builder.create(this, \"RestApi\")\n                .deploy(false)\n                .build();\n        restApi.root.addMethod(\"ANY\");\n\n        PetsStack petsStack = new PetsStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        BooksStack booksStack = new BooksStack(this, new ResourceNestedStackProps()\n                .restApiId(restApi.getRestApiId())\n                .rootResourceId(restApi.getRestApiRootResourceId())\n                );\n        new DeployStack(this, new DeployStackProps()\n                .restApiId(restApi.getRestApiId())\n                .methods(petsStack.methods.concat(booksStack.getMethods()))\n                );\n\n        CfnOutput.Builder.create(this, \"PetsURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/pets\", restApi.getRestApiId(), this.region))\n                .build();\n\n        CfnOutput.Builder.create(this, \"BooksURL\")\n                .value(String.format(\"https://%s.execute-api.%s.amazonaws.com/prod/books\", restApi.getRestApiId(), this.region))\n                .build();\n    }\n}\n\npublic class ResourceNestedStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public ResourceNestedStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private String rootResourceId;\n    public String getRootResourceId() {\n        return this.rootResourceId;\n    }\n    public ResourceNestedStackProps rootResourceId(String rootResourceId) {\n        this.rootResourceId = rootResourceId;\n        return this;\n    }\n}\n\npublic class PetsStack extends NestedStack {\n    public final Method[] methods;\n\n    public PetsStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-PetsStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"pets\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class BooksStack extends NestedStack {\n    public final Method[] methods;\n\n    public BooksStack(Construct scope, ResourceNestedStackProps props) {\n        super(scope, \"integ-restapi-import-BooksStack\", props);\n\n        IRestApi api = RestApi.fromRestApiAttributes(this, \"RestApi\", RestApiAttributes.builder()\n                .restApiId(props.getRestApiId())\n                .rootResourceId(props.getRootResourceId())\n                .build());\n\n        Method method = api.root.addResource(\"books\").addMethod(\"GET\", MockIntegration.Builder.create()\n                .integrationResponses(List.of(IntegrationResponse.builder()\n                        .statusCode(\"200\")\n                        .build()))\n                .passthroughBehavior(PassthroughBehavior.NEVER)\n                .requestTemplates(Map.of(\n                        \"application/json\", \"{ \\\"statusCode\\\": 200 }\"))\n                .build(), MethodOptions.builder()\n                .methodResponses(List.of(MethodResponse.builder().statusCode(\"200\").build()))\n                .build());\n\n        this.methods.push(method);\n    }\n}\n\npublic class DeployStackProps extends NestedStackProps {\n    private String restApiId;\n    public String getRestApiId() {\n        return this.restApiId;\n    }\n    public DeployStackProps restApiId(String restApiId) {\n        this.restApiId = restApiId;\n        return this;\n    }\n\n    private Method[] methods;\n    public Method[] getMethods() {\n        return this.methods;\n    }\n    public DeployStackProps methods(Method[] methods) {\n        this.methods = methods;\n        return this;\n    }\n}\n\npublic class DeployStack extends NestedStack {\n    public DeployStack(Construct scope, DeployStackProps props) {\n        super(scope, \"integ-restapi-import-DeployStack\", props);\n\n        Deployment deployment = Deployment.Builder.create(this, \"Deployment\")\n                .api(RestApi.fromRestApiId(this, \"RestApi\", props.getRestApiId()))\n                .build();\n        if (props.getMethods()) {\n            for (Object method : props.getMethods()) {\n                deployment.node.addDependency(method);\n            }\n        }\n        Stage.Builder.create(this, \"Stage\").deployment(deployment).build();\n    }\n}\n\nnew RootStack(new App());",
          "version": "1"
        },
        "$": {
          "source": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.IRestApi#root",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.MockIntegration",
        "@aws-cdk/aws-apigateway.PassthroughBehavior",
        "@aws-cdk/aws-apigateway.PassthroughBehavior#NEVER",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApi#fromRestApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiId",
        "@aws-cdk/aws-apigateway.RestApi#restApiRootResourceId",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiAttributes",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#addDependency",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/core.NestedStack",
        "@aws-cdk/core.NestedStackProps",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { App, CfnOutput, NestedStack, NestedStackProps, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport { Deployment, Method, MockIntegration, PassthroughBehavior, RestApi, Stage } from '../lib';\n\n/**\n * This file showcases how to split up a RestApi's Resources and Methods across nested stacks.\n *\n * The root stack 'RootStack' first defines a RestApi.\n * Two nested stacks BooksStack and PetsStack, create corresponding Resources '/books' and '/pets'.\n * They are then deployed to a 'prod' Stage via a third nested stack - DeployStack.\n *\n * To verify this worked, go to the APIGateway\n */\n\nclass RootStack extends Stack {\n  constructor(scope: Construct) {\n    super(scope, 'integ-restapi-import-RootStack');\n\n    const restApi = new RestApi(this, 'RestApi', {\n      deploy: false,\n    });\n    restApi.root.addMethod('ANY');\n\n    const petsStack = new PetsStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    const booksStack = new BooksStack(this, {\n      restApiId: restApi.restApiId,\n      rootResourceId: restApi.restApiRootResourceId,\n    });\n    new DeployStack(this, {\n      restApiId: restApi.restApiId,\n      methods: petsStack.methods.concat(booksStack.methods),\n    });\n\n    new CfnOutput(this, 'PetsURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/pets`,\n    });\n\n    new CfnOutput(this, 'BooksURL', {\n      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/prod/books`,\n    });\n  }\n}\n\ninterface ResourceNestedStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly rootResourceId: string;\n}\n\nclass PetsStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-PetsStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('pets').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\nclass BooksStack extends NestedStack {\n  public readonly methods: Method[] = [];\n\n  constructor(scope: Construct, props: ResourceNestedStackProps) {\n    super(scope, 'integ-restapi-import-BooksStack', props);\n\n    const api = RestApi.fromRestApiAttributes(this, 'RestApi', {\n      restApiId: props.restApiId,\n      rootResourceId: props.rootResourceId,\n    });\n\n    const method = api.root.addResource('books').addMethod('GET', new MockIntegration({\n      integrationResponses: [{\n        statusCode: '200',\n      }],\n      passthroughBehavior: PassthroughBehavior.NEVER,\n      requestTemplates: {\n        'application/json': '{ \"statusCode\": 200 }',\n      },\n    }), {\n      methodResponses: [{ statusCode: '200' }],\n    });\n\n    this.methods.push(method);\n  }\n}\n\ninterface DeployStackProps extends NestedStackProps {\n  readonly restApiId: string;\n\n  readonly methods?: Method[];\n}\n\nclass DeployStack extends NestedStack {\n  constructor(scope: Construct, props: DeployStackProps) {\n    super(scope, 'integ-restapi-import-DeployStack', props);\n\n    const deployment = new Deployment(this, 'Deployment', {\n      api: RestApi.fromRestApiId(this, 'RestApi', props.restApiId),\n    });\n    if (props.methods) {\n      for (const method of props.methods) {\n        deployment.node.addDependency(method);\n      }\n    }\n    new Stage(this, 'Stage', { deployment });\n  }\n}\n\nnew RootStack(new App());",
      "syntaxKindCounter": {
        "10": 28,
        "15": 2,
        "16": 2,
        "17": 2,
        "57": 1,
        "75": 168,
        "91": 1,
        "102": 4,
        "104": 15,
        "119": 2,
        "138": 6,
        "143": 3,
        "156": 7,
        "158": 4,
        "159": 2,
        "162": 4,
        "169": 10,
        "174": 3,
        "192": 6,
        "193": 20,
        "194": 38,
        "196": 16,
        "197": 12,
        "211": 2,
        "216": 6,
        "221": 4,
        "223": 6,
        "225": 8,
        "226": 13,
        "227": 1,
        "232": 1,
        "242": 9,
        "243": 9,
        "245": 4,
        "246": 2,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 12,
        "279": 6,
        "281": 28,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "684d7cadc8d7451c5165008ff56a4576cfb2b2c4c46d8ece716a1473f80ea5aa"
    },
    "1107602ebe6ff9f4c97bc7e221cb2553c23227f2cb532753912b5087743f8945": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_route53 as route53\nimport aws_cdk.aws_route53_targets as targets\n\n# api is of type RestApi\n# hosted_zone_for_example_com is of type object\n\n\nroute53.ARecord(self, \"CustomDomainAliasRecord\",\n    zone=hosted_zone_for_example_com,\n    target=route53.RecordTarget.from_alias(targets.ApiGateway(api))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.Route53.Targets;\n\nRestApi api;\nvar hostedZoneForExampleCom;\n\n\nnew ARecord(this, \"CustomDomainAliasRecord\", new ARecordProps {\n    Zone = hostedZoneForExampleCom,\n    Target = RecordTarget.FromAlias(new ApiGateway(api))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.*;\nimport software.amazon.awscdk.services.route53.targets.*;\n\nRestApi api;\nObject hostedZoneForExampleCom;\n\n\nARecord.Builder.create(this, \"CustomDomainAliasRecord\")\n        .zone(hostedZoneForExampleCom)\n        .target(RecordTarget.fromAlias(new ApiGateway(api)))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiBase"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.RestApiBase",
        "@aws-cdk/aws-route53-targets.ApiGateway",
        "@aws-cdk/aws-route53.ARecord",
        "@aws-cdk/aws-route53.ARecordProps",
        "@aws-cdk/aws-route53.IAliasRecordTarget",
        "@aws-cdk/aws-route53.IHostedZone",
        "@aws-cdk/aws-route53.RecordTarget",
        "@aws-cdk/aws-route53.RecordTarget#fromAlias"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as targets from '@aws-cdk/aws-route53-targets';\n\ndeclare const api: apigateway.RestApi;\ndeclare const hostedZoneForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew route53.ARecord(this, 'CustomDomainAliasRecord', {\n  zone: hostedZoneForExampleCom,\n  target: route53.RecordTarget.fromAlias(new targets.ApiGateway(api))\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "125": 1,
        "130": 2,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "da84de034b74e4ee36190669dac356d7cf084bee4a06d9ccb841837ea5846c14"
    },
    "6752e60d1e9e387be63db402d934918664219352d8f8e7461cb7ee6b4451320c": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "1"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.RestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "b8e393f090b63cd40c57e98403af341f70e05e4c650cd22c347c5cbe6958c34f"
    },
    "bae159868bb68bb3c2e976e0ce805b3e65d0be925e689feadf9d28f19eac63a0": {
      "translations": {
        "python": {
          "source": "# acm_certificate_for_example_com is of type object\n\n\napigateway.DomainName(self, \"custom-domain\",\n    domain_name=\"example.com\",\n    certificate=acm_certificate_for_example_com,\n    endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL\n    security_policy=apigateway.SecurityPolicy.TLS_1_2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var acmCertificateForExampleCom;\n\n\nnew DomainName(this, \"custom-domain\", new DomainNameProps {\n    DomainName = \"example.com\",\n    Certificate = acmCertificateForExampleCom,\n    EndpointType = EndpointType.EDGE,  // default is REGIONAL\n    SecurityPolicy = SecurityPolicy.TLS_1_2\n});",
          "version": "1"
        },
        "java": {
          "source": "Object acmCertificateForExampleCom;\n\n\nDomainName.Builder.create(this, \"custom-domain\")\n        .domainName(\"example.com\")\n        .certificate(acmCertificateForExampleCom)\n        .endpointType(EndpointType.EDGE) // default is REGIONAL\n        .securityPolicy(SecurityPolicy.TLS_1_2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const acmCertificateForExampleCom: any;\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SecurityPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.DomainName",
        "@aws-cdk/aws-apigateway.DomainNameProps",
        "@aws-cdk/aws-apigateway.EndpointType",
        "@aws-cdk/aws-apigateway.EndpointType#EDGE",
        "@aws-cdk/aws-apigateway.SecurityPolicy",
        "@aws-cdk/aws-apigateway.SecurityPolicy#TLS_1_2",
        "@aws-cdk/aws-certificatemanager.ICertificate"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const acmCertificateForExampleCom: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigateway.DomainName(this, 'custom-domain', {\n  domainName: 'example.com',\n  certificate: acmCertificateForExampleCom,\n  endpointType: apigateway.EndpointType.EDGE, // default is REGIONAL\n  securityPolicy: apigateway.SecurityPolicy.TLS_1_2\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1d54d8466104551d3632d731373879366d46a8ed216c1275f5f4016a303024c9"
    },
    "7bca4c087ee2b4b147ad066ba7b9c1477dc8ce15c3cc546afbd15bcedc2df7c9": {
      "translations": {
        "python": {
          "source": "# integration is of type Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "1"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SpecRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9346f36c9c0a68d422eb6d8f7b2e69e6808fe2938d4b349d9629b64b221ccd6"
    },
    "a5377509139877dd8941ec48e6b6a449c42d82d716e9defb513d85c791a9d45c": {
      "translations": {
        "python": {
          "source": "# integration is of type Integration\n\n\napi = apigateway.SpecRestApi(self, \"books-api\",\n    api_definition=apigateway.ApiDefinition.from_asset(\"path-to-file.json\")\n)\n\nbooks_resource = api.root.add_resource(\"books\")\nbooks_resource.add_method(\"GET\", integration)",
          "version": "1"
        },
        "csharp": {
          "source": "Integration integration;\n\n\nSpecRestApi api = new SpecRestApi(this, \"books-api\", new SpecRestApiProps {\n    ApiDefinition = ApiDefinition.FromAsset(\"path-to-file.json\")\n});\n\nResource booksResource = api.Root.AddResource(\"books\");\nbooksResource.AddMethod(\"GET\", integration);",
          "version": "1"
        },
        "java": {
          "source": "Integration integration;\n\n\nSpecRestApi api = SpecRestApi.Builder.create(this, \"books-api\")\n        .apiDefinition(ApiDefinition.fromAsset(\"path-to-file.json\"))\n        .build();\n\nResource booksResource = api.root.addResource(\"books\");\nbooksResource.addMethod(\"GET\", integration);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.Integration;\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.SpecRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ApiDefinition",
        "@aws-cdk/aws-apigateway.ApiDefinition#fromAsset",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.SpecRestApi",
        "@aws-cdk/aws-apigateway.SpecRestApi#root",
        "@aws-cdk/aws-apigateway.SpecRestApiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.Integration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.SpecRestApi(this, 'books-api', {\n  apiDefinition: apigateway.ApiDefinition.fromAsset('path-to-file.json')\n});\n\nconst booksResource = api.root.addResource('books')\nbooksResource.addMethod('GET', integration);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9346f36c9c0a68d422eb6d8f7b2e69e6808fe2938d4b349d9629b64b221ccd6"
    },
    "6ab98a29ef356da11431465f89e48580f488584b961296d163ff0c05f195cc46": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.Stage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "b66004d18581dffbef74f16743e261b727d7aff66f5a421baec270bd60330846": {
      "translations": {
        "python": {
          "source": "log_group = logs.LogGroup(self, \"ApiGatewayAccessLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(log_group),\n        access_log_format=apigateway.AccessLogFormat.clf()\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(logGroup),\n        AccessLogFormat = AccessLogFormat.Clf()\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "LogGroup logGroup = new LogGroup(this, \"ApiGatewayAccessLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(logGroup))\n                .accessLogFormat(AccessLogFormat.clf())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#clf",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst logGroup = new logs.LogGroup(this, \"ApiGatewayAccessLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),\n    accessLogFormat: apigateway.AccessLogFormat.clf(),\n  }});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "579d898be3e6b249cc7b5616de3afb627fb464be9a2cf1fa545ab27e44edd9a2"
    },
    "63f6bbdda6761293f6d601a58b9dfcc77a534034938bdac9298e706f790ee8c2": {
      "translations": {
        "python": {
          "source": "# production stage\nprd_log_group = logs.LogGroup(self, \"PrdLogs\")\napi = apigateway.RestApi(self, \"books\",\n    deploy_options=apigateway.StageOptions(\n        access_log_destination=apigateway.LogGroupLogDestination(prd_log_group),\n        access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()\n    )\n)\ndeployment = apigateway.Deployment(self, \"Deployment\", api=api)\n\n# development stage\ndev_log_group = logs.LogGroup(self, \"DevLogs\")\napigateway.Stage(self, \"dev\",\n    deployment=deployment,\n    access_log_destination=apigateway.LogGroupLogDestination(dev_log_group),\n    access_log_format=apigateway.AccessLogFormat.json_with_standard_fields(\n        caller=False,\n        http_method=True,\n        ip=True,\n        protocol=True,\n        request_time=True,\n        resource_path=True,\n        response_length=True,\n        status=True,\n        user=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = new RestApi(this, \"books\", new RestApiProps {\n    DeployOptions = new StageOptions {\n        AccessLogDestination = new LogGroupLogDestination(prdLogGroup),\n        AccessLogFormat = AccessLogFormat.JsonWithStandardFields()\n    }\n});\nDeployment deployment = new Deployment(this, \"Deployment\", new DeploymentProps { Api = api });\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nnew Stage(this, \"dev\", new StageProps {\n    Deployment = deployment,\n    AccessLogDestination = new LogGroupLogDestination(devLogGroup),\n    AccessLogFormat = AccessLogFormat.JsonWithStandardFields(new JsonWithStandardFieldProps {\n        Caller = false,\n        HttpMethod = true,\n        Ip = true,\n        Protocol = true,\n        RequestTime = true,\n        ResourcePath = true,\n        ResponseLength = true,\n        Status = true,\n        User = true\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// production stage\nLogGroup prdLogGroup = new LogGroup(this, \"PrdLogs\");\nRestApi api = RestApi.Builder.create(this, \"books\")\n        .deployOptions(StageOptions.builder()\n                .accessLogDestination(new LogGroupLogDestination(prdLogGroup))\n                .accessLogFormat(AccessLogFormat.jsonWithStandardFields())\n                .build())\n        .build();\nDeployment deployment = Deployment.Builder.create(this, \"Deployment\").api(api).build();\n\n// development stage\nLogGroup devLogGroup = new LogGroup(this, \"DevLogs\");\nStage.Builder.create(this, \"dev\")\n        .deployment(deployment)\n        .accessLogDestination(new LogGroupLogDestination(devLogGroup))\n        .accessLogFormat(AccessLogFormat.jsonWithStandardFields(JsonWithStandardFieldProps.builder()\n                .caller(false)\n                .httpMethod(true)\n                .ip(true)\n                .protocol(true)\n                .requestTime(true)\n                .resourcePath(true)\n                .responseLength(true)\n                .status(true)\n                .user(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.AccessLogFormat",
        "@aws-cdk/aws-apigateway.AccessLogFormat#jsonWithStandardFields",
        "@aws-cdk/aws-apigateway.Deployment",
        "@aws-cdk/aws-apigateway.DeploymentProps",
        "@aws-cdk/aws-apigateway.IAccessLogDestination",
        "@aws-cdk/aws-apigateway.IRestApi",
        "@aws-cdk/aws-apigateway.JsonWithStandardFieldProps",
        "@aws-cdk/aws-apigateway.LogGroupLogDestination",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.StageOptions",
        "@aws-cdk/aws-apigateway.StageProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// production stage\nconst prdLogGroup = new logs.LogGroup(this, \"PrdLogs\");\nconst api = new apigateway.RestApi(this, 'books', {\n  deployOptions: {\n    accessLogDestination: new apigateway.LogGroupLogDestination(prdLogGroup),\n    accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields()\n  }\n})\nconst deployment = new apigateway.Deployment(this, 'Deployment', {api});\n\n// development stage\nconst devLogGroup = new logs.LogGroup(this, \"DevLogs\");\nnew apigateway.Stage(this, 'dev', {\n  deployment,\n  accessLogDestination: new apigateway.LogGroupLogDestination(devLogGroup),\n  accessLogFormat: apigateway.AccessLogFormat.jsonWithStandardFields({\n    caller: false,\n    httpMethod: true,\n    ip: true,\n    protocol: true,\n    requestTime: true,\n    resourcePath: true,\n    responseLength: true,\n    status: true,\n    user: true\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 42,
        "91": 1,
        "104": 5,
        "106": 8,
        "193": 5,
        "194": 11,
        "196": 2,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 14,
        "282": 2
      },
      "fqnsFingerprint": "c925c7e5174cf0d4889dc8795eee22a7c3f1a288f6d0c72faad9f8011999b1db"
    },
    "504c8e750caf8d116650d23368f5891da7138da4cccb44fd6ea6f1229b76a353": {
      "translations": {
        "python": {
          "source": "state_machine = stepfunctions.StateMachine(self, \"MyStateMachine\",\n    definition=stepfunctions.Chain.start(stepfunctions.Pass(self, \"Pass\"))\n)\n\napi = apigateway.RestApi(self, \"Api\",\n    rest_api_name=\"MyApi\"\n)\napi.root.add_method(\"GET\", apigateway.StepFunctionsIntegration.start_execution(state_machine))",
          "version": "1"
        },
        "csharp": {
          "source": "StateMachine stateMachine = new StateMachine(this, \"MyStateMachine\", new StateMachineProps {\n    Definition = Chain.Start(new Pass(this, \"Pass\"))\n});\n\nRestApi api = new RestApi(this, \"Api\", new RestApiProps {\n    RestApiName = \"MyApi\"\n});\napi.Root.AddMethod(\"GET\", StepFunctionsIntegration.StartExecution(stateMachine));",
          "version": "1"
        },
        "java": {
          "source": "StateMachine stateMachine = StateMachine.Builder.create(this, \"MyStateMachine\")\n        .definition(Chain.start(new Pass(this, \"Pass\")))\n        .build();\n\nRestApi api = RestApi.Builder.create(this, \"Api\")\n        .restApiName(\"MyApi\")\n        .build();\napi.root.addMethod(\"GET\", StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "1"
        },
        "$": {
          "source": "   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IResource#addMethod",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiProps",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration",
        "@aws-cdk/aws-apigateway.StepFunctionsIntegration#startExecution",
        "@aws-cdk/aws-stepfunctions.Chain",
        "@aws-cdk/aws-stepfunctions.Chain#start",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n   const stateMachine = new stepfunctions.StateMachine(this, 'MyStateMachine', {\n      definition: stepfunctions.Chain.start(new stepfunctions.Pass(this, 'Pass')),\n   });\n\n   const api = new apigateway.RestApi(this, 'Api', {\n      restApiName: 'MyApi',\n   });\n   api.root.addMethod('GET', apigateway.StepFunctionsIntegration.startExecution(stateMachine));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 3,
        "193": 2,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "b8e393f090b63cd40c57e98403af341f70e05e4c650cd22c347c5cbe6958c34f"
    },
    "3af5e9cb25557c8a25345785b022f733e1a0585c2bbb7c80b812278d61f98bed": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsRestApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a02c88ccf3998f1830d820178346d518087063ad6908362e2d21fd0e755e69e1"
    },
    "ef287ed8dd4953dce2bd0b7d15ad5590b3200b24c6bc9ca2b673db2efd111bbb": {
      "translations": {
        "python": {
          "source": "state_machine_definition = stepfunctions.Pass(self, \"PassState\")\n\nstate_machine = stepfunctions.StateMachine(self, \"StateMachine\",\n    definition=state_machine_definition,\n    state_machine_type=stepfunctions.StateMachineType.EXPRESS\n)\n\napigateway.StepFunctionsRestApi(self, \"StepFunctionsRestApi\",\n    deploy=True,\n    state_machine=state_machine\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = new StateMachine(this, \"StateMachine\", new StateMachineProps {\n    Definition = stateMachineDefinition,\n    StateMachineType = StateMachineType.EXPRESS\n});\n\nnew StepFunctionsRestApi(this, \"StepFunctionsRestApi\", new StepFunctionsRestApiProps {\n    Deploy = true,\n    StateMachine = stateMachine\n});",
          "version": "1"
        },
        "java": {
          "source": "Pass stateMachineDefinition = new Pass(this, \"PassState\");\n\nIStateMachine stateMachine = StateMachine.Builder.create(this, \"StateMachine\")\n        .definition(stateMachineDefinition)\n        .stateMachineType(StateMachineType.EXPRESS)\n        .build();\n\nStepFunctionsRestApi.Builder.create(this, \"StepFunctionsRestApi\")\n        .deploy(true)\n        .stateMachine(stateMachine)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.StepFunctionsRestApi",
        "@aws-cdk/aws-apigateway.StepFunctionsRestApiProps",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.StateMachineType",
        "@aws-cdk/aws-stepfunctions.StateMachineType#EXPRESS"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stateMachineDefinition = new stepfunctions.Pass(this, 'PassState');\n\nconst stateMachine: stepfunctions.IStateMachine = new stepfunctions.StateMachine(this, 'StateMachine', {\n  definition: stateMachineDefinition,\n  stateMachineType: stepfunctions.StateMachineType.EXPRESS,\n});\n\nnew apigateway.StepFunctionsRestApi(this, 'StepFunctionsRestApi', {\n  deploy: true,\n  stateMachine: stateMachine,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 19,
        "104": 3,
        "106": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 5,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "a02c88ccf3998f1830d820178346d518087063ad6908362e2d21fd0e755e69e1"
    },
    "926997ad9016b8244db93f09e23663d985897208c52a3132dcadcf9eb4c38030": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.ThrottleSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9d95499536351ae41edde7e08a2a96b4d7cae8f745ea626735c7ca00a9d704"
    },
    "2e5877fc79981238745809cfb8b7d899b16a3b0a897b07010744e3fa3fa73d1c": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.TokenAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a1c71eb30cd3fa1a11c3c0ff4418bb5e6caa80399e98ef9fa504d49d24069ed4"
    },
    "6256f69d6f0d1acd02f709b99b64782d57e62d746699e2d75de054e778119102": {
      "translations": {
        "python": {
          "source": "# auth_fn is of type Function\n# books is of type Resource\n\n\nauth = apigateway.TokenAuthorizer(self, \"booksAuthorizer\",\n    handler=auth_fn\n)\n\nbooks.add_method(\"GET\", apigateway.HttpIntegration(\"http://amazon.com\"),\n    authorizer=auth\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = new TokenAuthorizer(this, \"booksAuthorizer\", new TokenAuthorizerProps {\n    Handler = authFn\n});\n\nbooks.AddMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), new MethodOptions {\n    Authorizer = auth\n});",
          "version": "1"
        },
        "java": {
          "source": "Function authFn;\nResource books;\n\n\nTokenAuthorizer auth = TokenAuthorizer.Builder.create(this, \"booksAuthorizer\")\n        .handler(authFn)\n        .build();\n\nbooks.addMethod(\"GET\", new HttpIntegration(\"http://amazon.com\"), MethodOptions.builder()\n        .authorizer(auth)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.TokenAuthorizerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.HttpIntegration",
        "@aws-cdk/aws-apigateway.IAuthorizer",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.TokenAuthorizer",
        "@aws-cdk/aws-apigateway.TokenAuthorizerProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const authFn: lambda.Function;\ndeclare const books: apigateway.Resource;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst auth = new apigateway.TokenAuthorizer(this, 'booksAuthorizer', {\n  handler: authFn\n});\n\nbooks.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {\n  authorizer: auth\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a1c71eb30cd3fa1a11c3c0ff4418bb5e6caa80399e98ef9fa504d49d24069ed4"
    },
    "02a22f2b10f6a848b5cee6646b7970c33a9b18c659f34d5eb247ae7100ccf5e2": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlan"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9d95499536351ae41edde7e08a2a96b4d7cae8f745ea626735c7ca00a9d704"
    },
    "6e1c6762209b1a775d7b9a19397853278f9e0f78e90de7094667c6e8048f8331": {
      "translations": {
        "python": {
          "source": "# plan is of type UsagePlan\n# api is of type RestApi\n# echo_method is of type Method\n\n\nplan.add_api_stage(\n    stage=api.deployment_stage,\n    throttle=[apigateway.ThrottlingPerMethod(\n        method=echo_method,\n        throttle=apigateway.ThrottleSettings(\n            rate_limit=10,\n            burst_limit=2\n        )\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.AddApiStage(new UsagePlanPerApiStage {\n    Stage = api.DeploymentStage,\n    Throttle = new [] { new ThrottlingPerMethod {\n        Method = echoMethod,\n        Throttle = new ThrottleSettings {\n            RateLimit = 10,\n            BurstLimit = 2\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "UsagePlan plan;\nRestApi api;\nMethod echoMethod;\n\n\nplan.addApiStage(UsagePlanPerApiStage.builder()\n        .stage(api.getDeploymentStage())\n        .throttle(List.of(ThrottlingPerMethod.builder()\n                .method(echoMethod)\n                .throttle(ThrottleSettings.builder()\n                        .rateLimit(10)\n                        .burstLimit(2)\n                        .build())\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.RestApiBase#deploymentStage",
        "@aws-cdk/aws-apigateway.Stage",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan#addApiStage",
        "@aws-cdk/aws-apigateway.UsagePlanPerApiStage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const plan: apigateway.UsagePlan;\ndeclare const api: apigateway.RestApi;\ndeclare const echoMethod: apigateway.Method;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nplan.addApiStage({\n  stage: api.deploymentStage,\n  throttle: [\n    {\n      method: echoMethod,\n      throttle: {\n        rateLimit: 10,\n        burstLimit: 2\n      }\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 20,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "c086c75c64818c021441c9037de914fc69cf66e528a274f788ad33208fe5bfed"
    },
    "730bb784f82e2a82e9b4231e983591ce3993b5ab72a787d746ae21ecc62e4b62": {
      "translations": {
        "python": {
          "source": "# integration is of type LambdaIntegration\n\n\napi = apigateway.RestApi(self, \"hello-api\")\n\nv1 = api.root.add_resource(\"v1\")\necho = v1.add_resource(\"echo\")\necho_method = echo.add_method(\"GET\", integration, api_key_required=True)\n\nplan = api.add_usage_plan(\"UsagePlan\",\n    name=\"Easy\",\n    throttle=apigateway.ThrottleSettings(\n        rate_limit=10,\n        burst_limit=2\n    )\n)\n\nkey = api.add_api_key(\"ApiKey\")\nplan.add_api_key(key)",
          "version": "1"
        },
        "csharp": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.Root.AddResource(\"v1\");\nResource echo = v1.AddResource(\"echo\");\nMethod echoMethod = echo.AddMethod(\"GET\", integration, new MethodOptions { ApiKeyRequired = true });\n\nUsagePlan plan = api.AddUsagePlan(\"UsagePlan\", new UsagePlanProps {\n    Name = \"Easy\",\n    Throttle = new ThrottleSettings {\n        RateLimit = 10,\n        BurstLimit = 2\n    }\n});\n\nIApiKey key = api.AddApiKey(\"ApiKey\");\nplan.AddApiKey(key);",
          "version": "1"
        },
        "java": {
          "source": "LambdaIntegration integration;\n\n\nRestApi api = new RestApi(this, \"hello-api\");\n\nResource v1 = api.root.addResource(\"v1\");\nResource echo = v1.addResource(\"echo\");\nMethod echoMethod = echo.addMethod(\"GET\", integration, MethodOptions.builder().apiKeyRequired(true).build());\n\nUsagePlan plan = api.addUsagePlan(\"UsagePlan\", UsagePlanProps.builder()\n        .name(\"Easy\")\n        .throttle(ThrottleSettings.builder()\n                .rateLimit(10)\n                .burstLimit(2)\n                .build())\n        .build());\n\nIApiKey key = api.addApiKey(\"ApiKey\");\nplan.addApiKey(key);",
          "version": "1"
        },
        "$": {
          "source": "declare const integration: apigateway.LambdaIntegration;\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.UsagePlanProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.IApiKey",
        "@aws-cdk/aws-apigateway.IResource#addResource",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.Method",
        "@aws-cdk/aws-apigateway.MethodOptions",
        "@aws-cdk/aws-apigateway.Resource",
        "@aws-cdk/aws-apigateway.ResourceBase#addMethod",
        "@aws-cdk/aws-apigateway.ResourceBase#addResource",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-apigateway.RestApi#root",
        "@aws-cdk/aws-apigateway.RestApiBase#addApiKey",
        "@aws-cdk/aws-apigateway.RestApiBase#addUsagePlan",
        "@aws-cdk/aws-apigateway.ThrottleSettings",
        "@aws-cdk/aws-apigateway.UsagePlan",
        "@aws-cdk/aws-apigateway.UsagePlanProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const integration: apigateway.LambdaIntegration;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst api = new apigateway.RestApi(this, 'hello-api');\n\nconst v1 = api.root.addResource('v1');\nconst echo = v1.addResource('echo');\nconst echoMethod = echo.addMethod('GET', integration, { apiKeyRequired: true });\n\nconst plan = api.addUsagePlan('UsagePlan', {\n  name: 'Easy',\n  throttle: {\n    rateLimit: 10,\n    burstLimit: 2\n  }\n});\n\nconst key = api.addApiKey('ApiKey');\nplan.addApiKey(key);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 31,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 6,
        "197": 1,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "2d9d95499536351ae41edde7e08a2a96b4d7cae8f745ea626735c7ca00a9d704"
    },
    "b932fae1f0d5cfcd091b51372e407cdce1fff0079ec4d808b34b22b98bb84c4b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.VpcLink"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    },
    "2bee19bb48189227aa793b17a134808a0a604d46aee1c7e0b2ea43ae8dbf4a69": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nnlb = elbv2.NetworkLoadBalancer(self, \"NLB\",\n    vpc=vpc\n)\nlink = apigateway.VpcLink(self, \"link\",\n    targets=[nlb]\n)\n\nintegration = apigateway.Integration(\n    type=apigateway.IntegrationType.HTTP_PROXY,\n    options=apigateway.IntegrationOptions(\n        connection_type=apigateway.ConnectionType.VPC_LINK,\n        vpc_link=link\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"NLB\", new NetworkLoadBalancerProps {\n    Vpc = vpc\n});\nVpcLink link = new VpcLink(this, \"link\", new VpcLinkProps {\n    Targets = new [] { nlb }\n});\n\nIntegration integration = new Integration(new IntegrationProps {\n    Type = IntegrationType.HTTP_PROXY,\n    Options = new IntegrationOptions {\n        ConnectionType = ConnectionType.VPC_LINK,\n        VpcLink = link\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"NLB\")\n        .vpc(vpc)\n        .build();\nVpcLink link = VpcLink.Builder.create(this, \"link\")\n        .targets(List.of(nlb))\n        .build();\n\nIntegration integration = Integration.Builder.create()\n        .type(IntegrationType.HTTP_PROXY)\n        .options(IntegrationOptions.builder()\n                .connectionType(ConnectionType.VPC_LINK)\n                .vpcLink(link)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigateway.VpcLinkProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.ConnectionType",
        "@aws-cdk/aws-apigateway.ConnectionType#VPC_LINK",
        "@aws-cdk/aws-apigateway.IVpcLink",
        "@aws-cdk/aws-apigateway.Integration",
        "@aws-cdk/aws-apigateway.IntegrationOptions",
        "@aws-cdk/aws-apigateway.IntegrationProps",
        "@aws-cdk/aws-apigateway.IntegrationType",
        "@aws-cdk/aws-apigateway.IntegrationType#HTTP_PROXY",
        "@aws-cdk/aws-apigateway.VpcLink",
        "@aws-cdk/aws-apigateway.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport apigateway = require('@aws-cdk/aws-apigateway');\nimport cognito = require('@aws-cdk/aws-cognito');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport iam = require('@aws-cdk/aws-iam');\nimport s3 = require('@aws-cdk/aws-s3');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport logs = require('@aws-cdk/aws-logs');\nimport stepfunctions = require('@aws-cdk/aws-stepfunctions');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'NLB', {\n  vpc,\n});\nconst link = new apigateway.VpcLink(this, 'link', {\n  targets: [nlb],\n});\n\nconst integration = new apigateway.Integration({\n  type: apigateway.IntegrationType.HTTP_PROXY,\n  options: {\n    connectionType: apigateway.ConnectionType.VPC_LINK,\n    vpcLink: link,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 27,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 8,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd052197e49160dd0be4a8236f9b89cec7dbd700284db6985ff9361bb4f0d8cd"
    }
  }
}
