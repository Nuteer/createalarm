{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "7e43975d2fe435259a55e3757c628c7e7d2c2e2f33581a3b125779e1f716c77e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_autoscaling import AutoScalingGroup\n# asg is of type AutoScalingGroup\n\n# vpc is of type Vpc\n\n\n# Create the load balancer in a VPC. 'internetFacing' is 'false'\n# by default, which creates an internal load balancer.\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\n# Add a listener and open up the load balancer's security group\n# to the world.\nlistener = lb.add_listener(\"Listener\",\n    port=80,\n\n    # 'open: true' is the default, you can leave it out if you want. Set it\n    # to 'false' and use `listener.connections` if you want to be selective\n    # about who can access the load balancer.\n    open=True\n)\n\n# Create an AutoScaling group and add it as a load balancing\n# target to the listener.\nlistener.add_targets(\"ApplicationFleet\",\n    port=8080,\n    targets=[asg]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\nAutoScalingGroup asg;\n\nVpc vpc;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps {\n    Port = 80,\n\n    // 'open: true' is the default, you can leave it out if you want. Set it\n    // to 'false' and use `listener.connections` if you want to be selective\n    // about who can access the load balancer.\n    Open = true\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.AddTargets(\"ApplicationFleet\", new AddApplicationTargetsProps {\n    Port = 8080,\n    Targets = new [] { asg }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.AutoScalingGroup;\nAutoScalingGroup asg;\n\nVpc vpc;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder()\n        .port(80)\n\n        // 'open: true' is the default, you can leave it out if you want. Set it\n        // to 'false' and use `listener.connections` if you want to be selective\n        // about who can access the load balancer.\n        .open(true)\n        .build());\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets(\"ApplicationFleet\", AddApplicationTargetsProps.builder()\n        .port(8080)\n        .targets(List.of(asg))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { AutoScalingGroup } from '@aws-cdk/aws-autoscaling';\ndeclare const asg: AutoScalingGroup;\n\ndeclare const vpc: ec2.Vpc;\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nconst listener = lb.addListener('Listener', {\n  port: 80,\n\n  // 'open: true' is the default, you can leave it out if you want. Set it\n  // to 'false' and use `listener.connections` if you want to be selective\n  // about who can access the load balancer.\n  open: true,\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets('ApplicationFleet', {\n  port: 8080,\n  targets: [asg]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { AutoScalingGroup } from '@aws-cdk/aws-autoscaling';\ndeclare const asg: AutoScalingGroup;\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nconst listener = lb.addListener('Listener', {\n  port: 80,\n\n  // 'open: true' is the default, you can leave it out if you want. Set it\n  // to 'false' and use `listener.connections` if you want to be selective\n  // about who can access the load balancer.\n  open: true,\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets('ApplicationFleet', {\n  port: 8080,\n  targets: [asg]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 21,
        "104": 1,
        "106": 2,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "018f37c5b48e8c9d3e8a76a70bf699b024367d340e57c6ea87b3bdea6eda8880"
    },
    "bd0ff211528e7be1e8299635806e20a025ea0f70f2207dff5e8d64c928a516fb": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\nsecurity_group1 = ec2.SecurityGroup(self, \"SecurityGroup1\", vpc=vpc)\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True,\n    security_group=security_group1\n)\n\nsecurity_group2 = ec2.SecurityGroup(self, \"SecurityGroup2\", vpc=vpc)\nlb.add_security_group(security_group2)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nSecurityGroup securityGroup1 = new SecurityGroup(this, \"SecurityGroup1\", new SecurityGroupProps { Vpc = vpc });\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true,\n    SecurityGroup = securityGroup1\n});\n\nSecurityGroup securityGroup2 = new SecurityGroup(this, \"SecurityGroup2\", new SecurityGroupProps { Vpc = vpc });\nlb.AddSecurityGroup(securityGroup2);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nSecurityGroup securityGroup1 = SecurityGroup.Builder.create(this, \"SecurityGroup1\").vpc(vpc).build();\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .securityGroup(securityGroup1)\n        .build();\n\nSecurityGroup securityGroup2 = SecurityGroup.Builder.create(this, \"SecurityGroup2\").vpc(vpc).build();\nlb.addSecurityGroup(securityGroup2);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst securityGroup1 = new ec2.SecurityGroup(this, 'SecurityGroup1', { vpc });\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  securityGroup: securityGroup1, // Optional - will be automatically created otherwise\n});\n\nconst securityGroup2 = new ec2.SecurityGroup(this, 'SecurityGroup2', { vpc });\nlb.addSecurityGroup(securityGroup2);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 66
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addSecurityGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst securityGroup1 = new ec2.SecurityGroup(this, 'SecurityGroup1', { vpc });\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true,\n  securityGroup: securityGroup1, // Optional - will be automatically created otherwise\n});\n\nconst securityGroup2 = new ec2.SecurityGroup(this, 'SecurityGroup2', { vpc });\nlb.addSecurityGroup(securityGroup2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e5663545b5eda02ec05d7242d139d863e8448d4b5e4ebacd8e9190075cca5621"
    },
    "9c40d5aef7468167ed57f00deb4801b323ded0a4bddcedcee071de092260632d": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# asg is of type AutoScalingGroup\n\n\nlistener.add_targets(\"Example.Com Fleet\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.host_headers([\"example.com\"]),\n        elbv2.ListenerCondition.path_patterns([\"/ok\", \"/path\"])\n    ],\n    port=8080,\n    targets=[asg]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.AddTargets(\"Example.Com Fleet\", new AddApplicationTargetsProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.HostHeaders(new [] { \"example.com\" }), ListenerCondition.PathPatterns(new [] { \"/ok\", \"/path\" }) },\n    Port = 8080,\n    Targets = new [] { asg }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.addTargets(\"Example.Com Fleet\", AddApplicationTargetsProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.hostHeaders(List.of(\"example.com\")), ListenerCondition.pathPatterns(List.of(\"/ok\", \"/path\"))))\n        .port(8080)\n        .targets(List.of(asg))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n\nlistener.addTargets('Example.Com Fleet', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.hostHeaders(['example.com']),\n    elbv2.ListenerCondition.pathPatterns(['/ok', '/path']),\n  ],\n  port: 8080,\n  targets: [asg]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 87
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#hostHeaders",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addTargets('Example.Com Fleet', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.hostHeaders(['example.com']),\n    elbv2.ListenerCondition.pathPatterns(['/ok', '/path']),\n  ],\n  port: 8080,\n  targets: [asg]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 4,
        "193": 1,
        "194": 5,
        "196": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c1999b2ae21fe18dc7919fcc5a0c0c9a579bf5e2701ea32ee9192318fc89b6fe"
    },
    "68a3c42ba64da314fdecf1e8f0d3e8967dfa8b8a528917efe95de05924824209": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n\n\nlistener.add_action(\"Fixed\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.path_patterns([\"/ok\"])\n    ],\n    action=elbv2.ListenerAction.fixed_response(200,\n        content_type=elbv2.ContentType.TEXT_PLAIN,\n        message_body=\"OK\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\n\n\nlistener.AddAction(\"Fixed\", new AddApplicationActionProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.PathPatterns(new [] { \"/ok\" }) },\n    Action = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n        ContentType = ContentType.TEXT_PLAIN,\n        MessageBody = \"OK\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\n\n\nlistener.addAction(\"Fixed\", AddApplicationActionProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.pathPatterns(List.of(\"/ok\"))))\n        .action(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                .contentType(ContentType.TEXT_PLAIN)\n                .messageBody(\"OK\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 152
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType#TEXT_PLAIN",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 19,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1eeb8a99cf7a41d421a225d5b9ace952ec3b32d0c073987f8f44956f460aae42"
    },
    "6f3fc0bbb8ecb26cab5408692ad6961876a8cd2257bde96f8ab6ec22b0a61436": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# my_target_group is of type ApplicationTargetGroup\n\n\nlistener.add_action(\"DefaultAction\",\n    action=elbv2.ListenerAction.authenticate_oidc(\n        authorization_endpoint=\"https://example.com/openid\",\n        # Other OIDC properties here\n        client_id=\"...\",\n        client_secret=SecretValue.secrets_manager(\"...\"),\n        issuer=\"...\",\n        token_endpoint=\"...\",\n        user_info_endpoint=\"...\",\n\n        # Next\n        next=elbv2.ListenerAction.forward([my_target_group])\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.AddAction(\"DefaultAction\", new AddApplicationActionProps {\n    Action = ListenerAction.AuthenticateOidc(new AuthenticateOidcOptions {\n        AuthorizationEndpoint = \"https://example.com/openid\",\n        // Other OIDC properties here\n        ClientId = \"...\",\n        ClientSecret = SecretValue.SecretsManager(\"...\"),\n        Issuer = \"...\",\n        TokenEndpoint = \"...\",\n        UserInfoEndpoint = \"...\",\n\n        // Next\n        Next = ListenerAction.Forward(new [] { myTargetGroup })\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.addAction(\"DefaultAction\", AddApplicationActionProps.builder()\n        .action(ListenerAction.authenticateOidc(AuthenticateOidcOptions.builder()\n                .authorizationEndpoint(\"https://example.com/openid\")\n                // Other OIDC properties here\n                .clientId(\"...\")\n                .clientSecret(SecretValue.secretsManager(\"...\"))\n                .issuer(\"...\")\n                .tokenEndpoint(\"...\")\n                .userInfoEndpoint(\"...\")\n\n                // Next\n                .next(ListenerAction.forward(List.of(myTargetGroup)))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 169
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.AuthenticateOidcOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#authenticateOidc",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#forward",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3ebd07adeba14f825d6046e0427b1d7b8fb513cac5b6deac0dcdbd340c4aa7f7"
    },
    "e9316fc5c463b8726b9993c460661ae3f2b13a0ac48b51edd9219f1e465c72f0": {
      "translations": {
        "python": {
          "source": "# lb is of type ApplicationLoadBalancer\n\n\nlb.add_redirect(\n    source_protocol=elbv2.ApplicationProtocol.HTTPS,\n    source_port=8443,\n    target_protocol=elbv2.ApplicationProtocol.HTTP,\n    target_port=8080\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer lb;\n\n\nlb.AddRedirect(new ApplicationLoadBalancerRedirectConfig {\n    SourceProtocol = ApplicationProtocol.HTTPS,\n    SourcePort = 8443,\n    TargetProtocol = ApplicationProtocol.HTTP,\n    TargetPort = 8080\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer lb;\n\n\nlb.addRedirect(ApplicationLoadBalancerRedirectConfig.builder()\n        .sourceProtocol(ApplicationProtocol.HTTPS)\n        .sourcePort(8443)\n        .targetProtocol(ApplicationProtocol.HTTP)\n        .targetPort(8080)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const lb: elbv2.ApplicationLoadBalancer;\n\nlb.addRedirect({\n  sourceProtocol: elbv2.ApplicationProtocol.HTTPS,\n  sourcePort: 8443,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  targetPort: 8080,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 191
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addRedirect",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerRedirectConfig",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlb.addRedirect({\n  sourceProtocol: elbv2.ApplicationProtocol.HTTPS,\n  sourcePort: 8443,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  targetPort: 8080,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "23538472f40cbdd5f834d1ee2fcc3e53d3c9e074969264a2b4621b7447742403"
    },
    "c2c01d8285da31ab7d22ab3b868f2e5988e37e89f3a3fae09306d848db946ea3": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# asg is of type AutoScalingGroup\n\n\n# Create the load balancer in a VPC. 'internetFacing' is 'false'\n# by default, which creates an internal load balancer.\nlb = elbv2.NetworkLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\n# Add a listener on a particular port.\nlistener = lb.add_listener(\"Listener\",\n    port=443\n)\n\n# Add targets on a particular port.\nlistener.add_targets(\"AppFleet\",\n    port=443,\n    targets=[asg]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nAutoScalingGroup asg;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"LB\", new NetworkLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\n\n// Add a listener on a particular port.\nNetworkListener listener = lb.AddListener(\"Listener\", new BaseNetworkListenerProps {\n    Port = 443\n});\n\n// Add targets on a particular port.\nlistener.AddTargets(\"AppFleet\", new AddNetworkTargetsProps {\n    Port = 443,\n    Targets = new [] { asg }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nAutoScalingGroup asg;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\n\n// Add a listener on a particular port.\nNetworkListener listener = lb.addListener(\"Listener\", BaseNetworkListenerProps.builder()\n        .port(443)\n        .build());\n\n// Add targets on a particular port.\nlistener.addTargets(\"AppFleet\", AddNetworkTargetsProps.builder()\n        .port(443)\n        .targets(List.of(asg))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const asg: autoscaling.AutoScalingGroup;\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.NetworkLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener on a particular port.\nconst listener = lb.addListener('Listener', {\n  port: 443,\n});\n\n// Add targets on a particular port.\nlistener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 212
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.NetworkLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener on a particular port.\nconst listener = lb.addListener('Listener', {\n  port: 443,\n});\n\n// Add targets on a particular port.\nlistener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 20,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d28c2359051f930c68d4088b3eca93815495774e882d5dc73dea7966c882920b"
    },
    "36f4b1dca7225f8eb519fb0c7a0a670794c18b4e9a1ff30b76ff7d1a25083867": {
      "translations": {
        "python": {
          "source": "# listener is of type NetworkListener\n# asg1 is of type AutoScalingGroup\n# asg2 is of type AutoScalingGroup\n\n\ngroup = listener.add_targets(\"AppFleet\",\n    port=443,\n    targets=[asg1]\n)\n\ngroup.add_target(asg2)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkListener listener;\nAutoScalingGroup asg1;\nAutoScalingGroup asg2;\n\n\nNetworkTargetGroup group = listener.AddTargets(\"AppFleet\", new AddNetworkTargetsProps {\n    Port = 443,\n    Targets = new [] { asg1 }\n});\n\ngroup.AddTarget(asg2);",
          "version": "1"
        },
        "java": {
          "source": "NetworkListener listener;\nAutoScalingGroup asg1;\nAutoScalingGroup asg2;\n\n\nNetworkTargetGroup group = listener.addTargets(\"AppFleet\", AddNetworkTargetsProps.builder()\n        .port(443)\n        .targets(List.of(asg1))\n        .build());\n\ngroup.addTarget(asg2);",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.NetworkListener;\ndeclare const asg1: autoscaling.AutoScalingGroup;\ndeclare const asg2: autoscaling.AutoScalingGroup;\n\nconst group = listener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg1],\n});\n\ngroup.addTarget(asg2);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 258
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup#addTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.NetworkListener;\ndeclare const asg1: autoscaling.AutoScalingGroup;\ndeclare const asg2: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst group = listener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg1],\n});\n\ngroup.addTarget(asg2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 18,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ba408c0bce981dfcd99882b74a57dd9a83ea29b37c08f92d4c7932d505f00ef2"
    },
    "0b669f8221aa2ba1398eee89d80ea9fc3a2eb89f67cfee7eda86f6d46a6aa63b": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\n# Target group with duration-based stickiness with load-balancer generated cookie\ntg1 = elbv2.ApplicationTargetGroup(self, \"TG1\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    vpc=vpc\n)\n\n# Target group with application-based stickiness\ntg2 = elbv2.ApplicationTargetGroup(self, \"TG2\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    stickiness_cookie_name=\"MyDeliciousCookie\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = new ApplicationTargetGroup(this, \"TG1\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    Vpc = vpc\n});\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = new ApplicationTargetGroup(this, \"TG2\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    StickinessCookieName = \"MyDeliciousCookie\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = ApplicationTargetGroup.Builder.create(this, \"TG1\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .vpc(vpc)\n        .build();\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = ApplicationTargetGroup.Builder.create(this, \"TG2\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .stickinessCookieName(\"MyDeliciousCookie\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 277
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#INSTANCE",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1f1bb597c2b25a6955e7b9933204bd69293ffdca46f8f675fc7fda911849679d"
    },
    "7ae28d0f3fcd12c98019d074490bb8e54c98d8ede638aad63201f20db28d90a7": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ntg = elbv2.ApplicationTargetGroup(self, \"TG\",\n    target_type=elbv2.TargetType.IP,\n    port=50051,\n    protocol=elbv2.ApplicationProtocol.HTTP,\n    protocol_version=elbv2.ApplicationProtocolVersion.GRPC,\n    health_check=elbv2.HealthCheck(\n        enabled=True,\n        healthy_grpc_codes=\"0-99\"\n    ),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = new ApplicationTargetGroup(this, \"TG\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.IP,\n    Port = 50051,\n    Protocol = ApplicationProtocol.HTTP,\n    ProtocolVersion = ApplicationProtocolVersion.GRPC,\n    HealthCheck = new HealthCheck {\n        Enabled = true,\n        HealthyGrpcCodes = \"0-99\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = ApplicationTargetGroup.Builder.create(this, \"TG\")\n        .targetType(TargetType.IP)\n        .port(50051)\n        .protocol(ApplicationProtocol.HTTP)\n        .protocolVersion(ApplicationProtocolVersion.GRPC)\n        .healthCheck(HealthCheck.builder()\n                .enabled(true)\n                .healthyGrpcCodes(\"0-99\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 304
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion#GRPC",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#IP"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 23,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6643ccb81227be2742599c2d2f7d1d42b40fcfd304cabb46f5ac798fa1bd7c52"
    },
    "f4a9d4bcafebf26cd47447b9fb67d7944f70904586648b783a85834c74316f3c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\nimport aws_cdk.aws_elasticloadbalancingv2_targets as targets\n\n# lambda_function is of type Function\n# lb is of type ApplicationLoadBalancer\n\n\nlistener = lb.add_listener(\"Listener\", port=80)\nlistener.add_targets(\"Targets\",\n    targets=[targets.LambdaTarget(lambda_function)],\n\n    # For Lambda Targets, you need to explicitly enable health checks if you\n    # want them.\n    health_check=elbv2.HealthCheck(\n        enabled=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets;\n\nFunction lambdaFunction;\nApplicationLoadBalancer lb;\n\n\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"Targets\", new AddApplicationTargetsProps {\n    Targets = new [] { new LambdaTarget(lambdaFunction) },\n\n    // For Lambda Targets, you need to explicitly enable health checks if you\n    // want them.\n    HealthCheck = new HealthCheck {\n        Enabled = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.targets.*;\n\nFunction lambdaFunction;\nApplicationLoadBalancer lb;\n\n\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"Targets\", AddApplicationTargetsProps.builder()\n        .targets(List.of(new LambdaTarget(lambdaFunction)))\n\n        // For Lambda Targets, you need to explicitly enable health checks if you\n        // want them.\n        .healthCheck(HealthCheck.builder()\n                .enabled(true)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\nimport * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\n\ndeclare const lambdaFunction: lambda.Function;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n\nconst listener = lb.addListener('Listener', { port: 80 });\nlistener.addTargets('Targets', {\n  targets: [new targets.LambdaTarget(lambdaFunction)],\n\n  // For Lambda Targets, you need to explicitly enable health checks if you\n  // want them.\n  healthCheck: {\n    enabled: true,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 325
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2-targets.LambdaTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\n\ndeclare const lambdaFunction: lambda.Function;\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst listener = lb.addListener('Listener', { port: 80 });\nlistener.addTargets('Targets', {\n  targets: [new targets.LambdaTarget(lambdaFunction)],\n\n  // For Lambda Targets, you need to explicitly enable health checks if you\n  // want them.\n  healthCheck: {\n    enabled: true,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 20,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "cc01441f364706ead17c6566c302d4857b7587a0d54cd30631c0d91aa337046c"
    },
    "ef91646dc03be3b6099611dd518662957c5a1ba72ea0c7460b8fd84b928b481c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2_targets as targets\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as patterns\n\n# vpc is of type Vpc\n\n\ntask = ecs.FargateTaskDefinition(self, \"Task\", cpu=256, memory_limit_mi_b=512)\ntask.add_container(\"nginx\",\n    image=ecs.ContainerImage.from_registry(\"public.ecr.aws/nginx/nginx:latest\"),\n    port_mappings=[ecs.PortMapping(container_port=80)]\n)\n\nsvc = patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    vpc=vpc,\n    task_definition=task,\n    public_load_balancer=False\n)\n\nnlb = elbv2.NetworkLoadBalancer(self, \"Nlb\",\n    vpc=vpc,\n    cross_zone_enabled=True,\n    internet_facing=True\n)\n\nlistener = nlb.add_listener(\"listener\", port=80)\n\nlistener.add_targets(\"Targets\",\n    targets=[targets.AlbTarget(svc.load_balancer, 80)],\n    port=80\n)\n\nCfnOutput(self, \"NlbEndpoint\", value=f\"http://{nlb.loadBalancerDnsName}\")",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\n\nVpc vpc;\n\n\nFargateTaskDefinition task = new FargateTaskDefinition(this, \"Task\", new FargateTaskDefinitionProps { Cpu = 256, MemoryLimitMiB = 512 });\ntask.AddContainer(\"nginx\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"public.ecr.aws/nginx/nginx:latest\"),\n    PortMappings = new [] { new PortMapping { ContainerPort = 80 } }\n});\n\nApplicationLoadBalancedFargateService svc = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Vpc = vpc,\n    TaskDefinition = task,\n    PublicLoadBalancer = false\n});\n\nNetworkLoadBalancer nlb = new NetworkLoadBalancer(this, \"Nlb\", new NetworkLoadBalancerProps {\n    Vpc = vpc,\n    CrossZoneEnabled = true,\n    InternetFacing = true\n});\n\nNetworkListener listener = nlb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\n\nlistener.AddTargets(\"Targets\", new AddNetworkTargetsProps {\n    Targets = new [] { new AlbTarget(svc.LoadBalancer, 80) },\n    Port = 80\n});\n\nnew CfnOutput(this, \"NlbEndpoint\", new CfnOutputProps { Value = $\"http://{nlb.loadBalancerDnsName}\" });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.targets.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\n\nVpc vpc;\n\n\nFargateTaskDefinition task = FargateTaskDefinition.Builder.create(this, \"Task\").cpu(256).memoryLimitMiB(512).build();\ntask.addContainer(\"nginx\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"public.ecr.aws/nginx/nginx:latest\"))\n        .portMappings(List.of(PortMapping.builder().containerPort(80).build()))\n        .build());\n\nApplicationLoadBalancedFargateService svc = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .taskDefinition(task)\n        .publicLoadBalancer(false)\n        .build();\n\nNetworkLoadBalancer nlb = NetworkLoadBalancer.Builder.create(this, \"Nlb\")\n        .vpc(vpc)\n        .crossZoneEnabled(true)\n        .internetFacing(true)\n        .build();\n\nNetworkListener listener = nlb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\n\nlistener.addTargets(\"Targets\", AddNetworkTargetsProps.builder()\n        .targets(List.of(new AlbTarget(svc.getLoadBalancer(), 80)))\n        .port(80)\n        .build());\n\nCfnOutput.Builder.create(this, \"NlbEndpoint\").value(String.format(\"http://%s\", nlb.getLoadBalancerDnsName())).build();",
          "version": "1"
        },
        "$": {
          "source": "import * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const vpc: ec2.Vpc;\n\nconst task = new ecs.FargateTaskDefinition(this, 'Task', { cpu: 256, memoryLimitMiB: 512 });\ntask.addContainer('nginx', {\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest'),\n  portMappings: [{ containerPort: 80 }],\n});\n\nconst svc = new patterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  taskDefinition: task,\n  publicLoadBalancer: false,\n});\n\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'Nlb', {\n  vpc,\n  crossZoneEnabled: true,\n  internetFacing: true,\n});\n\nconst listener = nlb.addListener('listener', { port: 80 });\n\nlistener.addTargets('Targets', {\n  targets: [new targets.AlbTarget(svc.loadBalancer, 80)],\n  port: 80,\n});\n\nnew CfnOutput(this, 'NlbEndpoint', { value: `http://${nlb.loadBalancerDnsName}`})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 351
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-elasticloadbalancingv2-targets.AlbTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as targets from '@aws-cdk/aws-elasticloadbalancingv2-targets';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst task = new ecs.FargateTaskDefinition(this, 'Task', { cpu: 256, memoryLimitMiB: 512 });\ntask.addContainer('nginx', {\n  image: ecs.ContainerImage.fromRegistry('public.ecr.aws/nginx/nginx:latest'),\n  portMappings: [{ containerPort: 80 }],\n});\n\nconst svc = new patterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  taskDefinition: task,\n  publicLoadBalancer: false,\n});\n\nconst nlb = new elbv2.NetworkLoadBalancer(this, 'Nlb', {\n  vpc,\n  crossZoneEnabled: true,\n  internetFacing: true,\n});\n\nconst listener = nlb.addListener('listener', { port: 80 });\n\nlistener.addTargets('Targets', {\n  targets: [new targets.AlbTarget(svc.loadBalancer, 80)],\n  port: 80,\n});\n\nnew CfnOutput(this, 'NlbEndpoint', { value: `http://${nlb.loadBalancerDnsName}`})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 6,
        "10": 11,
        "15": 1,
        "17": 1,
        "75": 48,
        "91": 1,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 8,
        "194": 11,
        "196": 4,
        "197": 5,
        "211": 1,
        "221": 1,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 13,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "0ef8c3a77adf73de2ba615fbb6f7396ffd7141f9a0fd8ab966be151b9c9b6717"
    },
    "733e970fb460543fc101d429978ecf1b7ec71f7c9faa1e807d8152f2d3db22f6": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# asg is of type AutoScalingGroup\n\n\nlistener.add_targets(\"AppFleet\",\n    port=8080,\n    targets=[asg],\n    health_check=elbv2.HealthCheck(\n        path=\"/ping\",\n        interval=Duration.minutes(1)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.AddTargets(\"AppFleet\", new AddApplicationTargetsProps {\n    Port = 8080,\n    Targets = new [] { asg },\n    HealthCheck = new HealthCheck {\n        Path = \"/ping\",\n        Interval = Duration.Minutes(1)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.addTargets(\"AppFleet\", AddApplicationTargetsProps.builder()\n        .port(8080)\n        .targets(List.of(asg))\n        .healthCheck(HealthCheck.builder()\n                .path(\"/ping\")\n                .interval(Duration.minutes(1))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n\nlistener.addTargets('AppFleet', {\n  port: 8080,\n  targets: [asg],\n  healthCheck: {\n    path: '/ping',\n    interval: Duration.minutes(1),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 392
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addTargets('AppFleet', {\n  port: 8080,\n  targets: [asg],\n  healthCheck: {\n    path: '/ping',\n    interval: Duration.minutes(1),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 16,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "84fc74e81eb6a6b3f7b8e5dc981bd9b27a02f23ade56cb830a902767d8443970"
    },
    "861ec2916073415e1db047eb346320967bcc769a43fe4858367d2273619dd6da": {
      "translations": {
        "python": {
          "source": "# lb is of type ApplicationLoadBalancer\n# listener is of type ApplicationListener\n# asg is of type AutoScalingGroup\n\n\nlistener.add_targets(\"AppFleet\",\n    port=8080,\n    targets=[asg],\n    health_check=elbv2.HealthCheck(\n        port=\"8088\"\n    )\n)\n\nasg.connections.allow_from(lb, ec2.Port.tcp(8088))",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer lb;\nApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.AddTargets(\"AppFleet\", new AddApplicationTargetsProps {\n    Port = 8080,\n    Targets = new [] { asg },\n    HealthCheck = new HealthCheck {\n        Port = \"8088\"\n    }\n});\n\nasg.Connections.AllowFrom(lb, Port.Tcp(8088));",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer lb;\nApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.addTargets(\"AppFleet\", AddApplicationTargetsProps.builder()\n        .port(8080)\n        .targets(List.of(asg))\n        .healthCheck(HealthCheck.builder()\n                .port(\"8088\")\n                .build())\n        .build());\n\nasg.connections.allowFrom(lb, Port.tcp(8088));",
          "version": "1"
        },
        "$": {
          "source": "declare const lb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n\nlistener.addTargets('AppFleet', {\n  port: 8080,\n  targets: [asg],\n  healthCheck: {\n    port: '8088',\n  }\n});\n\nasg.connections.allowFrom(lb, ec2.Port.tcp(8088));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 414
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup#connections",
        "@aws-cdk/aws-ec2.Connections#allowFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.Port",
        "@aws-cdk/aws-ec2.Port#tcp",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const lb: elbv2.ApplicationLoadBalancer;\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addTargets('AppFleet', {\n  port: 8080,\n  targets: [asg],\n  healthCheck: {\n    port: '8088',\n  }\n});\n\nasg.connections.allowFrom(lb, ec2.Port.tcp(8088));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 23,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9fc6917347b01a559917f2e7e8c7c8d97bee3719d48cd8f117c1ae79ae8b6f73"
    },
    "1f347be06201ecf44d1e0fdbb1deb00a9014361fc32d944659c0e215844c6644": {
      "translations": {
        "python": {
          "source": "class MyTarget(elbv2.IApplicationLoadBalancerTarget):\n    def attach_to_application_target_group(self, target_group):\n        # If we need to add security group rules\n        # targetGroup.registerConnectable(...);\n        return elbv2.LoadBalancerTargetProps(\n            target_type=elbv2.TargetType.IP,\n            target_json={\"id\": \"1.2.3.4\", \"port\": 8080}\n        )",
          "version": "1"
        },
        "csharp": {
          "source": "class MyTarget : IApplicationLoadBalancerTarget\n{\n    public LoadBalancerTargetProps AttachToApplicationTargetGroup(ApplicationTargetGroup targetGroup)\n    {\n        // If we need to add security group rules\n        // targetGroup.registerConnectable(...);\n        return new LoadBalancerTargetProps {\n            TargetType = TargetType.IP,\n            TargetJson = new Struct { Id = \"1.2.3.4\", Port = 8080 }\n        };\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyTarget implements IApplicationLoadBalancerTarget {\n    public LoadBalancerTargetProps attachToApplicationTargetGroup(ApplicationTargetGroup targetGroup) {\n        // If we need to add security group rules\n        // targetGroup.registerConnectable(...);\n        return LoadBalancerTargetProps.builder()\n                .targetType(TargetType.IP)\n                .targetJson(Map.of(\"id\", \"1.2.3.4\", \"port\", 8080))\n                .build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyTarget implements elbv2.IApplicationLoadBalancerTarget {\n  public attachToApplicationTargetGroup(targetGroup: elbv2.ApplicationTargetGroup): elbv2.LoadBalancerTargetProps {\n    // If we need to add security group rules\n    // targetGroup.registerConnectable(...);\n    return {\n      targetType: elbv2.TargetType.IP,\n      targetJson: { id: '1.2.3.4', port: 8080 },\n    };\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 454
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#IP"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nclass MyTarget implements elbv2.IApplicationLoadBalancerTarget {\n  public attachToApplicationTargetGroup(targetGroup: elbv2.ApplicationTargetGroup): elbv2.LoadBalancerTargetProps {\n    // If we need to add security group rules\n    // targetGroup.registerConnectable(...);\n    return {\n      targetType: elbv2.TargetType.IP,\n      targetJson: { id: '1.2.3.4', port: 8080 },\n    };\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 16,
        "119": 1,
        "153": 2,
        "156": 1,
        "161": 1,
        "169": 2,
        "193": 2,
        "194": 3,
        "216": 1,
        "223": 1,
        "235": 1,
        "245": 1,
        "279": 1,
        "281": 4
      },
      "fqnsFingerprint": "493fd4bc8e6b4376cf95b26a29723bd3805ffd104894cf166d2d6e90ddd85fe8"
    },
    "d3845822b447aed0a76302368c31dfe108ba9f2abc4d62e12055e2c2cbf0678f": {
      "translations": {
        "python": {
          "source": "# resource is of type Resource\n# target_group is of type ApplicationTargetGroup\n\n\n# Make sure that the listener has been created, and so the TargetGroup\n# has been associated with the LoadBalancer, before 'resource' is created.\n\nNode.of(resource).add_dependency(target_group.load_balancer_attached)",
          "version": "1"
        },
        "csharp": {
          "source": "Resource resource;\nApplicationTargetGroup targetGroup;\n\n\n// Make sure that the listener has been created, and so the TargetGroup\n// has been associated with the LoadBalancer, before 'resource' is created.\n\nNode.Of(resource).AddDependency(targetGroup.LoadBalancerAttached);",
          "version": "1"
        },
        "java": {
          "source": "Resource resource;\nApplicationTargetGroup targetGroup;\n\n\n// Make sure that the listener has been created, and so the TargetGroup\n// has been associated with the LoadBalancer, before 'resource' is created.\n\nNode.of(resource).addDependency(targetGroup.getLoadBalancerAttached());",
          "version": "1"
        },
        "$": {
          "source": "declare const resource: Resource;\ndeclare const targetGroup: elbv2.ApplicationTargetGroup;\n\n// Make sure that the listener has been created, and so the TargetGroup\n// has been associated with the LoadBalancer, before 'resource' is created.\n\nNode.of(resource).addDependency(targetGroup.loadBalancerAttached);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 481
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const resource: Resource;\ndeclare const targetGroup: elbv2.ApplicationTargetGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Make sure that the listener has been created, and so the TargetGroup\n// has been associated with the LoadBalancer, before 'resource' is created.\n\nNode.of(resource).addDependency(targetGroup.loadBalancerAttached);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 2,
        "153": 1,
        "169": 2,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "525902bc492d2ccc24619b5f89af64f8aa76b3b8337eab40ba6745ad93051557": {
      "translations": {
        "python": {
          "source": "load_balancer = elbv2.ApplicationLoadBalancer.from_lookup(self, \"ALB\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.FromLookup(this, \"ALB\", new ApplicationLoadBalancerLookupOptions {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.fromLookup(this, \"ALB\", ApplicationLoadBalancerLookupOptions.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 515
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "04445c68cd98855fde28933e40ac0287548b2205358bb3f4e18b744a4308bf1c"
    },
    "7da030b3ef7c3fa89d8c7f8ff3638a94126a3904f81a0d09c24037c6c06f8b2c": {
      "translations": {
        "python": {
          "source": "load_balancer = elbv2.ApplicationLoadBalancer.from_lookup(self, \"ALB\",\n    load_balancer_tags={\n        # Finds a load balancer matching all tags.\n        \"some\": \"tag\",\n        \"someother\": \"tag\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.FromLookup(this, \"ALB\", new ApplicationLoadBalancerLookupOptions {\n    LoadBalancerTags = new Dictionary<string, string> {\n        // Finds a load balancer matching all tags.\n        { \"some\", \"tag\" },\n        { \"someother\", \"tag\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.fromLookup(this, \"ALB\", ApplicationLoadBalancerLookupOptions.builder()\n        .loadBalancerTags(Map.of(\n                // Finds a load balancer matching all tags.\n                \"some\", \"tag\",\n                \"someother\", \"tag\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerTags: {\n    // Finds a load balancer matching all tags.\n    some: 'tag',\n    someother: 'tag',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 523
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerTags: {\n    // Finds a load balancer matching all tags.\n    some: 'tag',\n    someother: 'tag',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "04445c68cd98855fde28933e40ac0287548b2205358bb3f4e18b744a4308bf1c"
    },
    "04a8613cbbccfce188d0a496c1ec6f6621ca45ca63a459a7911897d633045c42": {
      "translations": {
        "python": {
          "source": "listener = elbv2.ApplicationListener.from_lookup(self, \"ALBListener\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\",\n    listener_protocol=elbv2.ApplicationProtocol.HTTPS,\n    listener_port=443\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationListener listener = ApplicationListener.FromLookup(this, \"ALBListener\", new ApplicationListenerLookupOptions {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\",\n    ListenerProtocol = ApplicationProtocol.HTTPS,\n    ListenerPort = 443\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationListener listener = ApplicationListener.fromLookup(this, \"ALBListener\", ApplicationListenerLookupOptions.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\")\n        .listenerProtocol(ApplicationProtocol.HTTPS)\n        .listenerPort(443)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 549
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "7ad9349ee05978992bd54164da511c2a0c819d7bcf8d0f4ef616652462c75340"
    },
    "1234b7b2460288683746c3e06e5e908f8280980deeafdf65b227a2b91e4225ab": {
      "translations": {
        "python": {
          "source": "listener = elbv2.ApplicationListener.from_lookup(self, \"ALBListener\",\n    load_balancer_tags={\n        \"Cluster\": \"MyClusterName\"\n    },\n    listener_protocol=elbv2.ApplicationProtocol.HTTPS,\n    listener_port=443\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationListener listener = ApplicationListener.FromLookup(this, \"ALBListener\", new ApplicationListenerLookupOptions {\n    LoadBalancerTags = new Dictionary<string, string> {\n        { \"Cluster\", \"MyClusterName\" }\n    },\n    ListenerProtocol = ApplicationProtocol.HTTPS,\n    ListenerPort = 443\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationListener listener = ApplicationListener.fromLookup(this, \"ALBListener\", ApplicationListenerLookupOptions.builder()\n        .loadBalancerTags(Map.of(\n                \"Cluster\", \"MyClusterName\"))\n        .listenerProtocol(ApplicationProtocol.HTTPS)\n        .listenerPort(443)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 559
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "7ad9349ee05978992bd54164da511c2a0c819d7bcf8d0f4ef616652462c75340"
    },
    "c457265b5024aa5285d510e40a81039cd7df7ffeda8a432a7562b61f21c313cf": {
      "translations": {
        "python": {
          "source": "listener = elbv2.NetworkListener.from_lookup(self, \"ALBListener\",\n    load_balancer_tags={\n        \"Cluster\": \"MyClusterName\"\n    },\n    listener_protocol=elbv2.Protocol.TCP,\n    listener_port=12345\n)",
          "version": "1"
        },
        "csharp": {
          "source": "INetworkListener listener = NetworkListener.FromLookup(this, \"ALBListener\", new NetworkListenerLookupOptions {\n    LoadBalancerTags = new Dictionary<string, string> {\n        { \"Cluster\", \"MyClusterName\" }\n    },\n    ListenerProtocol = Protocol.TCP,\n    ListenerPort = 12345\n});",
          "version": "1"
        },
        "java": {
          "source": "INetworkListener listener = NetworkListener.fromLookup(this, \"ALBListener\", NetworkListenerLookupOptions.builder()\n        .loadBalancerTags(Map.of(\n                \"Cluster\", \"MyClusterName\"))\n        .listenerProtocol(Protocol.TCP)\n        .listenerPort(12345)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "field": {
          "field": "markdown",
          "line": 571
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol#TCP"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "db5eff966928f7ba622379cb5d4a423f798c0a47822a2c64aed7eb1f817ddfb6"
    },
    "7d7938c7db729c5c59e156f5358e732992a4d53164cbe51de5ed6f6985d21bdb": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n\n\nlistener.add_action(\"Fixed\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.path_patterns([\"/ok\"])\n    ],\n    action=elbv2.ListenerAction.fixed_response(200,\n        content_type=elbv2.ContentType.TEXT_PLAIN,\n        message_body=\"OK\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\n\n\nlistener.AddAction(\"Fixed\", new AddApplicationActionProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.PathPatterns(new [] { \"/ok\" }) },\n    Action = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n        ContentType = ContentType.TEXT_PLAIN,\n        MessageBody = \"OK\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\n\n\nlistener.addAction(\"Fixed\", AddApplicationActionProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.pathPatterns(List.of(\"/ok\"))))\n        .action(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                .contentType(ContentType.TEXT_PLAIN)\n                .messageBody(\"OK\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType#TEXT_PLAIN",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 19,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1eeb8a99cf7a41d421a225d5b9ace952ec3b32d0c073987f8f44956f460aae42"
    },
    "78265f4993999e1e8c9adf8dc88596bec37470db90cf66d9646603c8e6b8bb3d": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_autoscaling import AutoScalingGroup\n# asg is of type AutoScalingGroup\n\n# vpc is of type Vpc\n\n\n# Create the load balancer in a VPC. 'internetFacing' is 'false'\n# by default, which creates an internal load balancer.\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\n# Add a listener and open up the load balancer's security group\n# to the world.\nlistener = lb.add_listener(\"Listener\",\n    port=80,\n\n    # 'open: true' is the default, you can leave it out if you want. Set it\n    # to 'false' and use `listener.connections` if you want to be selective\n    # about who can access the load balancer.\n    open=True\n)\n\n# Create an AutoScaling group and add it as a load balancing\n# target to the listener.\nlistener.add_targets(\"ApplicationFleet\",\n    port=8080,\n    targets=[asg]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\nAutoScalingGroup asg;\n\nVpc vpc;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps {\n    Port = 80,\n\n    // 'open: true' is the default, you can leave it out if you want. Set it\n    // to 'false' and use `listener.connections` if you want to be selective\n    // about who can access the load balancer.\n    Open = true\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.AddTargets(\"ApplicationFleet\", new AddApplicationTargetsProps {\n    Port = 8080,\n    Targets = new [] { asg }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.AutoScalingGroup;\nAutoScalingGroup asg;\n\nVpc vpc;\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder()\n        .port(80)\n\n        // 'open: true' is the default, you can leave it out if you want. Set it\n        // to 'false' and use `listener.connections` if you want to be selective\n        // about who can access the load balancer.\n        .open(true)\n        .build());\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets(\"ApplicationFleet\", AddApplicationTargetsProps.builder()\n        .port(8080)\n        .targets(List.of(asg))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { AutoScalingGroup } from '@aws-cdk/aws-autoscaling';\ndeclare const asg: AutoScalingGroup;\n\ndeclare const vpc: ec2.Vpc;\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nconst listener = lb.addListener('Listener', {\n  port: 80,\n\n  // 'open: true' is the default, you can leave it out if you want. Set it\n  // to 'false' and use `listener.connections` if you want to be selective\n  // about who can access the load balancer.\n  open: true,\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets('ApplicationFleet', {\n  port: 8080,\n  targets: [asg]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { AutoScalingGroup } from '@aws-cdk/aws-autoscaling';\ndeclare const asg: AutoScalingGroup;\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create the load balancer in a VPC. 'internetFacing' is 'false'\n// by default, which creates an internal load balancer.\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n  vpc,\n  internetFacing: true\n});\n\n// Add a listener and open up the load balancer's security group\n// to the world.\nconst listener = lb.addListener('Listener', {\n  port: 80,\n\n  // 'open: true' is the default, you can leave it out if you want. Set it\n  // to 'false' and use `listener.connections` if you want to be selective\n  // about who can access the load balancer.\n  open: true,\n});\n\n// Create an AutoScaling group and add it as a load balancing\n// target to the listener.\nlistener.addTargets('ApplicationFleet', {\n  port: 8080,\n  targets: [asg]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 21,
        "104": 1,
        "106": 2,
        "130": 2,
        "153": 1,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "018f37c5b48e8c9d3e8a76a70bf699b024367d340e57c6ea87b3bdea6eda8880"
    },
    "41bb5162cd95944af9d3d709af4f9b134b9cbc48ec233f566560a214df941c85": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3103962cd2ab28f30a857e5560cdeb92f7e6f203392824839fe711dd936b013e"
    },
    "3b09273a3376d2b5ec1f245bd870bc49563296752cce7f2ea5050a3865367e28": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# alb is of type ApplicationLoadBalancer\n\nlistener = alb.add_listener(\"Listener\", port=80)\ntarget_group = listener.add_targets(\"Fleet\", port=80)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.application(target_group)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nApplicationTargetGroup targetGroup = listener.AddTargets(\"Fleet\", new AddApplicationTargetsProps { Port = 80 });\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Application(targetGroup)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nApplicationTargetGroup targetGroup = listener.addTargets(\"Fleet\", AddApplicationTargetsProps.builder().port(80).build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.application(targetGroup))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#application",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "604c1c5d26f100ab4ed3f65b92b5ead109cdf6a0182eadea3f5e2f8171d30314"
    },
    "cd4e52e51b6eeeda0df083fd354def09a74fc08b871dce4804bf33d32949c5ee": {
      "translations": {
        "python": {
          "source": "listener = elbv2.ApplicationListener.from_lookup(self, \"ALBListener\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\",\n    listener_protocol=elbv2.ApplicationProtocol.HTTPS,\n    listener_port=443\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationListener listener = ApplicationListener.FromLookup(this, \"ALBListener\", new ApplicationListenerLookupOptions {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\",\n    ListenerProtocol = ApplicationProtocol.HTTPS,\n    ListenerPort = 443\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationListener listener = ApplicationListener.fromLookup(this, \"ALBListener\", ApplicationListenerLookupOptions.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\")\n        .listenerProtocol(ApplicationProtocol.HTTPS)\n        .listenerPort(443)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListenerLookupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.ApplicationListener.fromLookup(this, 'ALBListener', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n  listenerProtocol: elbv2.ApplicationProtocol.HTTPS,\n  listenerPort: 443,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "7ad9349ee05978992bd54164da511c2a0c819d7bcf8d0f4ef616652462c75340"
    },
    "d18f923a795c960e88d4cd2768e70ca8d7bbebba14453a2b42d92106cbacf57c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.ApplicationLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"lb\", new ApplicationLoadBalancerProps { Vpc = vpc });\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpAlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b1245824066eacce98b64c31df15f008fefcab1b7e13cb2df094931b63fbc5ed"
    },
    "ec5f7757de81b0789ae2fe68fbb8dbd9d480a182992906676610a045888b3ba3": {
      "translations": {
        "python": {
          "source": "load_balancer = elbv2.ApplicationLoadBalancer.from_lookup(self, \"ALB\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.FromLookup(this, \"ALB\", new ApplicationLoadBalancerLookupOptions {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IApplicationLoadBalancer loadBalancer = ApplicationLoadBalancer.fromLookup(this, \"ALB\", ApplicationLoadBalancerLookupOptions.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst loadBalancer = elbv2.ApplicationLoadBalancer.fromLookup(this, 'ALB', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/app/my-load-balancer/1234567890123456',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "04445c68cd98855fde28933e40ac0287548b2205358bb3f4e18b744a4308bf1c"
    },
    "375c67dae7dac9135dcdbbd33d2cacc04b09494928d4ea50ad58d0d09843aa9d": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "12086c2e4623f341d86448b5dfb4baea1805ebcbeee00ca422074b0d03c2c268": {
      "translations": {
        "python": {
          "source": "# lb is of type ApplicationLoadBalancer\n\n\nlb.add_redirect(\n    source_protocol=elbv2.ApplicationProtocol.HTTPS,\n    source_port=8443,\n    target_protocol=elbv2.ApplicationProtocol.HTTP,\n    target_port=8080\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationLoadBalancer lb;\n\n\nlb.AddRedirect(new ApplicationLoadBalancerRedirectConfig {\n    SourceProtocol = ApplicationProtocol.HTTPS,\n    SourcePort = 8443,\n    TargetProtocol = ApplicationProtocol.HTTP,\n    TargetPort = 8080\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationLoadBalancer lb;\n\n\nlb.addRedirect(ApplicationLoadBalancerRedirectConfig.builder()\n        .sourceProtocol(ApplicationProtocol.HTTPS)\n        .sourcePort(8443)\n        .targetProtocol(ApplicationProtocol.HTTP)\n        .targetPort(8080)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const lb: elbv2.ApplicationLoadBalancer;\n\nlb.addRedirect({\n  sourceProtocol: elbv2.ApplicationProtocol.HTTPS,\n  sourcePort: 8443,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  targetPort: 8080,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerRedirectConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addRedirect",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerRedirectConfig",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlb.addRedirect({\n  sourceProtocol: elbv2.ApplicationProtocol.HTTPS,\n  sourcePort: 8443,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  targetPort: 8080,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "75": 15,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 5,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "23538472f40cbdd5f834d1ee2fcc3e53d3c9e074969264a2b4621b7447742403"
    },
    "fa8692e11f613ddfce120a65c13bb24541fa39de16eade15cc8adf54335b791b": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# service is of type BaseService\n\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 20,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "50612c573fb65e04f47912b303e964e91930481d5dc653a5c82e08dabe0c6d26"
    },
    "8da15628892553d0f895bc61054f6d2518f814c9623ef97bb9aaeeb4f9c4f4de": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ntg = elbv2.ApplicationTargetGroup(self, \"TG\",\n    target_type=elbv2.TargetType.IP,\n    port=50051,\n    protocol=elbv2.ApplicationProtocol.HTTP,\n    protocol_version=elbv2.ApplicationProtocolVersion.GRPC,\n    health_check=elbv2.HealthCheck(\n        enabled=True,\n        healthy_grpc_codes=\"0-99\"\n    ),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = new ApplicationTargetGroup(this, \"TG\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.IP,\n    Port = 50051,\n    Protocol = ApplicationProtocol.HTTP,\n    ProtocolVersion = ApplicationProtocolVersion.GRPC,\n    HealthCheck = new HealthCheck {\n        Enabled = true,\n        HealthyGrpcCodes = \"0-99\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = ApplicationTargetGroup.Builder.create(this, \"TG\")\n        .targetType(TargetType.IP)\n        .port(50051)\n        .protocol(ApplicationProtocol.HTTP)\n        .protocolVersion(ApplicationProtocolVersion.GRPC)\n        .healthCheck(HealthCheck.builder()\n                .enabled(true)\n                .healthyGrpcCodes(\"0-99\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion#GRPC",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#IP"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 23,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6643ccb81227be2742599c2d2f7d1d42b40fcfd304cabb46f5ac798fa1bd7c52"
    },
    "ba6f4c0b3124af1f044e9c8fa3d892cb3cba31477b04834d88b5cd62764b19a8": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\n# Target group with duration-based stickiness with load-balancer generated cookie\ntg1 = elbv2.ApplicationTargetGroup(self, \"TG1\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    vpc=vpc\n)\n\n# Target group with application-based stickiness\ntg2 = elbv2.ApplicationTargetGroup(self, \"TG2\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    stickiness_cookie_name=\"MyDeliciousCookie\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = new ApplicationTargetGroup(this, \"TG1\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    Vpc = vpc\n});\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = new ApplicationTargetGroup(this, \"TG2\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    StickinessCookieName = \"MyDeliciousCookie\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = ApplicationTargetGroup.Builder.create(this, \"TG1\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .vpc(vpc)\n        .build();\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = ApplicationTargetGroup.Builder.create(this, \"TG2\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .stickinessCookieName(\"MyDeliciousCookie\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#INSTANCE",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1f1bb597c2b25a6955e7b9933204bd69293ffdca46f8f675fc7fda911849679d"
    },
    "a4e9cc41ab82c5f301f3e43d2c43af33798ff796edefe4c3fc08a4a9cf5a7bb7": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\n# Target group with duration-based stickiness with load-balancer generated cookie\ntg1 = elbv2.ApplicationTargetGroup(self, \"TG1\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    vpc=vpc\n)\n\n# Target group with application-based stickiness\ntg2 = elbv2.ApplicationTargetGroup(self, \"TG2\",\n    target_type=elbv2.TargetType.INSTANCE,\n    port=80,\n    stickiness_cookie_duration=Duration.minutes(5),\n    stickiness_cookie_name=\"MyDeliciousCookie\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = new ApplicationTargetGroup(this, \"TG1\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    Vpc = vpc\n});\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = new ApplicationTargetGroup(this, \"TG2\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.INSTANCE,\n    Port = 80,\n    StickinessCookieDuration = Duration.Minutes(5),\n    StickinessCookieName = \"MyDeliciousCookie\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nApplicationTargetGroup tg1 = ApplicationTargetGroup.Builder.create(this, \"TG1\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .vpc(vpc)\n        .build();\n\n// Target group with application-based stickiness\nApplicationTargetGroup tg2 = ApplicationTargetGroup.Builder.create(this, \"TG2\")\n        .targetType(TargetType.INSTANCE)\n        .port(80)\n        .stickinessCookieDuration(Duration.minutes(5))\n        .stickinessCookieName(\"MyDeliciousCookie\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#INSTANCE",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Target group with duration-based stickiness with load-balancer generated cookie\nconst tg1 = new elbv2.ApplicationTargetGroup(this, 'TG1', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  vpc,\n});\n\n// Target group with application-based stickiness\nconst tg2 = new elbv2.ApplicationTargetGroup(this, 'TG2', {\n  targetType: elbv2.TargetType.INSTANCE,\n  port: 80,\n  stickinessCookieDuration: Duration.minutes(5),\n  stickinessCookieName: 'MyDeliciousCookie',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 3,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 8,
        "196": 2,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "1f1bb597c2b25a6955e7b9933204bd69293ffdca46f8f675fc7fda911849679d"
    },
    "04a35497b7d74228b5eb4dfed1946ab1e4f6ad8d40d495fb26d364fc4aa956c4": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# my_target_group is of type ApplicationTargetGroup\n\n\nlistener.add_action(\"DefaultAction\",\n    action=elbv2.ListenerAction.authenticate_oidc(\n        authorization_endpoint=\"https://example.com/openid\",\n        # Other OIDC properties here\n        client_id=\"...\",\n        client_secret=SecretValue.secrets_manager(\"...\"),\n        issuer=\"...\",\n        token_endpoint=\"...\",\n        user_info_endpoint=\"...\",\n\n        # Next\n        next=elbv2.ListenerAction.forward([my_target_group])\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.AddAction(\"DefaultAction\", new AddApplicationActionProps {\n    Action = ListenerAction.AuthenticateOidc(new AuthenticateOidcOptions {\n        AuthorizationEndpoint = \"https://example.com/openid\",\n        // Other OIDC properties here\n        ClientId = \"...\",\n        ClientSecret = SecretValue.SecretsManager(\"...\"),\n        Issuer = \"...\",\n        TokenEndpoint = \"...\",\n        UserInfoEndpoint = \"...\",\n\n        // Next\n        Next = ListenerAction.Forward(new [] { myTargetGroup })\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.addAction(\"DefaultAction\", AddApplicationActionProps.builder()\n        .action(ListenerAction.authenticateOidc(AuthenticateOidcOptions.builder()\n                .authorizationEndpoint(\"https://example.com/openid\")\n                // Other OIDC properties here\n                .clientId(\"...\")\n                .clientSecret(SecretValue.secretsManager(\"...\"))\n                .issuer(\"...\")\n                .tokenEndpoint(\"...\")\n                .userInfoEndpoint(\"...\")\n\n                // Next\n                .next(ListenerAction.forward(List.of(myTargetGroup)))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.AuthenticateOidcOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.AuthenticateOidcOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#authenticateOidc",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#forward",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3ebd07adeba14f825d6046e0427b1d7b8fb513cac5b6deac0dcdbd340c4aa7f7"
    },
    "d90e99910cad8dadc22a22f2606ee93f5416a4b1f265bde37afb60d997d4385b": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb is of type ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.MappingValue",
        "@aws-cdk/aws-apigatewayv2.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#removeHeader",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c5bd8363f207bb44b45de5087946313a0bdf0fb15cb9eae8c24c05c0fe80edc6"
    },
    "896dc5705339a3ed6bb634ed954ea30b29a8dc2fff6616ff55ba02d1a18c7bc7": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3103962cd2ab28f30a857e5560cdeb92f7e6f203392824839fe711dd936b013e"
    },
    "054a2c29a62ca6f09bda6a29420270570ac2d45c4b1a8806a417b953b50345d6": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n\n\nlistener.add_action(\"Fixed\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.path_patterns([\"/ok\"])\n    ],\n    action=elbv2.ListenerAction.fixed_response(200,\n        content_type=elbv2.ContentType.TEXT_PLAIN,\n        message_body=\"OK\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\n\n\nlistener.AddAction(\"Fixed\", new AddApplicationActionProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.PathPatterns(new [] { \"/ok\" }) },\n    Action = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n        ContentType = ContentType.TEXT_PLAIN,\n        MessageBody = \"OK\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\n\n\nlistener.addAction(\"Fixed\", AddApplicationActionProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.pathPatterns(List.of(\"/ok\"))))\n        .action(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                .contentType(ContentType.TEXT_PLAIN)\n                .messageBody(\"OK\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ContentType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType#TEXT_PLAIN",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 19,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1eeb8a99cf7a41d421a225d5b9ace952ec3b32d0c073987f8f44956f460aae42"
    },
    "10bcb8fbb87e98801d1fc16040a54f809cbba694acb2701b7888ba3cb59c688d": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n\n\nlistener.add_action(\"Fixed\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.path_patterns([\"/ok\"])\n    ],\n    action=elbv2.ListenerAction.fixed_response(200,\n        content_type=elbv2.ContentType.TEXT_PLAIN,\n        message_body=\"OK\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\n\n\nlistener.AddAction(\"Fixed\", new AddApplicationActionProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.PathPatterns(new [] { \"/ok\" }) },\n    Action = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n        ContentType = ContentType.TEXT_PLAIN,\n        MessageBody = \"OK\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\n\n\nlistener.addAction(\"Fixed\", AddApplicationActionProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.pathPatterns(List.of(\"/ok\"))))\n        .action(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                .contentType(ContentType.TEXT_PLAIN)\n                .messageBody(\"OK\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType",
        "@aws-cdk/aws-elasticloadbalancingv2.ContentType#TEXT_PLAIN",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('Fixed', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.pathPatterns(['/ok']),\n  ],\n  action: elbv2.ListenerAction.fixedResponse(200, {\n    contentType: elbv2.ContentType.TEXT_PLAIN,\n    messageBody: 'OK',\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 19,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1eeb8a99cf7a41d421a225d5b9ace952ec3b32d0c073987f8f44956f460aae42"
    },
    "9288d0d7097801d3032cb78436ce288bdf732c1ff5ea84ba59107b8f774a4e4c": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nload_balanced_fargate_service.target_group.configure_health_check(\n    path=\"/custom-health-path\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nloadBalancedFargateService.TargetGroup.ConfigureHealthCheck(new HealthCheck {\n    Path = \"/custom-health-path\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nloadBalancedFargateService.targetGroup.configureHealthCheck(HealthCheck.builder()\n        .path(\"/custom-health-path\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nloadBalancedFargateService.targetGroup.configureHealthCheck({\n  path: \"/custom-health-path\",\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase#targetGroup",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetGroupBase#configureHealthCheck"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nloadBalancedFargateService.targetGroup.configureHealthCheck({\n  path: \"/custom-health-path\",\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "b50269f27e1cc861ff72a27d3f6e700cdf6ed8abf43afb75311f7a568740ad46"
    },
    "4f4ff021d2dc3bd62a9f253e5586b9060fd737543f5f28fc425dbf7305e57d15": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# my_target_group is of type ApplicationTargetGroup\n\n\nlistener.add_action(\"DefaultAction\",\n    action=elbv2.ListenerAction.authenticate_oidc(\n        authorization_endpoint=\"https://example.com/openid\",\n        # Other OIDC properties here\n        client_id=\"...\",\n        client_secret=SecretValue.secrets_manager(\"...\"),\n        issuer=\"...\",\n        token_endpoint=\"...\",\n        user_info_endpoint=\"...\",\n\n        # Next\n        next=elbv2.ListenerAction.forward([my_target_group])\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.AddAction(\"DefaultAction\", new AddApplicationActionProps {\n    Action = ListenerAction.AuthenticateOidc(new AuthenticateOidcOptions {\n        AuthorizationEndpoint = \"https://example.com/openid\",\n        // Other OIDC properties here\n        ClientId = \"...\",\n        ClientSecret = SecretValue.SecretsManager(\"...\"),\n        Issuer = \"...\",\n        TokenEndpoint = \"...\",\n        UserInfoEndpoint = \"...\",\n\n        // Next\n        Next = ListenerAction.Forward(new [] { myTargetGroup })\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nApplicationTargetGroup myTargetGroup;\n\n\nlistener.addAction(\"DefaultAction\", AddApplicationActionProps.builder()\n        .action(ListenerAction.authenticateOidc(AuthenticateOidcOptions.builder()\n                .authorizationEndpoint(\"https://example.com/openid\")\n                // Other OIDC properties here\n                .clientId(\"...\")\n                .clientSecret(SecretValue.secretsManager(\"...\"))\n                .issuer(\"...\")\n                .tokenEndpoint(\"...\")\n                .userInfoEndpoint(\"...\")\n\n                // Next\n                .next(ListenerAction.forward(List.of(myTargetGroup)))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addAction",
        "@aws-cdk/aws-elasticloadbalancingv2.AuthenticateOidcOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#authenticateOidc",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#forward",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const myTargetGroup: elbv2.ApplicationTargetGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addAction('DefaultAction', {\n  action: elbv2.ListenerAction.authenticateOidc({\n    authorizationEndpoint: 'https://example.com/openid',\n    // Other OIDC properties here\n    clientId: '...',\n    clientSecret: SecretValue.secretsManager('...'),\n    issuer: '...',\n    tokenEndpoint: '...',\n    userInfoEndpoint: '...',\n\n    // Next\n    next: elbv2.ListenerAction.forward([myTargetGroup]),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 4,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3ebd07adeba14f825d6046e0427b1d7b8fb513cac5b6deac0dcdbd340c4aa7f7"
    },
    "85bdd151b0a6260d19184c50e3b24ac0c2ae68f8cdcea27b5497e0d2e5a3efd5": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# asg is of type AutoScalingGroup\n\n\nlistener.add_targets(\"Example.Com Fleet\",\n    priority=10,\n    conditions=[\n        elbv2.ListenerCondition.host_headers([\"example.com\"]),\n        elbv2.ListenerCondition.path_patterns([\"/ok\", \"/path\"])\n    ],\n    port=8080,\n    targets=[asg]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.AddTargets(\"Example.Com Fleet\", new AddApplicationTargetsProps {\n    Priority = 10,\n    Conditions = new [] { ListenerCondition.HostHeaders(new [] { \"example.com\" }), ListenerCondition.PathPatterns(new [] { \"/ok\", \"/path\" }) },\n    Port = 8080,\n    Targets = new [] { asg }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nAutoScalingGroup asg;\n\n\nlistener.addTargets(\"Example.Com Fleet\", AddApplicationTargetsProps.builder()\n        .priority(10)\n        .conditions(List.of(ListenerCondition.hostHeaders(List.of(\"example.com\")), ListenerCondition.pathPatterns(List.of(\"/ok\", \"/path\"))))\n        .port(8080)\n        .targets(List.of(asg))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n\nlistener.addTargets('Example.Com Fleet', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.hostHeaders(['example.com']),\n    elbv2.ListenerCondition.pathPatterns(['/ok', '/path']),\n  ],\n  port: 8080,\n  targets: [asg]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#hostHeaders",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerCondition#pathPatterns"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const asg: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nlistener.addTargets('Example.Com Fleet', {\n  priority: 10,\n  conditions: [\n    elbv2.ListenerCondition.hostHeaders(['example.com']),\n    elbv2.ListenerCondition.pathPatterns(['/ok', '/path']),\n  ],\n  port: 8080,\n  targets: [asg]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 19,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 4,
        "193": 1,
        "194": 5,
        "196": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "c1999b2ae21fe18dc7919fcc5a0c0c9a579bf5e2701ea32ee9192318fc89b6fe"
    },
    "91fe0421026b84cb39233fd30c59be24a0968dc18ebbd12da729768c4040ccea": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3103962cd2ab28f30a857e5560cdeb92f7e6f203392824839fe711dd936b013e"
    },
    "40308b0107e98d72240648237ad1e3560f7914a6d8ea92b96012a7c3d392383d": {
      "translations": {
        "python": {
          "source": "listener = elbv2.NetworkListener.from_lookup(self, \"ALBListener\",\n    load_balancer_tags={\n        \"Cluster\": \"MyClusterName\"\n    },\n    listener_protocol=elbv2.Protocol.TCP,\n    listener_port=12345\n)",
          "version": "1"
        },
        "csharp": {
          "source": "INetworkListener listener = NetworkListener.FromLookup(this, \"ALBListener\", new NetworkListenerLookupOptions {\n    LoadBalancerTags = new Dictionary<string, string> {\n        { \"Cluster\", \"MyClusterName\" }\n    },\n    ListenerProtocol = Protocol.TCP,\n    ListenerPort = 12345\n});",
          "version": "1"
        },
        "java": {
          "source": "INetworkListener listener = NetworkListener.fromLookup(this, \"ALBListener\", NetworkListenerLookupOptions.builder()\n        .loadBalancerTags(Map.of(\n                \"Cluster\", \"MyClusterName\"))\n        .listenerProtocol(Protocol.TCP)\n        .listenerPort(12345)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListenerLookupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol#TCP"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "db5eff966928f7ba622379cb5d4a423f798c0a47822a2c64aed7eb1f817ddfb6"
    },
    "943298483d99fa3c335d30acf9b2609acc57b8c10aad7e949f4edb0cc7da8098": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3103962cd2ab28f30a857e5560cdeb92f7e6f203392824839fe711dd936b013e"
    },
    "ab981d9d184a79d66b0c7251d4f27fe02b38db4fc63bc473590fe1f63f3cf677": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    },
    "9a30cc4c53001911dc53f5dfdedb68e1eba9d9dd211854f2175a1291e34923f8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3103962cd2ab28f30a857e5560cdeb92f7e6f203392824839fe711dd936b013e"
    },
    "124e048fb23bd981f1ec9c5487f4bb7b8f18b36655d1006c2a75d80eadddb437": {
      "translations": {
        "python": {
          "source": "# listener is of type NetworkListener\n# asg1 is of type AutoScalingGroup\n# asg2 is of type AutoScalingGroup\n\n\ngroup = listener.add_targets(\"AppFleet\",\n    port=443,\n    targets=[asg1]\n)\n\ngroup.add_target(asg2)",
          "version": "1"
        },
        "csharp": {
          "source": "NetworkListener listener;\nAutoScalingGroup asg1;\nAutoScalingGroup asg2;\n\n\nNetworkTargetGroup group = listener.AddTargets(\"AppFleet\", new AddNetworkTargetsProps {\n    Port = 443,\n    Targets = new [] { asg1 }\n});\n\ngroup.AddTarget(asg2);",
          "version": "1"
        },
        "java": {
          "source": "NetworkListener listener;\nAutoScalingGroup asg1;\nAutoScalingGroup asg2;\n\n\nNetworkTargetGroup group = listener.addTargets(\"AppFleet\", AddNetworkTargetsProps.builder()\n        .port(443)\n        .targets(List.of(asg1))\n        .build());\n\ngroup.addTarget(asg2);",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.NetworkListener;\ndeclare const asg1: autoscaling.AutoScalingGroup;\ndeclare const asg2: autoscaling.AutoScalingGroup;\n\nconst group = listener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg1],\n});\n\ngroup.addTarget(asg2);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup#addTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.NetworkListener;\ndeclare const asg1: autoscaling.AutoScalingGroup;\ndeclare const asg2: autoscaling.AutoScalingGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst group = listener.addTargets('AppFleet', {\n  port: 443,\n  targets: [asg1],\n});\n\ngroup.addTarget(asg2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 18,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ba408c0bce981dfcd99882b74a57dd9a83ea29b37c08f92d4c7932d505f00ef2"
    },
    "de726ba9a53e09aecdaaf9c9df124898b87e5e376e3b5562094b481a893b0d63": {
      "translations": {
        "python": {
          "source": "listener = elbv2.NetworkListener.from_lookup(self, \"ALBListener\",\n    load_balancer_tags={\n        \"Cluster\": \"MyClusterName\"\n    },\n    listener_protocol=elbv2.Protocol.TCP,\n    listener_port=12345\n)",
          "version": "1"
        },
        "csharp": {
          "source": "INetworkListener listener = NetworkListener.FromLookup(this, \"ALBListener\", new NetworkListenerLookupOptions {\n    LoadBalancerTags = new Dictionary<string, string> {\n        { \"Cluster\", \"MyClusterName\" }\n    },\n    ListenerProtocol = Protocol.TCP,\n    ListenerPort = 12345\n});",
          "version": "1"
        },
        "java": {
          "source": "INetworkListener listener = NetworkListener.fromLookup(this, \"ALBListener\", NetworkListenerLookupOptions.builder()\n        .loadBalancerTags(Map.of(\n                \"Cluster\", \"MyClusterName\"))\n        .listenerProtocol(Protocol.TCP)\n        .listenerPort(12345)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.Protocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#fromLookup",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListenerLookupOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol",
        "@aws-cdk/aws-elasticloadbalancingv2.Protocol#TCP"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst listener = elbv2.NetworkListener.fromLookup(this, 'ALBListener', {\n  loadBalancerTags: {\n    Cluster: 'MyClusterName',\n  },\n  listenerProtocol: elbv2.Protocol.TCP,\n  listenerPort: 12345,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "db5eff966928f7ba622379cb5d4a423f798c0a47822a2c64aed7eb1f817ddfb6"
    },
    "7e77c3c0e616776d1864cd5de1f4967b747394d8743defb52311df80020bcf2e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_route53 import HostedZone\nfrom aws_cdk.aws_certificatemanager import Certificate\nfrom aws_cdk.aws_elasticloadbalancingv2 import SslPolicy\n\n# vpc is of type Vpc\n# cluster is of type Cluster\n\n\ndomain_zone = HostedZone.from_lookup(self, \"Zone\", domain_name=\"example.com\")\ncertificate = Certificate.from_certificate_arn(self, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\")\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    vpc=vpc,\n    cluster=cluster,\n    certificate=certificate,\n    ssl_policy=SslPolicy.RECOMMENDED,\n    domain_name=\"api.example.com\",\n    domain_zone=domain_zone,\n    redirect_hTTP=True,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Route53;\nusing Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nVpc vpc;\nCluster cluster;\n\n\nIHostedZone domainZone = HostedZone.FromLookup(this, \"Zone\", new HostedZoneProviderProps { DomainName = \"example.com\" });\nICertificate certificate = Certificate.FromCertificateArn(this, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\");\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Vpc = vpc,\n    Cluster = cluster,\n    Certificate = certificate,\n    SslPolicy = SslPolicy.RECOMMENDED,\n    DomainName = \"api.example.com\",\n    DomainZone = domainZone,\n    RedirectHTTP = true,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.route53.HostedZone;\nimport software.amazon.awscdk.services.certificatemanager.Certificate;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.SslPolicy;\n\nVpc vpc;\nCluster cluster;\n\n\nIHostedZone domainZone = HostedZone.fromLookup(this, \"Zone\", HostedZoneProviderProps.builder().domainName(\"example.com\").build());\nICertificate certificate = Certificate.fromCertificateArn(this, \"Cert\", \"arn:aws:acm:us-east-1:123456:certificate/abcdefg\");\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .vpc(vpc)\n        .cluster(cluster)\n        .certificate(certificate)\n        .sslPolicy(SslPolicy.RECOMMENDED)\n        .domainName(\"api.example.com\")\n        .domainZone(domainZone)\n        .redirectHTTP(true)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HostedZone } from '@aws-cdk/aws-route53';\nimport { Certificate } from '@aws-cdk/aws-certificatemanager';\nimport { SslPolicy } from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst domainZone = HostedZone.fromLookup(this, 'Zone', { domainName: 'example.com' });\nconst certificate = Certificate.fromCertificateArn(this, 'Cert', 'arn:aws:acm:us-east-1:123456:certificate/abcdefg');\n\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  cluster,\n  certificate,\n  sslPolicy: SslPolicy.RECOMMENDED,\n  domainName: 'api.example.com',\n  domainZone,\n  redirectHTTP: true,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy",
        "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy#RECOMMENDED",
        "@aws-cdk/aws-route53.HostedZone#fromLookup",
        "@aws-cdk/aws-route53.HostedZoneProviderProps",
        "@aws-cdk/aws-route53.IHostedZone"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HostedZone } from '@aws-cdk/aws-route53';\nimport { Certificate } from '@aws-cdk/aws-certificatemanager';\nimport { SslPolicy } from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst domainZone = HostedZone.fromLookup(this, 'Zone', { domainName: 'example.com' });\nconst certificate = Certificate.fromCertificateArn(this, 'Cert', 'arn:aws:acm:us-east-1:123456:certificate/abcdefg');\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  cluster,\n  certificate,\n  sslPolicy: SslPolicy.RECOMMENDED,\n  domainName: 'api.example.com',\n  domainZone,\n  redirectHTTP: true,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 10,
        "75": 33,
        "104": 3,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "257": 3,
        "258": 3,
        "281": 6,
        "282": 4,
        "290": 1
      },
      "fqnsFingerprint": "79a927b559da8ef502fb5829574eab16cc78d52d4360a6d5bbbb795774609ad7"
    },
    "d00a0c3d7dd946a72482a52712b4fb9970d57597e644041fb4103a6cd6d2a7f9": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ntg = elbv2.ApplicationTargetGroup(self, \"TG\",\n    target_type=elbv2.TargetType.IP,\n    port=50051,\n    protocol=elbv2.ApplicationProtocol.HTTP,\n    protocol_version=elbv2.ApplicationProtocolVersion.GRPC,\n    health_check=elbv2.HealthCheck(\n        enabled=True,\n        healthy_grpc_codes=\"0-99\"\n    ),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = new ApplicationTargetGroup(this, \"TG\", new ApplicationTargetGroupProps {\n    TargetType = TargetType.IP,\n    Port = 50051,\n    Protocol = ApplicationProtocol.HTTP,\n    ProtocolVersion = ApplicationProtocolVersion.GRPC,\n    HealthCheck = new HealthCheck {\n        Enabled = true,\n        HealthyGrpcCodes = \"0-99\"\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nApplicationTargetGroup tg = ApplicationTargetGroup.Builder.create(this, \"TG\")\n        .targetType(TargetType.IP)\n        .port(50051)\n        .protocol(ApplicationProtocol.HTTP)\n        .protocolVersion(ApplicationProtocolVersion.GRPC)\n        .healthCheck(HealthCheck.builder()\n                .enabled(true)\n                .healthyGrpcCodes(\"0-99\")\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-elasticloadbalancingv2.TargetType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTP",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion#GRPC",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.HealthCheck",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType",
        "@aws-cdk/aws-elasticloadbalancingv2.TargetType#IP"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct, Node } from 'constructs';\nimport { CfnOutput, Stack, Duration, Resource, SecretValue } from '@aws-cdk/core';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst tg = new elbv2.ApplicationTargetGroup(this, 'TG', {\n  targetType: elbv2.TargetType.IP,\n  port: 50051,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  healthCheck: {\n    enabled: true,\n    healthyGrpcCodes: '0-99',\n  },\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 23,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6643ccb81227be2742599c2d2f7d1d42b40fcfd304cabb46f5ac798fa1bd7c52"
    }
  }
}
