{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "a758292c95231765307dbf48767a62d2e8687eae0ff28453e557d5b96e6acb6f": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    },
    "f87b64ba9486bac909de886add50924d91223b72a020cf1217db0ca5debb86e5": {
      "translations": {
        "python": {
          "source": "alb = elbv2.ApplicationLoadBalancer(...)\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            weight=128,\n            preserve_client_ip=True\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var alb = new elbv2.ApplicationLoadBalancer(...);\n\nlistener.AddEndpointGroup(\"Group\", new Struct {\n    Endpoints = new [] {\n        new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, new Struct {\n            Weight = 128,\n            PreserveClientIp = true\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object alb = new ApplicationLoadBalancer(...);\n\nlistener.addEndpointGroup(\"Group\", Map.of(\n        \"endpoints\", List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .weight(128)\n                    .preserveClientIp(true)\n                    .build())));",
          "version": "1"
        },
        "$": {
          "source": "const alb = new elbv2.ApplicationLoadBalancer(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 97
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const alb = new elbv2.ApplicationLoadBalancer(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "106": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "213": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "28fd93e5e84218c5425003bbf627b714c2dbc87b5d37c8e0d1d037e13493135e": {
      "translations": {
        "python": {
          "source": "nlb = elbv2.NetworkLoadBalancer(...)\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.NetworkLoadBalancerEndpoint(nlb,\n            weight=128\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var nlb = new elbv2.NetworkLoadBalancer(...);\n\nlistener.AddEndpointGroup(\"Group\", new Struct {\n    Endpoints = new [] {\n        new ga_endpoints.NetworkLoadBalancerEndpoint(nlb, new Struct {\n            Weight = 128\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object nlb = new NetworkLoadBalancer(...);\n\nlistener.addEndpointGroup(\"Group\", Map.of(\n        \"endpoints\", List.of(\n            NetworkLoadBalancerEndpoint.Builder.create(nlb)\n                    .weight(128)\n                    .build())));",
          "version": "1"
        },
        "$": {
          "source": "const nlb = new elbv2.NetworkLoadBalancer(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.NetworkLoadBalancerEndpoint(nlb, {\n      weight: 128,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const nlb = new elbv2.NetworkLoadBalancer(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.NetworkLoadBalancerEndpoint(nlb, {\n      weight: 128,\n    }),\n  ],\n});",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 11,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "213": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c67a86d5bbaf08bf6af641ca2549a61b9104aa7ea7b8aa7e173d03e46559b76e": {
      "translations": {
        "python": {
          "source": "instance = ec2.instance(...)\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.InstanceEndpoint(instance,\n            weight=128,\n            preserve_client_ip=True\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var instance = new ec2.Instance(...);\n\nlistener.AddEndpointGroup(\"Group\", new Struct {\n    Endpoints = new [] {\n        new ga_endpoints.InstanceEndpoint(instance, new Struct {\n            Weight = 128,\n            PreserveClientIp = true\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object instance = new instance(...);\n\nlistener.addEndpointGroup(\"Group\", Map.of(\n        \"endpoints\", List.of(\n            InstanceEndpoint.Builder.create(instance)\n                    .weight(128)\n                    .preserveClientIp(true)\n                    .build())));",
          "version": "1"
        },
        "$": {
          "source": "const instance = new ec2.instance(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.InstanceEndpoint(instance, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 126
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const instance = new ec2.instance(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.InstanceEndpoint(instance, {\n      weight: 128,\n      preserveClientIp: true,\n    }),\n  ],\n});",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "106": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "213": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a7eae5649cd8ee54737a97a80b6c792ad9000dfda26074bd80af08b9003614fe": {
      "translations": {
        "python": {
          "source": "eip = ec2.CfnEIP(...)\n\nlistener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.CfnEipEndpoint(eip,\n            weight=128\n        )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "var eip = new ec2.CfnEIP(...);\n\nlistener.AddEndpointGroup(\"Group\", new Struct {\n    Endpoints = new [] {\n        new ga_endpoints.CfnEipEndpoint(eip, new Struct {\n            Weight = 128\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Object eip = new CfnEIP(...);\n\nlistener.addEndpointGroup(\"Group\", Map.of(\n        \"endpoints\", List.of(\n            CfnEipEndpoint.Builder.create(eip)\n                    .weight(128)\n                    .build())));",
          "version": "1"
        },
        "$": {
          "source": "const eip = new ec2.CfnEIP(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.CfnEipEndpoint(eip, {\n      weight: 128,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 141
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const eip = new ec2.CfnEIP(...);\n\nlistener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.CfnEipEndpoint(eip, {\n      weight: 128,\n    }),\n  ],\n});",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 11,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "213": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "7891e4e760d0025e3823cf039985cae21e7cb48351b9a92fc6c5b1967ee459f5": {
      "translations": {
        "python": {
          "source": "# ...\n\n# Non-open ALB\nalb = elbv2.ApplicationLoadBalancer(stack, \"ALB\")\n\nendpoint_group = listener.add_endpoint_group(\"Group\",\n    endpoints=[\n        ga_endpoints.ApplicationLoadBalancerEndpoint(alb,\n            preserve_client_ips=True\n        )\n    ]\n)\n\n# Remember that there is only one AGA security group per VPC.\naga_sg = endpoint_group.connections_peer(\"GlobalAcceleratorSG\", vpc)\n\n# Allow connections from the AGA to the ALB\nalb.connections.allow_from(aga_sg, Port.tcp(443))",
          "version": "1"
        },
        "csharp": {
          "source": "// ...\n\n// Non-open ALB\nvar alb = new elbv2.ApplicationLoadBalancer(stack, \"ALB\", new Struct { });\n\nvar endpointGroup = listener.AddEndpointGroup(\"Group\", new Struct {\n    Endpoints = new [] {\n        new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, new Struct {\n            PreserveClientIps = true\n        }) }\n});\n\n// Remember that there is only one AGA security group per VPC.\nvar agaSg = endpointGroup.ConnectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.Connections.AllowFrom(agaSg, Port.Tcp(443));",
          "version": "1"
        },
        "java": {
          "source": "// ...\n\n// Non-open ALB\nObject alb = ApplicationLoadBalancer.Builder.create(stack, \"ALB\").build();\n\nObject endpointGroup = listener.addEndpointGroup(\"Group\", Map.of(\n        \"endpoints\", List.of(\n            ApplicationLoadBalancerEndpoint.Builder.create(alb)\n                    .preserveClientIps(true)\n                    .build())));\n\n// Remember that there is only one AGA security group per VPC.\nObject agaSg = endpointGroup.connectionsPeer(\"GlobalAcceleratorSG\", vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, Port.tcp(443));",
          "version": "1"
        },
        "$": {
          "source": "// ...\n\n// Non-open ALB\nconst alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { /* ... */ });\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIps: true,\n    })],\n  ],\n});\n\n// Remember that there is only one AGA security group per VPC.\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, Port.tcp(443));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-globalaccelerator"
        },
        "field": {
          "field": "markdown",
          "line": 172
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "// ...\n\n// Non-open ALB\nconst alb = new elbv2.ApplicationLoadBalancer(stack, 'ALB', { /* ... */ });\n\nconst endpointGroup = listener.addEndpointGroup('Group', {\n  endpoints: [\n    new ga_endpoints.ApplicationLoadBalancerEndpoint(alb, {\n      preserveClientIps: true,\n    })],\n  ],\n});\n\n// Remember that there is only one AGA security group per VPC.\nconst agaSg = endpointGroup.connectionsPeer('GlobalAcceleratorSG', vpc);\n\n// Allow connections from the AGA to the ALB\nalb.connections.allowFrom(agaSg, Port.tcp(443));",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 22,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 7,
        "196": 4,
        "197": 2,
        "224": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "6b1a69f2665d49ac2d1b56b5adcfef8a64e622082422d8ba43fe2e6a35fad2f1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.Accelerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    },
    "9d15b87b1cc711e44a86481d550a312ad4614d3f8ac89f10554fa42256b2ef7b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    },
    "2965c159c918a51e63a6eb45a46312c76e1f6cffe18b1543b412ffda1cfdadd8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.Listener"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    },
    "17932e318006a853b347f88b77a86556b92574988984fbacea3ccb112c6651bc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_globalaccelerator as globalaccelerator\nimport aws_cdk.aws_globalaccelerator_endpoints as ga_endpoints\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# Create an Accelerator\naccelerator = globalaccelerator.Accelerator(stack, \"Accelerator\")\n\n# Create a Listener\nlistener = accelerator.add_listener(\"Listener\",\n    port_ranges=[globalaccelerator.PortRange(from_port=80), globalaccelerator.PortRange(from_port=443)\n    ]\n)\n\n# Import the Load Balancers\nnlb1 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB1\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n)\nnlb2 = elbv2.NetworkLoadBalancer.from_network_load_balancer_attributes(stack, \"NLB2\",\n    load_balancer_arn=\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n)\n\n# Add one EndpointGroup for each Region we are targeting\nlistener.add_endpoint_group(\"Group1\",\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)]\n)\nlistener.add_endpoint_group(\"Group2\",\n    # Imported load balancers automatically calculate their Region from the ARN.\n    # If you are load balancing to other resources, you must also pass a `region`\n    # parameter here.\n    endpoints=[ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.GlobalAccelerator;\nusing Amazon.CDK.AWS.GlobalAccelerator.Endpoints;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.AddListener(\"Listener\", new ListenerOptions {\n    PortRanges = new [] { new PortRange { FromPort = 80 }, new PortRange { FromPort = 443 } }\n});\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB1\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\"\n});\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.FromNetworkLoadBalancerAttributes(stack, \"NLB2\", new NetworkLoadBalancerAttributes {\n    LoadBalancerArn = \"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\"\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.AddEndpointGroup(\"Group1\", new EndpointGroupOptions {\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb1) }\n});\nlistener.AddEndpointGroup(\"Group2\", new EndpointGroupOptions {\n    // Imported load balancers automatically calculate their Region from the ARN.\n    // If you are load balancing to other resources, you must also pass a `region`\n    // parameter here.\n    Endpoints = new [] { new NetworkLoadBalancerEndpoint(nlb2) }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.globalaccelerator.*;\nimport software.amazon.awscdk.services.globalaccelerator.endpoints.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\n// Create an Accelerator\nAccelerator accelerator = new Accelerator(stack, \"Accelerator\");\n\n// Create a Listener\nListener listener = accelerator.addListener(\"Listener\", ListenerOptions.builder()\n        .portRanges(List.of(PortRange.builder().fromPort(80).build(), PortRange.builder().fromPort(443).build()))\n        .build());\n\n// Import the Load Balancers\nINetworkLoadBalancer nlb1 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB1\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b\")\n        .build());\nINetworkLoadBalancer nlb2 = NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, \"NLB2\", NetworkLoadBalancerAttributes.builder()\n        .loadBalancerArn(\"arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1\")\n        .build());\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup(\"Group1\", EndpointGroupOptions.builder()\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb1)))\n        .build());\nlistener.addEndpointGroup(\"Group2\", EndpointGroupOptions.builder()\n        // Imported load balancers automatically calculate their Region from the ARN.\n        // If you are load balancing to other resources, you must also pass a `region`\n        // parameter here.\n        .endpoints(List.of(new NetworkLoadBalancerEndpoint(nlb2)))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-globalaccelerator.ListenerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#fromNetworkLoadBalancerAttributes",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerAttributes",
        "@aws-cdk/aws-globalaccelerator-endpoints.NetworkLoadBalancerEndpoint",
        "@aws-cdk/aws-globalaccelerator.Accelerator",
        "@aws-cdk/aws-globalaccelerator.Accelerator#addListener",
        "@aws-cdk/aws-globalaccelerator.EndpointGroupOptions",
        "@aws-cdk/aws-globalaccelerator.Listener",
        "@aws-cdk/aws-globalaccelerator.Listener#addEndpointGroup",
        "@aws-cdk/aws-globalaccelerator.ListenerOptions"
      ],
      "fullSource": "import globalaccelerator = require('@aws-cdk/aws-globalaccelerator');\nimport ga_endpoints = require('@aws-cdk/aws-globalaccelerator-endpoints');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\n\n// Create an Accelerator\nconst accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n\n// Create a Listener\nconst listener = accelerator.addListener('Listener', {\n  portRanges: [\n    { fromPort: 80 },\n    { fromPort: 443 },\n  ],\n});\n\n// Import the Load Balancers\nconst nlb1 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB1', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:111111111111:loadbalancer/app/my-load-balancer1/e16bef66805b',\n});\nconst nlb2 = elbv2.NetworkLoadBalancer.fromNetworkLoadBalancerAttributes(stack, 'NLB2', {\n  loadBalancerArn: 'arn:aws:elasticloadbalancing:ap-south-1:111111111111:loadbalancer/app/my-load-balancer2/5513dc2ea8a1',\n});\n\n// Add one EndpointGroup for each Region we are targeting\nlistener.addEndpointGroup('Group1', {\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb1)],\n});\nlistener.addEndpointGroup('Group2', {\n  // Imported load balancers automatically calculate their Region from the ARN.\n  // If you are load balancing to other resources, you must also pass a `region`\n  // parameter here.\n  endpoints: [new ga_endpoints.NetworkLoadBalancerEndpoint(nlb2)],\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 37,
        "192": 3,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "253": 3,
        "265": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "c3cac20169375b4cf48b75cc8ff05403fbceb4d6f5748fba84a0aa8ea991a480"
    }
  }
}
