{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "d49c979b36d1f57a507f7f95e9e2d23d003214f8bdeb16d07ea83910b08db7ea": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nerrors = fn.metric_errors()",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric errors = fn.MetricErrors();",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric errors = fn.metricErrors();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst errors = fn.metricErrors();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 27
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst errors = fn.metricErrors();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "1d5ac360c52276a87b8ac99169ed81c7a1d4918b69984dd70c24ccc0b6d2c4f7"
    },
    "7c03a3d404f91569cb80fce723ee41998a7cf14d98191192247e133b3887fe49": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 40
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "3a0762222d93e0e9bf4c9edbd189a6ccec37a81cdbcdc6ccda470f57823712e7"
    },
    "1c24d76a9416e5e1854f02b341d462fc6f2c84275adb8ba45bc9a4a4906e1bb7": {
      "translations": {
        "python": {
          "source": "metric = cloudwatch.Metric(\n    namespace=\"MyNamespace\",\n    metric_name=\"MyMetric\",\n    dimensions_map={\n        \"ProcessingStep\": \"Download\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Metric metric = new Metric(new MetricProps {\n    Namespace = \"MyNamespace\",\n    MetricName = \"MyMetric\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"ProcessingStep\", \"Download\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Metric metric = Metric.Builder.create()\n        .namespace(\"MyNamespace\")\n        .metricName(\"MyMetric\")\n        .dimensionsMap(Map.of(\n                \"ProcessingStep\", \"Download\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const metric = new cloudwatch.Metric({\n  namespace: 'MyNamespace',\n  metricName: 'MyMetric',\n  dimensionsMap: {\n    ProcessingStep: 'Download'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 56
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst metric = new cloudwatch.Metric({\n  namespace: 'MyNamespace',\n  metricName: 'MyMetric',\n  dimensionsMap: {\n    ProcessingStep: 'Download'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c90aeea35a896c59e64b082b32dd7848f590604849fbed626045f88b71037654"
    },
    "e0e6577612f4e90fca287dcf97860b1cbfd24be1756b60b03839bef859c150c7": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 71
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/aws-lambda.FunctionBase#metricThrottles"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "37e6e9d383d6abbf8cbc2b17c511f2954ef0473775d7c57ec4d9ca18de0cfe02"
    },
    "3c44ef26fbf1700dc2d558fdb87da7bccc962a384472ffb84411cd91e987ecd8": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n# all_problems is of type MathExpression\n\n\nproblem_percentage = cloudwatch.MathExpression(\n    expression=\"(problems / invocations) * 100\",\n    using_metrics={\n        \"problems\": all_problems,\n        \"invocations\": fn.metric_invocations()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\nMathExpression allProblems;\n\n\nMathExpression problemPercentage = new MathExpression(new MathExpressionProps {\n    Expression = \"(problems / invocations) * 100\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"problems\", allProblems },\n        { \"invocations\", fn.MetricInvocations() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\nMathExpression allProblems;\n\n\nMathExpression problemPercentage = MathExpression.Builder.create()\n        .expression(\"(problems / invocations) * 100\")\n        .usingMetrics(Map.of(\n                \"problems\", allProblems,\n                \"invocations\", fn.metricInvocations()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\ndeclare const allProblems: cloudwatch.MathExpression;\n\nconst problemPercentage = new cloudwatch.MathExpression({\n  expression: \"(problems / invocations) * 100\",\n  usingMetrics: {\n    problems: allProblems,\n    invocations: fn.metricInvocations()\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 86
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-lambda.FunctionBase#metricInvocations"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\ndeclare const allProblems: cloudwatch.MathExpression;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst problemPercentage = new cloudwatch.MathExpression({\n  expression: \"(problems / invocations) * 100\",\n  usingMetrics: {\n    problems: allProblems,\n    invocations: fn.metricInvocations()\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4e97a59126a8d36af39b184dcf161afee1eacbbd9430250472a26465f98c2321"
    },
    "506502b8aa18842bd8f60998f4522e58a1b42aa2f384b91bbfe06ba4bc40047a": {
      "translations": {
        "python": {
          "source": "cpu_utilization = cloudwatch.MathExpression(\n    expression=\"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "MathExpression cpuUtilization = new MathExpression(new MathExpressionProps {\n    Expression = \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\"\n});",
          "version": "1"
        },
        "java": {
          "source": "MathExpression cpuUtilization = MathExpression.Builder.create()\n        .expression(\"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const cpuUtilization = new cloudwatch.MathExpression({\n  expression: \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\"\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst cpuUtilization = new cloudwatch.MathExpression({\n  expression: \"SEARCH('{AWS/EC2,InstanceId} MetricName=\\\"CPUUtilization\\\"', 'Average', 300)\"\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "55fda3489f23e8427c74d31da1c71e70d5da5dc194c850081bdcbfcbb5550bb0"
    },
    "2cde04306e1a22bd62e171efa5384e4e8e27af0ee46cea9a8734eb5bd670c361": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nminute_error_rate = fn.metric_errors(\n    statistic=\"avg\",\n    period=Duration.minutes(1),\n    label=\"Lambda failure rate\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.MetricErrors(new MetricOptions {\n    Statistic = \"avg\",\n    Period = Duration.Minutes(1),\n    Label = \"Lambda failure rate\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.metricErrors(MetricOptions.builder()\n        .statistic(\"avg\")\n        .period(Duration.minutes(1))\n        .label(\"Lambda failure rate\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "990b4c3247a4c910e8eef988fe93479c9540df9310cb70cd16e5a6435f493ef8"
    },
    "c62b6e9ea6eb19cde44536cb807c284a15ba05e9615294eda4a7fc502259f55d": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=fn.metric_errors(),\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = fn.MetricErrors(),\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(fn.metricErrors())\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: fn.metricErrors(),\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 165
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: fn.metricErrors(),\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e34631dbadbfdf144531a5633b537fbb2876f837d5be42b0541c4589f48aae44"
    },
    "79c88735991c2aa6796adf9e38f29a8328ece1d607bf300be6700e755aa652fd": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nfn.metric_errors().create_alarm(self, \"Alarm\",\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nfn.MetricErrors().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nfn.metricErrors().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
        "@aws-cdk/aws-cloudwatch.Metric#createAlarm",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "56ae6d55c77c0ec6b21df00f3e7509a79f1a671c4abc9322be77b78e26293787"
    },
    "3a31b8ab4f24dc7de1dc1aa021ccae3b0074fc61ebe97ba9c528b5418a4fefcc": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch_actions as cw_actions\n# alarm is of type Alarm\n\n\ntopic = sns.Topic(self, \"Topic\")\nalarm.add_alarm_action(cw_actions.SnsAction(topic))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch.Actions;\nAlarm alarm;\n\n\nTopic topic = new Topic(this, \"Topic\");\nalarm.AddAlarmAction(new SnsAction(topic));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.actions.*;\nAlarm alarm;\n\n\nTopic topic = new Topic(this, \"Topic\");\nalarm.addAlarmAction(new SnsAction(topic));",
          "version": "1"
        },
        "$": {
          "source": "import * as cw_actions from '@aws-cdk/aws-cloudwatch-actions';\ndeclare const alarm: cloudwatch.Alarm;\n\nconst topic = new sns.Topic(this, 'Topic');\nalarm.addAlarmAction(new cw_actions.SnsAction(topic));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 201
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch-actions.SnsAction",
        "@aws-cdk/aws-cloudwatch.Alarm#addAlarmAction",
        "@aws-cdk/aws-cloudwatch.IAlarmAction",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cw_actions from '@aws-cdk/aws-cloudwatch-actions';\ndeclare const alarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst topic = new sns.Topic(this, 'Topic');\nalarm.addAlarmAction(new cw_actions.SnsAction(topic));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "ca9adbf9c91ae826901d473082948987e617ef7dc14a921e8a9d8240d97a7826"
    },
    "c1484f351e36b25a33ad249d74d35830c5473e7ea50fe6424359174d131c5b4e": {
      "translations": {
        "python": {
          "source": "# alarm1 is of type Alarm\n# alarm2 is of type Alarm\n# alarm3 is of type Alarm\n# alarm4 is of type Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1ebdedc344058586c3c29e5d6380ea24dae6643fdbbafb32d51610fbc4ce56e"
    },
    "c7502f9589593559e3e26b250098225aff032c47e82084c87c9fae7e4822a191": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# execution_count_metric is of type Metric\n# error_count_metric is of type Metric\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    title=\"Executions vs error rate\",\n\n    left=[execution_count_metric],\n\n    right=[error_count_metric.with(\n        statistic=\"average\",\n        label=\"Error rate\",\n        color=cloudwatch.Color.GREEN\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    Title = \"Executions vs error rate\",\n\n    Left = new [] { executionCountMetric },\n\n    Right = new [] { errorCountMetric.With(new MetricOptions {\n        Statistic = \"average\",\n        Label = \"Error rate\",\n        Color = Color.GREEN\n    }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        .title(\"Executions vs error rate\")\n\n        .left(List.of(executionCountMetric))\n\n        .right(List.of(errorCountMetric.with(MetricOptions.builder()\n                .statistic(\"average\")\n                .label(\"Error rate\")\n                .color(Color.GREEN)\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN\n  })]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 298
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#GREEN",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN\n  })]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0e76c3ea3f5a4f00ccd227ca0beafb1f109b39956334676cb324c27243faccc9"
    },
    "2e8b47815ed5ca3b937b3be6af75939cc73563b5ae737f8429adc5643fdff9c8": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    left_annotations=[cloudwatch.HorizontalAnnotation(value=1800, label=Duration.minutes(30).to_human_string(), color=cloudwatch.Color.RED), cloudwatch.HorizontalAnnotation(value=3600, label=\"1 hour\", color=\"#2ca02c\")\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LeftAnnotations = new [] { new HorizontalAnnotation { Value = 1800, Label = Duration.Minutes(30).ToHumanString(), Color = Color.RED }, new HorizontalAnnotation { Value = 3600, Label = \"1 hour\", Color = \"#2ca02c\" } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .leftAnnotations(List.of(HorizontalAnnotation.builder().value(1800).label(Duration.minutes(30).toHumanString()).color(Color.RED).build(), HorizontalAnnotation.builder().value(3600).label(\"1 hour\").color(\"#2ca02c\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  leftAnnotations: [\n    { value: 1800, label: Duration.minutes(30).toHumanString(), color: cloudwatch.Color.RED, },\n    { value: 3600, label: '1 hour', color: '#2ca02c', }\n  ],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 320
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#RED",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toHumanString"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  leftAnnotations: [\n    { value: 1800, label: Duration.minutes(30).toHumanString(), color: cloudwatch.Color.RED, },\n    { value: 3600, label: '1 hour', color: '#2ca02c', }\n  ],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "81b02a27b15998f396e526e0fec5783a055744bded0eb4c352d0d37ea49ddcfa"
    },
    "ebffb1747be766ac73a8c46aa4c87806e62a7e714d66019e4673710be3bb05dc": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 335
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c1680a615f3c6a28d9398cafc9a99f25fe16db55a5cf93ad9a9354502068cd9"
    },
    "a2e7f2afff918dc7f551f30d40cacdd3aa38bb09231a30ab4b75317efb50d0ad": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    live_data=True\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LiveData = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .liveData(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  liveData: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 347
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  liveData: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 8,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "9cd54761d81032cef79de8b3b80d67e84b4e9f9ca494f0fdcc31053af142eef5"
    },
    "4a8dda045236271b954f0a4a021d985fc67baf588a656645d83021827fa261d3": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    view=cloudwatch.GraphWidgetView.BAR\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    View = GraphWidgetView.BAR\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .view(GraphWidgetView.BAR)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 359
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView#BAR",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "86fb5904597bd8b852099a21e67908b588bd2eaca122bde56475da9cbda1de86"
    },
    "c31fff1309d284676bdcb38516d53ef267ab9b1bfdbaa9b255aa176fd48477f7": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 373
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2e2cf1a4fcd2f57a15dd4e67eb487b6ce1ce83849287fa8e182222ff7b3583ae"
    },
    "145414953db361f4767e9f75899200e57a40b9184b4e9ce50f18877ef88bc5a6": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# visitor_count is of type Metric\n# purchase_count is of type Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 388
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "257c6d35c03b5656b75de97521c8a8613654717689af918b935755a457bba0d0"
    },
    "d93943d2d92cc9f4ffff5908e95ecefc4f9d0e24fc769b0b684e012c38f556c2": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[],\n\n    full_precision=True\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] {  },\n\n    FullPrecision = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of())\n\n        .fullPrecision(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [ /* ... */ ],\n\n  fullPrecision: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 400
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [ /* ... */ ],\n\n  fullPrecision: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 9,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "257c6d35c03b5656b75de97521c8a8613654717689af918b935755a457bba0d0"
    },
    "bbdf276cfc637755ea25b90a6a543275cdfd2ca924618182a6aec8c79f954587": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 415
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1ac5382e99f5a32c8855a733f619d8895564abc5316b6a744f5056920fca3b45"
    },
    "428539244bb683b09be7cefaa27d0b994c706b841a2f401cc5e70518015af6ee": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 428
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a315acb59d6ed4acae40b4ffc9bf07526966021fdc5921336722ab19f23a0ab4"
    },
    "699ce96d41b9f05d21bc754c2f3e49348b11d09760c03cd32b50ca2cee42633a": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cloudwatch"
        },
        "field": {
          "field": "markdown",
          "line": 443
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d322549a4b6e44864a4dddf1f2db14f02faef646e8aef7d7e5149f9786c99cc"
    },
    "4ba2a3865d28edd0ad32e267b8e9513ada2620ba35314b1c7241d97fd45bb404": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Alarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionBase#metricDuration",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4e157b0c27f216e958a9e8508782c1447531156363e0117c16cb95d5be46d7bb"
    },
    "2053ae47fb1f4af6eac05dc633589bbebd2dba0ca4db7cf629878da560daf5c8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionBase#metricDuration",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4e157b0c27f216e958a9e8508782c1447531156363e0117c16cb95d5be46d7bb"
    },
    "b5a0b53c613020c544bb32de59e83913201b0893948b774bf5780bb791f95f98": {
      "translations": {
        "python": {
          "source": "# alarm1 is of type Alarm\n# alarm2 is of type Alarm\n# alarm3 is of type Alarm\n# alarm4 is of type Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1ebdedc344058586c3c29e5d6380ea24dae6643fdbbafb32d51610fbc4ce56e"
    },
    "77c2ff7febee64a650952dbd5050def330bd94b4057aa767b1e3210d44321941": {
      "translations": {
        "python": {
          "source": "# alarm1 is of type Alarm\n# alarm2 is of type Alarm\n# alarm3 is of type Alarm\n# alarm4 is of type Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmState"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1ebdedc344058586c3c29e5d6380ea24dae6643fdbbafb32d51610fbc4ce56e"
    },
    "6a93294e274dda0c7c232d41627f9c367d06dbc8edc0e6c5ce44d7e764954def": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a315acb59d6ed4acae40b4ffc9bf07526966021fdc5921336722ab19f23a0ab4"
    },
    "b57e8fe2b16cbb19e750de0fccf701f607c7b70fafae4a48d17b882afecad6a5": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(\n    cloudwatch.AlarmStatusWidget(\n        alarms=[error_alarm]\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(\nnew AlarmStatusWidget(new AlarmStatusWidgetProps {\n    Alarms = new [] { errorAlarm }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(\nAlarmStatusWidget.Builder.create()\n        .alarms(List.of(errorAlarm))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidget",
        "@aws-cdk/aws-cloudwatch.AlarmStatusWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(\n  new cloudwatch.AlarmStatusWidget({\n    alarms: [errorAlarm],\n  })\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "a315acb59d6ed4acae40b4ffc9bf07526966021fdc5921336722ab19f23a0ab4"
    },
    "044f5888c975b6f320adb3cbaddf2773ce467ffbeafc5c28872bae3421f34e01": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2e2cf1a4fcd2f57a15dd4e67eb487b6ce1ce83849287fa8e182222ff7b3583ae"
    },
    "46e2553ccc818912da4aeb04fe8a87531dd3b54cd720176fc1973ae0a151bf3b": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# error_alarm is of type Alarm\n\n\ndashboard.add_widgets(cloudwatch.AlarmWidget(\n    title=\"Errors\",\n    alarm=error_alarm\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.AddWidgets(new AlarmWidget(new AlarmWidgetProps {\n    Title = \"Errors\",\n    Alarm = errorAlarm\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nAlarm errorAlarm;\n\n\ndashboard.addWidgets(AlarmWidget.Builder.create()\n        .title(\"Errors\")\n        .alarm(errorAlarm)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.AlarmWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmWidget",
        "@aws-cdk/aws-cloudwatch.AlarmWidgetProps",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const errorAlarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.AlarmWidget({\n  title: \"Errors\",\n  alarm: errorAlarm,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "2e2cf1a4fcd2f57a15dd4e67eb487b6ce1ce83849287fa8e182222ff7b3583ae"
    },
    "2cd7022783c01f640ff47403b543838b92d285aa3e52467b3c6014f5f9aa2dc9": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# execution_count_metric is of type Metric\n# error_count_metric is of type Metric\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    title=\"Executions vs error rate\",\n\n    left=[execution_count_metric],\n\n    right=[error_count_metric.with(\n        statistic=\"average\",\n        label=\"Error rate\",\n        color=cloudwatch.Color.GREEN\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    Title = \"Executions vs error rate\",\n\n    Left = new [] { executionCountMetric },\n\n    Right = new [] { errorCountMetric.With(new MetricOptions {\n        Statistic = \"average\",\n        Label = \"Error rate\",\n        Color = Color.GREEN\n    }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric executionCountMetric;\nMetric errorCountMetric;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        .title(\"Executions vs error rate\")\n\n        .left(List.of(executionCountMetric))\n\n        .right(List.of(errorCountMetric.with(MetricOptions.builder()\n                .statistic(\"average\")\n                .label(\"Error rate\")\n                .color(Color.GREEN)\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN\n  })]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Color"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Color",
        "@aws-cdk/aws-cloudwatch.Color#GREEN",
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const executionCountMetric: cloudwatch.Metric;\ndeclare const errorCountMetric: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  title: \"Executions vs error rate\",\n\n  left: [executionCountMetric],\n\n  right: [errorCountMetric.with({\n    statistic: \"average\",\n    label: \"Error rate\",\n    color: cloudwatch.Color.GREEN\n  })]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0e76c3ea3f5a4f00ccd227ca0beafb1f109b39956334676cb324c27243faccc9"
    },
    "1b8cc58ce398e3f235113e8e200e75ec9b50cc0bf2b715cff8b81ac3356e2a2c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n\n# canary is of type Canary\n\ncloudwatch.Alarm(self, \"CanaryAlarm\",\n    metric=canary.metric_success_percent(),\n    evaluation_periods=2,\n    threshold=90,\n    comparison_operator=cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\n\nCanary canary;\n\nnew Alarm(this, \"CanaryAlarm\", new AlarmProps {\n    Metric = canary.MetricSuccessPercent(),\n    EvaluationPeriods = 2,\n    Threshold = 90,\n    ComparisonOperator = ComparisonOperator.LESS_THAN_THRESHOLD\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\n\nCanary canary;\n\nAlarm.Builder.create(this, \"CanaryAlarm\")\n        .metric(canary.metricSuccessPercent())\n        .evaluationPeriods(2)\n        .threshold(90)\n        .comparisonOperator(ComparisonOperator.LESS_THAN_THRESHOLD)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const canary: synthetics.Canary;\nnew cloudwatch.Alarm(this, 'CanaryAlarm', {\n  metric: canary.metricSuccessPercent(),\n  evaluationPeriods: 2,\n  threshold: 90,\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.ComparisonOperator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator#LESS_THAN_THRESHOLD",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-synthetics.Canary#metricSuccessPercent"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const canary: synthetics.Canary;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as synthetics from '@aws-cdk/aws-synthetics';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cloudwatch.Alarm(this, 'CanaryAlarm', {\n  metric: canary.metricSuccessPercent(),\n  evaluationPeriods: 2,\n  threshold: 90,\n  comparisonOperator: cloudwatch.ComparisonOperator.LESS_THAN_THRESHOLD,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "b2da4da920e5ddb1fe130b7ac9efae900b53a6ef4ec031b3c83ecace81276dae"
    },
    "be00b46a1afcc1a1f54398cbc0d12c23909853d2ed3eecd1d106b994a749ad75": {
      "translations": {
        "python": {
          "source": "# alarm1 is of type Alarm\n# alarm2 is of type Alarm\n# alarm3 is of type Alarm\n# alarm4 is of type Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarm"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1ebdedc344058586c3c29e5d6380ea24dae6643fdbbafb32d51610fbc4ce56e"
    },
    "f41c48a2fba6c4f6101f6071fde1d83a1a2d25fdedee5692bd7128f340372757": {
      "translations": {
        "python": {
          "source": "# alarm1 is of type Alarm\n# alarm2 is of type Alarm\n# alarm3 is of type Alarm\n# alarm4 is of type Alarm\n\n\nalarm_rule = cloudwatch.AlarmRule.any_of(\n    cloudwatch.AlarmRule.all_of(\n        cloudwatch.AlarmRule.any_of(alarm1,\n            cloudwatch.AlarmRule.from_alarm(alarm2, cloudwatch.AlarmState.OK), alarm3),\n        cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.from_alarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA))),\n    cloudwatch.AlarmRule.from_boolean(False))\n\ncloudwatch.CompositeAlarm(self, \"MyAwesomeCompositeAlarm\",\n    alarm_rule=alarm_rule\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.AnyOf(AlarmRule.AllOf(AlarmRule.AnyOf(alarm1, AlarmRule.FromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.Not(AlarmRule.FromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.FromBoolean(false));\n\nnew CompositeAlarm(this, \"MyAwesomeCompositeAlarm\", new CompositeAlarmProps {\n    AlarmRule = alarmRule\n});",
          "version": "1"
        },
        "java": {
          "source": "Alarm alarm1;\nAlarm alarm2;\nAlarm alarm3;\nAlarm alarm4;\n\n\nIAlarmRule alarmRule = AlarmRule.anyOf(AlarmRule.allOf(AlarmRule.anyOf(alarm1, AlarmRule.fromAlarm(alarm2, AlarmState.OK), alarm3), AlarmRule.not(AlarmRule.fromAlarm(alarm4, AlarmState.INSUFFICIENT_DATA))), AlarmRule.fromBoolean(false));\n\nCompositeAlarm.Builder.create(this, \"MyAwesomeCompositeAlarm\")\n        .alarmRule(alarmRule)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CompositeAlarmProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.AlarmRule",
        "@aws-cdk/aws-cloudwatch.AlarmRule#allOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#anyOf",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromAlarm",
        "@aws-cdk/aws-cloudwatch.AlarmRule#fromBoolean",
        "@aws-cdk/aws-cloudwatch.AlarmRule#not",
        "@aws-cdk/aws-cloudwatch.AlarmState",
        "@aws-cdk/aws-cloudwatch.AlarmState#INSUFFICIENT_DATA",
        "@aws-cdk/aws-cloudwatch.AlarmState#OK",
        "@aws-cdk/aws-cloudwatch.CompositeAlarm",
        "@aws-cdk/aws-cloudwatch.CompositeAlarmProps",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IAlarmRule"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const alarm1: cloudwatch.Alarm;\ndeclare const alarm2: cloudwatch.Alarm;\ndeclare const alarm3: cloudwatch.Alarm;\ndeclare const alarm4: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst alarmRule = cloudwatch.AlarmRule.anyOf(\n  cloudwatch.AlarmRule.allOf(\n    cloudwatch.AlarmRule.anyOf(\n      alarm1,\n      cloudwatch.AlarmRule.fromAlarm(alarm2, cloudwatch.AlarmState.OK),\n      alarm3,\n    ),\n    cloudwatch.AlarmRule.not(cloudwatch.AlarmRule.fromAlarm(alarm4, cloudwatch.AlarmState.INSUFFICIENT_DATA)),\n  ),\n  cloudwatch.AlarmRule.fromBoolean(false),\n);\n\nnew cloudwatch.CompositeAlarm(this, 'MyAwesomeCompositeAlarm', {\n  alarmRule,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 47,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 19,
        "196": 7,
        "197": 1,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c1ebdedc344058586c3c29e5d6380ea24dae6643fdbbafb32d51610fbc4ce56e"
    },
    "6a55bf27f5fb42d11c97b8bbc4a5945cd4020c5ca899d7c54734734f4d5494f9": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nfn.metric_errors().create_alarm(self, \"Alarm\",\n    threshold=100,\n    evaluation_periods=2\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nfn.MetricErrors().CreateAlarm(this, \"Alarm\", new CreateAlarmOptions {\n    Threshold = 100,\n    EvaluationPeriods = 2\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nfn.metricErrors().createAlarm(this, \"Alarm\", CreateAlarmOptions.builder()\n        .threshold(100)\n        .evaluationPeriods(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.CreateAlarmOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.CreateAlarmOptions",
        "@aws-cdk/aws-cloudwatch.Metric#createAlarm",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nfn.metricErrors().createAlarm(this, 'Alarm', {\n  threshold: 100,\n  evaluationPeriods: 2,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "56ae6d55c77c0ec6b21df00f3e7509a79f1a671c4abc9322be77b78e26293787"
    },
    "40adf5570e686affd2be470929e3273422bc26eabf4686f5c5706f1aad351905": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c1680a615f3c6a28d9398cafc9a99f25fe16db55a5cf93ad9a9354502068cd9"
    },
    "ac374948881f5994e671f77b3973c3a37f791dab8b550fa4574ec7dc1bd10c34": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c1680a615f3c6a28d9398cafc9a99f25fe16db55a5cf93ad9a9354502068cd9"
    },
    "be672da3a425dd3e4747cfa685f684d7d403b49aef153e5a46a08b71c533372a": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    view=cloudwatch.GraphWidgetView.BAR\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    View = GraphWidgetView.BAR\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .view(GraphWidgetView.BAR)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.GraphWidgetView"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView",
        "@aws-cdk/aws-cloudwatch.GraphWidgetView#BAR",
        "@aws-cdk/aws-cloudwatch.IWidget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  view: cloudwatch.GraphWidgetView.BAR,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "86fb5904597bd8b852099a21e67908b588bd2eaca122bde56475da9cbda1de86"
    },
    "628b0b191ab3ab0b1ceb2e058095a1b722eeeba39fc5092a0ecc05b2129639cd": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.GraphWidget(\n    # ...\n\n    legend_position=cloudwatch.LegendPosition.RIGHT\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new GraphWidget(new GraphWidgetProps {\n    // ...\n\n    LegendPosition = LegendPosition.RIGHT\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(GraphWidget.Builder.create()\n        // ...\n\n        .legendPosition(LegendPosition.RIGHT)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LegendPosition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.GraphWidget",
        "@aws-cdk/aws-cloudwatch.GraphWidgetProps",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LegendPosition",
        "@aws-cdk/aws-cloudwatch.LegendPosition#RIGHT"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.GraphWidget({\n  // ...\n\n  legendPosition: cloudwatch.LegendPosition.RIGHT,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c1680a615f3c6a28d9398cafc9a99f25fe16db55a5cf93ad9a9354502068cd9"
    },
    "0b2de5234bdc1492fc86cc5dd0a0a8de5faf9b8cfc9776294b07f5a5e88a7a8e": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d322549a4b6e44864a4dddf1f2db14f02faef646e8aef7d7e5149f9786c99cc"
    },
    "182e3ee670115569e174af7196fb01aa45d932131c39f0aecbb6107047003ad9": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d322549a4b6e44864a4dddf1f2db14f02faef646e8aef7d7e5149f9786c99cc"
    },
    "8850f1264612c53c2152c4393f1c6254fe21be9ad31f7e5242dde13132a040eb": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.LogQueryWidget(\n    log_group_names=[\"my-log-group\"],\n    view=cloudwatch.LogQueryVisualizationType.TABLE,\n    # The lines will be automatically combined using '\\n|'.\n    query_lines=[\"fields @message\", \"filter @message like /Error/\"\n    ]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new LogQueryWidget(new LogQueryWidgetProps {\n    LogGroupNames = new [] { \"my-log-group\" },\n    View = LogQueryVisualizationType.TABLE,\n    // The lines will be automatically combined using '\\n|'.\n    QueryLines = new [] { \"fields @message\", \"filter @message like /Error/\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(LogQueryWidget.Builder.create()\n        .logGroupNames(List.of(\"my-log-group\"))\n        .view(LogQueryVisualizationType.TABLE)\n        // The lines will be automatically combined using '\\n|'.\n        .queryLines(List.of(\"fields @message\", \"filter @message like /Error/\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType",
        "@aws-cdk/aws-cloudwatch.LogQueryVisualizationType#TABLE",
        "@aws-cdk/aws-cloudwatch.LogQueryWidget",
        "@aws-cdk/aws-cloudwatch.LogQueryWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.LogQueryWidget({\n  logGroupNames: ['my-log-group'],\n  view: cloudwatch.LogQueryVisualizationType.TABLE,\n  // The lines will be automatically combined using '\\n|'.\n  queryLines: [\n    'fields @message',\n    'filter @message like /Error/',\n  ]\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2d322549a4b6e44864a4dddf1f2db14f02faef646e8aef7d7e5149f9786c99cc"
    },
    "2c31ab422034913f24a0e75a03a17b0a64141ec4a606886f9928153db263775f": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MathExpression"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/aws-lambda.FunctionBase#metricThrottles"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "37e6e9d383d6abbf8cbc2b17c511f2954ef0473775d7c57ec4d9ca18de0cfe02"
    },
    "e920359be7fb77cc6525b6953b07fba3109f932f8401b8d46cd3f807daf5eaa7": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nall_problems = cloudwatch.MathExpression(\n    expression=\"errors + throttles\",\n    using_metrics={\n        \"errors\": fn.metric_errors(),\n        \"faults\": fn.metric_throttles()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMathExpression allProblems = new MathExpression(new MathExpressionProps {\n    Expression = \"errors + throttles\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"errors\", fn.MetricErrors() },\n        { \"faults\", fn.MetricThrottles() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMathExpression allProblems = MathExpression.Builder.create()\n        .expression(\"errors + throttles\")\n        .usingMetrics(Map.of(\n                \"errors\", fn.metricErrors(),\n                \"faults\", fn.metricThrottles()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MathExpressionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/aws-lambda.FunctionBase#metricThrottles"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst allProblems = new cloudwatch.MathExpression({\n  expression: \"errors + throttles\",\n  usingMetrics: {\n    errors: fn.metricErrors(),\n    faults: fn.metricThrottles(),\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "37e6e9d383d6abbf8cbc2b17c511f2954ef0473775d7c57ec4d9ca18de0cfe02"
    },
    "03e99abb2d70e62275728b1498fec02182137e513483c05b6e941142df94b0d9": {
      "translations": {
        "python": {
          "source": "# fn is of type Function\n\n\nminute_error_rate = fn.metric_errors(\n    statistic=\"avg\",\n    period=Duration.minutes(1),\n    label=\"Lambda failure rate\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.MetricErrors(new MetricOptions {\n    Statistic = \"avg\",\n    Period = Duration.Minutes(1),\n    Label = \"Lambda failure rate\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Function fn;\n\n\nMetric minuteErrorRate = fn.metricErrors(MetricOptions.builder()\n        .statistic(\"avg\")\n        .period(Duration.minutes(1))\n        .label(\"Lambda failure rate\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const fn: lambda.Function;\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Metric"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-lambda.FunctionBase#metricErrors",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst minuteErrorRate = fn.metricErrors({\n  statistic: 'avg',\n  period: Duration.minutes(1),\n  label: 'Lambda failure rate'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "990b4c3247a4c910e8eef988fe93479c9540df9310cb70cd16e5a6435f493ef8"
    },
    "f5828401125c86d5de81c15818c8f7f7414ee6476c3546fbd86f149bb92bd24e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n# delivery_stream is of type DeliveryStream\n\n\n# Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincoming_bytes_percent_of_limit = cloudwatch.MathExpression(\n    expression=\"incomingBytes / 300 / bytePerSecLimit\",\n    using_metrics={\n        \"incoming_bytes\": delivery_stream.metric_incoming_bytes(statistic=cloudwatch.Statistic.SUM),\n        \"byte_per_sec_limit\": delivery_stream.metric(\"BytesPerSecondLimit\")\n    }\n)\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=incoming_bytes_percent_of_limit,\n    threshold=0.9,\n    evaluation_periods=3\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = new MathExpression(new MathExpressionProps {\n    Expression = \"incomingBytes / 300 / bytePerSecLimit\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"incomingBytes\", deliveryStream.MetricIncomingBytes(new MetricOptions { Statistic = Statistic.SUM }) },\n        { \"bytePerSecLimit\", deliveryStream.Metric(\"BytesPerSecondLimit\") }\n    }\n});\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = incomingBytesPercentOfLimit,\n    Threshold = 0.9,\n    EvaluationPeriods = 3\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = MathExpression.Builder.create()\n        .expression(\"incomingBytes / 300 / bytePerSecLimit\")\n        .usingMetrics(Map.of(\n                \"incomingBytes\", deliveryStream.metricIncomingBytes(MetricOptions.builder().statistic(Statistic.SUM).build()),\n                \"bytePerSecLimit\", deliveryStream.metric(\"BytesPerSecondLimit\")))\n        .build();\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(incomingBytesPercentOfLimit)\n        .threshold(0.9)\n        .evaluationPeriods(3)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.Statistic",
        "@aws-cdk/aws-cloudwatch.Statistic#SUM"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Size, Stack } from '@aws-cdk/core';\nimport * as firehose from '@aws-cdk/aws-kinesisfirehose';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as destinations from '@aws-cdk/aws-kinesisfirehose-destinations';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "60ed3ac3ec0fb8c47dfcfb9a9415a0430321859cfe1fe4d0c5b63020d4b3a06a"
    },
    "81b645e1a11b3337b864e4208b1258c45aba806cda3c6e686d060e4bc1831dbf": {
      "translations": {
        "python": {
          "source": "hosted_zone = route53.HostedZone(self, \"MyHostedZone\", zone_name=\"example.org\")\nmetric = cloudwatch.Metric(\n    namespace=\"AWS/Route53\",\n    metric_name=\"DNSQueries\",\n    dimensions_map={\n        \"HostedZoneId\": hosted_zone.hosted_zone_id\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HostedZone hostedZone = new HostedZone(this, \"MyHostedZone\", new HostedZoneProps { ZoneName = \"example.org\" });\nMetric metric = new Metric(new MetricProps {\n    Namespace = \"AWS/Route53\",\n    MetricName = \"DNSQueries\",\n    DimensionsMap = new Dictionary<string, string> {\n        { \"HostedZoneId\", hostedZone.HostedZoneId }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HostedZone hostedZone = HostedZone.Builder.create(this, \"MyHostedZone\").zoneName(\"example.org\").build();\nMetric metric = Metric.Builder.create()\n        .namespace(\"AWS/Route53\")\n        .metricName(\"DNSQueries\")\n        .dimensionsMap(Map.of(\n                \"HostedZoneId\", hostedZone.getHostedZoneId()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.MetricProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Metric",
        "@aws-cdk/aws-cloudwatch.MetricProps",
        "@aws-cdk/aws-route53.HostedZone",
        "@aws-cdk/aws-route53.HostedZone#hostedZoneId",
        "@aws-cdk/aws-route53.HostedZoneProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst hostedZone = new route53.HostedZone(this, 'MyHostedZone', { zoneName: \"example.org\" });\nconst metric = new cloudwatch.Metric({\n  namespace: 'AWS/Route53',\n  metricName: 'DNSQueries',\n  dimensionsMap: {\n    HostedZoneId: hostedZone.hostedZoneId\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 3,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5
      },
      "fqnsFingerprint": "3a0762222d93e0e9bf4c9edbd189a6ccec37a81cdbcdc6ccda470f57823712e7"
    },
    "2f48db7ba8f0da40eab46e41f79a43beaf8e53cf0592c6a8ed0c27908f36e24e": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# visitor_count is of type Metric\n# purchase_count is of type Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "257c6d35c03b5656b75de97521c8a8613654717689af918b935755a457bba0d0"
    },
    "3f638a5b16d36ef2b6c8ef9d0056d72df7cad2afa9750b440cd8ef5134ee9285": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n# visitor_count is of type Metric\n# purchase_count is of type Metric\n\n\ndashboard.add_widgets(cloudwatch.SingleValueWidget(\n    metrics=[visitor_count, purchase_count]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.AddWidgets(new SingleValueWidget(new SingleValueWidgetProps {\n    Metrics = new [] { visitorCount, purchaseCount }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\nMetric visitorCount;\nMetric purchaseCount;\n\n\ndashboard.addWidgets(SingleValueWidget.Builder.create()\n        .metrics(List.of(visitorCount, purchaseCount))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidget",
        "@aws-cdk/aws-cloudwatch.SingleValueWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\ndeclare const visitorCount: cloudwatch.Metric;\ndeclare const purchaseCount: cloudwatch.Metric;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.SingleValueWidget({\n  metrics: [visitorCount, purchaseCount],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "75": 16,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "257c6d35c03b5656b75de97521c8a8613654717689af918b935755a457bba0d0"
    },
    "2be9885849f4c603f08514c05509ad6dcbca344a2b9952af1b7619cf5278f1d6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n# delivery_stream is of type DeliveryStream\n\n\n# Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nincoming_bytes_percent_of_limit = cloudwatch.MathExpression(\n    expression=\"incomingBytes / 300 / bytePerSecLimit\",\n    using_metrics={\n        \"incoming_bytes\": delivery_stream.metric_incoming_bytes(statistic=cloudwatch.Statistic.SUM),\n        \"byte_per_sec_limit\": delivery_stream.metric(\"BytesPerSecondLimit\")\n    }\n)\n\ncloudwatch.Alarm(self, \"Alarm\",\n    metric=incoming_bytes_percent_of_limit,\n    threshold=0.9,\n    evaluation_periods=3\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = new MathExpression(new MathExpressionProps {\n    Expression = \"incomingBytes / 300 / bytePerSecLimit\",\n    UsingMetrics = new Dictionary<string, IMetric> {\n        { \"incomingBytes\", deliveryStream.MetricIncomingBytes(new MetricOptions { Statistic = Statistic.SUM }) },\n        { \"bytePerSecLimit\", deliveryStream.Metric(\"BytesPerSecondLimit\") }\n    }\n});\n\nnew Alarm(this, \"Alarm\", new AlarmProps {\n    Metric = incomingBytesPercentOfLimit,\n    Threshold = 0.9,\n    EvaluationPeriods = 3\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\nDeliveryStream deliveryStream;\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nMathExpression incomingBytesPercentOfLimit = MathExpression.Builder.create()\n        .expression(\"incomingBytes / 300 / bytePerSecLimit\")\n        .usingMetrics(Map.of(\n                \"incomingBytes\", deliveryStream.metricIncomingBytes(MetricOptions.builder().statistic(Statistic.SUM).build()),\n                \"bytePerSecLimit\", deliveryStream.metric(\"BytesPerSecondLimit\")))\n        .build();\n\nAlarm.Builder.create(this, \"Alarm\")\n        .metric(incomingBytesPercentOfLimit)\n        .threshold(0.9)\n        .evaluationPeriods(3)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.Statistic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.MathExpression",
        "@aws-cdk/aws-cloudwatch.MathExpressionProps",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.Statistic",
        "@aws-cdk/aws-cloudwatch.Statistic#SUM"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\ndeclare const deliveryStream: firehose.DeliveryStream;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Size, Stack } from '@aws-cdk/core';\nimport * as firehose from '@aws-cdk/aws-kinesisfirehose';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as destinations from '@aws-cdk/aws-kinesisfirehose-destinations';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as path from 'path';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Alarm that triggers when the per-second average of incoming bytes exceeds 90% of the current service limit\nconst incomingBytesPercentOfLimit = new cloudwatch.MathExpression({\n  expression: 'incomingBytes / 300 / bytePerSecLimit',\n  usingMetrics: {\n    incomingBytes: deliveryStream.metricIncomingBytes({ statistic: cloudwatch.Statistic.SUM }),\n    bytePerSecLimit: deliveryStream.metric('BytesPerSecondLimit'),\n  },\n});\n\nnew cloudwatch.Alarm(this, 'Alarm', {\n  metric: incomingBytesPercentOfLimit,\n  threshold: 0.9,\n  evaluationPeriods: 3,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 6,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "60ed3ac3ec0fb8c47dfcfb9a9415a0430321859cfe1fe4d0c5b63020d4b3a06a"
    },
    "58674675282f7797692f025248ed8ff831e462577f820b19ac9f985af7c74b04": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TextWidget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1ac5382e99f5a32c8855a733f619d8895564abc5316b6a744f5056920fca3b45"
    },
    "bb9be7573bd114b0fd0d5db8370ef1565975758a3db244c9a64927e09d8c7db8": {
      "translations": {
        "python": {
          "source": "# dashboard is of type Dashboard\n\n\ndashboard.add_widgets(cloudwatch.TextWidget(\n    markdown=\"# Key Performance Indicators\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Dashboard dashboard;\n\n\ndashboard.AddWidgets(new TextWidget(new TextWidgetProps {\n    Markdown = \"# Key Performance Indicators\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "Dashboard dashboard;\n\n\ndashboard.addWidgets(TextWidget.Builder.create()\n        .markdown(\"# Key Performance Indicators\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const dashboard: cloudwatch.Dashboard;\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TextWidgetProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Dashboard#addWidgets",
        "@aws-cdk/aws-cloudwatch.IWidget",
        "@aws-cdk/aws-cloudwatch.TextWidget",
        "@aws-cdk/aws-cloudwatch.TextWidgetProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const dashboard: cloudwatch.Dashboard;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ndashboard.addWidgets(new cloudwatch.TextWidget({\n  markdown: '# Key Performance Indicators'\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1ac5382e99f5a32c8855a733f619d8895564abc5316b6a744f5056920fca3b45"
    },
    "c951e02da4ed92ab3cd1b1e30aa9ffd901ccd6374eb299a0a62cbe65442c861b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n\nfn = lambda_.Function(self, \"MyFunction\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    timeout=cdk.Duration.minutes(5)\n)\n\nif fn.timeout:\n    cloudwatch.Alarm(self, \"MyAlarm\",\n        metric=fn.metric_duration().with(\n            statistic=\"Maximum\"\n        ),\n        evaluation_periods=1,\n        datapoints_to_alarm=1,\n        threshold=fn.timeout.to_milliseconds(),\n        treat_missing_data=cloudwatch.TreatMissingData.IGNORE,\n        alarm_name=\"My Lambda Timeout\"\n    )",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.CloudWatch;\n\n\nFunction fn = new Function(this, \"MyFunction\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Timeout = Duration.Minutes(5)\n});\n\nif (fn.Timeout)\n{\n    new Alarm(this, \"MyAlarm\", new AlarmProps {\n        Metric = fn.MetricDuration().With(new MetricOptions {\n            Statistic = \"Maximum\"\n        }),\n        EvaluationPeriods = 1,\n        DatapointsToAlarm = 1,\n        Threshold = fn.Timeout.ToMilliseconds(),\n        TreatMissingData = TreatMissingData.IGNORE,\n        AlarmName = \"My Lambda Timeout\"\n    });\n}",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunction\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .timeout(Duration.minutes(5))\n        .build();\n\nif (fn.getTimeout()) {\n    Alarm.Builder.create(this, \"MyAlarm\")\n            .metric(fn.metricDuration().with(MetricOptions.builder()\n                    .statistic(\"Maximum\")\n                    .build()))\n            .evaluationPeriods(1)\n            .datapointsToAlarm(1)\n            .threshold(fn.timeout.toMilliseconds())\n            .treatMissingData(TreatMissingData.IGNORE)\n            .alarmName(\"My Lambda Timeout\")\n            .build();\n}",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cloudwatch.TreatMissingData"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-cloudwatch.Metric#with",
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-cloudwatch.TreatMissingData",
        "@aws-cdk/aws-cloudwatch.TreatMissingData#IGNORE",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.Function#timeout",
        "@aws-cdk/aws-lambda.FunctionBase#metricDuration",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#toMilliseconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cdk from '@aws-cdk/core';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunction', {\n   runtime: lambda.Runtime.NODEJS_12_X,\n   handler: 'index.handler',\n   code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n   timeout: cdk.Duration.minutes(5),\n});\n\nif (fn.timeout) {\n   new cloudwatch.Alarm(this, `MyAlarm`, {\n      metric: fn.metricDuration().with({\n         statistic: 'Maximum',\n      }),\n      evaluationPeriods: 1,\n      datapointsToAlarm: 1,\n      threshold: fn.timeout.toMilliseconds(),\n      treatMissingData: cloudwatch.TreatMissingData.IGNORE,\n      alarmName: 'My Lambda Timeout',\n   });\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 7,
        "14": 1,
        "75": 41,
        "104": 2,
        "193": 3,
        "194": 16,
        "196": 6,
        "197": 2,
        "223": 1,
        "225": 1,
        "226": 1,
        "227": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "4e157b0c27f216e958a9e8508782c1447531156363e0117c16cb95d5be46d7bb"
    }
  }
}
