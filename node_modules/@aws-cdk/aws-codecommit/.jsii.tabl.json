{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "8ad4d95d3b76fc7f21ee8adb20a982a1937b06fee3cc3209a519cd90b5dcefdb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\n\nrepo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    description=\"Some description.\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\n\nRepository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Description = \"Some description.\"\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\n\nRepository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .description(\"Some description.\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    description: 'Some description.', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 21
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    description: 'Some description.', // optional property\n});",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ec16f7e2b1add575ffdf32cda3e755799f43e16a464c8f6b5df7f97e16ab9040"
    },
    "9ddee645a3823c32f247242308be6bd30482e5496edeb61127dd875eff3639e1": {
      "translations": {
        "python": {
          "source": "# trigger is established for all repository actions on all branches by default.\nrepo.notify(\"arn:aws:sns:*:123456789012:my_topic\")",
          "version": "1"
        },
        "csharp": {
          "source": "// trigger is established for all repository actions on all branches by default.\nrepo.Notify(\"arn:aws:sns:*:123456789012:my_topic\");",
          "version": "1"
        },
        "java": {
          "source": "// trigger is established for all repository actions on all branches by default.\nrepo.notify(\"arn:aws:sns:*:123456789012:my_topic\");",
          "version": "1"
        },
        "$": {
          "source": "// trigger is established for all repository actions on all branches by default.\nrepo.notify('arn:aws:sns:*:123456789012:my_topic');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 35
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "// trigger is established for all repository actions on all branches by default.\nrepo.notify('arn:aws:sns:*:123456789012:my_topic');",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "a2947a679010809217cb32a33ed5b76feafb642338352eb28e3d5ea881641f06": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\nimport path as path\n\nrepo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    code=codecommit.Code.from_directory(path.join(__dirname, \"directory/\"), \"develop\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nusing Path;\n\nRepository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Code = Code.FromDirectory(Join(__dirname, \"directory/\"), \"develop\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nimport path.*;\n\nRepository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .code(Code.fromDirectory(join(__dirname, \"directory/\"), \"develop\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as path from 'path';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 47
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Code",
        "@aws-cdk/aws-codecommit.Code#fromDirectory",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as path from 'path';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e6ea72f3f4e25e2bea49e18c1abd2b8cba9616ffa28c1ca0c43fa10f5fda10d3"
    },
    "d0ef7aae5ea3a83e1876f18d001b1a8cb6f8ba0407b8b2ff8b865c4f8c19ae1d": {
      "translations": {
        "python": {
          "source": "# starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.on_commit(\"CommitToMaster\",\n    target=targets.CodeBuildProject(project),\n    branches=[\"master\"]\n)\n\n# publishes a message to an Amazon SNS topic when a comment is made on a pull request\nrule = repo.on_comment_on_pull_request(\"CommentOnPullRequest\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.OnCommit(\"CommitToMaster\", new Struct {\n    Target = new targets.CodeBuildProject(project),\n    Branches = new [] { \"master\" }\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nvar rule = repo.OnCommentOnPullRequest(\"CommentOnPullRequest\", new Struct {\n    Target = new targets.SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit(\"CommitToMaster\", Map.of(\n        \"target\", new CodeBuildProject(project),\n        \"branches\", List.of(\"master\")));\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nObject rule = repo.onCommentOnPullRequest(\"CommentOnPullRequest\", Map.of(\n        \"target\", new SnsTopic(myTopic)));",
          "version": "1"
        },
        "$": {
          "source": "// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n    target: new targets.CodeBuildProject(project),\n    branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n    target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 63
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "// starts a CodeBuild project when a commit is pushed to the \"master\" branch of the repo\nrepo.onCommit('CommitToMaster', {\n    target: new targets.CodeBuildProject(project),\n    branches: ['master'],\n});\n\n// publishes a message to an Amazon SNS topic when a comment is made on a pull request\nconst rule = repo.onCommentOnPullRequest('CommentOnPullRequest', {\n    target: new targets.SnsTopic(myTopic),\n});",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c0ed5e6ad50f5320b715acfa7f21fb7705b3dcef12af12ecbba438a91b5568af": {
      "translations": {
        "python": {
          "source": "target = chatbot.SlackChannelConfiguration(stack, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\nrule = repository.notify_on_pull_request_created(\"NotifyOnPullRequestCreated\", target)",
          "version": "1"
        },
        "csharp": {
          "source": "var target = new chatbot.SlackChannelConfiguration(stack, \"MySlackChannel\", new Struct {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\nvar rule = repository.NotifyOnPullRequestCreated(\"NotifyOnPullRequestCreated\", target);",
          "version": "1"
        },
        "java": {
          "source": "Object target = SlackChannelConfiguration.Builder.create(stack, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\nObject rule = repository.notifyOnPullRequestCreated(\"NotifyOnPullRequestCreated\", target);",
          "version": "1"
        },
        "$": {
          "source": "const target = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\nconst rule = repository.notifyOnPullRequestCreated('NotifyOnPullRequestCreated', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codecommit"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "const target = new chatbot.SlackChannelConfiguration(stack, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\nconst rule = repository.notifyOnPullRequestCreated('NotifyOnPullRequestCreated', target);",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "3c722490016d722b32b599c6520e7983cd11008334893aa0fae638eac8ae18bd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\nimport path as path\n\nrepo = codecommit.Repository(self, \"Repository\",\n    repository_name=\"MyRepositoryName\",\n    code=codecommit.Code.from_directory(path.join(__dirname, \"directory/\"), \"develop\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nusing Path;\n\nRepository repo = new Repository(this, \"Repository\", new RepositoryProps {\n    RepositoryName = \"MyRepositoryName\",\n    Code = Code.FromDirectory(Join(__dirname, \"directory/\"), \"develop\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nimport path.*;\n\nRepository repo = Repository.Builder.create(this, \"Repository\")\n        .repositoryName(\"MyRepositoryName\")\n        .code(Code.fromDirectory(join(__dirname, \"directory/\"), \"develop\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as path from 'path';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.Code"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.Code",
        "@aws-cdk/aws-codecommit.Code#fromDirectory",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as path from 'path';\n\nconst repo = new codecommit.Repository(this, 'Repository', {\n    repositoryName: 'MyRepositoryName',\n    code: codecommit.Code.fromDirectory(path.join(__dirname, 'directory/'), 'develop'), // optional property, branch parameter can be omitted\n});",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "e6ea72f3f4e25e2bea49e18c1abd2b8cba9616ffa28c1ca0c43fa10f5fda10d3"
    },
    "03c9fcf61c96128516f5cd9f70e4fec218888ba32ff20b2690ccf6bdfc623969": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codecommit as codecommit\nimport aws_cdk.aws_events_targets as targets\n\n# repo is of type Repository\n\nmy_topic = sns.Topic(self, \"Topic\")\n\nrepo.on_commit(\"OnCommit\",\n    target=targets.SnsTopic(my_topic)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeCommit;\nusing Amazon.CDK.AWS.Events.Targets;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new SnsTopic(myTopic)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codecommit.*;\nimport software.amazon.awscdk.services.events.targets.*;\n\nRepository repo;\n\nTopic myTopic = new Topic(this, \"Topic\");\n\nrepo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(new SnsTopic(myTopic))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.OnCommitOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.Topic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as targets from '@aws-cdk/aws-events-targets';\n\ndeclare const repo: codecommit.Repository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as subscriptions from '@aws-cdk/aws-sns-subscriptions';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myTopic = new sns.Topic(this, 'Topic');\n\nrepo.onCommit('OnCommit', {\n  target: new targets.SnsTopic(myTopic),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b1faa2c36daec384c26165606bc9c4d0b36d39d31f6b73ecb0330cf36c5516b8"
    },
    "162ace91909dc78ebfac10e66f06496a08260412bcc469b9d840601522399fcd": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.Repository"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "025240e8db40fa7035df26f7a54aa1a6267f9d6f141168018cd30d3ea136c65d"
    },
    "27a5dad99daaed042a5f2c73b76ec91ee203bc49c0998f52ad1efb20cc10bbb5": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codecommit.RepositoryProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "025240e8db40fa7035df26f7a54aa1a6267f9d6f141168018cd30d3ea136c65d"
    }
  }
}
