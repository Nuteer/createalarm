{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "2cd14217ee7938b5d28536966737944b434c82d4adc7ce07b5ce5d918d1208f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 31
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "72e448dcd7b946d505bd84b9306826ab5b9ea08d1a45d995cacdf4e7b1be3225": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nvpc = ec2.Vpc(stack, \"Vpc\", max_azs=2)\n\nnamespace = servicediscovery.PrivateDnsNamespace(stack, \"Namespace\",\n    name=\"boobar.com\",\n    vpc=vpc\n)\n\nservice = namespace.create_service(\"Service\",\n    dns_record_type=servicediscovery.DnsRecordType.A_AAAA,\n    dns_ttl=cdk.Duration.seconds(30),\n    load_balancer=True\n)\n\nloadbalancer = elbv2.ApplicationLoadBalancer(stack, \"LB\", vpc=vpc, internet_facing=True)\n\nservice.register_load_balancer(\"Loadbalancer\", loadbalancer)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nVpc vpc = new Vpc(stack, \"Vpc\", new VpcProps { MaxAzs = 2 });\n\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(stack, \"Namespace\", new PrivateDnsNamespaceProps {\n    Name = \"boobar.com\",\n    Vpc = vpc\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    DnsRecordType = DnsRecordType.A_AAAA,\n    DnsTtl = Duration.Seconds(30),\n    LoadBalancer = true\n});\n\nApplicationLoadBalancer loadbalancer = new ApplicationLoadBalancer(stack, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\n\nservice.RegisterLoadBalancer(\"Loadbalancer\", loadbalancer);\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nVpc vpc = Vpc.Builder.create(stack, \"Vpc\").maxAzs(2).build();\n\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"boobar.com\")\n        .vpc(vpc)\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .dnsRecordType(DnsRecordType.A_AAAA)\n        .dnsTtl(Duration.seconds(30))\n        .loadBalancer(true)\n        .build());\n\nApplicationLoadBalancer loadbalancer = ApplicationLoadBalancer.Builder.create(stack, \"LB\").vpc(vpc).internetFacing(true).build();\n\nservice.registerLoadBalancer(\"Loadbalancer\", loadbalancer);\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });\n\nconst namespace = new servicediscovery.PrivateDnsNamespace(stack, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\n\nconst service = namespace.createService('Service', {\n  dnsRecordType: servicediscovery.DnsRecordType.A_AAAA,\n  dnsTtl: cdk.Duration.seconds(30),\n  loadBalancer: true,\n});\n\nconst loadbalancer = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc, internetFacing: true });\n\nservice.registerLoadBalancer('Loadbalancer', loadbalancer);\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 73
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A_AAAA",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerLoadBalancer",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });\n\nconst namespace = new servicediscovery.PrivateDnsNamespace(stack, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\n\nconst service = namespace.createService('Service', {\n  dnsRecordType: servicediscovery.DnsRecordType.A_AAAA,\n  dnsTtl: cdk.Duration.seconds(30),\n  loadBalancer: true,\n});\n\nconst loadbalancer = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc, internetFacing: true });\n\nservice.registerLoadBalancer('Loadbalancer', loadbalancer);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 45,
        "106": 2,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 5,
        "225": 6,
        "226": 2,
        "242": 6,
        "243": 6,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "51abd117345f6c01428a19f0394bd3e54611a048d7d8b85fa666fe65ea881208"
    },
    "ecea33433b24b5d93d1bb4948ac01da6f9510bc63a4ef2ecaaf451360be13309": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    },
    "c4344deaa7d2bf2a2224f6528d9e9ae88b36762b36f80533ed16e4d2b0afea92": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 142
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "95ed0e5e293c5e2e7df089985ffdfa19632fd7a6c62861e5f79277d9d818e739"
    },
    "8979523cf85f77b07766fbe12b681f49d51a81bf2405686afd1f063b33100f2c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.BaseServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "1aefb5af034f7b7f9cbe6d6bd3a2e0b0b1b6d0a0df0109bff813d808334dee59": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "95ed0e5e293c5e2e7df089985ffdfa19632fd7a6c62861e5f79277d9d818e739"
    },
    "ca1cd5af3b6954e1f84e4fdd9a0c9ab43c0919637b46c3a08d4d461553811a0a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "95ed0e5e293c5e2e7df089985ffdfa19632fd7a6c62861e5f79277d9d818e739"
    },
    "fbd5abeabee0e6168c82976eedfa71e0014f685b6281dc333d4b43e7520d22ba": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.DnsServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    },
    "bb427af4691362a378ef99f7c4b1b36bded0c6c0ff1bbf29b0b2d4ccf48148d5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "c06e2b06c70e73dfef62db72f24dfa740bf67bb2a87c0f068c5f0a49b76e5a28": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "94f29a542517c7c584e7df8892ab0c138ad3bd652e97869108254df3ca07cd83": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "da753bb37bc91d279efcc9f69c35515d34793ad3b5ecfd33cc523618b82eb3e1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "b440f8cfa7fcf5c9a7a6c1529aa16115e77e2e26307d1bc2e333f7dcaee67dfb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "ebe1c68f03d1309f821b9d0002a26463bd4759026b9478e1de2b28c15554bac6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "c9c4db576df290fcd0df930771c9f283ce9e50a0ce4c3a23fa007d8d1efe38b3"
    },
    "32a632c581c601a06843e58dc78d0f474bfafd2970043341c94f1de458445c0e": {
      "translations": {
        "python": {
          "source": "# mesh is of type Mesh\n# Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc = ec2.Vpc(self, \"vpc\")\nnamespace = cloudmap.PrivateDnsNamespace(self, \"test-namespace\",\n    vpc=vpc,\n    name=\"domain.local\"\n)\nservice = namespace.create_service(\"Svc\")\nnode = mesh.add_virtual_node(\"virtual-node\",\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        outlier_detection=appmesh.OutlierDetection(\n            base_ejection_duration=cdk.Duration.seconds(10),\n            interval=cdk.Duration.seconds(30),\n            max_ejection_percent=50,\n            max_server_errors=5\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"test-namespace\", new PrivateDnsNamespaceProps {\n    Vpc = vpc,\n    Name = \"domain.local\"\n});\nService service = namespace.CreateService(\"Svc\");\nVirtualNode node = mesh.AddVirtualNode(\"virtual-node\", new VirtualNodeBaseProps {\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        OutlierDetection = new OutlierDetection {\n            BaseEjectionDuration = Duration.Seconds(10),\n            Interval = Duration.Seconds(30),\n            MaxEjectionPercent = 50,\n            MaxServerErrors = 5\n        }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"test-namespace\")\n        .vpc(vpc)\n        .name(\"domain.local\")\n        .build();\nService service = namespace.createService(\"Svc\");\nVirtualNode node = mesh.addVirtualNode(\"virtual-node\", VirtualNodeBaseProps.builder()\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .outlierDetection(OutlierDetection.builder()\n                        .baseEjectionDuration(Duration.seconds(10))\n                        .interval(Duration.seconds(30))\n                        .maxEjectionPercent(50)\n                        .maxServerErrors(5)\n                        .build())\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.OutlierDetection",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeBaseProps",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "85bb75935aa74231bc4f709ac2de3e863c03146dd7087447e1c6661bb38f2a10"
    },
    "6bae69cb22372392824a98321f41ed46ce689841e167efbc0b44fd4f05c4f784": {
      "translations": {
        "python": {
          "source": "# mesh is of type Mesh\n# Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc = ec2.Vpc(self, \"vpc\")\nnamespace = cloudmap.PrivateDnsNamespace(self, \"test-namespace\",\n    vpc=vpc,\n    name=\"domain.local\"\n)\nservice = namespace.create_service(\"Svc\")\nnode = mesh.add_virtual_node(\"virtual-node\",\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        outlier_detection=appmesh.OutlierDetection(\n            base_ejection_duration=cdk.Duration.seconds(10),\n            interval=cdk.Duration.seconds(30),\n            max_ejection_percent=50,\n            max_server_errors=5\n        )\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"test-namespace\", new PrivateDnsNamespaceProps {\n    Vpc = vpc,\n    Name = \"domain.local\"\n});\nService service = namespace.CreateService(\"Svc\");\nVirtualNode node = mesh.AddVirtualNode(\"virtual-node\", new VirtualNodeBaseProps {\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        OutlierDetection = new OutlierDetection {\n            BaseEjectionDuration = Duration.Seconds(10),\n            Interval = Duration.Seconds(30),\n            MaxEjectionPercent = 50,\n            MaxServerErrors = 5\n        }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"test-namespace\")\n        .vpc(vpc)\n        .name(\"domain.local\")\n        .build();\nService service = namespace.createService(\"Svc\");\nVirtualNode node = mesh.addVirtualNode(\"virtual-node\", VirtualNodeBaseProps.builder()\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .outlierDetection(OutlierDetection.builder()\n                        .baseEjectionDuration(Duration.seconds(10))\n                        .interval(Duration.seconds(30))\n                        .maxEjectionPercent(50)\n                        .maxServerErrors(5)\n                        .build())\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.OutlierDetection",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeBaseProps",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "85bb75935aa74231bc4f709ac2de3e863c03146dd7087447e1c6661bb38f2a10"
    },
    "1b3883f63571a9c07469d69ce52e0377871743d2b6abd451313a937e28224a4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    },
    "b18effd040c4fe16efbf9ee8845c5b544a3101f2dcaff46f8955c12520dff9dd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    },
    "691b1303a8f191a88fd2c8f0dceff86ac41b717b2c6231981b98bbf0c63c0b98": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "43f04a9adb024cd3bd5a4a8360791121269f2c7f49123baf370f34b148eeb28d"
    }
  }
}
