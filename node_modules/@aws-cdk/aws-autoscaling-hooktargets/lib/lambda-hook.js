"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionHook = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const sns = require("@aws-cdk/aws-sns");
const subs = require("@aws-cdk/aws-sns-subscriptions");
const common_1 = require("./common");
const topic_hook_1 = require("./topic-hook");
/**
 * Use a Lambda Function as a hook target.
 *
 * Internally creates a Topic to make the connection.
 *
 * @stability stable
 */
class FunctionHook {
    /**
     * @param fn Function to invoke in response to a lifecycle event.
     * @param encryptionKey If provided, this key is used to encrypt the contents of the SNS topic.
     * @stability stable
     */
    constructor(fn, encryptionKey) {
        this.fn = fn;
        this.encryptionKey = encryptionKey;
    }
    /**
     * If the `IRole` does not exist in `options`, will create an `IRole` and an SNS Topic and attach both to the lifecycle hook.
     *
     * If the `IRole` does exist in `options`, will only create an SNS Topic and attach it to the lifecycle hook.
     *
     * @stability stable
     */
    bind(_scope, options) {
        var _b;
        const topic = new sns.Topic(_scope, 'Topic', {
            masterKey: this.encryptionKey,
        });
        const role = common_1.createRole(_scope, options.role);
        // Per: https://docs.aws.amazon.com/sns/latest/dg/sns-key-management.html#sns-what-permissions-for-sse
        // Topic's grantPublish() is in a base class that does not know there is a kms key, and so does not
        // grant appropriate permissions to the kms key. We do that here to ensure the correct permissions
        // are in place.
        (_b = this.encryptionKey) === null || _b === void 0 ? void 0 : _b.grant(role, 'kms:Decrypt', 'kms:GenerateDataKey');
        topic.addSubscription(new subs.LambdaSubscription(this.fn));
        return new topic_hook_1.TopicHook(topic).bind(_scope, { lifecycleHook: options.lifecycleHook, role });
    }
}
exports.FunctionHook = FunctionHook;
_a = JSII_RTTI_SYMBOL_1;
FunctionHook[_a] = { fqn: "@aws-cdk/aws-autoscaling-hooktargets.FunctionHook", version: "1.137.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYW1iZGEtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLHdDQUF3QztBQUN4Qyx1REFBdUQ7QUFFdkQscUNBQXNDO0FBQ3RDLDZDQUF5Qzs7Ozs7Ozs7QUFPekMsTUFBYSxZQUFZOzs7Ozs7SUFFdkIsWUFBNkIsRUFBb0IsRUFBbUIsYUFBd0I7UUFBL0QsT0FBRSxHQUFGLEVBQUUsQ0FBa0I7UUFBbUIsa0JBQWEsR0FBYixhQUFhLENBQVc7S0FDM0Y7Ozs7Ozs7O0lBR00sSUFBSSxDQUFDLE1BQWlCLEVBQUUsT0FBMEM7O1FBQ3ZFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO1lBQzNDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUM5QixDQUFDLENBQUM7UUFFSCxNQUFNLElBQUksR0FBRyxtQkFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUMsc0dBQXNHO1FBQ3RHLG1HQUFtRztRQUNuRyxrR0FBa0c7UUFDbEcsZ0JBQWdCO1FBQ2hCLE1BQUEsSUFBSSxDQUFDLGFBQWEsMENBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUscUJBQXFCLEVBQUU7UUFDdEUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxPQUFPLElBQUksc0JBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMxRjs7QUFwQkgsb0NBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXV0b3NjYWxpbmcgZnJvbSAnQGF3cy1jZGsvYXdzLWF1dG9zY2FsaW5nJztcbmltcG9ydCAqIGFzIGttcyBmcm9tICdAYXdzLWNkay9hd3Mta21zJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdAYXdzLWNkay9hd3Mtc25zJztcbmltcG9ydCAqIGFzIHN1YnMgZnJvbSAnQGF3cy1jZGsvYXdzLXNucy1zdWJzY3JpcHRpb25zJztcblxuaW1wb3J0IHsgY3JlYXRlUm9sZSB9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7IFRvcGljSG9vayB9IGZyb20gJy4vdG9waWMtaG9vayc7XG5cbi8vIGtlZXAgdGhpcyBpbXBvcnQgc2VwYXJhdGUgZnJvbSBvdGhlciBpbXBvcnRzIHRvIHJlZHVjZSBjaGFuY2UgZm9yIG1lcmdlIGNvbmZsaWN0cyB3aXRoIHYyLW1haW5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBsaWNhdGUtaW1wb3J0cywgaW1wb3J0L29yZGVyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uSG9vayBpbXBsZW1lbnRzIGF1dG9zY2FsaW5nLklMaWZlY3ljbGVIb29rVGFyZ2V0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZm46IGxhbWJkYS5JRnVuY3Rpb24sIHByaXZhdGUgcmVhZG9ubHkgZW5jcnlwdGlvbktleT86IGttcy5JS2V5KSB7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGJpbmQoX3Njb3BlOiBDb25zdHJ1Y3QsIG9wdGlvbnM6IGF1dG9zY2FsaW5nLkJpbmRIb29rVGFyZ2V0T3B0aW9ucyk6IGF1dG9zY2FsaW5nLkxpZmVjeWNsZUhvb2tUYXJnZXRDb25maWcge1xuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyhfc2NvcGUsICdUb3BpYycsIHtcbiAgICAgIG1hc3RlcktleTogdGhpcy5lbmNyeXB0aW9uS2V5LFxuICAgIH0pO1xuXG4gICAgY29uc3Qgcm9sZSA9IGNyZWF0ZVJvbGUoX3Njb3BlLCBvcHRpb25zLnJvbGUpO1xuXG4gICAgLy8gUGVyOiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc25zL2xhdGVzdC9kZy9zbnMta2V5LW1hbmFnZW1lbnQuaHRtbCNzbnMtd2hhdC1wZXJtaXNzaW9ucy1mb3Itc3NlXG4gICAgLy8gVG9waWMncyBncmFudFB1Ymxpc2goKSBpcyBpbiBhIGJhc2UgY2xhc3MgdGhhdCBkb2VzIG5vdCBrbm93IHRoZXJlIGlzIGEga21zIGtleSwgYW5kIHNvIGRvZXMgbm90XG4gICAgLy8gZ3JhbnQgYXBwcm9wcmlhdGUgcGVybWlzc2lvbnMgdG8gdGhlIGttcyBrZXkuIFdlIGRvIHRoYXQgaGVyZSB0byBlbnN1cmUgdGhlIGNvcnJlY3QgcGVybWlzc2lvbnNcbiAgICAvLyBhcmUgaW4gcGxhY2UuXG4gICAgdGhpcy5lbmNyeXB0aW9uS2V5Py5ncmFudChyb2xlLCAna21zOkRlY3J5cHQnLCAna21zOkdlbmVyYXRlRGF0YUtleScpO1xuICAgIHRvcGljLmFkZFN1YnNjcmlwdGlvbihuZXcgc3Vicy5MYW1iZGFTdWJzY3JpcHRpb24odGhpcy5mbikpO1xuICAgIHJldHVybiBuZXcgVG9waWNIb29rKHRvcGljKS5iaW5kKF9zY29wZSwgeyBsaWZlY3ljbGVIb29rOiBvcHRpb25zLmxpZmVjeWNsZUhvb2ssIHJvbGUgfSk7XG4gIH1cbn1cbiJdfQ==