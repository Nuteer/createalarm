"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FargateTaskDefinition = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
const _imported_task_definition_1 = require("../base/_imported-task-definition");
const task_definition_1 = require("../base/task-definition");
/**
 * The details of a task definition run on a Fargate cluster.
 *
 * @stability stable
 * @resource AWS::ECS::TaskDefinition
 */
class FargateTaskDefinition extends task_definition_1.TaskDefinition {
    /**
     * Constructs a new instance of the FargateTaskDefinition class.
     *
     * @stability stable
     */
    constructor(scope, id, props = {}) {
        super(scope, id, {
            ...props,
            cpu: props.cpu !== undefined ? core_1.Tokenization.stringifyNumber(props.cpu) : '256',
            memoryMiB: props.memoryLimitMiB !== undefined ? core_1.Tokenization.stringifyNumber(props.memoryLimitMiB) : '512',
            compatibility: task_definition_1.Compatibility.FARGATE,
            networkMode: task_definition_1.NetworkMode.AWS_VPC,
        });
        /**
         * The Docker networking mode to use for the containers in the task.
         *
         * Fargate tasks require the awsvpc network mode.
         *
         * @stability stable
         */
        this.networkMode = task_definition_1.NetworkMode.AWS_VPC;
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_FargateTaskDefinitionProps(props);
        if (props.ephemeralStorageGiB && (props.ephemeralStorageGiB < 21 || props.ephemeralStorageGiB > 200)) {
            throw new Error('Ephemeral storage size must be between 21GiB and 200GiB');
        }
        this.ephemeralStorageGiB = props.ephemeralStorageGiB;
    }
    /**
     * Imports a task definition from the specified task definition ARN.
     *
     * @stability stable
     */
    static fromFargateTaskDefinitionArn(scope, id, fargateTaskDefinitionArn) {
        return new _imported_task_definition_1.ImportedTaskDefinition(scope, id, { taskDefinitionArn: fargateTaskDefinitionArn });
    }
    /**
     * Import an existing Fargate task definition from its attributes.
     *
     * @stability stable
     */
    static fromFargateTaskDefinitionAttributes(scope, id, attrs) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_FargateTaskDefinitionAttributes(attrs);
        return new _imported_task_definition_1.ImportedTaskDefinition(scope, id, {
            taskDefinitionArn: attrs.taskDefinitionArn,
            compatibility: task_definition_1.Compatibility.FARGATE,
            networkMode: attrs.networkMode,
            taskRole: attrs.taskRole,
        });
    }
}
exports.FargateTaskDefinition = FargateTaskDefinition;
_a = JSII_RTTI_SYMBOL_1;
FargateTaskDefinition[_a] = { fqn: "@aws-cdk/aws-ecs.FargateTaskDefinition", version: "1.137.0" };
//# sourceMappingURL=data:application/json;base64,