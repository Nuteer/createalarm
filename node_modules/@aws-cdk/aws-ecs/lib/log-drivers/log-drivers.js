"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogDrivers = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_log_driver_1 = require("./aws-log-driver");
const firelens_log_driver_1 = require("./firelens-log-driver");
const fluentd_log_driver_1 = require("./fluentd-log-driver");
const gelf_log_driver_1 = require("./gelf-log-driver");
const journald_log_driver_1 = require("./journald-log-driver");
const json_file_log_driver_1 = require("./json-file-log-driver");
const splunk_log_driver_1 = require("./splunk-log-driver");
const syslog_log_driver_1 = require("./syslog-log-driver");
/**
 * The base class for log drivers.
 *
 * @stability stable
 */
class LogDrivers {
    /**
     * Creates a log driver configuration that sends log information to CloudWatch Logs.
     *
     * @stability stable
     */
    static awsLogs(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_AwsLogDriverProps(props);
        return new aws_log_driver_1.AwsLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to fluentd Logs.
     *
     * @stability stable
     */
    static fluentd(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_FluentdLogDriverProps(props);
        return new fluentd_log_driver_1.FluentdLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to gelf Logs.
     *
     * @stability stable
     */
    static gelf(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_GelfLogDriverProps(props);
        return new gelf_log_driver_1.GelfLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to journald Logs.
     *
     * @stability stable
     */
    static journald(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_JournaldLogDriverProps(props);
        return new journald_log_driver_1.JournaldLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to json-file Logs.
     *
     * @stability stable
     */
    static jsonFile(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_JsonFileLogDriverProps(props);
        return new json_file_log_driver_1.JsonFileLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to splunk Logs.
     *
     * @stability stable
     */
    static splunk(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_SplunkLogDriverProps(props);
        return new splunk_log_driver_1.SplunkLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to syslog Logs.
     *
     * @stability stable
     */
    static syslog(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_SyslogLogDriverProps(props);
        return new syslog_log_driver_1.SyslogLogDriver(props);
    }
    /**
     * Creates a log driver configuration that sends log information to firelens log router.
     *
     * For detail configurations, please refer to Amazon ECS FireLens Examples:
     * https://github.com/aws-samples/amazon-ecs-firelens-examples
     *
     * @stability stable
     */
    static firelens(props) {
        jsiiDeprecationWarnings._aws_cdk_aws_ecs_FireLensLogDriverProps(props);
        return new firelens_log_driver_1.FireLensLogDriver(props);
    }
}
exports.LogDrivers = LogDrivers;
_a = JSII_RTTI_SYMBOL_1;
LogDrivers[_a] = { fqn: "@aws-cdk/aws-ecs.LogDrivers", version: "1.137.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLWRyaXZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2ctZHJpdmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBbUU7QUFDbkUsK0RBQWtGO0FBQ2xGLDZEQUErRTtBQUMvRSx1REFBc0U7QUFDdEUsK0RBQWtGO0FBQ2xGLGlFQUFtRjtBQUVuRiwyREFBNEU7QUFDNUUsMkRBQTRFOzs7Ozs7QUFHNUUsTUFBYSxVQUFVOzs7Ozs7SUFFZCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQXdCOztRQUM1QyxPQUFPLElBQUksNkJBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQzs7Ozs7O0lBR00sTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUE2Qjs7UUFDakQsT0FBTyxJQUFJLHFDQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BDOzs7Ozs7SUFHTSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQXlCOztRQUMxQyxPQUFPLElBQUksK0JBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNqQzs7Ozs7O0lBR00sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUE4Qjs7UUFDbkQsT0FBTyxJQUFJLHVDQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDOzs7Ozs7SUFHTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQThCOztRQUNuRCxPQUFPLElBQUksd0NBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckM7Ozs7OztJQUdNLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBMkI7O1FBQzlDLE9BQU8sSUFBSSxtQ0FBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25DOzs7Ozs7SUFHTSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQTRCOztRQUMvQyxPQUFPLElBQUksbUNBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNuQzs7Ozs7Ozs7O0lBR00sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUE2Qjs7UUFDbEQsT0FBTyxJQUFJLHVDQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDOztBQXZDSCxnQ0F3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd3NMb2dEcml2ZXIsIEF3c0xvZ0RyaXZlclByb3BzIH0gZnJvbSAnLi9hd3MtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBGaXJlTGVuc0xvZ0RyaXZlciwgRmlyZUxlbnNMb2dEcml2ZXJQcm9wcyB9IGZyb20gJy4vZmlyZWxlbnMtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBGbHVlbnRkTG9nRHJpdmVyLCBGbHVlbnRkTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL2ZsdWVudGQtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBHZWxmTG9nRHJpdmVyLCBHZWxmTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL2dlbGYtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBKb3VybmFsZExvZ0RyaXZlciwgSm91cm5hbGRMb2dEcml2ZXJQcm9wcyB9IGZyb20gJy4vam91cm5hbGQtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBKc29uRmlsZUxvZ0RyaXZlciwgSnNvbkZpbGVMb2dEcml2ZXJQcm9wcyB9IGZyb20gJy4vanNvbi1maWxlLWxvZy1kcml2ZXInO1xuaW1wb3J0IHsgTG9nRHJpdmVyIH0gZnJvbSAnLi9sb2ctZHJpdmVyJztcbmltcG9ydCB7IFNwbHVua0xvZ0RyaXZlciwgU3BsdW5rTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL3NwbHVuay1sb2ctZHJpdmVyJztcbmltcG9ydCB7IFN5c2xvZ0xvZ0RyaXZlciwgU3lzbG9nTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL3N5c2xvZy1sb2ctZHJpdmVyJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgTG9nRHJpdmVycyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGF3c0xvZ3MocHJvcHM6IEF3c0xvZ0RyaXZlclByb3BzKTogTG9nRHJpdmVyIHtcbiAgICByZXR1cm4gbmV3IEF3c0xvZ0RyaXZlcihwcm9wcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBmbHVlbnRkKHByb3BzPzogRmx1ZW50ZExvZ0RyaXZlclByb3BzKTogTG9nRHJpdmVyIHtcbiAgICByZXR1cm4gbmV3IEZsdWVudGRMb2dEcml2ZXIocHJvcHMpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZ2VsZihwcm9wczogR2VsZkxvZ0RyaXZlclByb3BzKTogTG9nRHJpdmVyIHtcbiAgICByZXR1cm4gbmV3IEdlbGZMb2dEcml2ZXIocHJvcHMpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGpvdXJuYWxkKHByb3BzPzogSm91cm5hbGRMb2dEcml2ZXJQcm9wcyk6IExvZ0RyaXZlciB7XG4gICAgcmV0dXJuIG5ldyBKb3VybmFsZExvZ0RyaXZlcihwcm9wcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGpzb25GaWxlKHByb3BzPzogSnNvbkZpbGVMb2dEcml2ZXJQcm9wcyk6IExvZ0RyaXZlciB7XG4gICAgcmV0dXJuIG5ldyBKc29uRmlsZUxvZ0RyaXZlcihwcm9wcyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIHNwbHVuayhwcm9wczogU3BsdW5rTG9nRHJpdmVyUHJvcHMpOiBMb2dEcml2ZXIge1xuICAgIHJldHVybiBuZXcgU3BsdW5rTG9nRHJpdmVyKHByb3BzKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgc3lzbG9nKHByb3BzPzogU3lzbG9nTG9nRHJpdmVyUHJvcHMpOiBMb2dEcml2ZXIge1xuICAgIHJldHVybiBuZXcgU3lzbG9nTG9nRHJpdmVyKHByb3BzKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZpcmVsZW5zKHByb3BzOiBGaXJlTGVuc0xvZ0RyaXZlclByb3BzKTogTG9nRHJpdmVyIHtcbiAgICByZXR1cm4gbmV3IEZpcmVMZW5zTG9nRHJpdmVyKHByb3BzKTtcbiAgfVxufVxuIl19