{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "c9c6a8c88b4fb7be990cedb097c2f2aa75160427b4dacd11ef3f72821155191d": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\n# Create an ECS cluster\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Add capacity to it\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"DefaultContainer\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=512\n)\n\n# Instantiate an Amazon ECS Service\necs_service = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Add capacity to it\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"DefaultContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 512\n});\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\n// Create an ECS cluster\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Add capacity to it\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"DefaultContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(512)\n        .build());\n\n// Instantiate an Amazon ECS Service\nEc2Service ecsService = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Create an ECS cluster\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Add capacity to it\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('DefaultContainer', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 512,\n});\n\n// Instantiate an Amazon ECS Service\nconst ecsService = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 28,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e5a7fb5cd5b764379f9cb7937f8f5952be970813bfeb32e82e3a513b6c6d0272"
    },
    "b3dac31f45ff994dbec7c0d5143e78caf2e31c19670a2aa03606cabaeae774c1": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "576e0a906ec9216859814361fe665999af068c8853f39d1a67de18a7903e6649"
    },
    "b038e886ecca7a7b690d0dc4cd2c1eb34700cdd6c0800a822ff78748889b09af": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Either add default capacity\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(),\n    # Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    # machineImage: EcsOptimizedImage.amazonLinux2(),\n    desired_capacity=3\n)\n\ncluster.add_auto_scaling_group(auto_scaling_group)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Either add default capacity\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux(),\n    // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    // machineImage: EcsOptimizedImage.amazonLinux2(),\n    DesiredCapacity = 3\n});\n\ncluster.AddAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Either add default capacity\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .machineImage(EcsOptimizedImage.amazonLinux())\n        // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n        // machineImage: EcsOptimizedImage.amazonLinux2(),\n        .desiredCapacity(3)\n        .build();\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAutoScalingGroup",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "2d8e282b0d128f76ac5b8f93a0eb45467ce12c730a094f733f4b39251aba504b"
    },
    "00471cdcbafcff42bd1b016db774055e9fb4a0c3ec03e93bc10e985be876d2f9": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(cached_in_context=True),\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    MachineImage = EcsOptimizedImage.AmazonLinux(new EcsOptimizedImageOptions { CachedInContext = true }),\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .machineImage(EcsOptimizedImage.amazonLinux(EcsOptimizedImageOptions.builder().cachedInContext(true).build()))\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 149
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d2d743ad8c1da737ebcd56198e4ee2329cf78cfe9e8e4ae797f6ff3c75617f82"
    },
    "121007239be1194e23fd944eec608101cae029f6c9952b50622f624318feebf8": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"bottlerocket-asg\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.large\"),\n    machine_image=ecs.BottleRocketImage()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"bottlerocket-asg\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c5.large\"),\n    MachineImage = new BottleRocketImage()\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"bottlerocket-asg\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c5.large\"))\n        .machineImage(new BottleRocketImage())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 167
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.BottleRocketImage",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fc11527579d6b6787cd1af537afd69dedf70b661f31fdaedfbf6a2f74ebb2f71"
    },
    "617f46cc0f772b3e05233dc1b103f5072a60d5882f8c0e638a9d381818d98583": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.ARM)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.ARM)\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2(AmiHardwareType.ARM))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 184
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#ARM",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6356a964f04f55cf20c073e492772013b2eff0fd3b770a6470f521e49b71f911"
    },
    "5db6bf91e6482b9a5286f7036c9f951d7de11f8b2a8fea10171cf690bdbe98ef": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image_type=ecs.MachineImageType.BOTTLEROCKET\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 196
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.MachineImageType",
        "@aws-cdk/aws-ecs.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f02178fb813718a7a196f00edae3b9534d14773b2ff5af1759e4b4c91d334427"
    },
    "1bb9cfdd26f05f212a90917efd32f414bd3c3e440a45a9723cc5886e54f527b8": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\n# Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.add_capacity(\"AsgSpot\",\n    max_capacity=2,\n    min_capacity=2,\n    desired_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.xlarge\"),\n    spot_price=\"0.0735\",\n    # Enable the Automated Spot Draining support for Amazon ECS\n    spot_instance_draining=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.AddCapacity(\"AsgSpot\", new AddCapacityOptions {\n    MaxCapacity = 2,\n    MinCapacity = 2,\n    DesiredCapacity = 2,\n    InstanceType = new InstanceType(\"c5.xlarge\"),\n    SpotPrice = \"0.0735\",\n    // Enable the Automated Spot Draining support for Amazon ECS\n    SpotInstanceDraining = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity(\"AsgSpot\", AddCapacityOptions.builder()\n        .maxCapacity(2)\n        .minCapacity(2)\n        .desiredCapacity(2)\n        .instanceType(new InstanceType(\"c5.xlarge\"))\n        .spotPrice(\"0.0735\")\n        // Enable the Automated Spot Draining support for Amazon ECS\n        .spotInstanceDraining(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity('AsgSpot', {\n  maxCapacity: 2,\n  minCapacity: 2,\n  desiredCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.xlarge'),\n  spotPrice: '0.0735',\n  // Enable the Automated Spot Draining support for Amazon ECS\n  spotInstanceDraining: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 210
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add an AutoScalingGroup with spot instances to the existing cluster\ncluster.addCapacity('AsgSpot', {\n  maxCapacity: 2,\n  minCapacity: 2,\n  desiredCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.xlarge'),\n  spotPrice: '0.0735',\n  // Enable the Automated Spot Draining support for Amazon ECS\n  spotInstanceDraining: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 13,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e08e6988979565c5151af1ac289e989ad4ad27a19af3c601e8cdaa56a7323a9d"
    },
    "9160d872aa0e50f4fd6737806775c28b280ac47895a3eea288872a9714be1bae": {
      "translations": {
        "python": {
          "source": "# Given\n# cluster is of type Cluster\n# key is of type Key\n\n# Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.add_capacity(\"ASGEncryptedSNS\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3,\n    topic_encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Given\nCluster cluster;\nKey key;\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.AddCapacity(\"ASGEncryptedSNS\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3,\n    TopicEncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given\nCluster cluster;\nKey key;\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity(\"ASGEncryptedSNS\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .topicEncryptionKey(key)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Given\ndeclare const cluster: ecs.Cluster;\ndeclare const key: kms.Key;\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity('ASGEncryptedSNS', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n  topicEncryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 232
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-kms.IKey"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Given\ndeclare const cluster: ecs.Cluster;\ndeclare const key: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Then, use that key to encrypt the lifecycle-event SNS Topic.\ncluster.addCapacity('ASGEncryptedSNS', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n  topicEncryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "45329bcd68f6b2ddeab07f1e9561b0414696232919e2fd784550a8df3104f38a"
    },
    "698e45bf0b8b2a82b165279ebc980100a0ff997bf6120bc5625912c513742012": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 259
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "e363a7dbf1c55435b9bc59c18c86c91043072a2ee5ee49a61517a727774e00df"
    },
    "97126429621d8f886e480e83bc2d80b113c1284b7e6223d272dc48028210ed23": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256,\n    ephemeral_storage_gi_b=100\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256,\n    EphemeralStorageGiB = 100\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .ephemeralStorageGiB(100)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n  ephemeralStorageGiB: 100,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 269
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n  ephemeralStorageGiB: 100,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e363a7dbf1c55435b9bc59c18c86c91043072a2ee5ee49a61517a727774e00df"
    },
    "d6554b770077ed84ad594117c6f82140fcf6d223a461fef717f1cc5159bbdb34": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\ncontainer = fargate_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nContainerDefinition container = fargateTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nContainerDefinition container = fargateTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 279
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst container = fargateTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 12,
        "104": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "fe445bbe1cd94c07ed9f2df0fb362dc67aa404232bda7a3b51601930e133de5a"
    },
    "5412adb846a43ca4b6449551dfc28013875e657263e8d999f53b98ff5271064d": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 293
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "dca6175b90d05ca85cac54bafc1c914c926c2b94bcbf31452ca6a3e20aa4b148"
    },
    "8e8449e5a66be33a53689cc1585e1c53906fdf339f726b5a932589973b760c01": {
      "translations": {
        "python": {
          "source": "external_task_definition = ecs.ExternalTaskDefinition(self, \"TaskDef\")\n\ncontainer = external_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 308
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ExternalTaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "76cc39b4301eae47c1317b49811a94b15ee403d4748a73b19f249b6230e60a27"
    },
    "4c4be3d143fb5d60d538ca5139c6cb3590084ef71170e941cc8c7efa2ee47d47": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n\n\ntask_definition.add_container(\"WebContainer\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    port_mappings=[ecs.PortMapping(container_port=3000)]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    PortMappings = new [] { new PortMapping { ContainerPort = 3000 } }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .portMappings(List.of(PortMapping.builder().containerPort(3000).build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer(\"WebContainer\", {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  portMappings: [{ containerPort: 3000 }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 323
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntaskDefinition.addContainer(\"WebContainer\", {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  portMappings: [{ containerPort: 3000 }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "1bed2f00136c3a8a7ed382a7c517a5d407fdc757368ec7735d82bb6591dc0138"
    },
    "120aea3a2de6e7bc6b6373c542fa27abb3f8abb604346ddf1b16e0b8026503ae": {
      "translations": {
        "python": {
          "source": "# container is of type ContainerDefinition\n\n\ncontainer.add_port_mappings(\n    container_port=3000\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ContainerDefinition container;\n\n\ncontainer.AddPortMappings(new PortMapping {\n    ContainerPort = 3000\n});",
          "version": "1"
        },
        "java": {
          "source": "ContainerDefinition container;\n\n\ncontainer.addPortMappings(PortMapping.builder()\n        .containerPort(3000)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 335
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.PortMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const container: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2b1381460d33dca05f605d00e2868645bcb73c3bc3f5e7da230cc028b0ec8477"
    },
    "e87a3180b41545552231bc30602ec12b9ad3a7a64fdf78e289e1adb3f715dcb4": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvar container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nObject container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 345
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "6130724716175706d8b58d12cc4023d532336b33737338ba54c35fed41cc1e1b"
    },
    "381cf4ed7560075a6242c6766d0374a9b067d968d4aa41a08a31dd91d12c081e": {
      "translations": {
        "python": {
          "source": "task_definition = ecs.TaskDefinition(self, \"TaskDef\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    network_mode=ecs.NetworkMode.AWS_VPC,\n    compatibility=ecs.Compatibility.EC2_AND_FARGATE\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition = new TaskDefinition(this, \"TaskDef\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    NetworkMode = NetworkMode.AWS_VPC,\n    Compatibility = Compatibility.EC2_AND_FARGATE\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .networkMode(NetworkMode.AWS_VPC)\n        .compatibility(Compatibility.EC2_AND_FARGATE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const taskDefinition = new ecs.TaskDefinition(this, 'TaskDef', {\n  memoryMiB: '512',\n  cpu: '256',\n  networkMode: ecs.NetworkMode.AWS_VPC,\n  compatibility: ecs.Compatibility.EC2_AND_FARGATE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2_AND_FARGATE",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#AWS_VPC",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinitionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst taskDefinition = new ecs.TaskDefinition(this, 'TaskDef', {\n  memoryMiB: '512',\n  cpu: '256',\n  networkMode: ecs.NetworkMode.AWS_VPC,\n  compatibility: ecs.Compatibility.EC2_AND_FARGATE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 1,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "6729438217021cca7ac9b30d23d12cd645263f3f4c0bdd7a2cd4689e384ccede"
    },
    "c105b9331e56c7fe7f8eafe89d68e7ab29a5dda724b311ebd32b2a9e67929fd4": {
      "translations": {
        "python": {
          "source": "# secret is of type Secret\n# db_secret is of type Secret\n# parameter is of type StringParameter\n# task_definition is of type TaskDefinition\n# s3_bucket is of type Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 51,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 3,
        "194": 14,
        "196": 8,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5097083ec0994baa9d649a4dc5c4541be5b29371f2382706c02b932cd2769a29"
    },
    "46fa35a60ce38eabadf852fc67ffaf8e5a3267f03351b49ff17b071820dbd0fe": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n\n\ntask_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    system_controls=[ecs.SystemControl(\n        namespace=\"net\",\n        value=\"ipv4.tcp_tw_recycle\"\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    SystemControls = new [] { new SystemControl {\n        Namespace = \"net\",\n        Value = \"ipv4.tcp_tw_recycle\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\n\ntaskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .systemControls(List.of(SystemControl.builder()\n                .namespace(\"net\")\n                .value(\"ipv4.tcp_tw_recycle\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\n\ntaskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  systemControls: [\n    {\n      namespace: 'net',\n      value: 'ipv4.tcp_tw_recycle',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 435
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ntaskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  systemControls: [\n    {\n      namespace: 'net',\n      value: 'ipv4.tcp_tw_recycle',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1bed2f00136c3a8a7ed382a7c517a5d407fdc757368ec7735d82bb6591dc0138"
    },
    "e8b651d062f2d85d8caf0abe34ab39177209d9438ed2b260a58767b9ca2f66e9": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 457
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "faa601851ca3d10889f84e314a97de253ce0ca6d034e905da654fea49ef48db0"
    },
    "fd8d2c7ab4906bbd6195ab3071f8e947210298cfea914c93a4a6013a6b1fb127": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 470
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "e259b13efd127adf37a87f30cb1719121a9861b9c90c5baca942e59304d80da4"
    },
    "541db7bbd666c4b4d4f3f2b9fa054683272d4b45a2aad28102096ecb721441b7": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    circuit_breaker=ecs.DeploymentCircuitBreaker(rollback=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CircuitBreaker = new DeploymentCircuitBreaker { Rollback = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .circuitBreaker(DeploymentCircuitBreaker.builder().rollback(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 491
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ed0fdb4b85e54bb35f306a9963cbca1ed321cf0844b3ea143d4bfa49c094b308"
    },
    "d78c73caed034995306b36fcca116cacda4655b2c6957b95ff608f0b2c566d9e": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\ntarget_group1 = listener.add_targets(\"ECS1\",\n    port=80,\n    targets=[service]\n)\ntarget_group2 = listener.add_targets(\"ECS2\",\n    port=80,\n    targets=[service.load_balancer_target(\n        container_name=\"MyContainer\",\n        container_port=8080\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\nCluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nApplicationTargetGroup targetGroup1 = listener.AddTargets(\"ECS1\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service }\n});\nApplicationTargetGroup targetGroup2 = listener.AddTargets(\"ECS2\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n        ContainerName = \"MyContainer\",\n        ContainerPort = 8080\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nCluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nApplicationTargetGroup targetGroup1 = listener.addTargets(\"ECS1\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service))\n        .build());\nApplicationTargetGroup targetGroup2 = listener.addTargets(\"ECS2\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n                .containerName(\"MyContainer\")\n                .containerPort(8080)\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nconst targetGroup1 = listener.addTargets('ECS1', {\n  port: 80,\n  targets: [service],\n});\nconst targetGroup2 = listener.addTargets('ECS2', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 8080\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 507
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nconst targetGroup1 = listener.addTargets('ECS1', {\n  port: 80,\n  targets: [service],\n});\nconst targetGroup2 = listener.addTargets('ECS2', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 8080\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 6,
        "75": 38,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 6,
        "194": 6,
        "196": 4,
        "197": 2,
        "225": 8,
        "242": 8,
        "243": 8,
        "281": 8,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "6b75e0b89035bb41ab496786d6db25186a5fca051ac740c99800890ef3ba9f7d"
    },
    "f0f11321cf1c3065a3c46e8bb539e9860c2297544500dd3febe805f4e907d6b1": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 534
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "0c758c7d76859776b20f377801abe2a91c9957c5589ccf702a5722ae431b0c83": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service);",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service);",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 573
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 1,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "e11440a9f02f8c2b47bbb5ba3cefe882b94f27aa70c6d1eb6cb5e9755552aa47"
    },
    "f458dc15a67446790f4b0f012eaa66383c9c366e71e5647e0126cde9a8fdc6eb": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 586
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "aa58a9e5390e16d7b1004ae7ee70f4443cc23e7824671b2d0fdd8dac507fdc67"
    },
    "451d7fbe0f7e0379b802cf7dbe342a5864581e6366559ab18f1d907e83c35e0a": {
      "translations": {
        "python": {
          "source": "# target is of type ApplicationTargetGroup\n# service is of type BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 610
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9abb4d7a37da9b42692b42b4cab54f17995d2cc6d183956f3e73342f1897eafc"
    },
    "82abfdc8afc0dbbfa6566b8a68a0b5fc4ec7a048c3228a738b62b3a9fc947489": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 632
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c745f18e155fedf2e313a89fb9ece89ca45a1fea8a4412906162b878af547d8f"
    },
    "045259ccf1467b2d664ca9ba7611240d47d74be6ef8d955c3f2e34a5d9093f12": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.aws_logs(stream_prefix=\"EventDemo\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"EventDemo\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"EventDemo\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 678
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#awsLogs",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "4c160a58a1a1cbad597529b2ce0efab95b0c14adc683c1d2152d1b61b9db51a2"
    },
    "83dad95f7c72227931c5f80d167dec2ec72d6abea9f060a003f8fad0a35a70e6": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.fluentd()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Fluentd()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.fluentd())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.fluentd(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 690
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#fluentd",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.fluentd(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "940abc49a30ede6e25cbca4c1ca954ff36b39457843db116c6b3040068e24dfd"
    },
    "bf8d3e105af9ec1b9b5d087bb45d55131fa8f04a39bae371796452ff7d90afde": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.gelf(address=\"my-gelf-address\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Gelf(new GelfLogDriverProps { Address = \"my-gelf-address\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.gelf(GelfLogDriverProps.builder().address(\"my-gelf-address\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 702
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GelfLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#gelf",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "45e5a2c25f20619cee2f281cda85afcfba424a55ff9685ceb8b050dbb08a044f"
    },
    "38489fa18b1d7f1d505d6e6c1584935f49a0700d9df1d939ae5e2a16eda90401": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.journald()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Journald()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.journald())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.journald(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 714
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#journald",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.journald(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "badd7749cd6e9b1894fab0cb3c5820f03e1ede958d330bb35dc04eadd87a9c2f"
    },
    "92a20a42eb9f3826be754efb0c6c03d2af85014858596d443c54c4c33681f30f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.json_file()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.JsonFile()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.jsonFile())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.jsonFile(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 726
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#jsonFile",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.jsonFile(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "131053eb9b5d6fbd4e8eb4a6078e86ace8793efe38e5cf1013a29a50f5f3566d"
    },
    "a08d23b119c49300e0fd7ada1ba960da3ada7fe77df7b0707121761c13030176": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 738
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f738d89d5edc79c62d4005f14770d9d580d6beea464403819166876710af3f5"
    },
    "77a1fc893ea52b5b463f231f86b61b4748c0ffd9c3c2d7391446246f458657a4": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.syslog()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Syslog()\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.syslog())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.syslog(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 753
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#syslog",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.syslog(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "fff7ce33797104c07263c382c34e959dbaa10e8808f27a9f902d65e50eb3e8f2"
    },
    "10c4deb9ed309a1514e57b723335b60c6d2eccb1d685925cc7041a540b7546f2": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={\n            \"Name\": \"firehose\",\n            \"region\": \"us-west-2\",\n            \"delivery_stream\": \"my-stream\"\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, string> {\n            { \"Name\", \"firehose\" },\n            { \"region\", \"us-west-2\" },\n            { \"delivery_stream\", \"my-stream\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of(\n                        \"Name\", \"firehose\",\n                        \"region\", \"us-west-2\",\n                        \"delivery_stream\", \"my-stream\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 765
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f82c5c68f4ff4f868d60a6c0a0fde2a36512fe4a6f5fc5dd0a47d679cde9e4c3"
    },
    "f5ebe8cfc8ee2d59532ab90bdbf93a56732a2e3212866c550971b4124cb86dc4": {
      "translations": {
        "python": {
          "source": "# secret is of type Secret\n# parameter is of type StringParameter\n\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={},\n        secret_options={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n            \"apikey\": ecs.Secret.from_secrets_manager(secret),\n            \"host\": ecs.Secret.from_ssm_parameter(parameter)}\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret;\nStringParameter parameter;\n\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, object> { },\n        SecretOptions = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n            { \"apikey\", Secret.FromSecretsManager(secret) },\n            { \"host\", Secret.FromSsmParameter(parameter) } }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nStringParameter parameter;\n\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of())\n                .secretOptions(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n                        \"apikey\", Secret.fromSecretsManager(secret),\n                        \"host\", Secret.fromSsmParameter(parameter)))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n      // ... log driver options here ...\n    },\n    secretOptions: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n      apikey: ecs.Secret.fromSecretsManager(secret),\n      host: ecs.Secret.fromSsmParameter(parameter),\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 783
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n      // ... log driver options here ...\n    },\n    secretOptions: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store\n      apikey: ecs.Secret.fromSecretsManager(secret),\n      host: ecs.Secret.fromSsmParameter(parameter),\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 32,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 10,
        "196": 5,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "8f758ee200cb4446a386882bd9f9a67c979d7867f9aefec30123144a85d33555"
    },
    "4ccae69164ebedec699eb10ac15c88a3e6eb4b33fd95e7e2fcdda2c698ea5c5f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 807
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "6c58f185eb5a4e9008fcb4bfaeca9651c7020b85b90389541461bc9531e86068"
    },
    "2bc3c9c2e9dfac716cb4a444f4b16178eb20e412413e991f3828bb8babb87d02": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create A records - useful for AWSVPC network mode.\n        dns_record_type=cloudmap.DnsRecordType.A\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create A records - useful for AWSVPC network mode.\n        DnsRecordType = DnsRecordType.A\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create A records - useful for AWSVPC network mode.\n                .dnsRecordType(DnsRecordType.A)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 827
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "5445acc87dca258635a9a88f5ef8b707e78c30acfe1954ee39a6c58f0e72fb91"
    },
    "8c50fe6169819a2b8bb4d4c73ed3f62b2caf61b32031acf10aed900489eeaa53": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 845
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7dc91c38efa5cc72874e3a4f58397e31ac027599c65496df9c9b910832ee7677"
    },
    "e937737ac1cfcacc47628cceba36819899cb88787a7997971da072ff69f637f9": {
      "translations": {
        "python": {
          "source": "# cloud_map_service is of type Service\n# ecs_service is of type FargateService\n\n\necs_service.associate_cloud_map_service(\n    service=cloud_map_service\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.AssociateCloudMapService(new AssociateCloudMapServiceOptions {\n    Service = cloudMapService\n});",
          "version": "1"
        },
        "java": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.associateCloudMapService(AssociateCloudMapServiceOptions.builder()\n        .service(cloudMapService)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 879
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions",
        "@aws-cdk/aws-ecs.BaseService#associateCloudMapService",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed5b698c58df3a8b3f44d93cd71c602427686162e19d9ee1f19b6ee9665b6e45"
    },
    "431959bec7b8f40d17b8387390f6f3833abf66f5ea6f9df349736f261a5dba47": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"FargateCPCluster\",\n    vpc=vpc,\n    enable_fargate_capacity_providers=True\n)\n\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n\necs.FargateService(self, \"FargateService\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"FargateCPCluster\", new ClusterProps {\n    Vpc = vpc,\n    EnableFargateCapacityProviders = true\n});\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});\n\nnew FargateService(this, \"FargateService\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCPCluster\")\n        .vpc(vpc)\n        .enableFargateCapacityProviders(true)\n        .build();\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());\n\nFargateService.Builder.create(this, \"FargateService\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 904
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "36fb00fbbeb3a28812ea9842ab0c1391bddb98f79e75d30becb34ef0e34cb817"
    },
    "c7a59d9323fd5dbdfad56c236e919b827a5ab7bd6493a6338e638448199f93a7": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 948
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "8becfa96e1ca0d772f9fd5c677d87836e410a59aba55148af24bc19910d4f45b"
    },
    "64839645a33e52f98097f3ab8e7a00b430229e95579fff35f208e056721a29b3": {
      "translations": {
        "python": {
          "source": "inference_accelerators = [{\n    \"device_name\": \"device1\",\n    \"device_type\": \"eia2.medium\"\n}]\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"Ec2TaskDef\",\n    inference_accelerators=inference_accelerators\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, string>[] inferenceAccelerators = new [] { new Dictionary<string, string> {\n    { \"deviceName\", \"device1\" },\n    { \"deviceType\", \"eia2.medium\" }\n} };\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"Ec2TaskDef\", new Ec2TaskDefinitionProps {\n    InferenceAccelerators = inferenceAccelerators\n});",
          "version": "1"
        },
        "java": {
          "source": "Map<String, String>[] inferenceAccelerators = List.of(Map.of(\n        \"deviceName\", \"device1\",\n        \"deviceType\", \"eia2.medium\"));\n\nEc2TaskDefinition taskDefinition = Ec2TaskDefinition.Builder.create(this, \"Ec2TaskDef\")\n        .inferenceAccelerators(inferenceAccelerators)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const inferenceAccelerators = [{\n  deviceName: 'device1',\n  deviceType: 'eia2.medium',\n}];\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'Ec2TaskDef', {\n  inferenceAccelerators,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 995
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst inferenceAccelerators = [{\n  deviceName: 'device1',\n  deviceType: 'eia2.medium',\n}];\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'Ec2TaskDef', {\n  inferenceAccelerators,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1
      },
      "fqnsFingerprint": "ebd3f7b92c5fb93471a330dd4ad22b700fbd7a72656da6f375cdb3d2b7650000"
    },
    "3d14998d0ff3f0aa30d11309831d533d7a37f54d31e15d050ee770ab3de7b932": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n\ninference_accelerator_resources = [\"device1\"]\n\ntask_definition.add_container(\"cont\",\n    image=ecs.ContainerImage.from_registry(\"test\"),\n    memory_limit_mi_b=1024,\n    inference_accelerator_resources=inference_accelerator_resources\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\n\nstring[] inferenceAcceleratorResources = new [] { \"device1\" };\n\ntaskDefinition.AddContainer(\"cont\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"test\"),\n    MemoryLimitMiB = 1024,\n    InferenceAcceleratorResources = inferenceAcceleratorResources\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\n\nString[] inferenceAcceleratorResources = List.of(\"device1\");\n\ntaskDefinition.addContainer(\"cont\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"test\"))\n        .memoryLimitMiB(1024)\n        .inferenceAcceleratorResources(inferenceAcceleratorResources)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\nconst inferenceAcceleratorResources = ['device1'];\n\ntaskDefinition.addContainer('cont', {\n  image: ecs.ContainerImage.fromRegistry('test'),\n  memoryLimitMiB: 1024,\n  inferenceAcceleratorResources,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1010
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst inferenceAcceleratorResources = ['device1'];\n\ntaskDefinition.addContainer('cont', {\n  image: ecs.ContainerImage.fromRegistry('test'),\n  memoryLimitMiB: 1024,\n  inferenceAcceleratorResources,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "1bed2f00136c3a8a7ed382a7c517a5d407fdc757368ec7735d82bb6591dc0138"
    },
    "758a408961946ae4767db2fab5bfddcf1d4266428297b7185212f34eeece4a09": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    enable_execute_command=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    EnableExecuteCommand = true\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .enableExecuteCommand(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  enableExecuteCommand: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1030
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  enableExecuteCommand: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ad1222e52bd0146899e88664af57880b4c3c4dcadf6f7d0e639394d50ca58a3b"
    },
    "d883b1f13314bce937fda6a98fe0bb1a687a93ebbbfece6bea794ad372343f49": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-ecs"
        },
        "field": {
          "field": "markdown",
          "line": 1052
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8d9aa7878e46d11babf63058b4914dffe453638399f6cc589b797fdeeec9366"
    },
    "2059f7d055279edf57ea3c0993e8f12137eb5328460d358b980cecb2561d4c79": {
      "translations": {
        "python": {
          "source": "machine_image = ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.STANDARD,\n    cached_in_context=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "EcsOptimizedImage machineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.STANDARD, new EcsOptimizedImageOptions {\n    CachedInContext = true\n});",
          "version": "1"
        },
        "java": {
          "source": "EcsOptimizedImage machineImage = EcsOptimizedImage.amazonLinux2(AmiHardwareType.STANDARD, EcsOptimizedImageOptions.builder()\n        .cachedInContext(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const machineImage = ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.STANDARD, {\n   cachedInContext: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions",
          "memberName": "machineImage"
        },
        "field": {
          "field": "markdown",
          "line": 8
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#STANDARD",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst machineImage = ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.STANDARD, {\n   cachedInContext: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 8,
        "106": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "d8b738338e3c38102bc09e1ce761e2713d723baace832a4285bf4fc9f364d94e"
    },
    "0fa11bf0f0753dc888cc2139c0c7312581a0e1861ade19f6a2805945c7b92122": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# service is of type BaseService\n\nlistener.add_targets(\"ECS\",\n    port=80,\n    targets=[service.load_balancer_target(\n        container_name=\"MyContainer\",\n        container_port=1234\n    )]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nlistener.AddTargets(\"ECS\", new AddApplicationTargetsProps {\n    Port = 80,\n    Targets = new [] { service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n        ContainerName = \"MyContainer\",\n        ContainerPort = 1234\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nlistener.addTargets(\"ECS\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .targets(List.of(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n                .containerName(\"MyContainer\")\n                .containerPort(1234)\n                .build())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nlistener.addTargets('ECS', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 1234,\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.BaseService",
          "memberName": "loadBalancerTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlistener.addTargets('ECS', {\n  port: 80,\n  targets: [service.loadBalancerTarget({\n    containerName: 'MyContainer',\n    containerPort: 1234,\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 14,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "633779a1ec99009562148c96d5fc9c0cbb3c9543eb34a030fb20c761a3b654f7"
    },
    "c9d6a37f16760ea5624209a122282729d34e21b365e19cf06dda576b99de8c3e": {
      "translations": {
        "python": {
          "source": "# listener is of type ApplicationListener\n# service is of type BaseService\n\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationListener listener;\nBaseService service;\n\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/aws-ecs.BaseService",
          "memberName": "registerLoadBalancerTargets"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const listener: elbv2.ApplicationListener;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 20,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "50612c573fb65e04f47912b303e964e91930481d5dc653a5c82e08dabe0c6d26"
    },
    "ceb22756579e648945391f3a515cb31d5c10c606da70aa0c5713357081e3738a": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Either add default capacity\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(),\n    # Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    # machineImage: EcsOptimizedImage.amazonLinux2(),\n    desired_capacity=3\n)\n\ncluster.add_auto_scaling_group(auto_scaling_group)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Either add default capacity\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux(),\n    // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    // machineImage: EcsOptimizedImage.amazonLinux2(),\n    DesiredCapacity = 3\n});\n\ncluster.AddAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Either add default capacity\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .machineImage(EcsOptimizedImage.amazonLinux())\n        // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n        // machineImage: EcsOptimizedImage.amazonLinux2(),\n        .desiredCapacity(3)\n        .build();\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AddCapacityOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAutoScalingGroup",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "2d8e282b0d128f76ac5b8f93a0eb45467ce12c730a094f733f4b39251aba504b"
    },
    "3ed75590299b15c1e8a404c0360f7cfacdcaa33d2fc55680aeb49d60fdefe900": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(ecs.AmiHardwareType.ARM)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(AmiHardwareType.ARM)\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2(AmiHardwareType.ARM))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AmiHardwareType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.AmiHardwareType",
        "@aws-cdk/aws-ecs.AmiHardwareType#ARM",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(ecs.AmiHardwareType.ARM),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 16,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6356a964f04f55cf20c073e492772013b2eff0fd3b770a6470f521e49b71f911"
    },
    "a7dfa29e432c9b7a6581638612d57b86de1101373499f0392aadb66afa478c43": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AsgCapacityProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "8becfa96e1ca0d772f9fd5c677d87836e410a59aba55148af24bc19910d4f45b"
    },
    "f670b139abc65c03ef49541ebf0c2952251cfa013498bdbc97068ead0f59f901": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux2(),\n    min_capacity=0,\n    max_capacity=100\n)\n\ncapacity_provider = ecs.AsgCapacityProvider(self, \"AsgCapacityProvider\",\n    auto_scaling_group=auto_scaling_group\n)\ncluster.add_asg_capacity_provider(capacity_provider)\n\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_reservation_mi_b=256\n)\n\necs.Ec2Service(self, \"EC2Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=capacity_provider.capacity_provider_name,\n        weight=1\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux2(),\n    MinCapacity = 0,\n    MaxCapacity = 100\n});\n\nAsgCapacityProvider capacityProvider = new AsgCapacityProvider(this, \"AsgCapacityProvider\", new AsgCapacityProviderProps {\n    AutoScalingGroup = autoScalingGroup\n});\ncluster.AddAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryReservationMiB = 256\n});\n\nnew Ec2Service(this, \"EC2Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = capacityProvider.CapacityProviderName,\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .machineImage(EcsOptimizedImage.amazonLinux2())\n        .minCapacity(0)\n        .maxCapacity(100)\n        .build();\n\nAsgCapacityProvider capacityProvider = AsgCapacityProvider.Builder.create(this, \"AsgCapacityProvider\")\n        .autoScalingGroup(autoScalingGroup)\n        .build();\ncluster.addAsgCapacityProvider(capacityProvider);\n\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryReservationMiB(256)\n        .build());\n\nEc2Service.Builder.create(this, \"EC2Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(capacityProvider.getCapacityProviderName())\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AsgCapacityProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-autoscaling.IAutoScalingGroup",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AsgCapacityProvider",
        "@aws-cdk/aws-ecs.AsgCapacityProvider#capacityProviderName",
        "@aws-cdk/aws-ecs.AsgCapacityProviderProps",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAsgCapacityProvider",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux2",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n  minCapacity: 0,\n  maxCapacity: 100,\n});\n\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'AsgCapacityProvider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n  memoryReservationMiB: 256,\n});\n\nnew ecs.Ec2Service(this, 'EC2Service', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 8,
        "75": 46,
        "104": 5,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 6,
        "194": 13,
        "196": 4,
        "197": 6,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "281": 9,
        "282": 5,
        "290": 1
      },
      "fqnsFingerprint": "8becfa96e1ca0d772f9fd5c677d87836e410a59aba55148af24bc19910d4f45b"
    },
    "e7439394de35cce6b16f6d6726dbd62ebe919331dc2c6d8090bdd27c21888f9c": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import App, Stack\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_ecs as ecs\nimport aws_cdk.aws_ecs_patterns as ecs_patterns\nimport aws_cdk.cx_api as cxapi\nimport path as path\n\napp = App()\n\nstack = Stack(app, \"aws-ecs-patterns-queue\")\nstack.node.set_context(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, True)\n\nvpc = ec2.Vpc(stack, \"VPC\",\n    max_azs=2\n)\n\necs_patterns.QueueProcessingFargateService(stack, \"QueueProcessingService\",\n    vpc=vpc,\n    memory_limit_mi_b=512,\n    image=ecs.AssetImage(path.join(__dirname, \"..\", \"sqs-reader\"))\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.ECS.Patterns;\nusing Amazon.CDK.CXAPI;\nusing Path;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.Node.SetContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = new Vpc(stack, \"VPC\", new VpcProps {\n    MaxAzs = 2\n});\n\nnew QueueProcessingFargateService(stack, \"QueueProcessingService\", new QueueProcessingFargateServiceProps {\n    Vpc = vpc,\n    MemoryLimitMiB = 512,\n    Image = new AssetImage(Join(__dirname, \"..\", \"sqs-reader\"))\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.ecs.*;\nimport software.amazon.awscdk.services.ecs.patterns.*;\nimport software.amazon.awscdk.cxapi.*;\nimport path.*;\n\nApp app = new App();\n\nStack stack = new Stack(app, \"aws-ecs-patterns-queue\");\nstack.node.setContext(ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nVpc vpc = Vpc.Builder.create(stack, \"VPC\")\n        .maxAzs(2)\n        .build();\n\nQueueProcessingFargateService.Builder.create(stack, \"QueueProcessingService\")\n        .vpc(vpc)\n        .memoryLimitMiB(512)\n        .image(new AssetImage(join(__dirname, \"..\", \"sqs-reader\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssetImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
        "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
        "@aws-cdk/aws-ecs.AssetImage",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.ConstructNode#setContext",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 33,
        "106": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 5,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "254": 6,
        "255": 6,
        "256": 5,
        "257": 1,
        "258": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8e857bbd6b8fdda7a846968a0cabbae4019c254e7f9eff4aecda2c551cd8cd1d"
    },
    "975197bb83c6ff3f17853604e44703b2baa9b3ef4a3ca4a70aa977d2e9ab6934": {
      "translations": {
        "python": {
          "source": "# cloud_map_service is of type Service\n# ecs_service is of type FargateService\n\n\necs_service.associate_cloud_map_service(\n    service=cloud_map_service\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.AssociateCloudMapService(new AssociateCloudMapServiceOptions {\n    Service = cloudMapService\n});",
          "version": "1"
        },
        "java": {
          "source": "Service cloudMapService;\nFargateService ecsService;\n\n\necsService.associateCloudMapService(AssociateCloudMapServiceOptions.builder()\n        .service(cloudMapService)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AssociateCloudMapServiceOptions",
        "@aws-cdk/aws-ecs.BaseService#associateCloudMapService",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cloudMapService: cloudmap.Service;\ndeclare const ecsService: ecs.FargateService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\necsService.associateCloudMapService({\n  service: cloudMapService,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 10,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ed5b698c58df3a8b3f44d93cd71c602427686162e19d9ee1f19b6ee9665b6e45"
    },
    "64e34658ac071b0a559a22cf6b5d093afc4efef47f3b62b753bb9381a18052f5": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c745f18e155fedf2e313a89fb9ece89ca45a1fea8a4412906162b878af547d8f"
    },
    "5ccb660d129fa97188cd4d5fc28f29fb7954b263e17a981286992298db1f2141": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriverMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c745f18e155fedf2e313a89fb9ece89ca45a1fea8a4412906162b878af547d8f"
    },
    "60c1eb8d8ff3f4c7bb7dcc500043313c20cc9234b6167f6e5dad0a91717d252c": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_asset(path.resolve(__dirname, \"..\", \"eventhandler-image\")),\n    memory_limit_mi_b=256,\n    logging=ecs.AwsLogDriver(stream_prefix=\"EventDemo\", mode=ecs.AwsLogDriverMode.NON_BLOCKING)\n)\n\n# An Rule that describes the event trigger (in this case a scheduled run)\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 min)\")\n)\n\n# Pass an environment variable to the container 'TheContainer' in the task\nrule.add_target(targets.EcsTask(\n    cluster=cluster,\n    task_definition=task_definition,\n    task_count=1,\n    container_overrides=[targets.ContainerOverride(\n        container_name=\"TheContainer\",\n        environment=[targets.TaskEnvironmentVariable(\n            name=\"I_WAS_TRIGGERED\",\n            value=\"From CloudWatch Events\"\n        )]\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromAsset(Resolve(__dirname, \"..\", \"eventhandler-image\")),\n    MemoryLimitMiB = 256,\n    Logging = new AwsLogDriver(new AwsLogDriverProps { StreamPrefix = \"EventDemo\", Mode = AwsLogDriverMode.NON_BLOCKING })\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 min)\")\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.AddTarget(new EcsTask(new EcsTaskProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    TaskCount = 1,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerName = \"TheContainer\",\n        Environment = new [] { new TaskEnvironmentVariable {\n            Name = \"I_WAS_TRIGGERED\",\n            Value = \"From CloudWatch Events\"\n        } }\n    } }\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromAsset(resolve(__dirname, \"..\", \"eventhandler-image\")))\n        .memoryLimitMiB(256)\n        .logging(AwsLogDriver.Builder.create().streamPrefix(\"EventDemo\").mode(AwsLogDriverMode.NON_BLOCKING).build())\n        .build());\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 min)\"))\n        .build();\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(EcsTask.Builder.create()\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .taskCount(1)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerName(\"TheContainer\")\n                .environment(List.of(TaskEnvironmentVariable.builder()\n                        .name(\"I_WAS_TRIGGERED\")\n                        .value(\"From CloudWatch Events\")\n                        .build()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.AwsLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriver",
        "@aws-cdk/aws-ecs.AwsLogDriverMode",
        "@aws-cdk/aws-ecs.AwsLogDriverMode#NON_BLOCKING",
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromAsset",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, '..', 'eventhandler-image')),\n  memoryLimitMiB: 256,\n  logging: new ecs.AwsLogDriver({ streamPrefix: 'EventDemo', mode: ecs.AwsLogDriverMode.NON_BLOCKING }),\n});\n\n// An Rule that describes the event trigger (in this case a scheduled run)\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 min)'),\n});\n\n// Pass an environment variable to the container 'TheContainer' in the task\nrule.addTarget(new targets.EcsTask({\n  cluster,\n  taskDefinition,\n  taskCount: 1,\n  containerOverrides: [{\n    containerName: 'TheContainer',\n    environment: [{\n      name: 'I_WAS_TRIGGERED',\n      value: 'From CloudWatch Events'\n    }],\n  }],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 10,
        "75": 43,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "194": 13,
        "196": 5,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "c745f18e155fedf2e313a89fb9ece89ca45a1fea8a4412906162b878af547d8f"
    },
    "f26ec2637847fde68928fc82c4bd3712e3f65355224b9207071351ad6f1df1c9": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"bottlerocket-asg\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c5.large\"),\n    machine_image=ecs.BottleRocketImage()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"bottlerocket-asg\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c5.large\"),\n    MachineImage = new BottleRocketImage()\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"bottlerocket-asg\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c5.large\"))\n        .machineImage(new BottleRocketImage())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.BottleRocketImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.BottleRocketImage",
        "@aws-cdk/aws-ecs.Cluster#addCapacity"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('bottlerocket-asg', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c5.large'),\n  machineImage: new ecs.BottleRocketImage(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "fc11527579d6b6787cd1af537afd69dedf70b661f31fdaedfbf6a2f74ebb2f71"
    },
    "52e4cde21120d51675431c484d5d4ac4d99a4202f719b28f7640aba71d57af72": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\nservice = ecs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create A records - useful for AWSVPC network mode.\n        dns_record_type=cloudmap.DnsRecordType.A\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create A records - useful for AWSVPC network mode.\n        DnsRecordType = DnsRecordType.A\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create A records - useful for AWSVPC network mode.\n                .dnsRecordType(DnsRecordType.A)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create A records - useful for AWSVPC network mode.\n    dnsRecordType: cloudmap.DnsRecordType.A,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 16,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "5445acc87dca258635a9a88f5ef8b707e78c30acfe1954ee39a6c58f0e72fb91"
    },
    "c9c97f4881e096df280adeb022c9c9c707a371ed0d6f58fef9001f90b753419c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Cluster"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "847d181dfbbe6aa51975c5bf1e40589eabc8316b27ba1b1089c8ecec56d99ec8"
    },
    "f7738eeb757dc1be01b718b7b0387879439fc8a738cf8705bc3f16f98b7b8067": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"FargateCluster\", vpc=vpc)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    memory_mi_b=\"512\",\n    cpu=\"256\",\n    compatibility=ecs.Compatibility.FARGATE\n)\n\ncontainer_definition = task_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"RunFargate\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    assign_public_ip=True,\n    container_overrides=[tasks.ContainerOverride(\n        container_definition=container_definition,\n        environment=[tasks.TaskEnvironmentVariable(name=\"SOME_KEY\", value=sfn.JsonPath.string_at(\"$.SomeKey\"))]\n    )],\n    launch_target=tasks.EcsFargateLaunchTarget()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"FargateCluster\", new ClusterProps { Vpc = vpc });\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    MemoryMiB = \"512\",\n    Cpu = \"256\",\n    Compatibility = Compatibility.FARGATE\n});\n\nContainerDefinition containerDefinition = taskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"RunFargate\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    AssignPublicIp = true,\n    ContainerOverrides = new [] { new ContainerOverride {\n        ContainerDefinition = containerDefinition,\n        Environment = new [] { new TaskEnvironmentVariable { Name = \"SOME_KEY\", Value = JsonPath.StringAt(\"$.SomeKey\") } }\n    } },\n    LaunchTarget = new EcsFargateLaunchTarget()\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCluster\").vpc(vpc).build();\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .memoryMiB(\"512\")\n        .cpu(\"256\")\n        .compatibility(Compatibility.FARGATE)\n        .build();\n\nContainerDefinition containerDefinition = taskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"RunFargate\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .assignPublicIp(true)\n        .containerOverrides(List.of(ContainerOverride.builder()\n                .containerDefinition(containerDefinition)\n                .environment(List.of(TaskEnvironmentVariable.builder().name(\"SOME_KEY\").value(JsonPath.stringAt(\"$.SomeKey\")).build()))\n                .build()))\n        .launchTarget(new EcsFargateLaunchTarget())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ClusterProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsFargateLaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB",
        "@aws-cdk/aws-stepfunctions.JsonPath",
        "@aws-cdk/aws-stepfunctions.JsonPath#stringAt"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'FargateCluster', { vpc });\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  memoryMiB: '512',\n  cpu: '256',\n  compatibility: ecs.Compatibility.FARGATE,\n});\n\nconst containerDefinition = taskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'RunFargate', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  assignPublicIp: true,\n  containerOverrides: [{\n    containerDefinition,\n    environment: [{ name: 'SOME_KEY', value: sfn.JsonPath.stringAt('$.SomeKey') }],\n  }],\n  launchTarget: new tasks.EcsFargateLaunchTarget(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 10,
        "75": 47,
        "104": 4,
        "106": 2,
        "192": 2,
        "193": 7,
        "194": 15,
        "196": 4,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 13,
        "282": 4
      },
      "fqnsFingerprint": "847d181dfbbe6aa51975c5bf1e40589eabc8316b27ba1b1089c8ecec56d99ec8"
    },
    "a3750479f5769f761144d92cc8ad7c3ee4481f653c3e8706e8722045e21ea790": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Compatibility"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "a4ad2dc77e9db1cd4194d386e1226b426ae5f00a2a0b983eed86bfb4ec70fd03"
    },
    "cebacc29d0b155646cd97375a9821359fa1c3315da925bb9da579b3162e3db48": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7dc91c38efa5cc72874e3a4f58397e31ac027599c65496df9c9b910832ee7677"
    },
    "d04750ccbe6bfb9f3062dce7fe41055ee757d82f7860993d4aa5062557c8e3cd": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerDefinitionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7dc91c38efa5cc72874e3a4f58397e31ac027599c65496df9c9b910832ee7677"
    },
    "72f0855afa22e04897cfdfb195c64da0939648cbb3bcd7a73e259d6470301912": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"FargateCPCluster\",\n    vpc=vpc,\n    enable_fargate_capacity_providers=True\n)\n\ntask_definition = ecs.FargateTaskDefinition(self, \"TaskDef\")\n\ntask_definition.add_container(\"web\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n)\n\necs.FargateService(self, \"FargateService\",\n    cluster=cluster,\n    task_definition=task_definition,\n    capacity_provider_strategies=[ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE_SPOT\",\n        weight=2\n    ), ecs.CapacityProviderStrategy(\n        capacity_provider=\"FARGATE\",\n        weight=1\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"FargateCPCluster\", new ClusterProps {\n    Vpc = vpc,\n    EnableFargateCapacityProviders = true\n});\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.AddContainer(\"web\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n});\n\nnew FargateService(this, \"FargateService\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CapacityProviderStrategies = new [] { new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE_SPOT\",\n        Weight = 2\n    }, new CapacityProviderStrategy {\n        CapacityProvider = \"FARGATE\",\n        Weight = 1\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"FargateCPCluster\")\n        .vpc(vpc)\n        .enableFargateCapacityProviders(true)\n        .build();\n\nFargateTaskDefinition taskDefinition = new FargateTaskDefinition(this, \"TaskDef\");\n\ntaskDefinition.addContainer(\"web\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .build());\n\nFargateService.Builder.create(this, \"FargateService\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .capacityProviderStrategies(List.of(CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE_SPOT\")\n                .weight(2)\n                .build(), CapacityProviderStrategy.builder()\n                .capacityProvider(\"FARGATE\")\n                .weight(1)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ContainerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'FargateCPCluster', {\n  vpc,\n  enableFargateCapacityProviders: true,\n});\n\nconst taskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef');\n\ntaskDefinition.addContainer('web', {\n  image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n});\n\nnew ecs.FargateService(this, 'FargateService', {\n  cluster,\n  taskDefinition,\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 26,
        "104": 3,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "36fb00fbbeb3a28812ea9842ab0c1391bddb98f79e75d30becb34ef0e34cb817"
    },
    "098b10291fb0eff7bc41bb825922a1670788d3b6faa872bd1db18f506dd571c8": {
      "translations": {
        "python": {
          "source": "# target is of type ApplicationTargetGroup\n# service is of type BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.CpuUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9abb4d7a37da9b42692b42b4cab54f17995d2cc6d183956f3e73342f1897eafc"
    },
    "4c85abdefa398d8cdab8652b6bb51da1d6eb5b4796d82305036c9d0b0f7354d8": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\nservice = ecs.FargateService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    circuit_breaker=ecs.DeploymentCircuitBreaker(rollback=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CircuitBreaker = new DeploymentCircuitBreaker { Rollback = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\nFargateService service = FargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .circuitBreaker(DeploymentCircuitBreaker.builder().rollback(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.DeploymentCircuitBreaker",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  circuitBreaker: { rollback: true },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 13,
        "104": 1,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "ed0fdb4b85e54bb35f306a9963cbca1ed321cf0844b3ea143d4bfa49c094b308"
    },
    "a3708ef7cbd5aa7878e2f2456bbc703be68fb8f5975ab3d64d67774e06a33950": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.CODE_DEPLOY\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.CODE_DEPLOY\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.CODE_DEPLOY)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentController"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#CODE_DEPLOY",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c64eb38d8dc42e0db64b1f1c98db785c2bc1c07636515a62a7f1bb9e1ddb3d2f"
    },
    "ca6f496411e8248abb1edf8cdfbeac19f86c94cffad21c368fe6b7700a13b32b": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    ),\n    deployment_controller=ecs.DeploymentController(\n        type=ecs.DeploymentControllerType.CODE_DEPLOY\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    },\n    DeploymentController = new DeploymentController {\n        Type = DeploymentControllerType.CODE_DEPLOY\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .deploymentController(DeploymentController.builder()\n                .type(DeploymentControllerType.CODE_DEPLOY)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.DeploymentControllerType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.DeploymentController",
        "@aws-cdk/aws-ecs.DeploymentControllerType",
        "@aws-cdk/aws-ecs.DeploymentControllerType#CODE_DEPLOY",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c64eb38d8dc42e0db64b1f1c98db785c2bc1c07636515a62a7f1bb9e1ddb3d2f"
    },
    "1180e5e6b7c8e1434b524eb5c3fd9b599ff33e96bebd94eebc945a7650fe6092": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "aa58a9e5390e16d7b1004ae7ee70f4443cc23e7824671b2d0fdd8dac507fdc67"
    },
    "d539111a2cd2d1ca26a91f39d729a261e262f86686544b682be4a7d0ab17a4e9": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "aa58a9e5390e16d7b1004ae7ee70f4443cc23e7824671b2d0fdd8dac507fdc67"
    },
    "f828b210dcaba337c461f26ce5e15de95b5fc3180888a3ca7b770b2f21be1abe": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f738d89d5edc79c62d4005f14770d9d580d6beea464403819166876710af3f5"
    },
    "0ec64f64d92495d8999d5855ec85539ef307eab8191fd739262aa5c46e9616b6": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "dca6175b90d05ca85cac54bafc1c914c926c2b94bcbf31452ca6a3e20aa4b148"
    },
    "76df5c04098e7c11144bb59f0acc8ea9c612d0f2cd8bba4eeb729ce83f63892d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ecr as ecr\n\n\nrepo = ecr.Repository.from_repository_name(self, \"batch-job-repo\", \"todo-list\")\n\nbatch.JobDefinition(self, \"batch-job-def-from-ecr\",\n    container=batch.JobDefinitionContainer(\n        image=ecs.EcrImage(repo, \"latest\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ECR;\n\n\nIRepository repo = Repository.FromRepositoryName(this, \"batch-job-repo\", \"todo-list\");\n\nnew JobDefinition(this, \"batch-job-def-from-ecr\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = new EcrImage(repo, \"latest\")\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ecr.*;\n\n\nIRepository repo = Repository.fromRepositoryName(this, \"batch-job-repo\", \"todo-list\");\n\nJobDefinition.Builder.create(this, \"batch-job-def-from-ecr\")\n        .container(JobDefinitionContainer.builder()\n                .image(new EcrImage(repo, \"latest\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ecr from '@aws-cdk/aws-ecr';\n\nconst repo = ecr.Repository.fromRepositoryName(this, 'batch-job-repo', 'todo-list');\n\nnew batch.JobDefinition(this, 'batch-job-def-from-ecr', {\n  container: {\n    image: new ecs.EcrImage(repo, 'latest'),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcrImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryName",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.EcrImage"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ecr from '@aws-cdk/aws-ecr';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = ecr.Repository.fromRepositoryName(this, 'batch-job-repo', 'todo-list');\n\nnew batch.JobDefinition(this, 'batch-job-def-from-ecr', {\n  container: {\n    image: new ecs.EcrImage(repo, 'latest'),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "720adc583197f2ed5364457ecfe314f3de265464edc0a261040d0a5484d70ff2"
    },
    "c03a612f3f42a53bfa906015670934b04958ea8707dd96c5c67397e646ec004e": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nmy_compute_env = batch.ComputeEnvironment(self, \"ComputeEnv\",\n    compute_resources=batch.ComputeResources(\n        image=ecs.EcsOptimizedAmi(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = new ComputeEnvironment(this, \"ComputeEnv\", new ComputeEnvironmentProps {\n    ComputeResources = new ComputeResources {\n        Image = new EcsOptimizedAmi(new EcsOptimizedAmiProps {\n            Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n        }),\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = ComputeEnvironment.Builder.create(this, \"ComputeEnv\")\n        .computeResources(ComputeResources.builder()\n                .image(EcsOptimizedAmi.Builder.create()\n                        .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.ComputeResources",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.EcsOptimizedAmi",
        "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c9526019960be3683c3a01b891deb88051c2480cd811f1dbe73e19081c978c0"
    },
    "234eff489226dbb4aec27573324bd641ba77aa1bad41a6433aebcbd5bcc676da": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nmy_compute_env = batch.ComputeEnvironment(self, \"ComputeEnv\",\n    compute_resources=batch.ComputeResources(\n        image=ecs.EcsOptimizedAmi(\n            generation=ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n        ),\n        vpc=vpc\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = new ComputeEnvironment(this, \"ComputeEnv\", new ComputeEnvironmentProps {\n    ComputeResources = new ComputeResources {\n        Image = new EcsOptimizedAmi(new EcsOptimizedAmiProps {\n            Generation = AmazonLinuxGeneration.AMAZON_LINUX_2\n        }),\n        Vpc = vpc\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nComputeEnvironment myComputeEnv = ComputeEnvironment.Builder.create(this, \"ComputeEnv\")\n        .computeResources(ComputeResources.builder()\n                .image(EcsOptimizedAmi.Builder.create()\n                        .generation(AmazonLinuxGeneration.AMAZON_LINUX_2)\n                        .build())\n                .vpc(vpc)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.ComputeResources",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration#AMAZON_LINUX_2",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.EcsOptimizedAmi",
        "@aws-cdk/aws-ecs.EcsOptimizedAmiProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as batch from '@aws-cdk/aws-batch';\nimport * as ecs from '@aws-cdk/aws-ecs';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst myComputeEnv = new batch.ComputeEnvironment(this, 'ComputeEnv', {\n  computeResources: {\n    image: new ecs.EcsOptimizedAmi({\n      generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,\n    }),\n    vpc,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7c9526019960be3683c3a01b891deb88051c2480cd811f1dbe73e19081c978c0"
    },
    "a700261abeb75030e621bd820ccb14b37b472ef01ae1b4e1c0c4844dd256afa0": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc\n)\n\n# Either add default capacity\ncluster.add_capacity(\"DefaultAutoScalingGroupCapacity\",\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    desired_capacity=3\n)\n\n# Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.xlarge\"),\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(),\n    # Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    # machineImage: EcsOptimizedImage.amazonLinux2(),\n    desired_capacity=3\n)\n\ncluster.add_auto_scaling_group(auto_scaling_group)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc\n});\n\n// Either add default capacity\ncluster.AddCapacity(\"DefaultAutoScalingGroupCapacity\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    DesiredCapacity = 3\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.xlarge\"),\n    MachineImage = EcsOptimizedImage.AmazonLinux(),\n    // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n    // machineImage: EcsOptimizedImage.amazonLinux2(),\n    DesiredCapacity = 3\n});\n\ncluster.AddAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .build();\n\n// Either add default capacity\ncluster.addCapacity(\"DefaultAutoScalingGroupCapacity\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .desiredCapacity(3)\n        .build());\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.xlarge\"))\n        .machineImage(EcsOptimizedImage.amazonLinux())\n        // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n        // machineImage: EcsOptimizedImage.amazonLinux2(),\n        .desiredCapacity(3)\n        .build();\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addAutoScalingGroup",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n});\n\n// Either add default capacity\ncluster.addCapacity('DefaultAutoScalingGroupCapacity', {\n  instanceType: new ec2.InstanceType(\"t2.xlarge\"),\n  desiredCapacity: 3,\n});\n\n// Or add customized capacity. Be sure to start the Amazon ECS-optimized AMI.\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  vpc,\n  instanceType: new ec2.InstanceType('t2.xlarge'),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux(),\n  // Or use Amazon ECS-Optimized Amazon Linux 2 AMI\n  // machineImage: EcsOptimizedImage.amazonLinux2(),\n  desiredCapacity: 3,\n  // ... other options here ...\n});\n\ncluster.addAutoScalingGroup(autoScalingGroup);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 28,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 8,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "2d8e282b0d128f76ac5b8f93a0eb45467ce12c730a094f733f4b39251aba504b"
    },
    "2ce4c5cd3c9e69f83aa254d87694891befad4e6875932ceccca2b9b4b1193c1b": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nauto_scaling_group = autoscaling.AutoScalingGroup(self, \"ASG\",\n    machine_image=ecs.EcsOptimizedImage.amazon_linux(cached_in_context=True),\n    vpc=vpc,\n    instance_type=ec2.InstanceType(\"t2.micro\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = new AutoScalingGroup(this, \"ASG\", new AutoScalingGroupProps {\n    MachineImage = EcsOptimizedImage.AmazonLinux(new EcsOptimizedImageOptions { CachedInContext = true }),\n    Vpc = vpc,\n    InstanceType = new InstanceType(\"t2.micro\")\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nAutoScalingGroup autoScalingGroup = AutoScalingGroup.Builder.create(this, \"ASG\")\n        .machineImage(EcsOptimizedImage.amazonLinux(EcsOptimizedImageOptions.builder().cachedInContext(true).build()))\n        .vpc(vpc)\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-autoscaling.AutoScalingGroup",
        "@aws-cdk/aws-autoscaling.AutoScalingGroupProps",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.EcsOptimizedImage",
        "@aws-cdk/aws-ecs.EcsOptimizedImage#amazonLinux",
        "@aws-cdk/aws-ecs.EcsOptimizedImageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'ASG', {\n  machineImage: ecs.EcsOptimizedImage.amazonLinux({ cachedInContext: true }),\n  vpc,\n  instanceType: new ec2.InstanceType('t2.micro'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 1,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "d2d743ad8c1da737ebcd56198e4ee2329cf78cfe9e8e4ae797f6ff3c75617f82"
    },
    "8a84d300a9a226aa3bd4e90d64682eb3679c0b270785e27dce545f2ba44b40f1": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EcsTarget"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "4444afe9696e9e4607701b93487a097346591a863ce01fbd2ce8f84687d9e04c": {
      "translations": {
        "python": {
          "source": "# secret is of type Secret\n# db_secret is of type Secret\n# parameter is of type StringParameter\n# task_definition is of type TaskDefinition\n# s3_bucket is of type Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.EnvironmentFile"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 51,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 3,
        "194": 14,
        "196": 8,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5097083ec0994baa9d649a4dc5c4541be5b29371f2382706c02b932cd2769a29"
    },
    "1069609c4cd5986e4faa9517e08d0f58e88e164d8d7d2e339f4bbddce27a5d67": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8d9aa7878e46d11babf63058b4914dffe453638399f6cc589b797fdeeec9366"
    },
    "a012a8272575a158807d7c88527fc2abd0a72d119804ca9b0b6698ff6f7a01f0": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8d9aa7878e46d11babf63058b4914dffe453638399f6cc589b797fdeeec9366"
    },
    "8035343e6494a5363616c62e8e82f7fdb853dcf8be4e43ce39a02e158bc7a590": {
      "translations": {
        "python": {
          "source": "# vpc is of type Vpc\n\nkms_key = kms.Key(self, \"KmsKey\")\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nlog_group = logs.LogGroup(self, \"LogGroup\",\n    encryption_key=kms_key\n)\n\n# Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nexec_bucket = s3.Bucket(self, \"EcsExecBucket\",\n    encryption_key=kms_key\n)\n\ncluster = ecs.Cluster(self, \"Cluster\",\n    vpc=vpc,\n    execute_command_configuration=ecs.ExecuteCommandConfiguration(\n        kms_key=kms_key,\n        log_configuration=ecs.ExecuteCommandLogConfiguration(\n            cloud_watch_log_group=log_group,\n            cloud_watch_encryption_enabled=True,\n            s3_bucket=exec_bucket,\n            s3_encryption_enabled=True,\n            s3_key_prefix=\"exec-command-output\"\n        ),\n        logging=ecs.ExecuteCommandLogging.OVERRIDE\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = new LogGroup(this, \"LogGroup\", new LogGroupProps {\n    EncryptionKey = kmsKey\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = new Bucket(this, \"EcsExecBucket\", new BucketProps {\n    EncryptionKey = kmsKey\n});\n\nCluster cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n    Vpc = vpc,\n    ExecuteCommandConfiguration = new ExecuteCommandConfiguration {\n        KmsKey = kmsKey,\n        LogConfiguration = new ExecuteCommandLogConfiguration {\n            CloudWatchLogGroup = logGroup,\n            CloudWatchEncryptionEnabled = true,\n            S3Bucket = execBucket,\n            S3EncryptionEnabled = true,\n            S3KeyPrefix = \"exec-command-output\"\n        },\n        Logging = ExecuteCommandLogging.OVERRIDE\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\n\nKey kmsKey = new Key(this, \"KmsKey\");\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nLogGroup logGroup = LogGroup.Builder.create(this, \"LogGroup\")\n        .encryptionKey(kmsKey)\n        .build();\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nBucket execBucket = Bucket.Builder.create(this, \"EcsExecBucket\")\n        .encryptionKey(kmsKey)\n        .build();\n\nCluster cluster = Cluster.Builder.create(this, \"Cluster\")\n        .vpc(vpc)\n        .executeCommandConfiguration(ExecuteCommandConfiguration.builder()\n                .kmsKey(kmsKey)\n                .logConfiguration(ExecuteCommandLogConfiguration.builder()\n                        .cloudWatchLogGroup(logGroup)\n                        .cloudWatchEncryptionEnabled(true)\n                        .s3Bucket(execBucket)\n                        .s3EncryptionEnabled(true)\n                        .s3KeyPrefix(\"exec-command-output\")\n                        .build())\n                .logging(ExecuteCommandLogging.OVERRIDE)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExecuteCommandLogging"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.ExecuteCommandConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogConfiguration",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging",
        "@aws-cdk/aws-ecs.ExecuteCommandLogging#OVERRIDE",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst kmsKey = new kms.Key(this, 'KmsKey');\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the log group\nconst logGroup = new logs.LogGroup(this, 'LogGroup', {\n  encryptionKey: kmsKey,\n});\n\n// Pass the KMS key in the `encryptionKey` field to associate the key to the S3 bucket\nconst execBucket = new s3.Bucket(this, 'EcsExecBucket', {\n  encryptionKey: kmsKey,\n});\n\nconst cluster = new ecs.Cluster(this, 'Cluster', {\n  vpc,\n  executeCommandConfiguration: {\n    kmsKey,\n    logConfiguration: {\n      cloudWatchLogGroup: logGroup,\n      cloudWatchEncryptionEnabled: true,\n      s3Bucket: execBucket,\n      s3EncryptionEnabled: true,\n      s3KeyPrefix: 'exec-command-output',\n    },\n    logging: ecs.ExecuteCommandLogging.OVERRIDE,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 4,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 6,
        "197": 4,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 10,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8d9aa7878e46d11babf63058b4914dffe453638399f6cc589b797fdeeec9366"
    },
    "2a51d994e5587208abb324addbb06027860d39566054445895774d81af080387": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "e259b13efd127adf37a87f30cb1719121a9861b9c90c5baca942e59304d80da4"
    },
    "a41d0e042af471f30a1d843e40f31549b39127e082876af37bb092d6eeaf9352": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n\n\nservice = ecs.ExternalService(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    desired_count=5\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = new ExternalService(this, \"Service\", new ExternalServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    DesiredCount = 5\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\n\n\nExternalService service = ExternalService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .desiredCount(5)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ExternalService",
        "@aws-cdk/aws-ecs.ExternalServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TaskDefinition"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst service = new ecs.ExternalService(this, 'Service', {\n  cluster,\n  taskDefinition,\n  desiredCount: 5,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 12,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "e259b13efd127adf37a87f30cb1719121a9861b9c90c5baca942e59304d80da4"
    },
    "939ee9559ebefca8601a0c1561afd0bcd0f2d2d5b1fc7a9412d81f1f781553b8": {
      "translations": {
        "python": {
          "source": "external_task_definition = ecs.ExternalTaskDefinition(self, \"TaskDef\")\n\ncontainer = external_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "ExternalTaskDefinition externalTaskDefinition = new ExternalTaskDefinition(this, \"TaskDef\");\n\nContainerDefinition container = externalTaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ExternalTaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ExternalTaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst externalTaskDefinition = new ecs.ExternalTaskDefinition(this, 'TaskDef');\n\nconst container = externalTaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 11,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "76cc39b4301eae47c1317b49811a94b15ee403d4748a73b19f249b6230e60a27"
    },
    "0455505c70a4c98f91e0bb72052a614c46ee163e913dafbb32099cfa22456250": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nscheduled_fargate_task = ecs_patterns.ScheduledFargateTask(self, \"ScheduledFargateTask\",\n    cluster=cluster,\n    scheduled_fargate_task_image_options=ecsPatterns.ScheduledFargateTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n        memory_limit_mi_b=512\n    ),\n    schedule=appscaling.Schedule.expression(\"rate(1 minute)\"),\n    platform_version=ecs.FargatePlatformVersion.LATEST\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = new ScheduledFargateTask(this, \"ScheduledFargateTask\", new ScheduledFargateTaskProps {\n    Cluster = cluster,\n    ScheduledFargateTaskImageOptions = new ScheduledFargateTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n        MemoryLimitMiB = 512\n    },\n    Schedule = Schedule.Expression(\"rate(1 minute)\"),\n    PlatformVersion = FargatePlatformVersion.LATEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nScheduledFargateTask scheduledFargateTask = ScheduledFargateTask.Builder.create(this, \"ScheduledFargateTask\")\n        .cluster(cluster)\n        .scheduledFargateTaskImageOptions(ScheduledFargateTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .memoryLimitMiB(512)\n                .build())\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .platformVersion(FargatePlatformVersion.LATEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#expression",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
        "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.FargatePlatformVersion",
        "@aws-cdk/aws-ecs.FargatePlatformVersion#LATEST",
        "@aws-cdk/aws-ecs.ICluster"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "c3961163983e114c7dc3cb2b83e227d391ef19318ee2702c721613732e4bda42"
    },
    "5acea073f080c1d913aabe1fb6ccf03873feae924a77188672c6e22f0c47697e": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "6ecf9e74c33bd357e80eb7bd84d63250f825db176845b3b15ed791b5f0816102": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "d686597a2aeb1ca3a482c5ed09eeecc30b01becee5f448aabac434342135dd45": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvar container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nObject container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "6130724716175706d8b58d12cc4023d532336b33737338ba54c35fed41cc1e1b"
    },
    "6b5b848bc5dfe9f68b2786713e546cda3a755ff1a205b121738029acd8472fc4": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvar container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nObject container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "6130724716175706d8b58d12cc4023d532336b33737338ba54c35fed41cc1e1b"
    },
    "ad1d9cf5e378d866c80889112ae52e89f76d1ef3f676c9c0c8f119f0ed72a59f": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.firelens(\n        options={\n            \"Name\": \"firehose\",\n            \"region\": \"us-west-2\",\n            \"delivery_stream\": \"my-stream\"\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Firelens(new FireLensLogDriverProps {\n        Options = new Dictionary<string, string> {\n            { \"Name\", \"firehose\" },\n            { \"region\", \"us-west-2\" },\n            { \"delivery_stream\", \"my-stream\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.firelens(FireLensLogDriverProps.builder()\n                .options(Map.of(\n                        \"Name\", \"firehose\",\n                        \"region\", \"us-west-2\",\n                        \"delivery_stream\", \"my-stream\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.FireLensLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.FireLensLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#firelens",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.firelens({\n    options: {\n        Name: 'firehose',\n        region: 'us-west-2',\n        delivery_stream: 'my-stream',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 18,
        "104": 1,
        "193": 3,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 7
      },
      "fqnsFingerprint": "f82c5c68f4ff4f868d60a6c0a0fde2a36512fe4a6f5fc5dd0a47d679cde9e4c3"
    },
    "ad23da2151cd6a9cd5fbd5758825ea4168bc04a17a59338b4a838b140b7aa0c9": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.gelf(address=\"my-gelf-address\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Gelf(new GelfLogDriverProps { Address = \"my-gelf-address\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.gelf(GelfLogDriverProps.builder().address(\"my-gelf-address\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GelfLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GelfLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#gelf",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.gelf({ address: 'my-gelf-address' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "45e5a2c25f20619cee2f281cda85afcfba424a55ff9685ceb8b050dbb08a044f"
    },
    "f0ec578117406288c90de7e06cf2db1b5cdd52dcd7ff67af61e45435fa0efc5b": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GenericLogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "6c58f185eb5a4e9008fcb4bfaeca9651c7020b85b90389541461bc9531e86068"
    },
    "bb0122ad6769676caf70109677eb2757247573983626c2310515b7879502313c": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.GenericLogDriver(\n        log_driver=\"fluentd\",\n        options={\n            \"tag\": \"example-tag\"\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = new GenericLogDriver(new GenericLogDriverProps {\n        LogDriver = \"fluentd\",\n        Options = new Dictionary<string, string> {\n            { \"tag\", \"example-tag\" }\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(GenericLogDriver.Builder.create()\n                .logDriver(\"fluentd\")\n                .options(Map.of(\n                        \"tag\", \"example-tag\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.GenericLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.GenericLogDriver",
        "@aws-cdk/aws-ecs.GenericLogDriverProps",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: new ecs.GenericLogDriver({\n    logDriver: 'fluentd',\n    options: {\n      tag: 'example-tag',\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 16,
        "104": 1,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "6c58f185eb5a4e9008fcb4bfaeca9651c7020b85b90389541461bc9531e86068"
    },
    "851eabd7aa21d46a3063bc232f859bb21d007c7776f35a6d10d45e723910e7a8": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ListenerConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "ce73e407fed0d5c5757f7a1121d1bbabe203ab543a6e33e951b10ba4a699b99e": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.Ec2Service(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elb.LoadBalancer(self, \"LB\", vpc=vpc)\nlb.add_listener(external_port=80)\nlb.add_target(service.load_balancer_target(\n    container_name=\"MyContainer\",\n    container_port=80\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = new Ec2Service(this, \"Service\", new Ec2ServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nLoadBalancer lb = new LoadBalancer(this, \"LB\", new LoadBalancerProps { Vpc = vpc });\nlb.AddListener(new LoadBalancerListener { ExternalPort = 80 });\nlb.AddTarget(service.LoadBalancerTarget(new LoadBalancerTargetOptions {\n    ContainerName = \"MyContainer\",\n    ContainerPort = 80\n}));",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nEc2Service service = Ec2Service.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nLoadBalancer lb = LoadBalancer.Builder.create(this, \"LB\").vpc(vpc).build();\nlb.addListener(LoadBalancerListener.builder().externalPort(80).build());\nlb.addTarget(service.loadBalancerTarget(LoadBalancerTargetOptions.builder()\n        .containerName(\"MyContainer\")\n        .containerPort(80)\n        .build()));",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LoadBalancerTargetOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#loadBalancerTarget",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.LoadBalancerTargetOptions",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancing.ILoadBalancerTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addTarget",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.Ec2Service(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elb.LoadBalancer(this, 'LB', { vpc });\nlb.addListener({ externalPort: 80 });\nlb.addTarget(service.loadBalancerTarget({\n  containerName: 'MyContainer',\n  containerPort: 80,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 27,
        "104": 2,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 2,
        "225": 5,
        "226": 2,
        "242": 5,
        "243": 5,
        "281": 3,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "aa58a9e5390e16d7b1004ae7ee70f4443cc23e7824671b2d0fdd8dac507fdc67"
    },
    "42b4e4c1d660edc839313dd59abfddbe44604b3fc6eb889cb498dac35c23a8e0": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LogDriver"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f738d89d5edc79c62d4005f14770d9d580d6beea464403819166876710af3f5"
    },
    "7f6d1ab20274608e5190b96e37455dd15ce27ee580582da7cc65411d270e1f1e": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.aws_logs(stream_prefix=\"EventDemo\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.AwsLogs(new AwsLogDriverProps { StreamPrefix = \"EventDemo\" })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.awsLogs(AwsLogDriverProps.builder().streamPrefix(\"EventDemo\").build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.LogDrivers"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.AwsLogDriverProps",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#awsLogs",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.awsLogs({ streamPrefix: 'EventDemo' }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "4c160a58a1a1cbad597529b2ce0efab95b0c14adc683c1d2152d1b61b9db51a2"
    },
    "91e54da8e04f45b09797eaab5495f038af58dfec1e4071dc492494895757b956": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\n\ncluster.add_capacity(\"graviton-cluster\",\n    min_capacity=2,\n    instance_type=ec2.InstanceType(\"c6g.large\"),\n    machine_image_type=ecs.MachineImageType.BOTTLEROCKET\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\n\ncluster.AddCapacity(\"graviton-cluster\", new AddCapacityOptions {\n    MinCapacity = 2,\n    InstanceType = new InstanceType(\"c6g.large\"),\n    MachineImageType = MachineImageType.BOTTLEROCKET\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\n\ncluster.addCapacity(\"graviton-cluster\", AddCapacityOptions.builder()\n        .minCapacity(2)\n        .instanceType(new InstanceType(\"c6g.large\"))\n        .machineImageType(MachineImageType.BOTTLEROCKET)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.MachineImageType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.MachineImageType",
        "@aws-cdk/aws-ecs.MachineImageType#BOTTLEROCKET"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncluster.addCapacity('graviton-cluster', {\n  minCapacity: 2,\n  instanceType: new ec2.InstanceType('c6g.large'),\n  machineImageType: ecs.MachineImageType.BOTTLEROCKET,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f02178fb813718a7a196f00edae3b9534d14773b2ff5af1759e4b4c91d334427"
    },
    "a804513d8f3d50125642a4ec22fe9dae7f9c3c098d7833b511d3718964f42205": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dc8c4e227694b89a81e0edc2d1e4783cee7f3f29d9c93ed38b3ba2c628f56e53"
    },
    "d2fe9772969825f45362f47d3b4b9da7a6daa4a93d7004d27c52f9230885e9b5": {
      "translations": {
        "python": {
          "source": "ec2_task_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\",\n    network_mode=ecs.NetworkMode.BRIDGE\n)\n\ncontainer = ec2_task_definition.add_container(\"WebContainer\",\n    # Use an image from DockerHub\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = new Ec2TaskDefinition(this, \"TaskDef\", new Ec2TaskDefinitionProps {\n    NetworkMode = NetworkMode.BRIDGE\n});\n\nContainerDefinition container = ec2TaskDefinition.AddContainer(\"WebContainer\", new ContainerDefinitionOptions {\n    // Use an image from DockerHub\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024\n});",
          "version": "1"
        },
        "java": {
          "source": "Ec2TaskDefinition ec2TaskDefinition = Ec2TaskDefinition.Builder.create(this, \"TaskDef\")\n        .networkMode(NetworkMode.BRIDGE)\n        .build();\n\nContainerDefinition container = ec2TaskDefinition.addContainer(\"WebContainer\", ContainerDefinitionOptions.builder()\n        // Use an image from DockerHub\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.NetworkMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.Ec2TaskDefinitionProps",
        "@aws-cdk/aws-ecs.NetworkMode",
        "@aws-cdk/aws-ecs.NetworkMode#BRIDGE",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst ec2TaskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef', {\n  networkMode: ecs.NetworkMode.BRIDGE,\n});\n\nconst container = ec2TaskDefinition.addContainer(\"WebContainer\", {\n  // Use an image from DockerHub\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  // ... other options here ...\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 15,
        "104": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "dca6175b90d05ca85cac54bafc1c914c926c2b94bcbf31452ca6a3e20aa4b148"
    },
    "869883dcb9828c97eb6da6178206ef887a0852adfaf7fa79e4f1bbb1559f85a4": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PlacementConstraint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "a4ad2dc77e9db1cd4194d386e1226b426ae5f00a2a0b983eed86bfb4ec70fd03"
    },
    "d396bbba1e5a2831295631fd34861f8e8f6cd150130f5c89fe348def479c676c": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PlacementStrategy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "a4ad2dc77e9db1cd4194d386e1226b426ae5f00a2a0b983eed86bfb4ec70fd03"
    },
    "0e6246d6fc001f7dd4225dd025fe40e41a699223a478f08901ead30e03250092": {
      "translations": {
        "python": {
          "source": "# container is of type ContainerDefinition\n\n\ncontainer.add_port_mappings(\n    container_port=3000\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ContainerDefinition container;\n\n\ncontainer.AddPortMappings(new PortMapping {\n    ContainerPort = 3000\n});",
          "version": "1"
        },
        "java": {
          "source": "ContainerDefinition container;\n\n\ncontainer.addPortMappings(PortMapping.builder()\n        .containerPort(3000)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const container: ecs.ContainerDefinition;\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.PortMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.PortMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const container: ecs.ContainerDefinition;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\ncontainer.addPortMappings({\n  containerPort: 3000,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "75": 6,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2b1381460d33dca05f605d00e2868645bcb73c3bc3f5e7da230cc028b0ec8477"
    },
    "02f544b7881ee662f1e9d3747687d58064480e37dcbd7136b7c16ee7f5f81d15": {
      "translations": {
        "python": {
          "source": "# task_definition is of type TaskDefinition\n# cluster is of type Cluster\n\n\n# Add a container to the task definition\nspecific_container = task_definition.add_container(\"Container\",\n    image=ecs.ContainerImage.from_registry(\"/aws/aws-example-app\"),\n    memory_limit_mi_b=2048\n)\n\n# Add a port mapping\nspecific_container.add_port_mappings(\n    container_port=7600,\n    protocol=ecs.Protocol.TCP\n)\n\necs.Ec2Service(self, \"Service\",\n    cluster=cluster,\n    task_definition=task_definition,\n    cloud_map_options=ecs.CloudMapOptions(\n        # Create SRV records - useful for bridge networking\n        dns_record_type=cloudmap.DnsRecordType.SRV,\n        # Targets port TCP port 7600 `specificContainer`\n        container=specific_container,\n        container_port=7600\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.AddContainer(\"Container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"/aws/aws-example-app\"),\n    MemoryLimitMiB = 2048\n});\n\n// Add a port mapping\nspecificContainer.AddPortMappings(new PortMapping {\n    ContainerPort = 7600,\n    Protocol = Protocol.TCP\n});\n\nnew Ec2Service(this, \"Service\", new Ec2ServiceProps {\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    CloudMapOptions = new CloudMapOptions {\n        // Create SRV records - useful for bridge networking\n        DnsRecordType = DnsRecordType.SRV,\n        // Targets port TCP port 7600 `specificContainer`\n        Container = specificContainer,\n        ContainerPort = 7600\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "TaskDefinition taskDefinition;\nCluster cluster;\n\n\n// Add a container to the task definition\nContainerDefinition specificContainer = taskDefinition.addContainer(\"Container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"/aws/aws-example-app\"))\n        .memoryLimitMiB(2048)\n        .build());\n\n// Add a port mapping\nspecificContainer.addPortMappings(PortMapping.builder()\n        .containerPort(7600)\n        .protocol(Protocol.TCP)\n        .build());\n\nEc2Service.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .cloudMapOptions(CloudMapOptions.builder()\n                // Create SRV records - useful for bridge networking\n                .dnsRecordType(DnsRecordType.SRV)\n                // Targets port TCP port 7600 `specificContainer`\n                .container(specificContainer)\n                .containerPort(7600)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Protocol"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.CloudMapOptions",
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addPortMappings",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2Service",
        "@aws-cdk/aws-ecs.Ec2ServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PortMapping",
        "@aws-cdk/aws-ecs.Protocol",
        "@aws-cdk/aws-ecs.Protocol#TCP",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#SRV"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// Add a container to the task definition\nconst specificContainer = taskDefinition.addContainer('Container', {\n  image: ecs.ContainerImage.fromRegistry('/aws/aws-example-app'),\n  memoryLimitMiB: 2048,\n});\n\n// Add a port mapping\nspecificContainer.addPortMappings({\n  containerPort: 7600,\n  protocol: ecs.Protocol.TCP,\n});\n\nnew ecs.Ec2Service(this, 'Service', {\n  cluster,\n  taskDefinition,\n  cloudMapOptions: {\n    // Create SRV records - useful for bridge networking\n    dnsRecordType: cloudmap.DnsRecordType.SRV,\n    // Targets port TCP port 7600 `specificContainer`\n    container: specificContainer,\n    containerPort: 7600,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 3,
        "75": 33,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 8,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7dc91c38efa5cc72874e3a4f58397e31ac027599c65496df9c9b910832ee7677"
    },
    "6eac8eab02546b49a0db281f47a353c6206c5d7ec01894c84972815c5bed2998": {
      "translations": {
        "python": {
          "source": "# target is of type ApplicationTargetGroup\n# service is of type BaseService\n\nscaling = service.auto_scale_task_count(max_capacity=10)\nscaling.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscaling.scale_on_request_count(\"RequestScaling\",\n    requests_per_target=10000,\n    target_group=target\n)",
          "version": "1"
        },
        "csharp": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.AutoScaleTaskCount(new EnableScalingProps { MaxCapacity = 10 });\nscaling.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscaling.ScaleOnRequestCount(\"RequestScaling\", new RequestCountScalingProps {\n    RequestsPerTarget = 10000,\n    TargetGroup = target\n});",
          "version": "1"
        },
        "java": {
          "source": "ApplicationTargetGroup target;\nBaseService service;\n\nScalableTaskCount scaling = service.autoScaleTaskCount(EnableScalingProps.builder().maxCapacity(10).build());\nscaling.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscaling.scaleOnRequestCount(\"RequestScaling\", RequestCountScalingProps.builder()\n        .requestsPerTarget(10000)\n        .targetGroup(target)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.RequestCountScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.RequestCountScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnRequestCount",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const target: elbv2.ApplicationTargetGroup;\ndeclare const service: ecs.BaseService;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst scaling = service.autoScaleTaskCount({ maxCapacity: 10 });\nscaling.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscaling.scaleOnRequestCount('RequestScaling', {\n  requestsPerTarget: 10000,\n  targetGroup: target,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 18,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 3,
        "196": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "9abb4d7a37da9b42692b42b4cab54f17995d2cc6d183956f3e73342f1897eafc"
    },
    "8465f65ef6d73edf6a86dcd87f7fb853dc0831ad182b76f0f01f2b6cf22a4eb4": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n\nload_balanced_fargate_service = ecs_patterns.ApplicationLoadBalancedFargateService(self, \"Service\",\n    cluster=cluster,\n    memory_limit_mi_b=1024,\n    desired_count=1,\n    cpu=512,\n    task_image_options=ecsPatterns.ApplicationLoadBalancedTaskImageOptions(\n        image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\")\n    )\n)\n\nscalable_target = load_balanced_fargate_service.service.auto_scale_task_count(\n    min_capacity=1,\n    max_capacity=20\n)\n\nscalable_target.scale_on_cpu_utilization(\"CpuScaling\",\n    target_utilization_percent=50\n)\n\nscalable_target.scale_on_memory_utilization(\"MemoryScaling\",\n    target_utilization_percent=50\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = new ApplicationLoadBalancedFargateService(this, \"Service\", new ApplicationLoadBalancedFargateServiceProps {\n    Cluster = cluster,\n    MemoryLimitMiB = 1024,\n    DesiredCount = 1,\n    Cpu = 512,\n    TaskImageOptions = new ApplicationLoadBalancedTaskImageOptions {\n        Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\")\n    }\n});\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.Service.AutoScaleTaskCount(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 20\n});\n\nscalableTarget.ScaleOnCpuUtilization(\"CpuScaling\", new CpuUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nscalableTarget.ScaleOnMemoryUtilization(\"MemoryScaling\", new MemoryUtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\n\nApplicationLoadBalancedFargateService loadBalancedFargateService = ApplicationLoadBalancedFargateService.Builder.create(this, \"Service\")\n        .cluster(cluster)\n        .memoryLimitMiB(1024)\n        .desiredCount(1)\n        .cpu(512)\n        .taskImageOptions(ApplicationLoadBalancedTaskImageOptions.builder()\n                .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n                .build())\n        .build();\n\nScalableTaskCount scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(20)\n        .build());\n\nscalableTarget.scaleOnCpuUtilization(\"CpuScaling\", CpuUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nscalableTarget.scaleOnMemoryUtilization(\"MemoryScaling\", MemoryUtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.ScalableTaskCount"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.EnableScalingProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService#service",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
        "@aws-cdk/aws-ecs.BaseService#autoScaleTaskCount",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.CpuUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.MemoryUtilizationScalingProps",
        "@aws-cdk/aws-ecs.ScalableTaskCount",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnCpuUtilization",
        "@aws-cdk/aws-ecs.ScalableTaskCount#scaleOnMemoryUtilization"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cxapi from '@aws-cdk/cx-api';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    \n    // Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "8": 7,
        "10": 4,
        "75": 27,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 9,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "dc8c4e227694b89a81e0edc2d1e4783cee7f3f29d9c93ed38b3ba2c628f56e53"
    },
    "421c62385529acfc20353e57424d5949c34b3f77e27fa53e7b51d8de27792ad0": {
      "translations": {
        "python": {
          "source": "# secret is of type Secret\n# db_secret is of type Secret\n# parameter is of type StringParameter\n# task_definition is of type TaskDefinition\n# s3_bucket is of type Bucket\n\n\nnew_container = task_definition.add_container(\"container\",\n    image=ecs.ContainerImage.from_registry(\"amazon/amazon-ecs-sample\"),\n    memory_limit_mi_b=1024,\n    environment={ # clear text, not for sensitive data\n        \"STAGE\": \"prod\"},\n    environment_files=[ # list of environment files hosted either on local disk or S3\n        ecs.EnvironmentFile.from_asset(\"./demo-env-file.env\"),\n        ecs.EnvironmentFile.from_bucket(s3_bucket, \"assets/demo-env-file.env\")],\n    secrets={ # Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        \"SECRET\": ecs.Secret.from_secrets_manager(secret),\n        \"DB_PASSWORD\": ecs.Secret.from_secrets_manager(db_secret, \"password\"),  # Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        \"PARAMETER\": ecs.Secret.from_ssm_parameter(parameter)}\n)\nnew_container.add_environment(\"QUEUE_NAME\", \"MyQueue\")",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.AddContainer(\"container\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"amazon/amazon-ecs-sample\"),\n    MemoryLimitMiB = 1024,\n    Environment = new Dictionary<string, string> {  // clear text, not for sensitive data\n        { \"STAGE\", \"prod\" } },\n    EnvironmentFiles = new [] { EnvironmentFile.FromAsset(\"./demo-env-file.env\"), EnvironmentFile.FromBucket(s3Bucket, \"assets/demo-env-file.env\") },\n    Secrets = new Dictionary<string, Secret> {  // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n        { \"SECRET\", Secret.FromSecretsManager(secret) },\n        { \"DB_PASSWORD\", Secret.FromSecretsManager(dbSecret, \"password\") },  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n        { \"PARAMETER\", Secret.FromSsmParameter(parameter) } }\n});\nnewContainer.AddEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret;\nSecret dbSecret;\nStringParameter parameter;\nTaskDefinition taskDefinition;\nBucket s3Bucket;\n\n\nContainerDefinition newContainer = taskDefinition.addContainer(\"container\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"))\n        .memoryLimitMiB(1024)\n        .environment(Map.of( // clear text, not for sensitive data\n                \"STAGE\", \"prod\"))\n        .environmentFiles(List.of(EnvironmentFile.fromAsset(\"./demo-env-file.env\"), EnvironmentFile.fromBucket(s3Bucket, \"assets/demo-env-file.env\")))\n        .secrets(Map.of( // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n                \"SECRET\", Secret.fromSecretsManager(secret),\n                \"DB_PASSWORD\", Secret.fromSecretsManager(dbSecret, \"password\"),  // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n                \"PARAMETER\", Secret.fromSsmParameter(parameter)))\n        .build());\nnewContainer.addEnvironment(\"QUEUE_NAME\", \"MyQueue\");",
          "version": "1"
        },
        "$": {
          "source": "declare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Secret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinition",
        "@aws-cdk/aws-ecs.ContainerDefinition#addEnvironment",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.EnvironmentFile",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromAsset",
        "@aws-cdk/aws-ecs.EnvironmentFile#fromBucket",
        "@aws-cdk/aws-ecs.Secret",
        "@aws-cdk/aws-ecs.Secret#fromSecretsManager",
        "@aws-cdk/aws-ecs.Secret#fromSsmParameter",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-ssm.IParameter"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const secret: secretsmanager.Secret;\ndeclare const dbSecret: secretsmanager.Secret;\ndeclare const parameter: ssm.StringParameter;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const s3Bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst newContainer = taskDefinition.addContainer('container', {\n  image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  memoryLimitMiB: 1024,\n  environment: { // clear text, not for sensitive data\n    STAGE: 'prod',\n  },\n  environmentFiles: [ // list of environment files hosted either on local disk or S3\n    ecs.EnvironmentFile.fromAsset('./demo-env-file.env'),\n    ecs.EnvironmentFile.fromBucket(s3Bucket, 'assets/demo-env-file.env'),\n  ],\n  secrets: { // Retrieved from AWS Secrets Manager or AWS Systems Manager Parameter Store at container start-up.\n    SECRET: ecs.Secret.fromSecretsManager(secret),\n    DB_PASSWORD: ecs.Secret.fromSecretsManager(dbSecret, 'password'), // Reference a specific JSON field, (requires platform version 1.4.0 or later for Fargate tasks)\n    PARAMETER: ecs.Secret.fromSsmParameter(parameter),\n  },\n});\nnewContainer.addEnvironment('QUEUE_NAME', 'MyQueue');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 8,
        "75": 51,
        "130": 5,
        "153": 5,
        "169": 5,
        "192": 1,
        "193": 3,
        "194": 14,
        "196": 8,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "5097083ec0994baa9d649a4dc5c4541be5b29371f2382706c02b932cd2769a29"
    },
    "5545335de23986c68e37bf51c62712dabbf7ae9aedc80d68f4654b8163e6127c": {
      "translations": {
        "python": {
          "source": "# Create a Task Definition for the container to start\ntask_definition = ecs.Ec2TaskDefinition(self, \"TaskDef\")\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"example-image\"),\n    memory_limit_mi_b=256,\n    logging=ecs.LogDrivers.splunk(\n        token=SecretValue.secrets_manager(\"my-splunk-token\"),\n        url=\"my-splunk-url\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"example-image\"),\n    MemoryLimitMiB = 256,\n    Logging = LogDrivers.Splunk(new SplunkLogDriverProps {\n        Token = SecretValue.SecretsManager(\"my-splunk-token\"),\n        Url = \"my-splunk-url\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "// Create a Task Definition for the container to start\nEc2TaskDefinition taskDefinition = new Ec2TaskDefinition(this, \"TaskDef\");\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"example-image\"))\n        .memoryLimitMiB(256)\n        .logging(LogDrivers.splunk(SplunkLogDriverProps.builder()\n                .token(SecretValue.secretsManager(\"my-splunk-token\"))\n                .url(\"my-splunk-url\")\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.SplunkLogDriverProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.Ec2TaskDefinition",
        "@aws-cdk/aws-ecs.LogDriver",
        "@aws-cdk/aws-ecs.LogDrivers",
        "@aws-cdk/aws-ecs.LogDrivers#splunk",
        "@aws-cdk/aws-ecs.SplunkLogDriverProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Create a Task Definition for the container to start\nconst taskDefinition = new ecs.Ec2TaskDefinition(this, 'TaskDef');\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('example-image'),\n  memoryLimitMiB: 256,\n  logging: ecs.LogDrivers.splunk({\n    token: SecretValue.secretsManager('my-splunk-token'),\n    url: 'my-splunk-url',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 18,
        "104": 1,
        "193": 2,
        "194": 7,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "9f738d89d5edc79c62d4005f14770d9d580d6beea464403819166876710af3f5"
    },
    "06dafd9e31731b892b088d0214f58a1e20b5d67a7d2cdce98ec9c9f2e517f2bf": {
      "translations": {
        "python": {
          "source": "#\n# This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n#\nclass EcsAppStack(cdk.Stack):\n    def __init__(self, scope, id, *, image, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, image=image, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        task_definition = ecs.TaskDefinition(self, \"TaskDefinition\",\n            compatibility=ecs.Compatibility.FARGATE,\n            cpu=\"1024\",\n            memory_mi_b=\"2048\"\n        )\n        task_definition.add_container(\"AppContainer\",\n            image=image\n        )\n        ecs.FargateService(self, \"EcsService\",\n            task_definition=task_definition,\n            cluster=ecs.Cluster(self, \"Cluster\",\n                vpc=ec2.Vpc(self, \"Vpc\",\n                    max_azs=1\n                )\n            )\n        )\n\n#\n# This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n#\nclass PipelineStack(cdk.Stack):\n\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        # ********* ECS part ****************\n\n        # this is the ECR repository where the built Docker image will be pushed\n        app_ecr_repo = ecr.Repository(self, \"EcsDeployRepository\")\n        # the build that creates the Docker image, and pushes it to the ECR repo\n        app_code_docker_build = codebuild.PipelineProject(self, \"AppCodeDockerImageBuildAndPushProject\",\n            environment=codebuild.BuildEnvironment(\n                # we need to run Docker\n                privileged=True\n            ),\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"build\": {\n                        \"commands\": [\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\"\n                        ]\n                    },\n                    \"post_build\": {\n                        \"commands\": [\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"\n                        ]\n                    }\n                },\n                \"env\": {\n                    # save the imageTag environment variable as a CodePipeline Variable\n                    \"exported-variables\": [\"imageTag\"\n                    ]\n                }\n            }),\n            environment_variables={\n                \"REPOSITORY_URI\": codebuild.BuildEnvironmentVariable(\n                    value=app_ecr_repo.repository_uri\n                )\n            }\n        )\n        # needed for `docker push`\n        app_ecr_repo.grant_pull_push(app_code_docker_build)\n        # create the ContainerImage used for the ECS application Stack\n        self.tag_parameter_container_image = ecs.TagParameterContainerImage(app_ecr_repo)\n\n        cdk_code_build = codebuild.PipelineProject(self, \"CdkCodeBuildProject\",\n            build_spec=codebuild.BuildSpec.from_object({\n                \"version\": \"0.2\",\n                \"phases\": {\n                    \"install\": {\n                        \"commands\": [\"npm install\"\n                        ]\n                    },\n                    \"build\": {\n                        \"commands\": [\"npx cdk synth --verbose\"\n                        ]\n                    }\n                },\n                \"artifacts\": {\n                    # store the entire Cloud Assembly as the output artifact\n                    \"base-directory\": \"cdk.out\",\n                    \"files\": \"**/*\"\n                }\n            })\n        )\n\n        # ********* Pipeline part ****************\n\n        app_code_source_output = codepipeline.Artifact()\n        cdk_code_source_output = codepipeline.Artifact()\n        cdk_code_build_output = codepipeline.Artifact()\n        app_code_build_action = codepipeline_actions.CodeBuildAction(\n            action_name=\"AppCodeDockerImageBuildAndPush\",\n            project=app_code_docker_build,\n            input=app_code_source_output\n        )\n        codepipeline.Pipeline(self, \"CodePipelineDeployingEcsApplication\",\n            artifact_bucket=s3.Bucket(self, \"ArtifactBucket\",\n                removal_policy=cdk.RemovalPolicy.DESTROY\n            ),\n            stages=[codepipeline.StageProps(\n                stage_name=\"Source\",\n                actions=[\n                    # this is the Action that takes the source of your application code\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"AppCodeSource\",\n                        repository=codecommit.Repository(self, \"AppCodeSourceRepository\", repository_name=\"AppCodeSourceRepository\"),\n                        output=app_code_source_output\n                    ),\n                    # this is the Action that takes the source of your CDK code\n                    # (which would probably include this Pipeline code as well)\n                    codepipeline_actions.CodeCommitSourceAction(\n                        action_name=\"CdkCodeSource\",\n                        repository=codecommit.Repository(self, \"CdkCodeSourceRepository\", repository_name=\"CdkCodeSourceRepository\"),\n                        output=cdk_code_source_output\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Build\",\n                actions=[app_code_build_action,\n                    codepipeline_actions.CodeBuildAction(\n                        action_name=\"CdkCodeBuildAndSynth\",\n                        project=cdk_code_build,\n                        input=cdk_code_source_output,\n                        outputs=[cdk_code_build_output]\n                    )\n                ]\n            ), codepipeline.StageProps(\n                stage_name=\"Deploy\",\n                actions=[\n                    codepipeline_actions.CloudFormationCreateUpdateStackAction(\n                        action_name=\"CFN_Deploy\",\n                        stack_name=\"SampleEcsStackDeployedFromCodePipeline\",\n                        # this name has to be the same name as used below in the CDK code for the application Stack\n                        template_path=cdk_code_build_output.at_path(\"EcsStackDeployedInPipeline.template.json\"),\n                        admin_permissions=True,\n                        parameter_overrides={\n                            # read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            # and pass it as the CloudFormation Parameter for the tag\n                            self.tag_parameter_container_image.tag_parameter_name: app_code_build_action.variable(\"imageTag\")\n                        }\n                    )\n                ]\n            )\n            ]\n        )\n\napp = cdk.App()\n\n# the CodePipeline Stack needs to be created first\npipeline_stack = PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\")\n# we supply the image to the ECS application Stack from the CodePipeline Stack\nEcsAppStack(app, \"EcsStackDeployedInPipeline\",\n    image=pipeline_stack.tag_parameter_container_image\n)",
          "version": "1"
        },
        "csharp": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nclass EcsAppStackProps : StackProps\n{\n    public ContainerImage Image { get; set; }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nclass EcsAppStack : Stack\n{\n    public EcsAppStack(Construct scope, string id, EcsAppStackProps props) : base(scope, id, props)\n    {\n\n        TaskDefinition taskDefinition = new TaskDefinition(this, \"TaskDefinition\", new TaskDefinitionProps {\n            Compatibility = Compatibility.FARGATE,\n            Cpu = \"1024\",\n            MemoryMiB = \"2048\"\n        });\n        taskDefinition.AddContainer(\"AppContainer\", new ContainerDefinitionOptions {\n            Image = props.Image\n        });\n        new FargateService(this, \"EcsService\", new FargateServiceProps {\n            TaskDefinition = taskDefinition,\n            Cluster = new Cluster(this, \"Cluster\", new ClusterProps {\n                Vpc = new Vpc(this, \"Vpc\", new VpcProps {\n                    MaxAzs = 1\n                })\n            })\n        });\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nclass PipelineStack : Stack\n{\n    public TagParameterContainerImage TagParameterContainerImage { get; }\n\n    public PipelineStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = new PipelineProject(this, \"AppCodeDockerImageBuildAndPushProject\", new PipelineProjectProps {\n            Environment = new BuildEnvironment {\n                // we need to run Docker\n                Privileged = true\n            },\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"build\", new Struct {\n                        Commands = new [] { \"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\" }\n                    } },\n                    { \"post_build\", new Struct {\n                        Commands = new [] { \"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\" }\n                    } }\n                } },\n                { \"env\", new Dictionary<string, string[]> {\n                    // save the imageTag environment variable as a CodePipeline Variable\n                    { \"exported-variables\", new [] { \"imageTag\" } }\n                } }\n            }),\n            EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n                { \"REPOSITORY_URI\", new BuildEnvironmentVariable {\n                    Value = appEcrRepo.RepositoryUri\n                } }\n            }\n        });\n        // needed for `docker push`\n        appEcrRepo.GrantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        TagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = new PipelineProject(this, \"CdkCodeBuildProject\", new PipelineProjectProps {\n            BuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n                { \"version\", \"0.2\" },\n                { \"phases\", new Dictionary<string, IDictionary<string, string[]>> {\n                    { \"install\", new Struct {\n                        Commands = new [] { \"npm install\" }\n                    } },\n                    { \"build\", new Struct {\n                        Commands = new [] { \"npx cdk synth --verbose\" }\n                    } }\n                } },\n                { \"artifacts\", new Dictionary<string, string> {\n                    // store the entire Cloud Assembly as the output artifact\n                    { \"base-directory\", \"cdk.out\" },\n                    { \"files\", \"**/*\" }\n                } }\n            })\n        });\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = new CodeBuildAction(new CodeBuildActionProps {\n            ActionName = \"AppCodeDockerImageBuildAndPush\",\n            Project = appCodeDockerBuild,\n            Input = appCodeSourceOutput\n        });\n        new Pipeline(this, \"CodePipelineDeployingEcsApplication\", new PipelineProps {\n            ArtifactBucket = new Bucket(this, \"ArtifactBucket\", new BucketProps {\n                RemovalPolicy = RemovalPolicy.DESTROY\n            }),\n            Stages = new [] { new StageProps {\n                StageName = \"Source\",\n                Actions = new [] {\n                    // this is the Action that takes the source of your application code\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"AppCodeSource\",\n                        Repository = new Repository(this, \"AppCodeSourceRepository\", new RepositoryProps { RepositoryName = \"AppCodeSourceRepository\" }),\n                        Output = appCodeSourceOutput\n                    }),\n                    // this is the Action that takes the source of your CDK code\n                    // (which would probably include this Pipeline code as well)\n                    new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n                        ActionName = \"CdkCodeSource\",\n                        Repository = new Repository(this, \"CdkCodeSourceRepository\", new RepositoryProps { RepositoryName = \"CdkCodeSourceRepository\" }),\n                        Output = cdkCodeSourceOutput\n                    }) }\n            }, new StageProps {\n                StageName = \"Build\",\n                Actions = new [] { appCodeBuildAction,\n                    new CodeBuildAction(new CodeBuildActionProps {\n                        ActionName = \"CdkCodeBuildAndSynth\",\n                        Project = cdkCodeBuild,\n                        Input = cdkCodeSourceOutput,\n                        Outputs = new [] { cdkCodeBuildOutput }\n                    }) }\n            }, new StageProps {\n                StageName = \"Deploy\",\n                Actions = new [] {\n                    new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n                        ActionName = \"CFN_Deploy\",\n                        StackName = \"SampleEcsStackDeployedFromCodePipeline\",\n                        // this name has to be the same name as used below in the CDK code for the application Stack\n                        TemplatePath = cdkCodeBuildOutput.AtPath(\"EcsStackDeployedInPipeline.template.json\"),\n                        AdminPermissions = true,\n                        ParameterOverrides = new Dictionary<string, object> {\n                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                            // and pass it as the CloudFormation Parameter for the tag\n                            { TagParameterContainerImage.TagParameterName, appCodeBuildAction.Variable(\"imageTag\") }\n                        }\n                    }) }\n            } }\n        });\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps {\n    Image = pipelineStack.TagParameterContainerImage\n});",
          "version": "1"
        },
        "java": {
          "source": "/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\npublic class EcsAppStackProps extends StackProps {\n    private ContainerImage image;\n    public ContainerImage getImage() {\n        return this.image;\n    }\n    public EcsAppStackProps image(ContainerImage image) {\n        this.image = image;\n        return this;\n    }\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\npublic class EcsAppStack extends Stack {\n    public EcsAppStack(Construct scope, String id, EcsAppStackProps props) {\n        super(scope, id, props);\n\n        TaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TaskDefinition\")\n                .compatibility(Compatibility.FARGATE)\n                .cpu(\"1024\")\n                .memoryMiB(\"2048\")\n                .build();\n        taskDefinition.addContainer(\"AppContainer\", ContainerDefinitionOptions.builder()\n                .image(props.getImage())\n                .build());\n        FargateService.Builder.create(this, \"EcsService\")\n                .taskDefinition(taskDefinition)\n                .cluster(Cluster.Builder.create(this, \"Cluster\")\n                        .vpc(Vpc.Builder.create(this, \"Vpc\")\n                                .maxAzs(1)\n                                .build())\n                        .build())\n                .build();\n    }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\npublic class PipelineStack extends Stack {\n    public final TagParameterContainerImage tagParameterContainerImage;\n\n    public PipelineStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public PipelineStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        /* ********** ECS part **************** */\n\n        // this is the ECR repository where the built Docker image will be pushed\n        Repository appEcrRepo = new Repository(this, \"EcsDeployRepository\");\n        // the build that creates the Docker image, and pushes it to the ECR repo\n        PipelineProject appCodeDockerBuild = PipelineProject.Builder.create(this, \"AppCodeDockerImageBuildAndPushProject\")\n                .environment(BuildEnvironment.builder()\n                        // we need to run Docker\n                        .privileged(true)\n                        .build())\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)\", \"docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .\")),\n                                \"post_build\", Map.of(\n                                        \"commands\", List.of(\"docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION\", \"export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION\"))),\n                        \"env\", Map.of(\n                                // save the imageTag environment variable as a CodePipeline Variable\n                                \"exported-variables\", List.of(\"imageTag\")))))\n                .environmentVariables(Map.of(\n                        \"REPOSITORY_URI\", BuildEnvironmentVariable.builder()\n                                .value(appEcrRepo.getRepositoryUri())\n                                .build()))\n                .build();\n        // needed for `docker push`\n        appEcrRepo.grantPullPush(appCodeDockerBuild);\n        // create the ContainerImage used for the ECS application Stack\n        this.tagParameterContainerImage = new TagParameterContainerImage(appEcrRepo);\n\n        PipelineProject cdkCodeBuild = PipelineProject.Builder.create(this, \"CdkCodeBuildProject\")\n                .buildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\",\n                        \"phases\", Map.of(\n                                \"install\", Map.of(\n                                        \"commands\", List.of(\"npm install\")),\n                                \"build\", Map.of(\n                                        \"commands\", List.of(\"npx cdk synth --verbose\"))),\n                        \"artifacts\", Map.of(\n                                // store the entire Cloud Assembly as the output artifact\n                                \"base-directory\", \"cdk.out\",\n                                \"files\", \"**/*\"))))\n                .build();\n\n        /* ********** Pipeline part **************** */\n\n        Artifact appCodeSourceOutput = new Artifact();\n        Artifact cdkCodeSourceOutput = new Artifact();\n        Artifact cdkCodeBuildOutput = new Artifact();\n        CodeBuildAction appCodeBuildAction = CodeBuildAction.Builder.create()\n                .actionName(\"AppCodeDockerImageBuildAndPush\")\n                .project(appCodeDockerBuild)\n                .input(appCodeSourceOutput)\n                .build();\n        Pipeline.Builder.create(this, \"CodePipelineDeployingEcsApplication\")\n                .artifactBucket(Bucket.Builder.create(this, \"ArtifactBucket\")\n                        .removalPolicy(RemovalPolicy.DESTROY)\n                        .build())\n                .stages(List.of(StageProps.builder()\n                        .stageName(\"Source\")\n                        .actions(List.of(\n                            // this is the Action that takes the source of your application code\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"AppCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"AppCodeSourceRepository\").repositoryName(\"AppCodeSourceRepository\").build())\n                                    .output(appCodeSourceOutput)\n                                    .build(),\n                            // this is the Action that takes the source of your CDK code\n                            // (which would probably include this Pipeline code as well)\n                            CodeCommitSourceAction.Builder.create()\n                                    .actionName(\"CdkCodeSource\")\n                                    .repository(Repository.Builder.create(this, \"CdkCodeSourceRepository\").repositoryName(\"CdkCodeSourceRepository\").build())\n                                    .output(cdkCodeSourceOutput)\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Build\")\n                        .actions(List.of(appCodeBuildAction,\n                            CodeBuildAction.Builder.create()\n                                    .actionName(\"CdkCodeBuildAndSynth\")\n                                    .project(cdkCodeBuild)\n                                    .input(cdkCodeSourceOutput)\n                                    .outputs(List.of(cdkCodeBuildOutput))\n                                    .build()))\n                        .build(), StageProps.builder()\n                        .stageName(\"Deploy\")\n                        .actions(List.of(\n                            CloudFormationCreateUpdateStackAction.Builder.create()\n                                    .actionName(\"CFN_Deploy\")\n                                    .stackName(\"SampleEcsStackDeployedFromCodePipeline\")\n                                    // this name has to be the same name as used below in the CDK code for the application Stack\n                                    .templatePath(cdkCodeBuildOutput.atPath(\"EcsStackDeployedInPipeline.template.json\"))\n                                    .adminPermissions(true)\n                                    .parameterOverrides(Map.of(\n                                            // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                                            // and pass it as the CloudFormation Parameter for the tag\n                                            this.tagParameterContainerImage.getTagParameterName(), appCodeBuildAction.variable(\"imageTag\")))\n                                    .build()))\n                        .build()))\n                .build();\n    }\n}\n\nApp app = new App();\n\n// the CodePipeline Stack needs to be created first\nPipelineStack pipelineStack = new PipelineStack(app, \"aws-cdk-pipeline-ecs-separate-sources\");\n// we supply the image to the ECS application Stack from the CodePipeline Stack\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, \"EcsStackDeployedInPipeline\", new EcsAppStackProps()\n        .image(pipelineStack.getTagParameterContainerImage())\n        );",
          "version": "1"
        },
        "$": {
          "source": "\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TagParameterContainerImage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codebuild.PipelineProjectProps",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction#variable",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.RepositoryBase#grantPullPush",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#FARGATE",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.TagParameterContainerImage",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "/// !cdk-integ *\n\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecr from '@aws-cdk/aws-ecr';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as codepipeline_actions from '../lib';\n\n/**\n * This example demonstrates how to create a CodePipeline that deploys an ECS Service\n * from a different source repository than the source repository of your CDK code.\n * If your application code and your CDK code are in the same repository,\n * use the CDK Pipelines module instead of this method.\n */\n\n/// !show\n\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 43,
        "57": 1,
        "62": 1,
        "75": 186,
        "89": 3,
        "102": 2,
        "104": 13,
        "106": 2,
        "119": 1,
        "138": 2,
        "143": 2,
        "153": 3,
        "154": 1,
        "156": 6,
        "158": 1,
        "159": 1,
        "162": 2,
        "169": 6,
        "192": 10,
        "193": 34,
        "194": 42,
        "196": 8,
        "197": 23,
        "209": 1,
        "216": 3,
        "223": 2,
        "225": 10,
        "226": 8,
        "242": 10,
        "243": 10,
        "245": 2,
        "246": 1,
        "279": 3,
        "281": 62,
        "282": 1
      },
      "fqnsFingerprint": "abf9e327d601cabff418ab6362281dbea60e2b20efc9a4cebe6cb5d15aa804d9"
    },
    "7512f9b8a303c34ad44e16122038d8994d69941d9b00c0478adbdeccc4f4de0e": {
      "translations": {
        "python": {
          "source": "# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# vpc is of type Vpc\n\nservice = ecs.FargateService(self, \"Service\", cluster=cluster, task_definition=task_definition)\n\nlb = elbv2.ApplicationLoadBalancer(self, \"LB\", vpc=vpc, internet_facing=True)\nlistener = lb.add_listener(\"Listener\", port=80)\nservice.register_load_balancer_targets(\n    container_name=\"web\",\n    container_port=80,\n    new_target_group_id=\"ECS\",\n    listener=ecs.ListenerConfig.application_listener(listener,\n        protocol=elbv2.ApplicationProtocol.HTTPS\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = new FargateService(this, \"Service\", new FargateServiceProps { Cluster = cluster, TaskDefinition = taskDefinition });\n\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\nApplicationListener listener = lb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nservice.RegisterLoadBalancerTargets(new EcsTarget {\n    ContainerName = \"web\",\n    ContainerPort = 80,\n    NewTargetGroupId = \"ECS\",\n    Listener = ListenerConfig.ApplicationListener(listener, new AddApplicationTargetsProps {\n        Protocol = ApplicationProtocol.HTTPS\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Cluster cluster;\nTaskDefinition taskDefinition;\nVpc vpc;\n\nFargateService service = FargateService.Builder.create(this, \"Service\").cluster(cluster).taskDefinition(taskDefinition).build();\n\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\").vpc(vpc).internetFacing(true).build();\nApplicationListener listener = lb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nservice.registerLoadBalancerTargets(EcsTarget.builder()\n        .containerName(\"web\")\n        .containerPort(80)\n        .newTargetGroupId(\"ECS\")\n        .listener(ListenerConfig.applicationListener(listener, AddApplicationTargetsProps.builder()\n                .protocol(ApplicationProtocol.HTTPS)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ecs.BaseService#registerLoadBalancerTargets",
        "@aws-cdk/aws-ecs.EcsTarget",
        "@aws-cdk/aws-ecs.FargateService",
        "@aws-cdk/aws-ecs.FargateServiceProps",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ListenerConfig",
        "@aws-cdk/aws-ecs.ListenerConfig#applicationListener",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol#HTTPS",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const cluster: ecs.Cluster;\ndeclare const taskDefinition: ecs.TaskDefinition;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst service = new ecs.FargateService(this, 'Service', { cluster, taskDefinition });\n\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'LB', { vpc, internetFacing: true });\nconst listener = lb.addListener('Listener', { port: 80 });\nservice.registerLoadBalancerTargets(\n  {\n    containerName: 'web',\n    containerPort: 80,\n    newTargetGroupId: 'ECS',\n    listener: ecs.ListenerConfig.applicationListener(listener, {\n      protocol: elbv2.ApplicationProtocol.HTTPS\n    }),\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 37,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 8,
        "196": 3,
        "197": 2,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 7,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "d360a67bc79582b437e2674d904fd889b65d199181006a674b887bcfa2895fb9"
    },
    "7861e0ebb2bb496e6597655448a35c1b418d2821e9a07c681ef7c45e08f244ee": {
      "translations": {
        "python": {
          "source": "vpc = ec2.Vpc.from_lookup(self, \"Vpc\",\n    is_default=True\n)\n\ncluster = ecs.Cluster(self, \"Ec2Cluster\", vpc=vpc)\ncluster.add_capacity(\"DefaultAutoScalingGroup\",\n    instance_type=ec2.InstanceType(\"t2.micro\"),\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC)\n)\n\ntask_definition = ecs.TaskDefinition(self, \"TD\",\n    compatibility=ecs.Compatibility.EC2\n)\n\ntask_definition.add_container(\"TheContainer\",\n    image=ecs.ContainerImage.from_registry(\"foo/bar\"),\n    memory_limit_mi_b=256\n)\n\nrun_task = tasks.EcsRunTask(self, \"Run\",\n    integration_pattern=sfn.IntegrationPattern.RUN_JOB,\n    cluster=cluster,\n    task_definition=task_definition,\n    launch_target=tasks.EcsEc2LaunchTarget(\n        placement_strategies=[\n            ecs.PlacementStrategy.spread_across_instances(),\n            ecs.PlacementStrategy.packed_by_cpu(),\n            ecs.PlacementStrategy.randomly()\n        ],\n        placement_constraints=[\n            ecs.PlacementConstraint.member_of(\"blieptuut\")\n        ]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IVpc vpc = Vpc.FromLookup(this, \"Vpc\", new VpcLookupOptions {\n    IsDefault = true\n});\n\nCluster cluster = new Cluster(this, \"Ec2Cluster\", new ClusterProps { Vpc = vpc });\ncluster.AddCapacity(\"DefaultAutoScalingGroup\", new AddCapacityOptions {\n    InstanceType = new InstanceType(\"t2.micro\"),\n    VpcSubnets = new SubnetSelection { SubnetType = SubnetType.PUBLIC }\n});\n\nTaskDefinition taskDefinition = new TaskDefinition(this, \"TD\", new TaskDefinitionProps {\n    Compatibility = Compatibility.EC2\n});\n\ntaskDefinition.AddContainer(\"TheContainer\", new ContainerDefinitionOptions {\n    Image = ContainerImage.FromRegistry(\"foo/bar\"),\n    MemoryLimitMiB = 256\n});\n\nEcsRunTask runTask = new EcsRunTask(this, \"Run\", new EcsRunTaskProps {\n    IntegrationPattern = IntegrationPattern.RUN_JOB,\n    Cluster = cluster,\n    TaskDefinition = taskDefinition,\n    LaunchTarget = new EcsEc2LaunchTarget(new EcsEc2LaunchTargetOptions {\n        PlacementStrategies = new [] { PlacementStrategy.SpreadAcrossInstances(), PlacementStrategy.PackedByCpu(), PlacementStrategy.Randomly() },\n        PlacementConstraints = new [] { PlacementConstraint.MemberOf(\"blieptuut\") }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IVpc vpc = Vpc.fromLookup(this, \"Vpc\", VpcLookupOptions.builder()\n        .isDefault(true)\n        .build());\n\nCluster cluster = Cluster.Builder.create(this, \"Ec2Cluster\").vpc(vpc).build();\ncluster.addCapacity(\"DefaultAutoScalingGroup\", AddCapacityOptions.builder()\n        .instanceType(new InstanceType(\"t2.micro\"))\n        .vpcSubnets(SubnetSelection.builder().subnetType(SubnetType.PUBLIC).build())\n        .build());\n\nTaskDefinition taskDefinition = TaskDefinition.Builder.create(this, \"TD\")\n        .compatibility(Compatibility.EC2)\n        .build();\n\ntaskDefinition.addContainer(\"TheContainer\", ContainerDefinitionOptions.builder()\n        .image(ContainerImage.fromRegistry(\"foo/bar\"))\n        .memoryLimitMiB(256)\n        .build());\n\nEcsRunTask runTask = EcsRunTask.Builder.create(this, \"Run\")\n        .integrationPattern(IntegrationPattern.RUN_JOB)\n        .cluster(cluster)\n        .taskDefinition(taskDefinition)\n        .launchTarget(EcsEc2LaunchTarget.Builder.create()\n                .placementStrategies(List.of(PlacementStrategy.spreadAcrossInstances(), PlacementStrategy.packedByCpu(), PlacementStrategy.randomly()))\n                .placementConstraints(List.of(PlacementConstraint.memberOf(\"blieptuut\")))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.TaskDefinitionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PUBLIC",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.Vpc#fromLookup",
        "@aws-cdk/aws-ec2.VpcLookupOptions",
        "@aws-cdk/aws-ecs.AddCapacityOptions",
        "@aws-cdk/aws-ecs.Cluster",
        "@aws-cdk/aws-ecs.Cluster#addCapacity",
        "@aws-cdk/aws-ecs.ClusterProps",
        "@aws-cdk/aws-ecs.Compatibility",
        "@aws-cdk/aws-ecs.Compatibility#EC2",
        "@aws-cdk/aws-ecs.ContainerDefinitionOptions",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.PlacementConstraint",
        "@aws-cdk/aws-ecs.PlacementConstraint#memberOf",
        "@aws-cdk/aws-ecs.PlacementStrategy",
        "@aws-cdk/aws-ecs.PlacementStrategy#packedByCpu",
        "@aws-cdk/aws-ecs.PlacementStrategy#randomly",
        "@aws-cdk/aws-ecs.PlacementStrategy#spreadAcrossInstances",
        "@aws-cdk/aws-ecs.TaskDefinition",
        "@aws-cdk/aws-ecs.TaskDefinition#addContainer",
        "@aws-cdk/aws-ecs.TaskDefinitionProps",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTarget",
        "@aws-cdk/aws-stepfunctions-tasks.EcsEc2LaunchTargetOptions",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTask",
        "@aws-cdk/aws-stepfunctions-tasks.EcsRunTaskProps",
        "@aws-cdk/aws-stepfunctions-tasks.IEcsLaunchTarget",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern",
        "@aws-cdk/aws-stepfunctions.IntegrationPattern#RUN_JOB"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Size, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as tasks from '@aws-cdk/aws-stepfunctions-tasks';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst vpc = ec2.Vpc.fromLookup(this, 'Vpc', {\n  isDefault: true,\n});\n\nconst cluster = new ecs.Cluster(this, 'Ec2Cluster', { vpc });\ncluster.addCapacity('DefaultAutoScalingGroup', {\n  instanceType: new ec2.InstanceType('t2.micro'),\n  vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },\n});\n\nconst taskDefinition = new ecs.TaskDefinition(this, 'TD', {\n  compatibility: ecs.Compatibility.EC2,\n});\n\ntaskDefinition.addContainer('TheContainer', {\n  image: ecs.ContainerImage.fromRegistry('foo/bar'),\n  memoryLimitMiB: 256,\n});\n\nconst runTask = new tasks.EcsRunTask(this, 'Run', {\n  integrationPattern: sfn.IntegrationPattern.RUN_JOB,\n  cluster,\n  taskDefinition,\n  launchTarget: new tasks.EcsEc2LaunchTarget({\n    placementStrategies: [\n      ecs.PlacementStrategy.spreadAcrossInstances(),\n      ecs.PlacementStrategy.packedByCpu(),\n      ecs.PlacementStrategy.randomly(),\n    ],\n    placementConstraints: [\n      ecs.PlacementConstraint.memberOf('blieptuut'),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 59,
        "104": 4,
        "106": 1,
        "192": 2,
        "193": 8,
        "194": 25,
        "196": 8,
        "197": 5,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 11,
        "282": 3
      },
      "fqnsFingerprint": "a4ad2dc77e9db1cd4194d386e1226b426ae5f00a2a0b983eed86bfb4ec70fd03"
    },
    "1a347d12ea4f4b2bee314bdc87d7eaed9307c6c094d8b7731827846e357d98f3": {
      "translations": {
        "python": {
          "source": "fargate_task_definition = ecs.FargateTaskDefinition(self, \"TaskDef\",\n    memory_limit_mi_b=512,\n    cpu=256\n)\nvolume = {\n    # Use an Elastic FileSystem\n    \"name\": \"mydatavolume\",\n    \"efs_volume_configuration\": {\n        \"file_system_id\": \"EFS\"\n    }\n}\n\ncontainer = fargate_task_definition.add_volume(volume)",
          "version": "1"
        },
        "csharp": {
          "source": "FargateTaskDefinition fargateTaskDefinition = new FargateTaskDefinition(this, \"TaskDef\", new FargateTaskDefinitionProps {\n    MemoryLimitMiB = 512,\n    Cpu = 256\n});\nIDictionary<string, object> volume = new Dictionary<string, object> {\n    // Use an Elastic FileSystem\n    { \"name\", \"mydatavolume\" },\n    { \"efsVolumeConfiguration\", new Dictionary<string, string> {\n        { \"fileSystemId\", \"EFS\" }\n    } }\n};\n\nvar container = fargateTaskDefinition.AddVolume(volume);",
          "version": "1"
        },
        "java": {
          "source": "FargateTaskDefinition fargateTaskDefinition = FargateTaskDefinition.Builder.create(this, \"TaskDef\")\n        .memoryLimitMiB(512)\n        .cpu(256)\n        .build();\nMap<String, Object> volume = Map.of(\n        // Use an Elastic FileSystem\n        \"name\", \"mydatavolume\",\n        \"efsVolumeConfiguration\", Map.of(\n                \"fileSystemId\", \"EFS\"));\n\nObject container = fargateTaskDefinition.addVolume(volume);",
          "version": "1"
        },
        "$": {
          "source": "const fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-ecs.Volume"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.FargateTaskDefinition",
        "@aws-cdk/aws-ecs.FargateTaskDefinitionProps",
        "@aws-cdk/aws-ecs.TaskDefinition#addVolume",
        "@aws-cdk/aws-ecs.Volume"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { SecretValue, Stack } from '@aws-cdk/core';\nimport autoscaling = require('@aws-cdk/aws-autoscaling');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ecs = require('@aws-cdk/aws-ecs');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport elb = require('@aws-cdk/aws-elasticloadbalancing');\nimport elbv2 = require('@aws-cdk/aws-elasticloadbalancingv2');\nimport events = require('@aws-cdk/aws-events');\nimport kms = require('@aws-cdk/aws-kms');\nimport logs = require('@aws-cdk/aws-logs');\nimport s3 = require('@aws-cdk/aws-s3');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport ssm = require('@aws-cdk/aws-ssm');\nimport targets = require('@aws-cdk/aws-events-targets');\nimport path = require('path');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fargateTaskDefinition = new ecs.FargateTaskDefinition(this, 'TaskDef', {\n  memoryLimitMiB: 512,\n  cpu: 256,\n});\nconst volume = {\n  // Use an Elastic FileSystem\n  name: \"mydatavolume\",\n  efsVolumeConfiguration: {\n    fileSystemId: \"EFS\",\n    // ... other options here ...\n  },\n};\n\nconst container = fargateTaskDefinition.addVolume(volume);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 13,
        "104": 1,
        "193": 3,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "6130724716175706d8b58d12cc4023d532336b33737338ba54c35fed41cc1e1b"
    }
  }
}
