{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "031c8cc0747082ea814ba4cded1943ac086650d4d937ed10614c1d59f588bc80": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_secretsmanager as secretsmanager",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.SecretsManager;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.secretsmanager.*;",
          "version": "1"
        },
        "$": {
          "source": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 15
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import * as secretsmanager from '@aws-cdk/aws-secretsmanager';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "9607685898efa0d7df335089e308ee774b1d1dab8c0d784883e71807f4dfc16f": {
      "translations": {
        "python": {
          "source": "# Default secret\nsecret = secretsmanager.Secret(self, \"Secret\")\nsecret.grant_read(role)\n\niam.User(self, \"User\",\n    password=secret.secret_value\n)\n\n# Templated secret\ntemplated_secret = secretsmanager.Secret(self, \"TemplatedSecret\",\n    generate_secret_string=secretsmanager.SecretStringGenerator(\n        secret_string_template=JSON.stringify({\"username\": \"user\"}),\n        generate_string_key=\"password\"\n    )\n)\n\niam.User(self, \"OtherUser\",\n    user_name=templated_secret.secret_value_from_json(\"username\").to_string(),\n    password=templated_secret.secret_value_from_json(\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\nsecret.GrantRead(role);\n\nnew User(this, \"User\", new UserProps {\n    Password = secret.SecretValue\n});\n\n// Templated secret\nSecret templatedSecret = new Secret(this, \"TemplatedSecret\", new SecretProps {\n    GenerateSecretString = new SecretStringGenerator {\n        SecretStringTemplate = JSON.Stringify(new Dictionary<string, string> { { \"username\", \"user\" } }),\n        GenerateStringKey = \"password\"\n    }\n});\n\nnew User(this, \"OtherUser\", new UserProps {\n    UserName = templatedSecret.SecretValueFromJson(\"username\").ToString(),\n    Password = templatedSecret.SecretValueFromJson(\"password\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\nsecret.grantRead(role);\n\nUser.Builder.create(this, \"User\")\n        .password(secret.getSecretValue())\n        .build();\n\n// Templated secret\nSecret templatedSecret = Secret.Builder.create(this, \"TemplatedSecret\")\n        .generateSecretString(SecretStringGenerator.builder()\n                .secretStringTemplate(JSON.stringify(Map.of(\"username\", \"user\")))\n                .generateStringKey(\"password\")\n                .build())\n        .build();\n\nUser.Builder.create(this, \"OtherUser\")\n        .userName(templatedSecret.secretValueFromJson(\"username\").toString())\n        .password(templatedSecret.secretValueFromJson(\"password\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Default secret\n    const secret = new secretsmanager.Secret(this, 'Secret');\n    secret.grantRead(role);\n\n    new iam.User(this, 'User', {\n      password: secret.secretValue,\n    });\n\n    // Templated secret\n    const templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({ username: 'user' }),\n        generateStringKey: 'password',\n      },\n    });\n\n    new iam.User(this, 'OtherUser', {\n      userName: templatedSecret.secretValueFromJson('username').toString(),\n      password: templatedSecret.secretValueFromJson('password'),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringGenerator",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as secretsmanager from '../lib';\n\nclass SecretsManagerStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const role = new iam.Role(this, 'TestRole', { assumedBy: new iam.AccountRootPrincipal() });\n\n    /// !show\n    // Default secret\n    const secret = new secretsmanager.Secret(this, 'Secret');\n    secret.grantRead(role);\n\n    new iam.User(this, 'User', {\n      password: secret.secretValue,\n    });\n\n    // Templated secret\n    const templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({ username: 'user' }),\n        generateStringKey: 'password',\n      },\n    });\n\n    new iam.User(this, 'OtherUser', {\n      userName: templatedSecret.secretValueFromJson('username').toString(),\n      password: templatedSecret.secretValueFromJson('password'),\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\nnew SecretsManagerStack(app, 'Integ-SecretsManager-Secret');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 29,
        "104": 4,
        "193": 5,
        "194": 10,
        "196": 5,
        "197": 4,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "445b6bf21781e0590f34208dd573eac39eaef35732da2ec912ee7d6b838db954"
    },
    "79d9de47b79259a740cf656792cb5b26532465ae37bacc782a31bf113f94b570": {
      "translations": {
        "python": {
          "source": "# encryption_key is of type Key\n\nsecret = secretsmanager.Secret.from_secret_attributes(self, \"ImportedSecret\",\n    secret_arn=\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    # If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.FromSecretAttributes(this, \"ImportedSecret\", new SecretAttributes {\n    SecretArn = \"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.fromSecretAttributes(this, \"ImportedSecret\", SecretAttributes.builder()\n        .secretArn(\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\")\n        // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const encryptionKey: kms.Key;\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 56
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.SecretAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const encryptionKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "676a2ff7a0ccc5054b7ead623a163621b78c2a4a2e7cd6c2e9077fc1f09a562c"
    },
    "747604de2592cca82d9185dce3929793f9960ccf700222d70c5d3a1a3dc16d4e": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"SomeRole\", assumed_by=iam.AccountRootPrincipal())\nsecret = secretsmanager.Secret(self, \"Secret\")\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role = new Role(this, \"SomeRole\", new RoleProps { AssumedBy = new AccountRootPrincipal() });\nSecret secret = new Secret(this, \"Secret\");\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role = Role.Builder.create(this, \"SomeRole\").assumedBy(new AccountRootPrincipal()).build();\nSecret secret = new Secret(this, \"Secret\");\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'SomeRole', { assumedBy: new iam.AccountRootPrincipal() });\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountRootPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-secretsmanager.Secret"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'SomeRole', { assumedBy: new iam.AccountRootPrincipal() });\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "104": 2,
        "193": 1,
        "194": 5,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "ef9dac1077f7f1ffad5068dc9c36691a007a10cf5fea2b10412f0ccba6a63a7e"
    },
    "cb5dcbf13a6be56d6f873f43450940ab360c4959b87b4d2a24a13c4748b4c144": {
      "translations": {
        "python": {
          "source": "# role is of type Role\n\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "declare const role: iam.Role;\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 85
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "95ac0eb07c62e21ebdf036b78a081d1421db66d02483186e4257c209de850f1c"
    },
    "fd775c14a4b29ab69fb0f02ad201efe811b9ae71f432a56ba05ca1e9313bbdd4": {
      "translations": {
        "python": {
          "source": "other_account = iam.AccountPrincipal(\"1234\")\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(other_account)",
          "version": "1"
        },
        "csharp": {
          "source": "AccountPrincipal otherAccount = new AccountPrincipal(\"1234\");\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(otherAccount);",
          "version": "1"
        },
        "java": {
          "source": "AccountPrincipal otherAccount = new AccountPrincipal(\"1234\");\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(otherAccount);",
          "version": "1"
        },
        "$": {
          "source": "const otherAccount = new iam.AccountPrincipal('1234');\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(otherAccount);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.AccountPrincipal",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst otherAccount = new iam.AccountPrincipal('1234');\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(otherAccount);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "60e3e885a36cd3e5e4129281dcef6c381f09e5100183e8f7e82df6cd91b447b9"
    },
    "7a34e501b7bced623321fa6e0dbbe08fe3c5692d0ed77e689822d5f19caa966d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# fn is of type Function\n\nsecret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    rotation_lambda=fn,\n    automatically_after=Duration.days(15)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    RotationLambda = fn,\n    AutomaticallyAfter = Duration.Days(15)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .rotationLambda(fn)\n        .automaticallyAfter(Duration.days(15))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 112
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3aec41052e5ba91ac1c5feab2ae7e52499e9e738baa691a88093ff38d660e513"
    },
    "57422764874a62678c53066aa3881a804cfdf5cbcf968601e957ead74560dd23": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    hosted_rotation=secretsmanager.HostedRotation.mysql_single_user()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    HostedRotation = HostedRotation.MysqlSingleUser()\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .hostedRotation(HostedRotation.mysqlSingleUser())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 132
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "9b34d61e119a1c0f47f166277891c95f33d8828b6deb37c0f65fc6d6f7af3f14"
    },
    "f4e2969e29224df41fa635b212287bb414eed502de1817b68e6623888edc9002": {
      "translations": {
        "python": {
          "source": "# my_vpc is of type Vpc\n# db_connections is of type Connections\n# secret is of type Secret\n\n\nmy_hosted_rotation = secretsmanager.HostedRotation.mysql_single_user(vpc=my_vpc)\nsecret.add_rotation_schedule(\"RotationSchedule\", hosted_rotation=my_hosted_rotation)\ndb_connections.allow_default_port_from(my_hosted_rotation)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.MysqlSingleUser(new SingleUserHostedRotationOptions { Vpc = myVpc });\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions { HostedRotation = myHostedRotation });\ndbConnections.AllowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "java": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.mysqlSingleUser(SingleUserHostedRotationOptions.builder().vpc(myVpc).build());\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder().hostedRotation(myHostedRotation).build());\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "$": {
          "source": "declare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 145
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7be0b1327892689c1d0d50f3bbb13d19c25efbae5ffd187b1dc9251c89636550"
    },
    "0a7833d9a8a76660eef90ede3548776e91b5a4a12f69fe2b26e4eea664b82333": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 161
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ef790255eeac35502b1e46b1c7d994cf2d30e56e731ce14a2b6b3c694316318e"
    },
    "adea5ad83281fc54ed3c354bd3fe0bbb47fcce0b90010db8998de5082318d193": {
      "translations": {
        "python": {
          "source": "# my_user_secret is of type Secret\n# my_master_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n    secret=my_user_secret,  # The secret that will be rotated\n    master_secret=my_master_secret,  # The secret used for the rotation\n    target=my_database,\n    vpc=my_vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret myUserSecret;\nSecret myMasterSecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n    Secret = myUserSecret,  // The secret that will be rotated\n    MasterSecret = myMasterSecret,  // The secret used for the rotation\n    Target = myDatabase,\n    Vpc = myVpc\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret myUserSecret;\nSecret myMasterSecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_MULTI_USER)\n        .secret(myUserSecret) // The secret that will be rotated\n        .masterSecret(myMasterSecret) // The secret used for the rotation\n        .target(myDatabase)\n        .vpc(myVpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myUserSecret: secretsmanager.Secret;\ndeclare const myMasterSecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n  secret: myUserSecret, // The secret that will be rotated\n  masterSecret: myMasterSecret, // The secret used for the rotation\n  target: myDatabase,\n  vpc: myVpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 193
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_MULTI_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myUserSecret: secretsmanager.Secret;\ndeclare const myMasterSecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,\n  secret: myUserSecret, // The secret that will be rotated\n  masterSecret: myMasterSecret, // The secret used for the rotation\n  target: myDatabase,\n  vpc: myVpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 26,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "7ab1ef2fb9bd885af343be7dfd20f58d24856925eb0f60426bfe877ed6ecdddb"
    },
    "251b6cf95e25a4518793f2baf34dc8a755c103a33c3a6c20454d9093769cd90e": {
      "translations": {
        "python": {
          "source": "secret_complete_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\"\nsecret_partial_arn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\" # No Secrets Manager suffix\nencryption_key = kms.Key.from_key_arn(self, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\")\nmy_secret_from_complete_arn = secretsmanager.Secret.from_secret_complete_arn(self, \"SecretFromCompleteArn\", secret_complete_arn)\nmy_secret_from_partial_arn = secretsmanager.Secret.from_secret_partial_arn(self, \"SecretFromPartialArn\", secret_partial_arn)\nmy_secret_from_name = secretsmanager.Secret.from_secret_name_v2(self, \"SecretFromName\", \"MySecret\")\nmy_secret_from_attrs = secretsmanager.Secret.from_secret_attributes(self, \"SecretFromAttributes\",\n    secret_complete_arn=secret_complete_arn,\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "string secretCompleteArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\";\nstring secretPartialArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\"; // No Secrets Manager suffix\nIKey encryptionKey = Key.FromKeyArn(this, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\");\nISecret mySecretFromCompleteArn = Secret.FromSecretCompleteArn(this, \"SecretFromCompleteArn\", secretCompleteArn);\nISecret mySecretFromPartialArn = Secret.FromSecretPartialArn(this, \"SecretFromPartialArn\", secretPartialArn);\nISecret mySecretFromName = Secret.FromSecretNameV2(this, \"SecretFromName\", \"MySecret\");\nISecret mySecretFromAttrs = Secret.FromSecretAttributes(this, \"SecretFromAttributes\", new SecretAttributes {\n    SecretCompleteArn = secretCompleteArn,\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "String secretCompleteArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9\";\nString secretPartialArn = \"arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret\"; // No Secrets Manager suffix\nIKey encryptionKey = Key.fromKeyArn(this, \"MyEncKey\", \"arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030\");\nISecret mySecretFromCompleteArn = Secret.fromSecretCompleteArn(this, \"SecretFromCompleteArn\", secretCompleteArn);\nISecret mySecretFromPartialArn = Secret.fromSecretPartialArn(this, \"SecretFromPartialArn\", secretPartialArn);\nISecret mySecretFromName = Secret.fromSecretNameV2(this, \"SecretFromName\", \"MySecret\");\nISecret mySecretFromAttrs = Secret.fromSecretAttributes(this, \"SecretFromAttributes\", SecretAttributes.builder()\n        .secretCompleteArn(secretCompleteArn)\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secretCompleteArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9';\nconst secretPartialArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret'; // No Secrets Manager suffix\nconst encryptionKey = kms.Key.fromKeyArn(this, 'MyEncKey', 'arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030');\nconst mySecretFromCompleteArn = secretsmanager.Secret.fromSecretCompleteArn(this, 'SecretFromCompleteArn', secretCompleteArn);\nconst mySecretFromPartialArn = secretsmanager.Secret.fromSecretPartialArn(this, 'SecretFromPartialArn', secretPartialArn);\nconst mySecretFromName = secretsmanager.Secret.fromSecretNameV2(this, 'SecretFromName', 'MySecret')\nconst mySecretFromAttrs = secretsmanager.Secret.fromSecretAttributes(this, 'SecretFromAttributes', {\n  secretCompleteArn,\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 218
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretNameV2",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretPartialArn",
        "@aws-cdk/aws-secretsmanager.SecretAttributes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secretCompleteArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret-f3gDy9';\nconst secretPartialArn = 'arn:aws:secretsmanager:eu-west-1:111111111111:secret:MySecret'; // No Secrets Manager suffix\nconst encryptionKey = kms.Key.fromKeyArn(this, 'MyEncKey', 'arn:aws:kms:eu-west-1:111111111111:key/21c4b39b-fde2-4273-9ac0-d9bb5c0d0030');\nconst mySecretFromCompleteArn = secretsmanager.Secret.fromSecretCompleteArn(this, 'SecretFromCompleteArn', secretCompleteArn);\nconst mySecretFromPartialArn = secretsmanager.Secret.fromSecretPartialArn(this, 'SecretFromPartialArn', secretPartialArn);\nconst mySecretFromName = secretsmanager.Secret.fromSecretNameV2(this, 'SecretFromName', 'MySecret')\nconst mySecretFromAttrs = secretsmanager.Secret.fromSecretAttributes(this, 'SecretFromAttributes', {\n  secretCompleteArn,\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 5,
        "193": 1,
        "194": 10,
        "196": 5,
        "225": 7,
        "242": 7,
        "243": 7,
        "282": 2
      },
      "fqnsFingerprint": "d015580f4d1426e6da2994f180c098ae7ae8aa89244d0cdf7474f65d7a7d0ae4"
    },
    "8e374f9a2bd9eaa11c077f8ce7bf2f676648dcb5ec6955c9101e087ad1e1a2f0": {
      "translations": {
        "python": {
          "source": "# my_key is of type Key\n\nsecretsmanager.Secret(self, \"Secret\",\n    replica_regions=[secretsmanager.ReplicaRegion(\n        region=\"eu-west-1\"\n    ), secretsmanager.ReplicaRegion(\n        region=\"eu-central-1\",\n        encryption_key=my_key\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key myKey;\n\nnew Secret(this, \"Secret\", new SecretProps {\n    ReplicaRegions = new [] { new ReplicaRegion {\n        Region = \"eu-west-1\"\n    }, new ReplicaRegion {\n        Region = \"eu-central-1\",\n        EncryptionKey = myKey\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "Key myKey;\n\nSecret.Builder.create(this, \"Secret\")\n        .replicaRegions(List.of(ReplicaRegion.builder()\n                .region(\"eu-west-1\")\n                .build(), ReplicaRegion.builder()\n                .region(\"eu-central-1\")\n                .encryptionKey(myKey)\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myKey: kms.Key;\nnew secretsmanager.Secret(this, 'Secret', {\n  replicaRegions: [\n    {\n      region: 'eu-west-1',\n    },\n    {\n      region: 'eu-central-1',\n      encryptionKey: myKey,\n    }\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew secretsmanager.Secret(this, 'Secret', {\n  replicaRegions: [\n    {\n      region: 'eu-west-1',\n    },\n    {\n      region: 'eu-central-1',\n      encryptionKey: myKey,\n    }\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "abfdd9131a6da4769bfbb9a1274d38a76a21b18b42ce5ef05cc08438f1864cb6"
    },
    "58c26f8f6caf728b76fcb55a064b2ae4849560e14bb89135d5155dd011967a37": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\nsecret.add_replica_region(\"eu-west-1\")",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\nsecret.AddReplicaRegion(\"eu-west-1\");",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\nsecret.addReplicaRegion(\"eu-west-1\");",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\nsecret.addReplicaRegion('eu-west-1');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-secretsmanager"
        },
        "field": {
          "field": "markdown",
          "line": 252
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#addReplicaRegion"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\nsecret.addReplicaRegion('eu-west-1');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "9588fee79b0fcc96ffc245cfc2af10824405ded96ca55c8cc4632b93c2a320d9"
    },
    "bb9bfd00e52192a95818283ea1052e6bec8e16f64e48e8fd585b35b04a30bfe8": {
      "translations": {
        "python": {
          "source": "secret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    hosted_rotation=secretsmanager.HostedRotation.mysql_single_user()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    HostedRotation = HostedRotation.MysqlSingleUser()\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .hostedRotation(HostedRotation.mysqlSingleUser())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.HostedRotation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  hostedRotation: secretsmanager.HostedRotation.mysqlSingleUser(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "9b34d61e119a1c0f47f166277891c95f33d8828b6deb37c0f65fc6d6f7af3f14"
    },
    "b77ae26667ec711f3cbe72653b0ddbef77bc2948af19dec7a0f3e821a572422d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n# fn is of type Function\n\nsecret = secretsmanager.Secret(self, \"Secret\")\n\nsecret.add_rotation_schedule(\"RotationSchedule\",\n    rotation_lambda=fn,\n    automatically_after=Duration.days(15)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions {\n    RotationLambda = fn,\n    AutomaticallyAfter = Duration.Days(15)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\nFunction fn;\n\nSecret secret = new Secret(this, \"Secret\");\n\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder()\n        .rotationLambda(fn)\n        .automaticallyAfter(Duration.days(15))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.RotationScheduleOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n\ndeclare const fn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = new secretsmanager.Secret(this, 'Secret');\n\nsecret.addRotationSchedule('RotationSchedule', {\n  rotationLambda: fn,\n  automaticallyAfter: Duration.days(15),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 3,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "3aec41052e5ba91ac1c5feab2ae7e52499e9e738baa691a88093ff38d660e513"
    },
    "446870a9e2a6d89a632be54b89ff581644e1fd16b0e8fadbdb758e5ac142925f": {
      "translations": {
        "python": {
          "source": "# role is of type Role\n\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "declare const role: iam.Role;\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.Secret"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "95ac0eb07c62e21ebdf036b78a081d1421db66d02483186e4257c209de850f1c"
    },
    "4633381698d20d963c3a43b704e4311e0eec2b2d8e71af6110b03450c5f4cbeb": {
      "translations": {
        "python": {
          "source": "# encryption_key is of type Key\n\nsecret = secretsmanager.Secret.from_secret_attributes(self, \"ImportedSecret\",\n    secret_arn=\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    # If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.FromSecretAttributes(this, \"ImportedSecret\", new SecretAttributes {\n    SecretArn = \"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\",\n    // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "Key encryptionKey;\n\nISecret secret = Secret.fromSecretAttributes(this, \"ImportedSecret\", SecretAttributes.builder()\n        .secretArn(\"arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>\")\n        // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n        .encryptionKey(encryptionKey)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const encryptionKey: kms.Key;\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretAttributes",
        "@aws-cdk/aws-secretsmanager.SecretAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const encryptionKey: kms.Key;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst secret = secretsmanager.Secret.fromSecretAttributes(this, 'ImportedSecret', {\n  secretArn: 'arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>',\n  // If the secret is encrypted using a KMS-hosted CMK, either import or reference that key:\n  encryptionKey,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "676a2ff7a0ccc5054b7ead623a163621b78c2a4a2e7cd6c2e9077fc1f09a562c"
    },
    "247ba55789582eeaad395496770d9bd9f2b9df98bf27a119733709086aa9474d": {
      "translations": {
        "python": {
          "source": "# role is of type Role\n\nkey = kms.Key(self, \"KMS\")\nsecret = secretsmanager.Secret(self, \"Secret\", encryption_key=key)\nsecret.grant_read(role)\nsecret.grant_write(role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = new Secret(this, \"Secret\", new SecretProps { EncryptionKey = key });\nsecret.GrantRead(role);\nsecret.GrantWrite(role);",
          "version": "1"
        },
        "java": {
          "source": "Role role;\n\nKey key = new Key(this, \"KMS\");\nSecret secret = Secret.Builder.create(this, \"Secret\").encryptionKey(key).build();\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "1"
        },
        "$": {
          "source": "declare const role: iam.Role;\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst key = new kms.Key(this, 'KMS');\nconst secret = new secretsmanager.Secret(this, 'Secret', { encryptionKey: key });\nsecret.grantRead(role);\nsecret.grantWrite(role);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 17,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "95ac0eb07c62e21ebdf036b78a081d1421db66d02483186e4257c209de850f1c"
    },
    "7e816a0304d745aa5feff118f9a3fe125c5fb2bca87b96c69720b57e22e6a33c": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ef790255eeac35502b1e46b1c7d994cf2d30e56e731ce14a2b6b3c694316318e"
    },
    "bb6162f4a3fc21dacbe557ed00133efb9aeca2ed3cc5703defd85068bd9deee8": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotationApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ef790255eeac35502b1e46b1c7d994cf2d30e56e731ce14a2b6b3c694316318e"
    },
    "401d2b24e6eaa3a93562a4da280ba076b46607a68a47371f22e9ad00625b2d64": {
      "translations": {
        "python": {
          "source": "# my_secret is of type Secret\n# my_database is of type IConnectable\n# my_vpc is of type Vpc\n\n\nsecretsmanager.SecretRotation(self, \"SecretRotation\",\n    application=secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  # MySQL single user scheme\n    secret=my_secret,\n    target=my_database,  # a Connectable\n    vpc=my_vpc,  # The VPC where the secret rotation application will be deployed\n    exclude_characters=\" %+:;{}\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nnew SecretRotation(this, \"SecretRotation\", new SecretRotationProps {\n    Application = SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,  // MySQL single user scheme\n    Secret = mySecret,\n    Target = myDatabase,  // a Connectable\n    Vpc = myVpc,  // The VPC where the secret rotation application will be deployed\n    ExcludeCharacters = \" %+:;{}\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Secret mySecret;\nIConnectable myDatabase;\nVpc myVpc;\n\n\nSecretRotation.Builder.create(this, \"SecretRotation\")\n        .application(SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER) // MySQL single user scheme\n        .secret(mySecret)\n        .target(myDatabase) // a Connectable\n        .vpc(myVpc) // The VPC where the secret rotation application will be deployed\n        .excludeCharacters(\" %+:;{}\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretRotationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.SecretRotation",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication",
        "@aws-cdk/aws-secretsmanager.SecretRotationApplication#MYSQL_ROTATION_SINGLE_USER",
        "@aws-cdk/aws-secretsmanager.SecretRotationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const mySecret: secretsmanager.Secret;\ndeclare const myDatabase: ec2.IConnectable;\ndeclare const myVpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew secretsmanager.SecretRotation(this, 'SecretRotation', {\n  application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER, // MySQL single user scheme\n  secret: mySecret,\n  target: myDatabase, // a Connectable\n  vpc: myVpc, // The VPC where the secret rotation application will be deployed\n  excludeCharacters: ' %+:;{}', // characters to never use when generating new passwords;\n                                // by default, no characters are excluded,\n                                // which might cause problems with some services, like DMS\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 22,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "ef790255eeac35502b1e46b1c7d994cf2d30e56e731ce14a2b6b3c694316318e"
    },
    "84b42aba60ca15be96a237909cb2b3a4b7ed0ccc38dd6d81885e0542bfe4dbbf": {
      "translations": {
        "python": {
          "source": "# Default secret\nsecret = secretsmanager.Secret(self, \"Secret\")\nsecret.grant_read(role)\n\niam.User(self, \"User\",\n    password=secret.secret_value\n)\n\n# Templated secret\ntemplated_secret = secretsmanager.Secret(self, \"TemplatedSecret\",\n    generate_secret_string=secretsmanager.SecretStringGenerator(\n        secret_string_template=JSON.stringify({\"username\": \"user\"}),\n        generate_string_key=\"password\"\n    )\n)\n\niam.User(self, \"OtherUser\",\n    user_name=templated_secret.secret_value_from_json(\"username\").to_string(),\n    password=templated_secret.secret_value_from_json(\"password\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\nsecret.GrantRead(role);\n\nnew User(this, \"User\", new UserProps {\n    Password = secret.SecretValue\n});\n\n// Templated secret\nSecret templatedSecret = new Secret(this, \"TemplatedSecret\", new SecretProps {\n    GenerateSecretString = new SecretStringGenerator {\n        SecretStringTemplate = JSON.Stringify(new Dictionary<string, string> { { \"username\", \"user\" } }),\n        GenerateStringKey = \"password\"\n    }\n});\n\nnew User(this, \"OtherUser\", new UserProps {\n    UserName = templatedSecret.SecretValueFromJson(\"username\").ToString(),\n    Password = templatedSecret.SecretValueFromJson(\"password\")\n});",
          "version": "1"
        },
        "java": {
          "source": "// Default secret\nSecret secret = new Secret(this, \"Secret\");\nsecret.grantRead(role);\n\nUser.Builder.create(this, \"User\")\n        .password(secret.getSecretValue())\n        .build();\n\n// Templated secret\nSecret templatedSecret = Secret.Builder.create(this, \"TemplatedSecret\")\n        .generateSecretString(SecretStringGenerator.builder()\n                .secretStringTemplate(JSON.stringify(Map.of(\"username\", \"user\")))\n                .generateStringKey(\"password\")\n                .build())\n        .build();\n\nUser.Builder.create(this, \"OtherUser\")\n        .userName(templatedSecret.secretValueFromJson(\"username\").toString())\n        .password(templatedSecret.secretValueFromJson(\"password\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "    // Default secret\n    const secret = new secretsmanager.Secret(this, 'Secret');\n    secret.grantRead(role);\n\n    new iam.User(this, 'User', {\n      password: secret.secretValue,\n    });\n\n    // Templated secret\n    const templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({ username: 'user' }),\n        generateStringKey: 'password',\n      },\n    });\n\n    new iam.User(this, 'OtherUser', {\n      userName: templatedSecret.secretValueFromJson('username').toString(),\n      password: templatedSecret.secretValueFromJson('password'),\n    });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SecretStringGenerator"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-iam.UserProps",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.SecretProps",
        "@aws-cdk/aws-secretsmanager.SecretStringGenerator",
        "@aws-cdk/core.Intrinsic#toString",
        "@aws-cdk/core.SecretValue"
      ],
      "fullSource": "import * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as secretsmanager from '../lib';\n\nclass SecretsManagerStack extends cdk.Stack {\n  constructor(scope: cdk.App, id: string) {\n    super(scope, id);\n\n    const role = new iam.Role(this, 'TestRole', { assumedBy: new iam.AccountRootPrincipal() });\n\n    /// !show\n    // Default secret\n    const secret = new secretsmanager.Secret(this, 'Secret');\n    secret.grantRead(role);\n\n    new iam.User(this, 'User', {\n      password: secret.secretValue,\n    });\n\n    // Templated secret\n    const templatedSecret = new secretsmanager.Secret(this, 'TemplatedSecret', {\n      generateSecretString: {\n        secretStringTemplate: JSON.stringify({ username: 'user' }),\n        generateStringKey: 'password',\n      },\n    });\n\n    new iam.User(this, 'OtherUser', {\n      userName: templatedSecret.secretValueFromJson('username').toString(),\n      password: templatedSecret.secretValueFromJson('password'),\n    });\n    /// !hide\n  }\n}\n\nconst app = new cdk.App();\nnew SecretsManagerStack(app, 'Integ-SecretsManager-Secret');\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 29,
        "104": 4,
        "193": 5,
        "194": 10,
        "196": 5,
        "197": 4,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "281": 7
      },
      "fqnsFingerprint": "445b6bf21781e0590f34208dd573eac39eaef35732da2ec912ee7d6b838db954"
    },
    "e6abeb34d5571482b8325b38210bb158c9c817cd8bd42b9a986ca36f4d1aac1a": {
      "translations": {
        "python": {
          "source": "# my_vpc is of type Vpc\n# db_connections is of type Connections\n# secret is of type Secret\n\n\nmy_hosted_rotation = secretsmanager.HostedRotation.mysql_single_user(vpc=my_vpc)\nsecret.add_rotation_schedule(\"RotationSchedule\", hosted_rotation=my_hosted_rotation)\ndb_connections.allow_default_port_from(my_hosted_rotation)",
          "version": "1"
        },
        "csharp": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.MysqlSingleUser(new SingleUserHostedRotationOptions { Vpc = myVpc });\nsecret.AddRotationSchedule(\"RotationSchedule\", new RotationScheduleOptions { HostedRotation = myHostedRotation });\ndbConnections.AllowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "java": {
          "source": "Vpc myVpc;\nConnections dbConnections;\nSecret secret;\n\n\nHostedRotation myHostedRotation = HostedRotation.mysqlSingleUser(SingleUserHostedRotationOptions.builder().vpc(myVpc).build());\nsecret.addRotationSchedule(\"RotationSchedule\", RotationScheduleOptions.builder().hostedRotation(myHostedRotation).build());\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "1"
        },
        "$": {
          "source": "declare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-secretsmanager.HostedRotation",
        "@aws-cdk/aws-secretsmanager.HostedRotation#mysqlSingleUser",
        "@aws-cdk/aws-secretsmanager.RotationScheduleOptions",
        "@aws-cdk/aws-secretsmanager.SingleUserHostedRotationOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myVpc: ec2.Vpc;\ndeclare const dbConnections: ec2.Connections;\ndeclare const secret: secretsmanager.Secret;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as secretsmanager from '@aws-cdk/aws-secretsmanager';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst myHostedRotation = secretsmanager.HostedRotation.mysqlSingleUser({ vpc: myVpc });\nsecret.addRotationSchedule('RotationSchedule', { hostedRotation: myHostedRotation });\ndbConnections.allowDefaultPortFrom(myHostedRotation);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 22,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 4,
        "196": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "7be0b1327892689c1d0d50f3bbb13d19c25efbae5ffd187b1dc9251c89636550"
    }
  }
}
