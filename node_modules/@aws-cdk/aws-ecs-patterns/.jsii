{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-applicationautoscaling": "1.137.0",
    "@aws-cdk/aws-autoscaling": "1.137.0",
    "@aws-cdk/aws-certificatemanager": "1.137.0",
    "@aws-cdk/aws-ec2": "1.137.0",
    "@aws-cdk/aws-ecs": "1.137.0",
    "@aws-cdk/aws-elasticloadbalancingv2": "1.137.0",
    "@aws-cdk/aws-events": "1.137.0",
    "@aws-cdk/aws-events-targets": "1.137.0",
    "@aws-cdk/aws-iam": "1.137.0",
    "@aws-cdk/aws-route53": "1.137.0",
    "@aws-cdk/aws-route53-targets": "1.137.0",
    "@aws-cdk/aws-servicediscovery": "1.137.0",
    "@aws-cdk/aws-sqs": "1.137.0",
    "@aws-cdk/core": "1.137.0",
    "@aws-cdk/cx-api": "1.137.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-apigateway": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.APIGateway",
          "packageId": "Amazon.CDK.AWS.APIGateway"
        },
        "java": {
          "maven": {
            "artifactId": "apigateway",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.apigateway"
        },
        "js": {
          "npm": "@aws-cdk/aws-apigateway"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-apigateway",
          "module": "aws_cdk.aws_apigateway"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling",
          "packageId": "Amazon.CDK.AWS.AutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling",
          "module": "aws_cdk.aws_autoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-hooktargets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets",
          "packageId": "Amazon.CDK.AWS.AutoScaling.HookTargets"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-hooktargets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-hooktargets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-hooktargets",
          "module": "aws_cdk.aws_autoscaling_hooktargets"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudfront": {
      "submodules": {
        "@aws-cdk/aws-cloudfront.experimental": {}
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFront",
          "packageId": "Amazon.CDK.AWS.CloudFront"
        },
        "java": {
          "maven": {
            "artifactId": "cloudfront",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudfront"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudfront"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudfront",
          "module": "aws_cdk.aws_cloudfront"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codebuild": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeBuild",
          "packageId": "Amazon.CDK.AWS.CodeBuild"
        },
        "java": {
          "maven": {
            "artifactId": "codebuild",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codebuild"
        },
        "js": {
          "npm": "@aws-cdk/aws-codebuild"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codebuild",
          "module": "aws_cdk.aws_codebuild"
        }
      }
    },
    "@aws-cdk/aws-codecommit": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeCommit",
          "packageId": "Amazon.CDK.AWS.CodeCommit"
        },
        "java": {
          "maven": {
            "artifactId": "codecommit",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codecommit"
        },
        "js": {
          "npm": "@aws-cdk/aws-codecommit"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codecommit",
          "module": "aws_cdk.aws_codecommit"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codepipeline": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodePipeline",
          "packageId": "Amazon.CDK.AWS.CodePipeline"
        },
        "java": {
          "maven": {
            "artifactId": "codepipeline",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codepipeline"
        },
        "js": {
          "npm": "@aws-cdk/aws-codepipeline"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codepipeline",
          "module": "aws_cdk.aws_codepipeline"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-ecs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECS",
          "packageId": "Amazon.CDK.AWS.ECS"
        },
        "java": {
          "maven": {
            "artifactId": "ecs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecs"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecs",
          "module": "aws_cdk.aws_ecs"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancing": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancing"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancing",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancing"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancing"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancing",
          "module": "aws_cdk.aws_elasticloadbalancing"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-events-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events.Targets",
          "packageId": "Amazon.CDK.AWS.Events.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "events-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-events-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events-targets",
          "module": "aws_cdk.aws_events_targets"
        }
      }
    },
    "@aws-cdk/aws-globalaccelerator": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.GlobalAccelerator",
          "packageId": "Amazon.CDK.AWS.GlobalAccelerator"
        },
        "java": {
          "maven": {
            "artifactId": "globalaccelerator",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.globalaccelerator"
        },
        "js": {
          "npm": "@aws-cdk/aws-globalaccelerator"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-globalaccelerator",
          "module": "aws_cdk.aws_globalaccelerator"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kinesis": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Kinesis",
          "packageId": "Amazon.CDK.AWS.Kinesis"
        },
        "java": {
          "maven": {
            "artifactId": "kinesis",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesis"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesis"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesis",
          "module": "aws_cdk.aws_kinesis"
        }
      }
    },
    "@aws-cdk/aws-kinesisfirehose": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KinesisFirehose",
          "packageId": "Amazon.CDK.AWS.KinesisFirehose"
        },
        "java": {
          "maven": {
            "artifactId": "kinesisfirehose",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kinesisfirehose"
        },
        "js": {
          "npm": "@aws-cdk/aws-kinesisfirehose"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kinesisfirehose",
          "module": "aws_cdk.aws_kinesisfirehose"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-route53-targets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53.Targets",
          "packageId": "Amazon.CDK.AWS.Route53.Targets"
        },
        "java": {
          "maven": {
            "artifactId": "route53-targets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53.targets"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53-targets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53-targets",
          "module": "aws_cdk.aws_route53_targets"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-sam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SAM",
          "packageId": "Amazon.CDK.AWS.SAM"
        },
        "java": {
          "maven": {
            "artifactId": "sam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sam"
        },
        "js": {
          "npm": "@aws-cdk/aws-sam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sam",
          "module": "aws_cdk.aws_sam"
        }
      }
    },
    "@aws-cdk/aws-secretsmanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SecretsManager",
          "packageId": "Amazon.CDK.AWS.SecretsManager"
        },
        "java": {
          "maven": {
            "artifactId": "secretsmanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.secretsmanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-secretsmanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-secretsmanager",
          "module": "aws_cdk.aws_secretsmanager"
        }
      }
    },
    "@aws-cdk/aws-servicediscovery": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ServiceDiscovery",
          "packageId": "Amazon.CDK.AWS.ServiceDiscovery"
        },
        "java": {
          "maven": {
            "artifactId": "servicediscovery",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.servicediscovery"
        },
        "js": {
          "npm": "@aws-cdk/aws-servicediscovery"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-servicediscovery",
          "module": "aws_cdk.aws_servicediscovery"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sns-subscriptions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS.Subscriptions",
          "packageId": "Amazon.CDK.AWS.SNS.Subscriptions"
        },
        "java": {
          "maven": {
            "artifactId": "sns-subscriptions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns.subscriptions"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns-subscriptions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns-subscriptions",
          "module": "aws_cdk.aws_sns_subscriptions"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/aws-stepfunctions": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.StepFunctions",
          "packageId": "Amazon.CDK.AWS.StepFunctions"
        },
        "java": {
          "maven": {
            "artifactId": "stepfunctions",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.stepfunctions"
        },
        "js": {
          "npm": "@aws-cdk/aws-stepfunctions"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-stepfunctions",
          "module": "aws_cdk.aws_stepfunctions"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::ECS",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.47.0 (build 86d2c33)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "ecs",
    "ecs-patterns"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-ecs-patterns",
  "readme": {
    "markdown": "# CDK Construct library for higher-level ECS Constructs\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis library provides higher-level Amazon ECS constructs which follow common architectural patterns. It contains:\n\n* Application Load Balanced Services\n* Network Load Balanced Services\n* Queue Processing Services\n* Scheduled Tasks (cron jobs)\n* Additional Examples\n\n## Application Load Balanced Services\n\nTo define an Amazon ECS service that is behind an application load balancer, instantiate one of the following:\n\n* `ApplicationLoadBalancedEc2Service`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n```\n\n* `ApplicationLoadBalancedFargateService`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nloadBalancedFargateService.targetGroup.configureHealthCheck({\n  path: \"/custom-health-path\",\n});\n```\n\nInstead of providing a cluster you can specify a VPC and CDK will create a new ECS cluster.\nIf you deploy multiple services CDK will only create one cluster per VPC.\n\nYou can omit `cluster` and `vpc` to let CDK create a new VPC with two AZs and create a cluster inside this VPC.\n\nYou can customize the health check for your target group; otherwise it defaults to `HTTP` over port `80` hitting path `/`.\n\nFargate services will use the `LATEST` platform version by default, but you can override by providing a value for the `platformVersion` property in the constructor.\n\nFargate services use the default VPC Security Group unless one or more are provided using the `securityGroups` property in the constructor.\n\nBy setting `redirectHTTP` to true, CDK will automatically create a listener on port 80 that redirects HTTP traffic to the HTTPS port.\n\nIf you specify the option `recordType` you can decide if you want the construct to use CNAME or Route53-Aliases as record sets.\n\nIf you need to encrypt the traffic between the load balancer and the ECS tasks, you can set the `targetProtocol` to `HTTPS`.\n\nAdditionally, if more than one application target group are needed, instantiate one of the following:\n\n* `ApplicationMultipleTargetGroupsEc2Service`\n\n```ts\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n```\n\n* `ApplicationMultipleTargetGroupsFargateService`\n\n```ts\n// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});\n```\n\n## Network Load Balanced Services\n\nTo define an Amazon ECS service that is behind a network load balancer, instantiate one of the following:\n\n* `NetworkLoadBalancedEc2Service`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});\n```\n\n* `NetworkLoadBalancedFargateService`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n```\n\nThe CDK will create a new Amazon ECS cluster if you specify a VPC and omit `cluster`. If you deploy multiple services the CDK will only create one cluster per VPC.\n\nIf `cluster` and `vpc` are omitted, the CDK creates a new VPC with subnets in two Availability Zones and a cluster within this VPC.\n\nIf you specify the option `recordType` you can decide if you want the construct to use CNAME or Route53-Aliases as record sets.\n\nAdditionally, if more than one network target group is needed, instantiate one of the following:\n\n* NetworkMultipleTargetGroupsEc2Service\n\n```ts\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n```\n\n* NetworkMultipleTargetGroupsFargateService\n\n```ts\n// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});\n```\n\n## Queue Processing Services\n\nTo define a service that creates a queue and reads from that queue, instantiate one of the following:\n\n* `QueueProcessingEc2Service`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n```\n\n* `QueueProcessingFargateService`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});\n```\n\nwhen queue not provided by user, CDK will create a primary queue and a dead letter queue with default redrive policy and attach permission to the task to be able to access the primary queue.\n\n## Scheduled Tasks\n\nTo define a task that runs periodically, there are 2 options:\n\n* `ScheduledEc2Task`\n\n```ts\n// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});\n```\n\n* `ScheduledFargateTask`\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});\n```\n\n## Additional Examples\n\nIn addition to using the constructs, users can also add logic to customize these constructs:\n\n### Configure HTTPS on an ApplicationLoadBalancedFargateService\n\n```ts\nimport { HostedZone } from '@aws-cdk/aws-route53';\nimport { Certificate } from '@aws-cdk/aws-certificatemanager';\nimport { SslPolicy } from '@aws-cdk/aws-elasticloadbalancingv2';\n\nconst domainZone = HostedZone.fromLookup(this, 'Zone', { domainName: 'example.com' });\nconst certificate = Certificate.fromCertificateArn(this, 'Cert', 'arn:aws:acm:us-east-1:123456:certificate/abcdefg');\n\ndeclare const vpc: ec2.Vpc;\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  vpc,\n  cluster,\n  certificate,\n  sslPolicy: SslPolicy.RECOMMENDED,\n  domainName: 'api.example.com',\n  domainZone,\n  redirectHTTP: true,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n```\n\n### Add Schedule-Based Auto-Scaling to an ApplicationLoadBalancedFargateService\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 5,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnSchedule('DaytimeScaleDown', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0'}),\n  minCapacity: 1,\n});\n\nscalableTarget.scaleOnSchedule('EveningRushScaleUp', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0'}),\n  minCapacity: 10,\n});\n```\n\n### Add Metric-Based Auto-Scaling to an ApplicationLoadBalancedFargateService\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});\n```\n\n### Change the default Deployment Controller\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  deploymentController: {\n    type: ecs.DeploymentControllerType.CODE_DEPLOY,\n  },\n});\n```\n\n### Deployment circuit breaker and rollback\n\nAmazon ECS [deployment circuit breaker](https://aws.amazon.com/tw/blogs/containers/announcing-amazon-ecs-deployment-circuit-breaker/)\nautomatically rolls back unhealthy service deployments without the need for manual intervention. Use `circuitBreaker` to enable\ndeployment circuit breaker and optionally enable `rollback` for automatic rollback. See [Using the deployment circuit breaker](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)\nfor more details.\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  circuitBreaker: { rollback: true },\n});\n```\n\n### Set deployment configuration on QueueProcessingService\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {},\n  maxScalingCapacity: 5,\n  maxHealthyPercent: 200,\n  minHealthyPercent: 66,\n});\n```\n\n### Set taskSubnets and securityGroups for QueueProcessingFargateService\n\n```ts\ndeclare const vpc: ec2.Vpc;\ndeclare const securityGroup: ec2.SecurityGroup;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  securityGroups: [securityGroup],\n  taskSubnets: { subnetType: ec2.SubnetType.ISOLATED },\n});\n```\n\n### Define tasks with public IPs for QueueProcessingFargateService\n\n```ts\ndeclare const vpc: ec2.Vpc;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  assignPublicIp: true,\n});\n```\n\n### Define tasks with custom queue parameters for QueueProcessingFargateService\n\n```ts\ndeclare const vpc: ec2.Vpc;\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  maxReceiveCount: 42,\n  retentionPeriod: Duration.days(7),\n  visibilityTimeout: Duration.minutes(5),\n});\n```\n\n### Set capacityProviderStrategies for QueueProcessingFargateService\n\n```ts\ndeclare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});\n```\n\n### Set capacityProviderStrategies for QueueProcessingEc2Service\n\n```ts\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst autoScalingGroup = new autoscaling.AutoScalingGroup(this, 'asg', {\n  vpc,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),\n  machineImage: ecs.EcsOptimizedImage.amazonLinux2(),\n});\nconst capacityProvider = new ecs.AsgCapacityProvider(this, 'provider', {\n  autoScalingGroup,\n});\ncluster.addAsgCapacityProvider(capacityProvider);\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: capacityProvider.capacityProviderName,\n    },\n  ],\n});\n```\n\n### Select specific vpc subnets for ApplicationLoadBalancedFargateService\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n});\n```\n\n### Set PlatformVersion for ScheduledFargateTask\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.VERSION1_4,\n});\n```\n\n### Set SecurityGroups for ScheduledFargateTask\n\n```ts\nconst vpc = new ec2.Vpc(this, 'Vpc', { maxAzs: 1 });\nconst cluster = new ecs.Cluster(this, 'EcsCluster', { vpc });\nconst securityGroup = new ec2.SecurityGroup(this, 'SG', { vpc });\n\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  securityGroups: [securityGroup],\n});\n```\n\n### Use the REMOVE_DEFAULT_DESIRED_COUNT feature flag\n\nThe REMOVE_DEFAULT_DESIRED_COUNT feature flag is used to override the default desiredCount that is autogenerated by the CDK. This will set the desiredCount of any service created by any of the following constructs to be undefined.\n\n* ApplicationLoadBalancedEc2Service\n* ApplicationLoadBalancedFargateService\n* NetworkLoadBalancedEc2Service\n* NetworkLoadBalancedFargateService\n* QueueProcessingEc2Service\n* QueueProcessingFargateService\n\nIf a desiredCount is not passed in as input to the above constructs, CloudFormation will either create a new service to start up with a desiredCount of 1, or update an existing service to start up with the same desiredCount as prior to the update.\n\nTo enable the feature flag, ensure that the REMOVE_DEFAULT_DESIRED_COUNT flag within an application stack context is set to true, like so:\n\n```ts\ndeclare const stack: Stack;\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n```\n\nThe following is an example of an application with the REMOVE_DEFAULT_DESIRED_COUNT feature flag enabled:\n\n```ts nofixture\nimport { App, Stack } from '@aws-cdk/core';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecsPatterns from '@aws-cdk/aws-ecs-patterns';\nimport * as cxapi from '@aws-cdk/cx-api';\nimport * as path from 'path';\n\nconst app = new App();\n\nconst stack = new Stack(app, 'aws-ecs-patterns-queue');\nstack.node.setContext(cxapi.ECS_REMOVE_DEFAULT_DESIRED_COUNT, true);\n\nconst vpc = new ec2.Vpc(stack, 'VPC', {\n  maxAzs: 2,\n});\n\nnew ecsPatterns.QueueProcessingFargateService(stack, 'QueueProcessingService', {\n  vpc,\n  memoryLimitMiB: 512,\n  image: new ecs.AssetImage(path.join(__dirname, '..', 'sqs-reader')),\n});\n```\n\n### Deploy application and metrics sidecar\n\nThe following is an example of deploying an application along with a metrics sidecar container that utilizes `dockerLabels` for discovery:\n\n```ts\ndeclare const cluster: ecs.Cluster;\ndeclare const vpc: ec2.Vpc;\nconst service = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  vpc,\n  desiredCount: 1,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n    dockerLabels: {\n      'application.label.one': 'first_label',\n      'application.label.two': 'second_label',\n    },\n  },\n});\n\nservice.taskDefinition.addContainer('Sidecar', {\n  image: ecs.ContainerImage.fromRegistry('example/metrics-sidecar'),\n});\n```\n\n### Select specific load balancer name ApplicationLoadBalancedFargateService\n\n```ts\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-ecs-patterns",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.ECS.Patterns",
      "packageId": "Amazon.CDK.AWS.ECS.Patterns"
    },
    "java": {
      "maven": {
        "artifactId": "ecs-patterns",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.ecs.patterns"
    },
    "js": {
      "npm": "@aws-cdk/aws-ecs-patterns"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-ecs-patterns",
      "module": "aws_cdk.aws_ecs_patterns"
    }
  },
  "types": {
    "@aws-cdk/aws-ecs-patterns.ApplicationListenerProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define an application listener.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const certificate: certificatemanager.Certificate;\n\nconst applicationListenerProps: ecs_patterns.ApplicationListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  certificate: certificate,\n  port: 123,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationListenerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 309
      },
      "name": "ApplicationListenerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No certificate associated with the load balancer, if using\nthe HTTP protocol. For HTTPS, a DNS-validated certificate will be\ncreated for the load balancer's specified domain name.",
            "remarks": "Setting this option will set the load balancer protocol to HTTPS.",
            "stability": "stable",
            "summary": "Certificate Manager certificate to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 341
          },
          "name": "certificate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-certificatemanager.ICertificate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 313
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Determined from protocol if known.",
            "stability": "stable",
            "summary": "The port on which the listener listens for requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 331
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ApplicationProtocol.HTTP. If a certificate is specified, the protocol will be\nset by default to ApplicationProtocol.HTTPS.",
            "remarks": "The load balancer port is determined from the protocol (port 80 for\nHTTP, port 443 for HTTPS).  A domain name and zone must be also be\nspecified if using HTTPS.",
            "stability": "stable",
            "summary": "The protocol for connections from clients to the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 324
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The recommended elastic load balancing security policy",
            "stability": "stable",
            "summary": "The security policy that defines which ciphers and protocols are supported by the ALB Listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 348
          },
          "name": "sslPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationListenerProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
        "stability": "stable",
        "summary": "An EC2 service running on an ECS cluster fronted by an application load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationLoadBalancedEc2Service class."
        },
        "locationInModule": {
          "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
          "line": 85
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
        "line": 71
      },
      "name": "ApplicationLoadBalancedEc2Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 76
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 Task Definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 80
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/application-load-balanced-ecs-service:ApplicationLoadBalancedEc2Service"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.ApplicationLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
        "stability": "stable",
        "summary": "The properties for the ApplicationLoadBalancedEc2Service service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedEc2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
        "line": 9
      },
      "name": "ApplicationLoadBalancedEc2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 39
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The hard limit (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 51
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under contention, Docker attempts to keep the\ncontainer memory within the limit. If the container requires more memory,\nit can consume up to the value specified by the Memory property or all of\nthe available memory on the container instance—whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 65
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both.."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-load-balanced-ecs-service.ts",
            "line": 18
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/application-load-balanced-ecs-service:ApplicationLoadBalancedEc2ServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
        "stability": "stable",
        "summary": "A Fargate service running on an ECS cluster fronted by an application load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationLoadBalancedFargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
          "line": 118
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
        "line": 99
      },
      "name": "ApplicationLoadBalancedFargateService",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 104
          },
          "name": "assignPublicIp",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 109
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 113
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/application-load-balanced-fargate-service:ApplicationLoadBalancedFargateService"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});\n\nconst scalableTarget = loadBalancedFargateService.service.autoScaleTaskCount({\n  minCapacity: 1,\n  maxCapacity: 20,\n});\n\nscalableTarget.scaleOnCpuUtilization('CpuScaling', {\n  targetUtilizationPercent: 50,\n});\n\nscalableTarget.scaleOnMemoryUtilization('MemoryScaling', {\n  targetUtilizationPercent: 50,\n});",
        "stability": "stable",
        "summary": "The properties for the ApplicationLoadBalancedFargateService service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedFargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
        "line": 10
      },
      "name": "ApplicationLoadBalancedFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 68
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 39
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\nfor the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 61
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 86
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "remarks": "If you do not specify a security group, a new security group is created.",
            "stability": "stable",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 93
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 18
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.",
            "stability": "stable",
            "summary": "The subnets to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-load-balanced-fargate-service.ts",
            "line": 75
          },
          "name": "taskSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/fargate/application-load-balanced-fargate-service:ApplicationLoadBalancedFargateServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for ApplicationLoadBalancedEc2Service and ApplicationLoadBalancedFargateService services."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationLoadBalancedServiceBase class."
        },
        "locationInModule": {
          "filename": "lib/base/application-load-balanced-service-base.ts",
          "line": 408
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/application-load-balanced-service-base.ts",
        "line": 354
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds service as a target of the target group."
          },
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 536
          },
          "name": "addServiceAsTarget",
          "parameters": [
            {
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 540
          },
          "name": "createAWSLogDriver",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 526
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        }
      ],
      "name": "ApplicationLoadBalancedServiceBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 401
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "deprecated": "- Use `internalDesiredCount` instead.",
            "stability": "deprecated",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 359
          },
          "name": "desiredCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The listener for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 381
          },
          "name": "listener",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Application Load Balancer for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 371
          },
          "name": "loadBalancer",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 391
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Certificate Manager certificate to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 396
          },
          "name": "certificate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-certificatemanager.ICertificate"
          }
        },
        {
          "docs": {
            "remarks": "The default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service if one is not provided.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 366
          },
          "name": "internalDesiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The redirect listener for the service if redirectHTTP is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 386
          },
          "name": "redirectListener",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
          }
        }
      ],
      "symbolId": "lib/base/application-load-balanced-service-base:ApplicationLoadBalancedServiceBase"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base ApplicationLoadBalancedEc2Service or ApplicationLoadBalancedFargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const applicationLoadBalancer: elbv2.ApplicationLoadBalancer;\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n\nconst applicationLoadBalancedServiceBaseProps: ecs_patterns.ApplicationLoadBalancedServiceBaseProps = {\n  certificate: certificate,\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: applicationLoadBalancer,\n  loadBalancerName: 'loadBalancerName',\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  openListener: false,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  protocol: elbv2.ApplicationProtocol.HTTP,\n  protocolVersion: elbv2.ApplicationProtocolVersion.GRPC,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.ApplicationLoadBalancedServiceRecordType.ALIAS,\n  redirectHTTP: false,\n  serviceName: 'serviceName',\n  sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  targetProtocol: elbv2.ApplicationProtocol.HTTP,\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-load-balanced-service-base.ts",
        "line": 42
      },
      "name": "ApplicationLoadBalancedServiceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No certificate associated with the load balancer, if using\nthe HTTP protocol. For HTTPS, a DNS-validated certificate will be\ncreated for the load balancer's specified domain name.",
            "remarks": "Setting this option will set the load balancer protocol to HTTPS.",
            "stability": "stable",
            "summary": "Certificate Manager certificate to associate with the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 98
          },
          "name": "certificate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-certificatemanager.ICertificate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "If this property is defined, circuit breaker will be implicitly\nenabled.",
            "stability": "stable",
            "summary": "Whether to enable the deployment circuit breaker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 252
          },
          "name": "circuitBreaker",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AWS Cloud Map service discovery is not enabled.",
            "stability": "stable",
            "summary": "The options for configuring an Amazon ECS service to use service discovery."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 221
          },
          "name": "cloudMapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 49
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Rolling update (ECS)",
            "remarks": "For more information, see\n[Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)",
            "stability": "stable",
            "summary": "Specifies which deployment controller to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 245
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentController"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\nif true, the default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service.",
            "remarks": "The minimum value is 1",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 88
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No domain name.",
            "stability": "stable",
            "summary": "The domain name for the service, e.g. \"api.example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 132
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Route53 hosted domain zone.",
            "stability": "stable",
            "summary": "The Route53 hosted zone for the domain, e.g. \"example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 139
          },
          "name": "domainZone",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-route53.IHostedZone"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 214
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
            "stability": "stable",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 154
          },
          "name": "healthCheckGracePeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The default listener port is determined from the protocol (port 80 for HTTP,\nport 443 for HTTPS). A domain name and zone must be also be specified if using HTTPS.",
            "stability": "stable",
            "summary": "Listener port of the application load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 191
          },
          "name": "listenerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new load balancer will be created.",
            "remarks": "The VPC attribute of a load balancer must be specified for it to be used\nto create a new service with this pattern.\n\n[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The application load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 183
          },
          "name": "loadBalancer",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.IApplicationLoadBalancer"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "stability": "stable",
            "summary": "Name of the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 259
          },
          "name": "loadBalancerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 100 if daemon, otherwise 200",
            "stability": "stable",
            "summary": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 163
          },
          "name": "maxHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0 if daemon, otherwise 50",
            "stability": "stable",
            "summary": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 172
          },
          "name": "minHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true -- The security group allows ingress from all IP addresses.",
            "stability": "stable",
            "summary": "Determines whether or not the Security Group for the Load Balancer's Listener will be open to all traffic by default."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 78
          },
          "name": "openListener",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 206
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "HTTP. If a certificate is specified, the protocol will be\nset by default to HTTPS.",
            "remarks": "The load balancer port is determined from the protocol (port 80 for\nHTTP, port 443 for HTTPS).  A domain name and zone must be also be\nspecified if using HTTPS.",
            "stability": "stable",
            "summary": "The protocol for connections from clients to the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 118
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ApplicationProtocolVersion.HTTP1",
            "stability": "stable",
            "summary": "The protocol version to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 125
          },
          "name": "protocolVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocolVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Determines whether the Load Balancer will be internet-facing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 71
          },
          "name": "publicLoadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ApplicationLoadBalancedServiceRecordType.ALIAS",
            "remarks": "This is useful if you need to work with DNS systems that do not support alias records.",
            "stability": "stable",
            "summary": "Specifies whether the Route53 record should be a CNAME, an A record using the Alias feature or no record at all."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 237
          },
          "name": "recordType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Specifies whether the load balancer should redirect traffic on port 80 to port 443 to support HTTP->HTTPS redirects This is only valid if the protocol of the ALB is HTTPS."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 229
          },
          "name": "redirectHTTP",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 146
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- The recommended elastic load balancing security policy",
            "stability": "stable",
            "summary": "The security policy that defines which ciphers and protocols are supported by the ALB Listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 198
          },
          "name": "sslPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.SslPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "HTTP.",
            "remarks": "The default target port is determined from the protocol (port 80 for\nHTTP, port 443 for HTTPS).",
            "stability": "stable",
            "summary": "The protocol for connections from the load balancer to the ECS tasks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 107
          },
          "name": "targetProtocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationProtocol"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "TaskDefinition or TaskImageOptions must be specified, but not both.",
            "stability": "stable",
            "summary": "The properties required to create a new task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 64
          },
          "name": "taskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 57
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/application-load-balanced-service-base:ApplicationLoadBalancedServiceBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceRecordType": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "docs": {
        "stability": "stable",
        "summary": "Describes the type of DNS record the service should create."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedServiceRecordType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/application-load-balanced-service-base.ts",
        "line": 24
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Create Route53 A Alias record."
          },
          "name": "ALIAS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a CNAME record."
          },
          "name": "CNAME"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Do not create any DNS records."
          },
          "name": "NONE"
        }
      ],
      "name": "ApplicationLoadBalancedServiceRecordType",
      "symbolId": "lib/base/application-load-balanced-service-base:ApplicationLoadBalancedServiceRecordType"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  desiredCount: 1,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  taskSubnets: {\n    subnets: [ec2.Subnet.fromSubnetId(this, 'subnet', 'VpcISOLATEDSubnet1Subnet80F07FA0')],\n  },\n  loadBalancerName: 'application-lb-name',\n});",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-load-balanced-service-base.ts",
        "line": 263
      },
      "name": "ApplicationLoadBalancedTaskImageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "The container name value to be specified in the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 318
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "remarks": "If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\nIf you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\nyour container automatically receives a host port in the ephemeral port range.\n\nPort mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n\nFor more information, see\n[hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).",
            "stability": "stable",
            "summary": "The port number on the container that is bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 334
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "stability": "stable",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 348
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Flag to indicate whether to enable logging."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 290
          },
          "name": "enableLogging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 276
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No value",
            "stability": "stable",
            "summary": "The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 304
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 341
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Image or taskDefinition must be specified, not both.",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 269
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 297
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secret to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 283
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A task role is automatically created for you.",
            "stability": "stable",
            "summary": "The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-load-balanced-service-base.ts",
            "line": 311
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/application-load-balanced-service-base:ApplicationLoadBalancedTaskImageOptions"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "Options for configuring a new container."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 119
      },
      "name": "ApplicationLoadBalancedTaskImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- web",
            "stability": "stable",
            "summary": "The container name value to be specified in the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 174
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [80]",
            "remarks": "If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\nIf you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\nyour container automatically receives a host port in the ephemeral port range.\n\nPort mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n\nFor more information, see\n[hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).",
            "stability": "stable",
            "summary": "A list of port numbers on the container that is bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 190
          },
          "name": "containerPorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "stability": "stable",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 204
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Flag to indicate whether to enable logging."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 146
          },
          "name": "enableLogging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 132
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No value",
            "stability": "stable",
            "summary": "The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 160
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 197
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Image or taskDefinition must be specified, not both.",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 125
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 153
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secrets to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 139
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A task role is automatically created for you.",
            "stability": "stable",
            "summary": "The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 167
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationLoadBalancedTaskImageProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancerProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define an application load balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const hostedZone: route53.HostedZone;\n\nconst applicationLoadBalancerProps: ecs_patterns.ApplicationLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    certificate: certificate,\n    port: 123,\n    protocol: elbv2.ApplicationProtocol.HTTP,\n    sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 273
      },
      "name": "ApplicationLoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No domain name.",
            "stability": "stable",
            "summary": "The domain name for the service, e.g. \"api.example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 296
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Route53 hosted domain zone.",
            "stability": "stable",
            "summary": "The Route53 hosted zone for the domain, e.g. \"example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 303
          },
          "name": "domainZone",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-route53.IHostedZone"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Listeners (at least one listener) attached to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 282
          },
          "name": "listeners",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationListenerProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 277
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Determines whether the Load Balancer will be internet-facing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 289
          },
          "name": "publicLoadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationLoadBalancerProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBase",
      "docs": {
        "example": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "An EC2 service running on an ECS cluster fronted by an application load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationMultipleTargetGroupsEc2Service class."
        },
        "locationInModule": {
          "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
          "line": 84
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
        "line": 66
      },
      "name": "ApplicationMultipleTargetGroupsEc2Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 71
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 79
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 Task Definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 75
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/application-multiple-target-groups-ecs-service:ApplicationMultipleTargetGroupsEc2Service"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.ApplicationMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "The properties for the ApplicationMultipleTargetGroupsEc2Service service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsEc2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
        "line": 13
      },
      "name": "ApplicationMultipleTargetGroupsEc2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No minimum CPU units reserved.",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:",
            "stability": "stable",
            "summary": "The minimum number of CPU units to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 31
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 43
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.\n\nNote that this setting will be ignored if TaskImagesOptions is specified",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 60
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/application-multiple-target-groups-ecs-service.ts",
            "line": 22
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/application-multiple-target-groups-ecs-service:ApplicationMultipleTargetGroupsEc2ServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBase",
      "docs": {
        "example": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "A Fargate service running on an ECS cluster fronted by an application load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationMultipleTargetGroupsFargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
          "line": 114
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
        "line": 89
      },
      "name": "ApplicationMultipleTargetGroupsFargateService",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 94
          },
          "name": "assignPublicIp",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 99
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 109
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 104
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/application-multiple-target-groups-fargate-service:ApplicationMultipleTargetGroupsFargateService"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// One application load balancer with one listener and two target groups.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.ApplicationMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  targetGroups: [\n    {\n      containerPort: 80,\n    },\n    {\n      containerPort: 90,\n      pathPattern: 'a/b/c',\n      priority: 10,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "The properties for the ApplicationMultipleTargetGroupsFargateService service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsFargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
        "line": 13
      },
      "name": "ApplicationMultipleTargetGroupsFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 72
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 43
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\nfor the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 65
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 83
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/application-multiple-target-groups-fargate-service.ts",
            "line": 22
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/application-multiple-target-groups-fargate-service:ApplicationMultipleTargetGroupsFargateServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for ApplicationMultipleTargetGroupsEc2Service and ApplicationMultipleTargetGroupsFargateService classes."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ApplicationMultipleTargetGroupsServiceBase class."
        },
        "locationInModule": {
          "filename": "lib/base/application-multiple-target-groups-service-base.ts",
          "line": 392
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 354
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 507
          },
          "name": "addPortMappingForTargets",
          "parameters": [
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            },
            {
              "name": "targets",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 461
          },
          "name": "createAWSLogDriver",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 465
          },
          "name": "findListener",
          "parameters": [
            {
              "name": "name",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 454
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 477
          },
          "name": "registerECSTargets",
          "parameters": [
            {
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            },
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            },
            {
              "name": "targets",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
            }
          }
        }
      ],
      "name": "ApplicationMultipleTargetGroupsServiceBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 381
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "deprecated": "- Use `internalDesiredCount` instead.",
            "stability": "deprecated",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 359
          },
          "name": "desiredCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default listener for the service (first added listener)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 376
          },
          "name": "listener",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default Application Load Balancer for the service (first added load balancer)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 371
          },
          "name": "loadBalancer",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer"
          }
        },
        {
          "docs": {
            "remarks": "The default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service, if one is not provided.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 366
          },
          "name": "internalDesiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 384
          },
          "name": "listeners",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 385
          },
          "name": "targetGroups",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 383
          },
          "name": "logDriver",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationMultipleTargetGroupsServiceBase"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base ApplicationMultipleTargetGroupsEc2Service or ApplicationMultipleTargetGroupsFargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const certificate: certificatemanager.Certificate;\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n\nconst applicationMultipleTargetGroupsServiceBaseProps: ecs_patterns.ApplicationMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      certificate: certificate,\n      port: 123,\n      protocol: elbv2.ApplicationProtocol.HTTP,\n      sslPolicy: elbv2.SslPolicy.RECOMMENDED,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    hostHeader: 'hostHeader',\n    listener: 'listener',\n    pathPattern: 'pathPattern',\n    priority: 123,\n    protocol: ecs.Protocol.TCP,\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationMultipleTargetGroupsServiceBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 28
      },
      "name": "ApplicationMultipleTargetGroupsServiceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- AWS Cloud Map service discovery is not enabled.",
            "stability": "stable",
            "summary": "The options for configuring an Amazon ECS service to use service discovery."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 106
          },
          "name": "cloudMapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 36
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\nif true, the default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 61
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 99
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
            "stability": "stable",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 69
          },
          "name": "healthCheckGracePeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new load balancer with a listener will be created.",
            "stability": "stable",
            "summary": "The application load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 83
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancerProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 91
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 76
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default portMapping registered as target group and attached to the first defined listener",
            "stability": "stable",
            "summary": "Properties to specify ALB target groups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 113
          },
          "name": "targetGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Only one of TaskDefinition or TaskImageOptions must be specified.",
            "stability": "stable",
            "summary": "The properties required to create a new task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 52
          },
          "name": "taskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationLoadBalancedTaskImageProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 45
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationMultipleTargetGroupsServiceBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define an application target group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\nconst applicationTargetProps: ecs_patterns.ApplicationTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  hostHeader: 'hostHeader',\n  listener: 'listener',\n  pathPattern: 'pathPattern',\n  priority: 123,\n  protocol: ecs.Protocol.TCP,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ApplicationTargetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/application-multiple-target-groups-service-base.ts",
        "line": 210
      },
      "name": "ApplicationTargetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Only applicable when using application/network load balancers.",
            "stability": "stable",
            "summary": "The port number of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 214
          },
          "name": "containerPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No host condition",
            "remarks": "May contain up to three '*' wildcards.\n\nRequires that priority is set.",
            "see": "https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#host-conditions",
            "stability": "stable",
            "summary": "Rule applies if the requested host matches the indicated host."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 254
          },
          "name": "hostHeader",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default listener (first added listener)",
            "stability": "stable",
            "summary": "Name of the listener the target group attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 228
          },
          "name": "listener",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No path condition",
            "remarks": "May contain up to three '*' wildcards.\n\nRequires that priority is set.",
            "see": "https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#path-conditions",
            "stability": "stable",
            "summary": "Rule applies if the requested path matches the given path pattern."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 267
          },
          "name": "pathPattern",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Target groups are used as defaults",
            "remarks": "The rule with the lowest priority will be used for every request.\nIf priority is not given, these target groups will be added as\ndefaults, and must not have conditions.\n\nPriorities must be unique.",
            "stability": "stable",
            "summary": "Priority of this target group."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 241
          },
          "name": "priority",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ecs.Protocol.TCP",
            "remarks": "Only applicable when using application load balancers.",
            "stability": "stable",
            "summary": "The protocol used for the port mapping."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/application-multiple-target-groups-service-base.ts",
            "line": 221
          },
          "name": "protocol",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Protocol"
          }
        }
      ],
      "symbolId": "lib/base/application-multiple-target-groups-service-base:ApplicationTargetProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkListenerProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define an network listener.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\nconst networkListenerProps: ecs_patterns.NetworkListenerProps = {\n  name: 'name',\n\n  // the properties below are optional\n  port: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkListenerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 239
      },
      "name": "NetworkListenerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the listener."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 243
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "stability": "stable",
            "summary": "The port on which the listener listens for requests."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 250
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkListenerProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
        "stability": "stable",
        "summary": "An EC2 service running on an ECS cluster fronted by a network load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkLoadBalancedEc2Service class."
        },
        "locationInModule": {
          "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
        "line": 69
      },
      "name": "NetworkLoadBalancedEc2Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The ECS service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 74
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 Task Definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 78
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/network-load-balanced-ecs-service:NetworkLoadBalancedEc2Service"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
        "stability": "stable",
        "summary": "The properties for the NetworkLoadBalancedEc2Service service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedEc2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
        "line": 9
      },
      "name": "NetworkLoadBalancedEc2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 38
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The hard limit (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 49
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under contention, Docker attempts to keep the\ncontainer memory within the limit. If the container requires more memory,\nit can consume up to the value specified by the Memory property or all of\nthe available memory on the container instance—whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 63
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both.."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-load-balanced-ecs-service.ts",
            "line": 17
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/network-load-balanced-ecs-service:NetworkLoadBalancedEc2ServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
        "stability": "stable",
        "summary": "A Fargate service running on an ECS cluster fronted by a network load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkLoadBalancedFargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
          "line": 107
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
        "line": 92
      },
      "name": "NetworkLoadBalancedFargateService",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 94
          },
          "name": "assignPublicIp",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 98
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 102
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/network-load-balanced-fargate-service:NetworkLoadBalancedFargateService"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkLoadBalancedFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  cpu: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n});",
        "stability": "stable",
        "summary": "The properties for the NetworkLoadBalancedFargateService service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedFargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
        "line": 10
      },
      "name": "NetworkLoadBalancedFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 68
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 39
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\nfor the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 61
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 86
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. TaskDefinition or TaskImageOptions must be specified, but not both."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 18
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.",
            "stability": "stable",
            "summary": "The subnets to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-load-balanced-fargate-service.ts",
            "line": 75
          },
          "name": "taskSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/fargate/network-load-balanced-fargate-service:NetworkLoadBalancedFargateServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for NetworkLoadBalancedEc2Service and NetworkLoadBalancedFargateService services."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkLoadBalancedServiceBase class."
        },
        "locationInModule": {
          "filename": "lib/base/network-load-balanced-service-base.ts",
          "line": 325
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/network-load-balanced-service-base.ts",
        "line": 282
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds service as a target of the target group."
          },
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 404
          },
          "name": "addServiceAsTarget",
          "parameters": [
            {
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 408
          },
          "name": "createAWSLogDriver",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 394
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        }
      ],
      "name": "NetworkLoadBalancedServiceBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 319
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "deprecated": "- Use `internalDesiredCount` instead.",
            "stability": "deprecated",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 287
          },
          "name": "desiredCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The listener for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 309
          },
          "name": "listener",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Network Load Balancer for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 299
          },
          "name": "loadBalancer",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 314
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
          }
        },
        {
          "docs": {
            "remarks": "The default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service, if one is not provided.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 294
          },
          "name": "internalDesiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/base/network-load-balanced-service-base:NetworkLoadBalancedServiceBase"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base NetworkLoadBalancedEc2Service or NetworkLoadBalancedFargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const networkLoadBalancer: elbv2.NetworkLoadBalancer;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n\nconst networkLoadBalancedServiceBaseProps: ecs_patterns.NetworkLoadBalancedServiceBaseProps = {\n  circuitBreaker: {\n    rollback: false,\n  },\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredCount: 123,\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  listenerPort: 123,\n  loadBalancer: networkLoadBalancer,\n  maxHealthyPercent: 123,\n  minHealthyPercent: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  publicLoadBalancer: false,\n  recordType: ecs_patterns.NetworkLoadBalancedServiceRecordType.ALIAS,\n  serviceName: 'serviceName',\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPort: 123,\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-load-balanced-service-base.ts",
        "line": 38
      },
      "name": "NetworkLoadBalancedServiceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "If this property is defined, circuit breaker will be implicitly\nenabled.",
            "stability": "stable",
            "summary": "Whether to enable the deployment circuit breaker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 188
          },
          "name": "circuitBreaker",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AWS Cloud Map service discovery is not enabled.",
            "stability": "stable",
            "summary": "The options for configuring an Amazon ECS service to use service discovery."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 165
          },
          "name": "cloudMapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 45
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Rolling update (ECS)",
            "remarks": "For more information, see\n[Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)",
            "stability": "stable",
            "summary": "Specifies which deployment controller to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 181
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentController"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\nif true, the default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service.",
            "remarks": "The minimum value is 1",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 77
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No domain name.",
            "stability": "stable",
            "summary": "The domain name for the service, e.g. \"api.example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 84
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Route53 hosted domain zone.",
            "stability": "stable",
            "summary": "The Route53 hosted zone for the domain, e.g. \"example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 91
          },
          "name": "domainZone",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-route53.IHostedZone"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 158
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
            "stability": "stable",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 106
          },
          "name": "healthCheckGracePeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "stability": "stable",
            "summary": "Listener port of the network load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 142
          },
          "name": "listenerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new load balancer will be created.",
            "remarks": "If the load balancer has been imported, the vpc attribute must be specified\nin the call to fromNetworkLoadBalancerAttributes().\n\n[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The network load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 135
          },
          "name": "loadBalancer",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.INetworkLoadBalancer"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 100 if daemon, otherwise 200",
            "stability": "stable",
            "summary": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 115
          },
          "name": "maxHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 0 if daemon, otherwise 50",
            "stability": "stable",
            "summary": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 124
          },
          "name": "minHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 150
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Determines whether the Load Balancer will be internet-facing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 67
          },
          "name": "publicLoadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "NetworkLoadBalancedServiceRecordType.ALIAS",
            "remarks": "This is useful if you need to work with DNS systems that do not support alias records.",
            "stability": "stable",
            "summary": "Specifies whether the Route53 record should be a CNAME, an A record using the Alias feature or no record at all."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 173
          },
          "name": "recordType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 98
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "One of taskImageOptions or taskDefinition must be specified.",
            "stability": "stable",
            "summary": "The properties required to create a new task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 60
          },
          "name": "taskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 53
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/network-load-balanced-service-base:NetworkLoadBalancedServiceBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceRecordType": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "docs": {
        "stability": "stable",
        "summary": "Describes the type of DNS record the service should create."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedServiceRecordType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/base/network-load-balanced-service-base.ts",
        "line": 20
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Create Route53 A Alias record."
          },
          "name": "ALIAS"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create a CNAME record."
          },
          "name": "CNAME"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Do not create any DNS records."
          },
          "name": "NONE"
        }
      ],
      "name": "NetworkLoadBalancedServiceRecordType",
      "symbolId": "lib/base/network-load-balanced-service-base:NetworkLoadBalancedServiceRecordType"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst loadBalancedEcsService = new ecsPatterns.NetworkLoadBalancedEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('test'),\n    environment: {\n      TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n      TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n    },\n  },\n  desiredCount: 2,\n});",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-load-balanced-service-base.ts",
        "line": 191
      },
      "name": "NetworkLoadBalancedTaskImageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "The container name value to be specified in the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 246
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "remarks": "If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\nIf you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\nyour container automatically receives a host port in the ephemeral port range.\n\nPort mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n\nFor more information, see\n[hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).",
            "stability": "stable",
            "summary": "The port number on the container that is bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 262
          },
          "name": "containerPort",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "stability": "stable",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 276
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Flag to indicate whether to enable logging."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 218
          },
          "name": "enableLogging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 204
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No value",
            "stability": "stable",
            "summary": "The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 232
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 269
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Image or taskDefinition must be specified, but not both.",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 197
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 225
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secret to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 211
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A task role is automatically created for you.",
            "stability": "stable",
            "summary": "The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-load-balanced-service-base.ts",
            "line": 239
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/network-load-balanced-service-base:NetworkLoadBalancedTaskImageOptions"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "Options for configuring a new container."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 110
      },
      "name": "NetworkLoadBalancedTaskImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "The container name value to be specified in the task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 165
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- [80]",
            "remarks": "If you are using containers in a task with the awsvpc or host network mode, exposed ports should be specified using containerPort.\nIf you are using containers in a task with the bridge network mode and you specify a container port and not a host port,\nyour container automatically receives a host port in the ephemeral port range.\n\nPort mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.\n\nFor more information, see\n[hostPort](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PortMapping.html#ECS-Type-PortMapping-hostPort).",
            "stability": "stable",
            "summary": "A list of port numbers on the container that is bound to the user-specified or automatically assigned host port."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 181
          },
          "name": "containerPorts",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "number"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No labels.",
            "stability": "stable",
            "summary": "A key/value map of labels to add to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 195
          },
          "name": "dockerLabels",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Flag to indicate whether to enable logging."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 137
          },
          "name": "enableLogging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No environment variables.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 123
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No value",
            "stability": "stable",
            "summary": "The name of the task execution IAM role that grants the Amazon ECS container agent permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 151
          },
          "name": "executionRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that this task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 188
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Image or taskDefinition must be specified, but not both.",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 116
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 144
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secrets to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 130
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A task role is automatically created for you.",
            "stability": "stable",
            "summary": "The name of the task IAM role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 158
          },
          "name": "taskRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkLoadBalancedTaskImageProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancerProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define an network load balancer.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as route53 from '@aws-cdk/aws-route53';\n\ndeclare const hostedZone: route53.HostedZone;\n\nconst networkLoadBalancerProps: ecs_patterns.NetworkLoadBalancerProps = {\n  listeners: [{\n    name: 'name',\n\n    // the properties below are optional\n    port: 123,\n  }],\n  name: 'name',\n\n  // the properties below are optional\n  domainName: 'domainName',\n  domainZone: hostedZone,\n  publicLoadBalancer: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 201
      },
      "name": "NetworkLoadBalancerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No domain name.",
            "stability": "stable",
            "summary": "The domain name for the service, e.g. \"api.example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 226
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Route53 hosted domain zone.",
            "stability": "stable",
            "summary": "The Route53 hosted zone for the domain, e.g. \"example.com.\"."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 233
          },
          "name": "domainZone",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-route53.IHostedZone"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "stable",
            "summary": "Listeners (at least one listener) attached to this load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 212
          },
          "name": "listeners",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.NetworkListenerProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Name of the load balancer."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 205
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Determines whether the Load Balancer will be internet-facing."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 219
          },
          "name": "publicLoadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkLoadBalancerProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBase",
      "docs": {
        "example": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "An EC2 service running on an ECS cluster fronted by a network load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkMultipleTargetGroupsEc2Service class."
        },
        "locationInModule": {
          "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
          "line": 83
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
        "line": 65
      },
      "name": "NetworkMultipleTargetGroupsEc2Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 70
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 78
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 Task Definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 74
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/network-multiple-target-groups-ecs-service:NetworkMultipleTargetGroupsEc2Service"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedEc2Service = new ecsPatterns.NetworkMultipleTargetGroupsEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 256,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "The properties for the NetworkMultipleTargetGroupsEc2Service service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsEc2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
        "line": 13
      },
      "name": "NetworkMultipleTargetGroupsEc2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No minimum CPU units reserved.",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:",
            "stability": "stable",
            "summary": "The minimum number of CPU units to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 30
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 42
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under heavy contention, Docker attempts to keep the\ncontainer memory to this soft limit. However, your container can consume more\nmemory when it needs to, up to either the hard limit specified with the memory\nparameter (if applicable), or all of the available memory on the container\ninstance, whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required.\n\nNote that this setting will be ignored if TaskImagesOptions is specified.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 59
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/network-multiple-target-groups-ecs-service.ts",
            "line": 21
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/network-multiple-target-groups-ecs-service:NetworkMultipleTargetGroupsEc2ServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBase",
      "docs": {
        "example": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "A Fargate service running on an ECS cluster fronted by a network load balancer."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkMultipleTargetGroupsFargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
          "line": 114
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
        "line": 89
      },
      "name": "NetworkMultipleTargetGroupsFargateService",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 94
          },
          "name": "assignPublicIp",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 99
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The default target group for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 109
          },
          "name": "targetGroup",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 104
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/network-multiple-target-groups-fargate-service:NetworkMultipleTargetGroupsFargateService"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// Two network load balancers, each with their own listener and target group.\ndeclare const cluster: ecs.Cluster;\nconst loadBalancedFargateService = new ecsPatterns.NetworkMultipleTargetGroupsFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  taskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry(\"amazon/amazon-ecs-sample\"),\n  },\n  loadBalancers: [\n    {\n      name: 'lb1',\n      listeners: [\n        {\n          name: 'listener1',\n        },\n      ],\n    },\n    {\n      name: 'lb2',\n      listeners: [\n        {\n          name: 'listener2',\n        },\n      ],\n    },\n  ],\n  targetGroups: [\n    {\n      containerPort: 80,\n      listener: 'listener1',\n    },\n    {\n      containerPort: 90,\n      listener: 'listener2',\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "The properties for the NetworkMultipleTargetGroupsFargateService service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsFargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
        "line": 13
      },
      "name": "NetworkMultipleTargetGroupsFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Determines whether the service will be assigned a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 72
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 43
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\nfor the cpu parameter:\n\n512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)\n\n1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)\n\n2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)\n\nBetween 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)\n\nBetween 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 65
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 83
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. Only one of TaskDefinition or TaskImageOptions must be specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/network-multiple-target-groups-fargate-service.ts",
            "line": 22
          },
          "name": "taskDefinition",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/network-multiple-target-groups-fargate-service:NetworkMultipleTargetGroupsFargateServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for NetworkMultipleTargetGroupsEc2Service and NetworkMultipleTargetGroupsFargateService classes."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the NetworkMultipleTargetGroupsServiceBase class."
        },
        "locationInModule": {
          "filename": "lib/base/network-multiple-target-groups-service-base.ts",
          "line": 311
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 273
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 393
          },
          "name": "addPortMappingForTargets",
          "parameters": [
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            },
            {
              "name": "targets",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ecs-patterns.NetworkTargetProps"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 358
          },
          "name": "createAWSLogDriver",
          "parameters": [
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 362
          },
          "name": "findListener",
          "parameters": [
            {
              "name": "name",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 351
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 374
          },
          "name": "registerECSTargets",
          "parameters": [
            {
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            },
            {
              "name": "container",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.ContainerDefinition"
              }
            },
            {
              "name": "targets",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-ecs-patterns.NetworkTargetProps"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
            }
          }
        }
      ],
      "name": "NetworkMultipleTargetGroupsServiceBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 300
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "deprecated": "- Use `internalDesiredCount` instead.",
            "stability": "deprecated",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 278
          },
          "name": "desiredCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The listener for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 295
          },
          "name": "listener",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Network Load Balancer for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 290
          },
          "name": "loadBalancer",
          "type": {
            "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer"
          }
        },
        {
          "docs": {
            "remarks": "The default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service, if one is not provided.",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 285
          },
          "name": "internalDesiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 303
          },
          "name": "listeners",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 304
          },
          "name": "targetGroups",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.NetworkTargetGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 302
          },
          "name": "logDriver",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkMultipleTargetGroupsServiceBase"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base NetworkMultipleTargetGroupsEc2Service or NetworkMultipleTargetGroupsFargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as route53 from '@aws-cdk/aws-route53';\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerDefinition: ecs.ContainerDefinition;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const hostedZone: route53.HostedZone;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const namespace: servicediscovery.INamespace;\ndeclare const role: iam.Role;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n\nconst networkMultipleTargetGroupsServiceBaseProps: ecs_patterns.NetworkMultipleTargetGroupsServiceBaseProps = {\n  cloudMapOptions: {\n    cloudMapNamespace: namespace,\n    container: containerDefinition,\n    containerPort: 123,\n    dnsRecordType: servicediscovery.DnsRecordType.A,\n    dnsTtl: cdk.Duration.minutes(30),\n    failureThreshold: 123,\n    name: 'name',\n  },\n  cluster: cluster,\n  desiredCount: 123,\n  enableECSManagedTags: false,\n  healthCheckGracePeriod: cdk.Duration.minutes(30),\n  loadBalancers: [{\n    listeners: [{\n      name: 'name',\n\n      // the properties below are optional\n      port: 123,\n    }],\n    name: 'name',\n\n    // the properties below are optional\n    domainName: 'domainName',\n    domainZone: hostedZone,\n    publicLoadBalancer: false,\n  }],\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  serviceName: 'serviceName',\n  targetGroups: [{\n    containerPort: 123,\n\n    // the properties below are optional\n    listener: 'listener',\n  }],\n  taskImageOptions: {\n    image: containerImage,\n\n    // the properties below are optional\n    containerName: 'containerName',\n    containerPorts: [123],\n    dockerLabels: {\n      dockerLabelsKey: 'dockerLabels',\n    },\n    enableLogging: false,\n    environment: {\n      environmentKey: 'environment',\n    },\n    executionRole: role,\n    family: 'family',\n    logDriver: logDriver,\n    secrets: {\n      secretsKey: secret,\n    },\n    taskRole: role,\n  },\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkMultipleTargetGroupsServiceBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 20
      },
      "name": "NetworkMultipleTargetGroupsServiceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- AWS Cloud Map service discovery is not enabled.",
            "stability": "stable",
            "summary": "The options for configuring an Amazon ECS service to use service discovery."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 97
          },
          "name": "cloudMapOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.CloudMapOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 27
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\nif true, the default is 1 for all new services and uses the existing services desired count\nwhen updating an existing service.",
            "remarks": "The minimum value is 1",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 52
          },
          "name": "desiredCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 90
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- defaults to 60 seconds if at least one load balancer is in-use and it is not already set",
            "stability": "stable",
            "summary": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 67
          },
          "name": "healthCheckGracePeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new load balancer with a listener will be created.",
            "stability": "stable",
            "summary": "The network load balancer that will serve traffic to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 74
          },
          "name": "loadBalancers",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancerProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 82
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 59
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default portMapping registered as target group and attached to the first defined listener",
            "stability": "stable",
            "summary": "Properties to specify NLB target groups."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 104
          },
          "name": "targetGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs-patterns.NetworkTargetProps"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Only one of TaskDefinition or TaskImageOptions must be specified.",
            "stability": "stable",
            "summary": "The properties required to create a new task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 42
          },
          "name": "taskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.NetworkLoadBalancedTaskImageProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 35
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkMultipleTargetGroupsServiceBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.NetworkTargetProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Properties to define a network load balancer target group.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\nconst networkTargetProps: ecs_patterns.NetworkTargetProps = {\n  containerPort: 123,\n\n  // the properties below are optional\n  listener: 'listener',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.NetworkTargetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/network-multiple-target-groups-service-base.ts",
        "line": 256
      },
      "name": "NetworkTargetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Only applicable when using application/network load balancers.",
            "stability": "stable",
            "summary": "The port number of the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 260
          },
          "name": "containerPort",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default listener (first added listener)",
            "stability": "stable",
            "summary": "Name of the listener the target group attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/network-multiple-target-groups-service-base.ts",
            "line": 267
          },
          "name": "listener",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/base/network-multiple-target-groups-service-base:NetworkTargetProps"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
        "stability": "stable",
        "summary": "Class to create a queue processing EC2 service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2Service",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the QueueProcessingEc2Service class."
        },
        "locationInModule": {
          "filename": "lib/ecs/queue-processing-ecs-service.ts",
          "line": 89
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/queue-processing-ecs-service.ts",
        "line": 75
      },
      "name": "QueueProcessingEc2Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 80
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2Service"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 84
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/queue-processing-ecs-service:QueueProcessingEc2Service"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst queueProcessingEc2Service = new ecsPatterns.QueueProcessingEc2Service(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 1024,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  command: [\"-c\", \"4\", \"amazon.com\"],\n  enableLogging: false,\n  desiredTaskCount: 2,\n  environment: {\n    TEST_ENVIRONMENT_VARIABLE1: \"test environment variable 1 value\",\n    TEST_ENVIRONMENT_VARIABLE2: \"test environment variable 2 value\",\n  },\n  maxScalingCapacity: 5,\n  containerName: 'test',\n});",
        "stability": "stable",
        "summary": "The properties for the QueueProcessingEc2Service service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingEc2ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/queue-processing-ecs-service.ts",
        "line": 9
      },
      "name": "QueueProcessingEc2ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- QueueProcessingContainer",
            "stability": "stable",
            "summary": "Optional name for the container added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 69
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 29
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No GPUs assigned.",
            "remarks": "Set this if you want to use gpu based instances.",
            "stability": "stable",
            "summary": "Gpu count for container in task definition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 62
          },
          "name": "gpuCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The hard limit (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 41
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under contention, Docker attempts to keep the\ncontainer memory within the limit. If the container requires more memory,\nit can consume up to the value specified by the Memory property or all of\nthe available memory on the container instance—whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/queue-processing-ecs-service.ts",
            "line": 55
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs/queue-processing-ecs-service:QueueProcessingEc2ServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "Class to create a queue processing Fargate service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateService",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the QueueProcessingFargateService class."
        },
        "locationInModule": {
          "filename": "lib/fargate/queue-processing-fargate-service.ts",
          "line": 112
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/queue-processing-fargate-service.ts",
        "line": 99
      },
      "name": "QueueProcessingFargateService",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate service in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 103
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateService"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 107
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/queue-processing-fargate-service:QueueProcessingFargateService"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\ncluster.enableFargateCapacityProviders();\n\nconst queueProcessingFargateService = new ecsPatterns.QueueProcessingFargateService(this, 'Service', {\n  cluster,\n  memoryLimitMiB: 512,\n  image: ecs.ContainerImage.fromRegistry('test'),\n  capacityProviderStrategies: [\n    {\n      capacityProvider: 'FARGATE_SPOT',\n      weight: 2,\n    },\n    {\n      capacityProvider: 'FARGATE',\n      weight: 1,\n    },\n  ],\n});",
        "stability": "stable",
        "summary": "The properties for the QueueProcessingFargateService service."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingFargateServiceProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/queue-processing-fargate-service.ts",
        "line": 10
      },
      "name": "QueueProcessingFargateServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If true, each task will receive a public IP address.",
            "stability": "stable",
            "summary": "Specifies whether the task's elastic network interface receives a public IP address."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 93
          },
          "name": "assignPublicIp",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- QueueProcessingContainer",
            "stability": "stable",
            "summary": "Optional name for the container added."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 70
          },
          "name": "containerName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 30
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "This field is required and you must use one of the following values, which determines your range of valid values\nfor the cpu parameter:\n\n0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)\n\n1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)\n\n2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)\n\nBetween 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)\n\nBetween 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The amount (in MiB) of memory used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 52
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 63
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A new security group is created.",
            "remarks": "If you do not specify a security group, a new security group is created.",
            "stability": "stable",
            "summary": "The security groups to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 84
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Public subnets if `assignPublicIp` is set, otherwise the first available one of Private, Isolated, Public, in that order.",
            "stability": "stable",
            "summary": "The subnets to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/queue-processing-fargate-service.ts",
            "line": 77
          },
          "name": "taskSubnets",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/fargate/queue-processing-fargate-service:QueueProcessingFargateServiceProps"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for QueueProcessingEc2Service and QueueProcessingFargateService services."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the QueueProcessingServiceBase class."
        },
        "locationInModule": {
          "filename": "lib/base/queue-processing-service-base.ts",
          "line": 280
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/queue-processing-service-base.ts",
        "line": 223
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Configure autoscaling based off of CPU utilization as well as the number of messages visible in the SQS queue."
          },
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 348
          },
          "name": "configureAutoscalingForService",
          "parameters": [
            {
              "docs": {
                "summary": "the ECS/Fargate service for which to apply the autoscaling rules to."
              },
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 370
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Grant SQS permissions to an ECS service."
          },
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 363
          },
          "name": "grantPermissionsToService",
          "parameters": [
            {
              "docs": {
                "summary": "the ECS/Fargate service to which to grant SQS permissions."
              },
              "name": "service",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.BaseService"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "QueueProcessingServiceBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The cluster where your service will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 237
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "deprecated": "- Use `minCapacity` instead.",
            "stability": "deprecated",
            "summary": "The minimum number of tasks to run."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 256
          },
          "name": "desiredCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Environment variables that will include the queue name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 245
          },
          "name": "environment",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The maximum number of instances for autoscaling to scale up to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 261
          },
          "name": "maxCapacity",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The minimum number of instances for autoscaling to scale down to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 266
          },
          "name": "minCapacity",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The scaling interval for autoscaling based off an SQS Queue size."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 271
          },
          "name": "scalingSteps",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.ScalingInterval"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The SQS queue that the service will process from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 227
          },
          "name": "sqsQueue",
          "type": {
            "fqn": "@aws-cdk/aws-sqs.IQueue"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The dead letter queue for the primary SQS queue."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 232
          },
          "name": "deadLetterQueue",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-sqs.IQueue"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The AwsLogDriver to use for logging if logging is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 275
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The secret environment variables."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 250
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/base/queue-processing-service-base:QueueProcessingServiceBase"
    },
    "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base QueueProcessingEc2Service or QueueProcessingFargateService service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const queue: sqs.Queue;\ndeclare const secret: ecs.Secret;\ndeclare const vpc: ec2.Vpc;\n\nconst queueProcessingServiceBaseProps: ecs_patterns.QueueProcessingServiceBaseProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  capacityProviderStrategies: [{\n    capacityProvider: 'capacityProvider',\n\n    // the properties below are optional\n    base: 123,\n    weight: 123,\n  }],\n  circuitBreaker: {\n    rollback: false,\n  },\n  cluster: cluster,\n  command: ['command'],\n  deploymentController: {\n    type: ecs.DeploymentControllerType.ECS,\n  },\n  desiredTaskCount: 123,\n  enableECSManagedTags: false,\n  enableLogging: false,\n  environment: {\n    environmentKey: 'environment',\n  },\n  family: 'family',\n  logDriver: logDriver,\n  maxHealthyPercent: 123,\n  maxReceiveCount: 123,\n  maxScalingCapacity: 123,\n  minHealthyPercent: 123,\n  minScalingCapacity: 123,\n  propagateTags: ecs.PropagatedTagSource.SERVICE,\n  queue: queue,\n  retentionPeriod: cdk.Duration.minutes(30),\n  scalingSteps: [{\n    change: 123,\n\n    // the properties below are optional\n    lower: 123,\n    upper: 123,\n  }],\n  secrets: {\n    secretsKey: secret,\n  },\n  serviceName: 'serviceName',\n  visibilityTimeout: cdk.Duration.minutes(30),\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.QueueProcessingServiceBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/queue-processing-service-base.ts",
        "line": 19
      },
      "name": "QueueProcessingServiceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- undefined",
            "stability": "stable",
            "summary": "A list of Capacity Provider strategies used to place a service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 217
          },
          "name": "capacityProviderStrategies",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.CapacityProviderStrategy"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- disabled",
            "remarks": "If this property is defined, circuit breaker will be implicitly\nenabled.",
            "stability": "stable",
            "summary": "Whether to enable the deployment circuit breaker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 209
          },
          "name": "circuitBreaker",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentCircuitBreaker"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 33
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CMD value built into container image.",
            "remarks": "If you provide a shell command as a single string, you have to quote command-line arguments.",
            "stability": "stable",
            "summary": "The command that is passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 55
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Rolling update (ECS)",
            "remarks": "For more information, see\n[Amazon ECS Deployment Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)",
            "stability": "stable",
            "summary": "Specifies which deployment controller to use for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 202
          },
          "name": "deploymentController",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.DeploymentController"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is 1;\nif true, the minScalingCapacity is 1 for all new services and uses the existing services desired count\nwhen updating an existing service.",
            "deprecated": "- Use `minScalingCapacity` or a literal object instead.",
            "stability": "deprecated",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 65
          },
          "name": "desiredTaskCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "For more information, see\n[Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)",
            "stability": "stable",
            "summary": "Specifies whether to enable Amazon ECS managed tags for the tasks within the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 169
          },
          "name": "enableECSManagedTags",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Flag to indicate whether to enable logging."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 72
          },
          "name": "enableLogging",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'QUEUE_NAME: queue.queueName'",
            "remarks": "The variable `QUEUE_NAME` with value `queue.queueName` will\nalways be passed.",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 82
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Automatically generated name.",
            "remarks": "A family groups multiple versions of a task definition.",
            "stability": "stable",
            "summary": "The name of a family that the task definition is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 176
          },
          "name": "family",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 46
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 153
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default from underlying service.",
            "stability": "stable",
            "summary": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 185
          },
          "name": "maxHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "remarks": "When this value is exceeded for a message the message will be automatically sent to the Dead Letter Queue.",
            "stability": "stable",
            "summary": "The maximum number of times that a message can be received by consumers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 107
          },
          "name": "maxReceiveCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is (desiredTaskCount * 2); if true, the default is 2.",
            "stability": "stable",
            "summary": "Maximum capacity to scale to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 129
          },
          "name": "maxScalingCapacity",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- default from underlying service.",
            "stability": "stable",
            "summary": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 194
          },
          "name": "minHealthyPercent",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- If the feature flag, ECS_REMOVE_DEFAULT_DESIRED_COUNT is false, the default is the desiredTaskCount; if true, the default is 1.",
            "stability": "stable",
            "summary": "Minimum capacity to scale to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 136
          },
          "name": "minScalingCapacity",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Tags can only be propagated to the tasks within the service during service creation.",
            "stability": "stable",
            "summary": "Specifies whether to propagate the tags from the task definition or the service to the tasks in the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 161
          },
          "name": "propagateTags",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.PropagatedTagSource"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'SQSQueue with CloudFormation-generated name'",
            "remarks": "If specified and this is a FIFO queue, the queue name must end in the string '.fifo'. See\n[CreateQueue](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_CreateQueue.html)",
            "stability": "stable",
            "summary": "A queue for which to process items from."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 99
          },
          "name": "queue",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-sqs.IQueue"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.days(14)",
            "stability": "stable",
            "summary": "The number of seconds that Dead Letter Queue retains a message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 122
          },
          "name": "retentionPeriod",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "[{ upper: 0, change: -1 },{ lower: 100, change: +1 },{ lower: 500, change: +5 }]",
            "remarks": "Maps a range of metric values to a particular scaling behavior. See\n[Simple and Step Scaling Policies for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html)",
            "stability": "stable",
            "summary": "The intervals for scaling based on the SQS queue's ApproximateNumberOfMessagesVisible metric."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 146
          },
          "name": "scalingSteps",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-applicationautoscaling.ScalingInterval"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secret to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 89
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- CloudFormation-generated name.",
            "stability": "stable",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 25
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(30)",
            "remarks": "After dequeuing, the processor has this much time to handle the message and delete it from the queue\nbefore it becomes visible again for dequeueing by another processor. Values must be between 0 and (12 hours).",
            "stability": "stable",
            "summary": "Timeout of processing a single message."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 115
          },
          "name": "visibilityTimeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/queue-processing-service-base.ts",
            "line": 41
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/queue-processing-service-base:QueueProcessingServiceBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBase",
      "docs": {
        "example": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
        "stability": "stable",
        "summary": "A scheduled EC2 task that will be initiated off of CloudWatch Events."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2Task",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ScheduledEc2Task class."
        },
        "locationInModule": {
          "filename": "lib/ecs/scheduled-ecs-task.ts",
          "line": 97
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ecs/scheduled-ecs-task.ts",
        "line": 82
      },
      "name": "ScheduledEc2Task",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The ECS task in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 92
          },
          "name": "task",
          "type": {
            "fqn": "@aws-cdk/aws-events-targets.EcsTask"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The EC2 task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 87
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/scheduled-ecs-task:ScheduledEc2Task"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskDefinitionOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the ScheduledEc2Task using a task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const ec2TaskDefinition: ecs.Ec2TaskDefinition;\n\nconst scheduledEc2TaskDefinitionOptions: ecs_patterns.ScheduledEc2TaskDefinitionOptions = {\n  taskDefinition: ec2TaskDefinition,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskDefinitionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/scheduled-ecs-task.ts",
        "line": 68
      },
      "name": "ScheduledEc2TaskDefinitionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. One of image or taskDefinition must be specified."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 76
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.Ec2TaskDefinition"
          }
        }
      ],
      "symbolId": "lib/ecs/scheduled-ecs-task:ScheduledEc2TaskDefinitionOptions"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
        "stability": "stable",
        "summary": "The properties for the ScheduledEc2Task using an image."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/scheduled-ecs-task.ts",
        "line": 30
      },
      "name": "ScheduledEc2TaskImageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "The minimum number of CPU units to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 36
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory limit.",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The hard limit (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 48
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No memory reserved.",
            "remarks": "When system memory is under contention, Docker attempts to keep the\ncontainer memory within the limit. If the container requires more memory,\nit can consume up to the value specified by the Memory property or all of\nthe available memory on the container instance—whichever comes first.\n\nAt least one of memoryLimitMiB and memoryReservationMiB is required for non-Fargate services.",
            "stability": "stable",
            "summary": "The soft limit (in MiB) of memory to reserve for the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 62
          },
          "name": "memoryReservationMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ecs/scheduled-ecs-task:ScheduledEc2TaskImageOptions"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "// Instantiate an Amazon EC2 Task to run at a scheduled interval\ndeclare const cluster: ecs.Cluster;\nconst ecsScheduledTask = new ecsPatterns.ScheduledEc2Task(this, 'ScheduledTask', {\n  cluster,\n  scheduledEc2TaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 256,\n    environment: { name: 'TRIGGER', value: 'CloudWatch Events' },\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  enabled: true,\n  ruleName: 'sample-scheduled-task-rule',\n});",
        "stability": "stable",
        "summary": "The properties for the ScheduledEc2Task task."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ecs/scheduled-ecs-task.ts",
        "line": 9
      },
      "name": "ScheduledEc2TaskProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "ScheduledEc2TaskDefinitionOptions or ScheduledEc2TaskImageOptions must be defined, but not both.",
            "stability": "stable",
            "summary": "The properties to define if using an existing TaskDefinition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 16
          },
          "name": "scheduledEc2TaskDefinitionOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskDefinitionOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "ScheduledEc2TaskDefinitionOptions or ScheduledEc2TaskImageOptions must be defined, but not both.",
            "stability": "stable",
            "summary": "The properties to define if the construct is to create a TaskDefinition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ecs/scheduled-ecs-task.ts",
            "line": 24
          },
          "name": "scheduledEc2TaskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledEc2TaskImageOptions"
          }
        }
      ],
      "symbolId": "lib/ecs/scheduled-ecs-task:ScheduledEc2TaskProps"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBase",
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
        "stability": "stable",
        "summary": "A scheduled Fargate task that will be initiated off of CloudWatch Events."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTask",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ScheduledFargateTask class."
        },
        "locationInModule": {
          "filename": "lib/fargate/scheduled-fargate-task.ts",
          "line": 105
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fargate/scheduled-fargate-task.ts",
        "line": 91
      },
      "name": "ScheduledFargateTask",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The ECS task in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 100
          },
          "name": "task",
          "type": {
            "fqn": "@aws-cdk/aws-events-targets.EcsTask"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Fargate task definition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 95
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/scheduled-fargate-task:ScheduledFargateTask"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskDefinitionOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the ScheduledFargateTask using a task definition.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const fargateTaskDefinition: ecs.FargateTaskDefinition;\n\nconst scheduledFargateTaskDefinitionOptions: ecs_patterns.ScheduledFargateTaskDefinitionOptions = {\n  taskDefinition: fargateTaskDefinition,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskDefinitionOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/scheduled-fargate-task.ts",
        "line": 77
      },
      "name": "ScheduledFargateTaskDefinitionOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "[disable-awslint:ref-via-interface]",
            "stability": "stable",
            "summary": "The task definition to use for tasks in the service. Image or taskDefinition must be specified, but not both."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 85
          },
          "name": "taskDefinition",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargateTaskDefinition"
          }
        }
      ],
      "symbolId": "lib/fargate/scheduled-fargate-task:ScheduledFargateTaskDefinitionOptions"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
        "stability": "stable",
        "summary": "The properties for the ScheduledFargateTask using an image."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/scheduled-fargate-task.ts",
        "line": 41
      },
      "name": "ScheduledFargateTaskImageOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "256",
            "remarks": "Valid values, which determines your range of valid values for the memory parameter:\n\n256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB\n\n512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB\n\n1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB\n\n2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments\n\n4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments\n\nThis default is set in the underlying FargateTaskDefinition construct.",
            "stability": "stable",
            "summary": "The number of cpu units used by the task."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 61
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "512",
            "remarks": "If your container attempts to exceed the allocated memory, the container\nis terminated.",
            "stability": "stable",
            "summary": "The hard limit (in MiB) of memory to present to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 71
          },
          "name": "memoryLimitMiB",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/fargate/scheduled-fargate-task:ScheduledFargateTaskImageOptions"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "example": "declare const cluster: ecs.Cluster;\nconst scheduledFargateTask = new ecsPatterns.ScheduledFargateTask(this, 'ScheduledFargateTask', {\n  cluster,\n  scheduledFargateTaskImageOptions: {\n    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n    memoryLimitMiB: 512,\n  },\n  schedule: appscaling.Schedule.expression('rate(1 minute)'),\n  platformVersion: ecs.FargatePlatformVersion.LATEST,\n});",
        "stability": "stable",
        "summary": "The properties for the ScheduledFargateTask task."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskProps",
      "interfaces": [
        "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/fargate/scheduled-fargate-task.ts",
        "line": 9
      },
      "name": "ScheduledFargateTaskProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "Latest",
            "remarks": "If one is not specified, the LATEST platform version is used by default. For more information, see\n[AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)\nin the Amazon Elastic Container Service Developer Guide.",
            "stability": "stable",
            "summary": "The platform version on which to run your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 35
          },
          "name": "platformVersion",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.FargatePlatformVersion"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "ScheduledFargateTaskDefinitionOptions or ScheduledFargateTaskImageOptions must be defined, but not both.",
            "stability": "stable",
            "summary": "The properties to define if using an existing TaskDefinition in this construct."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 16
          },
          "name": "scheduledFargateTaskDefinitionOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskDefinitionOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "ScheduledFargateTaskDefinitionOptions or ScheduledFargateTaskImageOptions must be defined, but not both.",
            "stability": "stable",
            "summary": "The properties to define if the construct is to create a TaskDefinition."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fargate/scheduled-fargate-task.ts",
            "line": 24
          },
          "name": "scheduledFargateTaskImageOptions",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledFargateTaskImageOptions"
          }
        }
      ],
      "symbolId": "lib/fargate/scheduled-fargate-task:ScheduledFargateTaskProps"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledTaskBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "stable",
        "summary": "The base class for ScheduledEc2Task and ScheduledFargateTask tasks."
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBase",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Constructs a new instance of the ScheduledTaskBase class."
        },
        "locationInModule": {
          "filename": "lib/base/scheduled-task-base.ts",
          "line": 156
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/base/scheduled-task-base.ts",
        "line": 122
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Adds task as a target of the scheduled event rule."
          },
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 200
          },
          "name": "addTaskAsTarget",
          "parameters": [
            {
              "docs": {
                "summary": "the EcsTask to add to the event rule."
              },
              "name": "ecsTaskTarget",
              "type": {
                "fqn": "@aws-cdk/aws-events-targets.EcsTask"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create an ECS task using the task definition provided and add it to the scheduled event rule."
          },
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 180
          },
          "name": "addTaskDefinitionToEventTarget",
          "parameters": [
            {
              "docs": {
                "summary": "the TaskDefinition to add to the event rule."
              },
              "name": "taskDefinition",
              "type": {
                "fqn": "@aws-cdk/aws-ecs.TaskDefinition"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-events-targets.EcsTask"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Create an AWS Log Driver with the provided streamPrefix."
          },
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 219
          },
          "name": "createAWSLogDriver",
          "parameters": [
            {
              "docs": {
                "summary": "the Cloudwatch logging prefix."
              },
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.AwsLogDriver"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Returns the default cluster."
          },
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 207
          },
          "name": "getDefaultCluster",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "vpc",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-ec2.IVpc"
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-ecs.Cluster"
            }
          }
        }
      ],
      "name": "ScheduledTaskBase",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 126
          },
          "name": "cluster",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "docs": {
            "remarks": "The minimum value is 1",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 132
          },
          "name": "desiredTaskCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The CloudWatch Events rule for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 146
          },
          "name": "eventRule",
          "type": {
            "fqn": "@aws-cdk/aws-events.Rule"
          }
        },
        {
          "docs": {
            "default": "Private subnets",
            "remarks": "(Only applicable in case the TaskDefinition is configured for AwsVpc networking)",
            "stability": "stable",
            "summary": "In what subnets to place the task's ENIs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 141
          },
          "name": "subnetSelection",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/base/scheduled-task-base:ScheduledTaskBase"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "The properties for the base ScheduledEc2Task or ScheduledFargateTask task.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const cluster: ecs.Cluster;\ndeclare const schedule: appscaling.Schedule;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n\nconst scheduledTaskBaseProps: ecs_patterns.ScheduledTaskBaseProps = {\n  schedule: schedule,\n\n  // the properties below are optional\n  cluster: cluster,\n  desiredTaskCount: 123,\n  enabled: false,\n  ruleName: 'ruleName',\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskBaseProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scheduled-task-base.ts",
        "line": 16
      },
      "name": "ScheduledTaskBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- create a new cluster; if both cluster and vpc are omitted, a new VPC will be created for you.",
            "remarks": "If a cluster is specified, the vpc construct should be omitted. Alternatively, you can omit both cluster and vpc.",
            "stability": "stable",
            "summary": "The name of the cluster that hosts the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 23
          },
          "name": "cluster",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ICluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "The desired number of instantiations of the task definition to keep running on the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 61
          },
          "name": "desiredTaskCount",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "stability": "stable",
            "summary": "Indicates whether the rule is enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 46
          },
          "name": "enabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AWS CloudFormation generates a unique physical ID and uses that ID\nfor the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).",
            "stability": "stable",
            "summary": "A name for the rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 54
          },
          "name": "ruleName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For more information, see\n[Schedule Expression Syntax for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html)\nin the Amazon CloudWatch User Guide.",
            "stability": "stable",
            "summary": "The schedule or rate (frequency) that determines when CloudWatch Events runs the rule."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 39
          },
          "name": "schedule",
          "type": {
            "fqn": "@aws-cdk/aws-applicationautoscaling.Schedule"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new security group will be created.",
            "stability": "stable",
            "summary": "Existing security groups to use for your service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 77
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Private subnets",
            "remarks": "(Only applicable in case the TaskDefinition is configured for AwsVpc networking)",
            "stability": "stable",
            "summary": "In what subnets to place the task's ENIs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 70
          },
          "name": "subnetSelection",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.SubnetSelection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- uses the VPC defined in the cluster or creates a new VPC.",
            "remarks": "If a vpc is specified, the cluster construct should be omitted. Alternatively, you can omit both vpc and cluster.",
            "stability": "stable",
            "summary": "The VPC where the container instances will be launched or the elastic network interfaces (ENIs) will be deployed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 31
          },
          "name": "vpc",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/base/scheduled-task-base:ScheduledTaskBaseProps"
    },
    "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps": {
      "assembly": "@aws-cdk/aws-ecs-patterns",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as ecs_patterns from '@aws-cdk/aws-ecs-patterns';\n\ndeclare const containerImage: ecs.ContainerImage;\ndeclare const logDriver: ecs.LogDriver;\ndeclare const secret: ecs.Secret;\n\nconst scheduledTaskImageProps: ecs_patterns.ScheduledTaskImageProps = {\n  image: containerImage,\n\n  // the properties below are optional\n  command: ['command'],\n  environment: {\n    environmentKey: 'environment',\n  },\n  logDriver: logDriver,\n  secrets: {\n    secretsKey: secret,\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-ecs-patterns.ScheduledTaskImageProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/base/scheduled-task-base.ts",
        "line": 80
      },
      "name": "ScheduledTaskImageProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- CMD value built into container image.",
            "remarks": "If you provide a shell command as a single string, you have to quote command-line arguments.",
            "stability": "stable",
            "summary": "The command that is passed to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 95
          },
          "name": "command",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "The environment variables to pass to the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 102
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "remarks": "Image or taskDefinition must be specified, but not both.",
            "stability": "stable",
            "summary": "The image used to start a container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 86
          },
          "name": "image",
          "type": {
            "fqn": "@aws-cdk/aws-ecs.ContainerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- AwsLogDriver if enableLogging is true",
            "stability": "stable",
            "summary": "The log driver to use."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 116
          },
          "name": "logDriver",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-ecs.LogDriver"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No secret environment variables.",
            "stability": "stable",
            "summary": "The secret to expose to the container as an environment variable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/base/scheduled-task-base.ts",
            "line": 109
          },
          "name": "secrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-ecs.Secret"
              },
              "kind": "map"
            }
          }
        }
      ],
      "symbolId": "lib/base/scheduled-task-base:ScheduledTaskImageProps"
    }
  },
  "version": "1.137.0",
  "fingerprint": "**********"
}
