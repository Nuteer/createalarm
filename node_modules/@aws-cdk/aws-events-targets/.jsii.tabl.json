{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "b91255d5dacd9a077151306da4c6e78d76ba924b6a4718230c727b46b33194a8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 49
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "eab716e6eec9dfde4c884d5695e4734068e81d9eb286c8a7ccdafb49a46aa9b4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\",\n    log_group_name=\"MyLogGroup\"\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nrule.add_target(targets.CloudWatchLogGroup(log_group))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\", new LogGroupProps {\n    LogGroupName = \"MyLogGroup\"\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nrule.AddTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = LogGroup.Builder.create(this, \"MyLogGroup\")\n        .logGroupName(\"MyLogGroup\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nrule.addTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 80
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.CloudWatchLogGroup",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a9e85dd6413ea1c5d60f859b544b48573c5e05746e402d9da1c2a3d72d3abed4"
    },
    "86801cd5a668214710852d9dfd01964f73ad5a7ed3720dc50461df769e679b64": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.Repository(self, \"MyRepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.Queue(self, \"DeadLetterQueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repo = new Repository(this, \"MyRepo\", new RepositoryProps {\n    RepositoryName = \"aws-cdk-codebuild-events\"\n});\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repo })\n});\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project, new CodeBuildProjectProps {\n        DeadLetterQueue = deadLetterQueue\n    }),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repo = Repository.Builder.create(this, \"MyRepo\")\n        .repositoryName(\"aws-cdk-codebuild-events\")\n        .build();\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repo).build()))\n        .build();\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(CodeBuildProject.Builder.create(project)\n                .deadLetterQueue(deadLetterQueue)\n                .build())\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 104
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.CodeBuildProjectProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 5,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14e94f9b5d0700ad9c97db585b30e39d7776e6afc16823d548fcf80ae2b10dde"
    },
    "3dd6aba987ff4bb7dc6238a7a049f08410eb630454ceaad3d592b3310a9776f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codepipeline as codepipeline\n\n\npipeline = codepipeline.Pipeline(self, \"Pipeline\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 hour)\")\n)\n\nrule.add_target(targets.CodePipeline(pipeline))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodePipeline;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 hour)\")\n});\n\nrule.AddTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codepipeline.*;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 hour)\"))\n        .build();\n\nrule.addTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "$": {
          "source": "import * as codepipeline from '@aws-cdk/aws-codepipeline';\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 hour)'),\n});\n\nrule.addTarget(new targets.CodePipeline(pipeline));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 133
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IPipeline",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-events-targets.CodePipeline",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 hour)'),\n});\n\nrule.addTarget(new targets.CodePipeline(pipeline));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "104": 2,
        "193": 1,
        "194": 6,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "8aa49d7e3ee326ea55e4d2b73ffead024769d2c6eb233f7d38ffda3b28e58f43"
    },
    "754832db0ff761f53d305c20ed4dbed3a54b74c8ef0a8dc053a5d02ee231bb3e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10))),\n    role=role\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) }),\n    Role = role\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .role(role)\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 155
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 47,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e31ea2a6c26e19107ff15745d0cd4830ffedba6d875ca952aa22de4fa2389e31"
    },
    "96ffc46af48e78bc4d9c862a2a6582b38ccda25e09344c3ac790d113600ce375": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 189
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "4ac2b9b4a7c9d46f622d38eebe6c3e321e858bfe90c95ed66e645bd50f8ed0ff"
    },
    "f0f38dc1d557a44e68151372caadfe6b4ab5c1e7948233517ef280bc87cc399d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "878d2c08fe393f51edccf82ec27512eade0bcd64dbfa375b88e9b8516658214e"
    },
    "60c6f5c129ee82ec279fd4f27ef6be5001a1646f908c504a1c585dda76e0f3eb": {
      "translations": {
        "python": {
          "source": "rule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 minute)\")\n)\n\nrule.add_target(targets.EventBus(\n    events.EventBus.from_event_bus_arn(self, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")))",
          "version": "1"
        },
        "csharp": {
          "source": "Rule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 minute)\")\n});\n\nrule.AddTarget(new EventBus(EventBus.FromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "java": {
          "source": "Rule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .build();\n\nrule.addTarget(new EventBus(EventBus.fromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "$": {
          "source": "const rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-events-targets"
        },
        "field": {
          "field": "markdown",
          "line": 276
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.EventBus",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "e3068e50af3e719344496b4a52ee94fd962496523cac473f1c5f707d3bf632f6"
    },
    "7025127d867883941de7ea08a9fac9fc38cbfd5cf4bb6708dfd14575f29dc45e": {
      "translations": {
        "python": {
          "source": "# put to a Kinesis stream every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.KinesisStream(stream))",
          "version": "1"
        },
        "csharp": {
          "source": "// put to a Kinesis stream every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new KinesisStream(stream) });",
          "version": "1"
        },
        "java": {
          "source": "// put to a Kinesis stream every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new KinesisStream(stream)).build());",
          "version": "1"
        },
        "$": {
          "source": "  // put to a Kinesis stream every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.KinesisStream(stream) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.KinesisStream"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.KinesisStream",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-kinesis.IStream"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const stream = new kinesis.Stream(this, 'MyStream');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // put to a Kinesis stream every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.KinesisStream(stream) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "5e15a06059675c00c27bddc5afa6c67376d1b6a84dcda5c51775547a33562bd9"
    },
    "cc7d2e424adae83f3f527eac0e480d1c938f23579070f626d79e82e42dfe2fa9": {
      "translations": {
        "python": {
          "source": "# publish to an SNS topic every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.SnsTopic(topic))",
          "version": "1"
        },
        "csharp": {
          "source": "// publish to an SNS topic every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new SnsTopic(topic) });",
          "version": "1"
        },
        "java": {
          "source": "// publish to an SNS topic every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new SnsTopic(topic)).build());",
          "version": "1"
        },
        "$": {
          "source": "  // publish to an SNS topic every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SnsTopic(topic) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SnsTopic"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const topic = new sns.Topic(this, 'MyTopic');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // publish to an SNS topic every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SnsTopic(topic) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "d373e3901557161183a2f896312ddaf11b7de729d490fd78c62cb9f8698370fe"
    },
    "b9c074dfaa7888e319311815d3ae3bdef26b1fb54d4624f96dcf6d8ab8fa89d6": {
      "translations": {
        "python": {
          "source": "# publish to an SQS queue every time code is committed\n# to a CodeCommit repository\nrepository.on_commit(\"onCommit\", target=targets.SqsQueue(queue))",
          "version": "1"
        },
        "csharp": {
          "source": "// publish to an SQS queue every time code is committed\n// to a CodeCommit repository\nrepository.OnCommit(\"onCommit\", new OnCommitOptions { Target = new SqsQueue(queue) });",
          "version": "1"
        },
        "java": {
          "source": "// publish to an SQS queue every time code is committed\n// to a CodeCommit repository\nrepository.onCommit(\"onCommit\", OnCommitOptions.builder().target(new SqsQueue(queue)).build());",
          "version": "1"
        },
        "$": {
          "source": "  // publish to an SQS queue every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SqsQueue(queue) });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SqsQueue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-events-targets.SqsQueue",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-sqs.IQueue"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const repository = new codecommit.Repository(this, 'MyRepo', {\n      repositoryName: 'aws-cdk-events',\n    });\n\n    const queue = new sqs.Queue(this, 'MyQueue');\n\n    // Code snippet begins after !show marker below\n/// !show\n  // publish to an SQS queue every time code is committed\n  // to a CodeCommit repository\n  repository.onCommit('onCommit', { target: new targets.SqsQueue(queue) });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "f3586b71cd9f445724544134685802c3ba7ea072b5738660c8699bdc8d69e951"
    },
    "1dbdab4b70ef2ba70a7c27462755948b62776bff7e17476c9d5072b63dd43224": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiGateway"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "878d2c08fe393f51edccf82ec27512eade0bcd64dbfa375b88e9b8516658214e"
    },
    "8ae1424e785363d45c0609d4913858c60443f101bf21fd32eb738c0d5e7ca396": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_apigateway as api\nimport aws_cdk.aws_lambda as lambda_\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\nfn = lambda_.Function(self, \"MyFunc\",\n    handler=\"index.handler\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    code=lambda_.Code.from_inline(\"exports.handler = e => {}\")\n)\n\nrest_api = api.LambdaRestApi(self, \"MyRestAPI\", handler=fn)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrule.add_target(\n    targets.ApiGateway(rest_api,\n        path=\"/*/test\",\n        method=\"GET\",\n        stage=\"prod\",\n        path_parameter_values=[\"path-value\"],\n        header_parameters={\n            \"Header1\": \"header1\"\n        },\n        query_string_parameters={\n            \"QueryParam1\": \"query-param-1\"\n        },\n        dead_letter_queue=dlq\n    ))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGateway;\nusing Amazon.CDK.AWS.Lambda;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Handler = \"index.handler\",\n    Runtime = Runtime.NODEJS_12_X,\n    Code = Code.FromInline(\"exports.handler = e => {}\")\n});\n\nLambdaRestApi restApi = new LambdaRestApi(this, \"MyRestAPI\", new LambdaRestApiProps { Handler = fn });\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.AddTarget(\nnew ApiGateway(restApi, new ApiGatewayProps {\n    Path = \"/*/test\",\n    Method = \"GET\",\n    Stage = \"prod\",\n    PathParameterValues = new [] { \"path-value\" },\n    HeaderParameters = new Dictionary<string, string> {\n        { \"Header1\", \"header1\" }\n    },\n    QueryStringParameters = new Dictionary<string, string> {\n        { \"QueryParam1\", \"query-param-1\" }\n    },\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigateway.*;\nimport software.amazon.awscdk.services.lambda.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .handler(\"index.handler\")\n        .runtime(Runtime.NODEJS_12_X)\n        .code(Code.fromInline(\"exports.handler = e => {}\"))\n        .build();\n\nLambdaRestApi restApi = LambdaRestApi.Builder.create(this, \"MyRestAPI\").handler(fn).build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nrule.addTarget(\nApiGateway.Builder.create(restApi)\n        .path(\"/*/test\")\n        .method(\"GET\")\n        .stage(\"prod\")\n        .pathParameterValues(List.of(\"path-value\"))\n        .headerParameters(Map.of(\n                \"Header1\", \"header1\"))\n        .queryStringParameters(Map.of(\n                \"QueryParam1\", \"query-param-1\"))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.ApiGatewayProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigateway.LambdaRestApi",
        "@aws-cdk/aws-apigateway.LambdaRestApiProps",
        "@aws-cdk/aws-apigateway.RestApi",
        "@aws-cdk/aws-events-targets.ApiGateway",
        "@aws-cdk/aws-events-targets.ApiGatewayProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as api from '@aws-cdk/aws-apigateway';\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst fn = new lambda.Function( this, 'MyFunc', {\n  handler: 'index.handler',\n  runtime: lambda.Runtime.NODEJS_12_X,\n  code: lambda.Code.fromInline( 'exports.handler = e => {}' ),\n} );\n\nconst restApi = new api.LambdaRestApi( this, 'MyRestAPI', { handler: fn } );\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nrule.addTarget(\n  new targets.ApiGateway( restApi, {\n    path: '/*/test',\n    method: 'GET',\n    stage:  'prod',\n    pathParameterValues: ['path-value'],\n    headerParameters: {\n      Header1: 'header1',\n    },\n    queryStringParameters: {\n      QueryParam1: 'query-param-1',\n    },\n    deadLetterQueue: dlq\n  } ),\n)\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 14,
        "75": 47,
        "104": 4,
        "192": 1,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "878d2c08fe393f51edccf82ec27512eade0bcd64dbfa375b88e9b8516658214e"
    },
    "adbb7afab35ae4fcc0d20a53e6f15cdca5cda6a1ea4b51e720cb1e7b578107f6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.BatchJob"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "4ac2b9b4a7c9d46f622d38eebe6c3e321e858bfe90c95ed66e645bd50f8ed0ff"
    },
    "e680b34913b17226ff27a612ef23b15ab48db7aaa4f8e6df9d1b7ede0d4ed552": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_batch as batch\nfrom aws_cdk.aws_ecs import ContainerImage\n\n\njob_queue = batch.JobQueue(self, \"MyQueue\",\n    compute_environments=[batch.JobQueueComputeEnvironment(\n        compute_environment=batch.ComputeEnvironment(self, \"ComputeEnvironment\",\n            managed=False\n        ),\n        order=1\n    )\n    ]\n)\n\njob_definition = batch.JobDefinition(self, \"MyJob\",\n    container=batch.JobDefinitionContainer(\n        image=ContainerImage.from_registry(\"test-repo\")\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.hours(1))\n)\n\nrule.add_target(targets.BatchJob(job_queue.job_queue_arn, job_queue, job_definition.job_definition_arn, job_definition,\n    dead_letter_queue=queue,\n    event=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    retry_attempts=2,\n    max_event_age=cdk.Duration.hours(2)\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Batch;\nusing Amazon.CDK.AWS.ECS;\n\n\nJobQueue jobQueue = new JobQueue(this, \"MyQueue\", new JobQueueProps {\n    ComputeEnvironments = new [] { new JobQueueComputeEnvironment {\n        ComputeEnvironment = new ComputeEnvironment(this, \"ComputeEnvironment\", new ComputeEnvironmentProps {\n            Managed = false\n        }),\n        Order = 1\n    } }\n});\n\nJobDefinition jobDefinition = new JobDefinition(this, \"MyJob\", new JobDefinitionProps {\n    Container = new JobDefinitionContainer {\n        Image = ContainerImage.FromRegistry(\"test-repo\")\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Hours(1))\n});\n\nrule.AddTarget(new BatchJob(jobQueue.JobQueueArn, jobQueue, jobDefinition.JobDefinitionArn, jobDefinition, new BatchJobProps {\n    DeadLetterQueue = queue,\n    Event = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    RetryAttempts = 2,\n    MaxEventAge = Duration.Hours(2)\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.batch.*;\nimport software.amazon.awscdk.services.ecs.ContainerImage;\n\n\nJobQueue jobQueue = JobQueue.Builder.create(this, \"MyQueue\")\n        .computeEnvironments(List.of(JobQueueComputeEnvironment.builder()\n                .computeEnvironment(ComputeEnvironment.Builder.create(this, \"ComputeEnvironment\")\n                        .managed(false)\n                        .build())\n                .order(1)\n                .build()))\n        .build();\n\nJobDefinition jobDefinition = JobDefinition.Builder.create(this, \"MyJob\")\n        .container(JobDefinitionContainer.builder()\n                .image(ContainerImage.fromRegistry(\"test-repo\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.hours(1)))\n        .build();\n\nrule.addTarget(BatchJob.Builder.create(jobQueue.getJobQueueArn(), jobQueue, jobDefinition.getJobDefinitionArn(), jobDefinition)\n        .deadLetterQueue(queue)\n        .event(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .retryAttempts(2)\n        .maxEventAge(Duration.hours(2))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.BatchJobProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-batch.ComputeEnvironment",
        "@aws-cdk/aws-batch.ComputeEnvironmentProps",
        "@aws-cdk/aws-batch.IComputeEnvironment",
        "@aws-cdk/aws-batch.JobDefinition",
        "@aws-cdk/aws-batch.JobDefinition#jobDefinitionArn",
        "@aws-cdk/aws-batch.JobDefinitionContainer",
        "@aws-cdk/aws-batch.JobDefinitionProps",
        "@aws-cdk/aws-batch.JobQueue",
        "@aws-cdk/aws-batch.JobQueue#jobQueueArn",
        "@aws-cdk/aws-batch.JobQueueProps",
        "@aws-cdk/aws-ecs.ContainerImage",
        "@aws-cdk/aws-ecs.ContainerImage#fromRegistry",
        "@aws-cdk/aws-events-targets.BatchJob",
        "@aws-cdk/aws-events-targets.BatchJobProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours",
        "@aws-cdk/core.IConstruct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as batch from '@aws-cdk/aws-batch';\nimport { ContainerImage } from '@aws-cdk/aws-ecs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst jobQueue = new batch.JobQueue(this, 'MyQueue', {\n  computeEnvironments: [\n    {\n      computeEnvironment: new batch.ComputeEnvironment(this, 'ComputeEnvironment', {\n        managed: false,\n      }),\n      order: 1,\n    },\n  ],\n});\n\nconst jobDefinition = new batch.JobDefinition(this, 'MyJob', {\n  container: {\n    image: ContainerImage.fromRegistry('test-repo'),\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.hours(1)),\n});\n\nrule.addTarget(new targets.BatchJob(\n  jobQueue.jobQueueArn,\n  jobQueue,\n  jobDefinition.jobDefinitionArn,\n  jobDefinition, {\n    deadLetterQueue: queue,\n    event: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n    retryAttempts: 2,\n    maxEventAge: cdk.Duration.hours(2),\n  },\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 9,
        "75": 53,
        "91": 1,
        "104": 5,
        "192": 1,
        "193": 8,
        "194": 18,
        "196": 6,
        "197": 6,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "4ac2b9b4a7c9d46f622d38eebe6c3e321e858bfe90c95ed66e645bd50f8ed0ff"
    },
    "6db6c18b3555c03c3a8e22fef7119aa7bec932775676c445d2a341ac6f3d7a54": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_logs as logs\n\n\nlog_group = logs.LogGroup(self, \"MyLogGroup\",\n    log_group_name=\"MyLogGroup\"\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nrule.add_target(targets.CloudWatchLogGroup(log_group))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Logs;\n\n\nLogGroup logGroup = new LogGroup(this, \"MyLogGroup\", new LogGroupProps {\n    LogGroupName = \"MyLogGroup\"\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nrule.AddTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.logs.*;\n\n\nLogGroup logGroup = LogGroup.Builder.create(this, \"MyLogGroup\")\n        .logGroupName(\"MyLogGroup\")\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nrule.addTarget(new CloudWatchLogGroup(logGroup));",
          "version": "1"
        },
        "$": {
          "source": "import * as logs from '@aws-cdk/aws-logs';\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CloudWatchLogGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.CloudWatchLogGroup",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-logs.ILogGroup",
        "@aws-cdk/aws-logs.LogGroup",
        "@aws-cdk/aws-logs.LogGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as logs from '@aws-cdk/aws-logs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst logGroup = new logs.LogGroup(this, 'MyLogGroup', {\n  logGroupName: 'MyLogGroup',\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nrule.addTarget(new targets.CloudWatchLogGroup(logGroup));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a9e85dd6413ea1c5d60f859b544b48573c5e05746e402d9da1c2a3d72d3abed4"
    },
    "56901fafa3ec9dbdd33c9b27cd447f2e88b4f686de7322cf5854138873847c61": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.Repository(self, \"MyRepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.Queue(self, \"DeadLetterQueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repo = new Repository(this, \"MyRepo\", new RepositoryProps {\n    RepositoryName = \"aws-cdk-codebuild-events\"\n});\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repo })\n});\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project, new CodeBuildProjectProps {\n        DeadLetterQueue = deadLetterQueue\n    }),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repo = Repository.Builder.create(this, \"MyRepo\")\n        .repositoryName(\"aws-cdk-codebuild-events\")\n        .build();\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repo).build()))\n        .build();\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(CodeBuildProject.Builder.create(project)\n                .deadLetterQueue(deadLetterQueue)\n                .build())\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodeBuildProject"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.CodeBuildProjectProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 5,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14e94f9b5d0700ad9c97db585b30e39d7776e6afc16823d548fcf80ae2b10dde"
    },
    "59f7ccb81b851b55327fa032f7e045da59ef364e5a6e78e893617743e765b1a7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codecommit as codecommit\n\n\nrepo = codecommit.Repository(self, \"MyRepo\",\n    repository_name=\"aws-cdk-codebuild-events\"\n)\n\nproject = codebuild.Project(self, \"MyProject\",\n    source=codebuild.Source.code_commit(repository=repo)\n)\n\ndead_letter_queue = sqs.Queue(self, \"DeadLetterQueue\")\n\n# trigger a build when a commit is pushed to the repo\non_commit_rule = repo.on_commit(\"OnCommit\",\n    target=targets.CodeBuildProject(project,\n        dead_letter_queue=dead_letter_queue\n    ),\n    branches=[\"master\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodeCommit;\n\n\nRepository repo = new Repository(this, \"MyRepo\", new RepositoryProps {\n    RepositoryName = \"aws-cdk-codebuild-events\"\n});\n\nProject project = new Project(this, \"MyProject\", new ProjectProps {\n    Source = Source.CodeCommit(new CodeCommitSourceProps { Repository = repo })\n});\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.OnCommit(\"OnCommit\", new OnCommitOptions {\n    Target = new CodeBuildProject(project, new CodeBuildProjectProps {\n        DeadLetterQueue = deadLetterQueue\n    }),\n    Branches = new [] { \"master\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codecommit.*;\n\n\nRepository repo = Repository.Builder.create(this, \"MyRepo\")\n        .repositoryName(\"aws-cdk-codebuild-events\")\n        .build();\n\nProject project = Project.Builder.create(this, \"MyProject\")\n        .source(Source.codeCommit(CodeCommitSourceProps.builder().repository(repo).build()))\n        .build();\n\nQueue deadLetterQueue = new Queue(this, \"DeadLetterQueue\");\n\n// trigger a build when a commit is pushed to the repo\nRule onCommitRule = repo.onCommit(\"OnCommit\", OnCommitOptions.builder()\n        .target(CodeBuildProject.Builder.create(project)\n                .deadLetterQueue(deadLetterQueue)\n                .build())\n        .branches(List.of(\"master\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodeBuildProjectProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.CodeCommitSourceProps",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.ISource",
        "@aws-cdk/aws-codebuild.Project",
        "@aws-cdk/aws-codebuild.ProjectProps",
        "@aws-cdk/aws-codebuild.Source",
        "@aws-cdk/aws-codebuild.Source#codeCommit",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.OnCommitOptions",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-events-targets.CodeBuildProject",
        "@aws-cdk/aws-events-targets.CodeBuildProjectProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst repo = new codecommit.Repository(this, 'MyRepo', {\n  repositoryName: 'aws-cdk-codebuild-events',\n});\n\nconst project = new codebuild.Project(this, 'MyProject', {\n  source: codebuild.Source.codeCommit({ repository: repo }),\n});\n\nconst deadLetterQueue = new sqs.Queue(this, 'DeadLetterQueue');\n\n// trigger a build when a commit is pushed to the repo\nconst onCommitRule = repo.onCommit('OnCommit', {\n  target: new targets.CodeBuildProject(project, {\n    deadLetterQueue: deadLetterQueue,\n  }),\n  branches: ['master'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 28,
        "104": 3,
        "192": 1,
        "193": 5,
        "194": 7,
        "196": 2,
        "197": 4,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "14e94f9b5d0700ad9c97db585b30e39d7776e6afc16823d548fcf80ae2b10dde"
    },
    "d090bb4555abe0cb69f9db656dbb9382ab49b90171c7516c061faff8b5f51635": {
      "translations": {
        "python": {
          "source": "# A pipeline being used as a target for a CloudWatch event rule.\nimport aws_cdk.aws_events_targets as targets\nimport aws_cdk.aws_events as events\n\n# pipeline is of type Pipeline\n\n\n# kick off the pipeline every day\nrule = events.Rule(self, \"Daily\",\n    schedule=events.Schedule.rate(Duration.days(1))\n)\nrule.add_target(targets.CodePipeline(pipeline))",
          "version": "1"
        },
        "csharp": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.Events;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = new Rule(this, \"Daily\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Days(1))\n});\nrule.AddTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "java": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.events.*;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = Rule.Builder.create(this, \"Daily\")\n        .schedule(Schedule.rate(Duration.days(1)))\n        .build();\nrule.addTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "$": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\n\ndeclare const pipeline: codepipeline.Pipeline;\nrule.addTarget(new targets.CodePipeline(pipeline));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.CodePipeline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IPipeline",
        "@aws-cdk/aws-events-targets.CodePipeline",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const pipeline: codepipeline.Pipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\nrule.addTarget(new targets.CodePipeline(pipeline));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ddc3de371bbcd2269d45d82577f8c70a0d478ef2f4da3d6f9ec4c5dbff6bda24"
    },
    "e68c323ba9db0b5b493ddec540424da6fcc0f1be0790bd4405f5e7c38bf75e18": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# role is of type Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EcsTask"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ccb2f08773275c8f39e980fe2b46b2e17c2a26e79da3f05081f5623aa5528260"
    },
    "2f1c0af5b9b75e242054cdfd14bd1af1ad4cb5f39297e42bed1b294785077f45": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_events import Rule, Schedule\nfrom aws_cdk.aws_events_targets import EcsTask\nfrom aws_cdk.aws_ecs import Cluster, TaskDefinition\nfrom aws_cdk.aws_iam import Role\n\n# cluster is of type Cluster\n# task_definition is of type TaskDefinition\n# role is of type Role\n\n\necs_task_target = EcsTask(cluster=cluster, task_definition=task_definition, role=role)\n\nRule(self, \"ScheduleRule\",\n    schedule=Schedule.cron(minute=\"0\", hour=\"4\"),\n    targets=[ecs_task_target]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Events;\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.ECS;\nusing Amazon.CDK.AWS.IAM;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = new EcsTask(new EcsTaskProps { Cluster = cluster, TaskDefinition = taskDefinition, Role = role });\n\nnew Rule(this, \"ScheduleRule\", new RuleProps {\n    Schedule = Schedule.Cron(new CronOptions { Minute = \"0\", Hour = \"4\" }),\n    Targets = new [] { ecsTaskTarget }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.events.Rule;\nimport software.amazon.awscdk.services.events.Schedule;\nimport software.amazon.awscdk.services.events.targets.EcsTask;\nimport software.amazon.awscdk.services.ecs.Cluster;\nimport software.amazon.awscdk.services.ecs.TaskDefinition;\nimport software.amazon.awscdk.services.iam.Role;\n\nCluster cluster;\nTaskDefinition taskDefinition;\nRole role;\n\n\nEcsTask ecsTaskTarget = EcsTask.Builder.create().cluster(cluster).taskDefinition(taskDefinition).role(role).build();\n\nRule.Builder.create(this, \"ScheduleRule\")\n        .schedule(Schedule.cron(CronOptions.builder().minute(\"0\").hour(\"4\").build()))\n        .targets(List.of(ecsTaskTarget))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EcsTaskProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecs.ICluster",
        "@aws-cdk/aws-ecs.ITaskDefinition",
        "@aws-cdk/aws-events-targets.EcsTask",
        "@aws-cdk/aws-events-targets.EcsTaskProps",
        "@aws-cdk/aws-events.CronOptions",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#cron",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { Rule, Schedule } from '@aws-cdk/aws-events';\nimport { EcsTask } from '@aws-cdk/aws-events-targets';\nimport { Cluster, TaskDefinition } from '@aws-cdk/aws-ecs';\nimport { Role } from '@aws-cdk/aws-iam';\n\ndeclare const cluster: Cluster;\ndeclare const taskDefinition: TaskDefinition;\ndeclare const role: Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst ecsTaskTarget = new EcsTask({ cluster, taskDefinition, role });\n\nnew Rule(this, 'ScheduleRule', {\n schedule: Schedule.cron({ minute: '0', hour: '4' }),\n targets: [ecsTaskTarget],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 25,
        "104": 1,
        "130": 3,
        "169": 3,
        "192": 1,
        "193": 3,
        "194": 1,
        "196": 1,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 4,
        "255": 4,
        "257": 4,
        "258": 6,
        "281": 4,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "ccb2f08773275c8f39e980fe2b46b2e17c2a26e79da3f05081f5623aa5528260"
    },
    "07218d8631997ee46d9157c712630908d5829f4e1ed260472927189deadc4fd2": {
      "translations": {
        "python": {
          "source": "rule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.expression(\"rate(1 minute)\")\n)\n\nrule.add_target(targets.EventBus(\n    events.EventBus.from_event_bus_arn(self, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")))",
          "version": "1"
        },
        "csharp": {
          "source": "Rule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Expression(\"rate(1 minute)\")\n});\n\nrule.AddTarget(new EventBus(EventBus.FromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "java": {
          "source": "Rule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.expression(\"rate(1 minute)\"))\n        .build();\n\nrule.addTarget(new EventBus(EventBus.fromEventBusArn(this, \"External\", \"arn:aws:events:eu-west-1:999999999999:event-bus/test-bus\")));",
          "version": "1"
        },
        "$": {
          "source": "const rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.EventBus"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.EventBus",
        "@aws-cdk/aws-events.EventBus",
        "@aws-cdk/aws-events.EventBus#fromEventBusArn",
        "@aws-cdk/aws-events.IEventBus",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#expression"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.expression('rate(1 minute)'),\n});\n\nrule.addTarget(new targets.EventBus(\n  events.EventBus.fromEventBusArn(\n    this,\n    'External',\n    `arn:aws:events:eu-west-1:999999999999:event-bus/test-bus`,\n  ),\n));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "14": 1,
        "75": 14,
        "104": 2,
        "193": 1,
        "194": 7,
        "196": 3,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "e3068e50af3e719344496b4a52ee94fd962496523cac473f1c5f707d3bf632f6"
    },
    "c078e4e85e31eea3520a72229304687790aa5348a1d15dedce8ef14556e94b39": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.LambdaFunction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "63580aa2cc16e64f08d6b356649b340078ba226bb3863089d0788aae58d7ebbd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_lambda as lambda_\n\n\nfn = lambda_.Function(self, \"MyFunc\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_inline(\"exports.handler = handler.toString()\")\n)\n\nrule = events.Rule(self, \"rule\",\n    event_pattern=events.EventPattern(\n        source=[\"aws.ec2\"]\n    )\n)\n\nqueue = sqs.Queue(self, \"Queue\")\n\nrule.add_target(targets.LambdaFunction(fn,\n    dead_letter_queue=queue,  # Optional: add a dead letter queue\n    max_event_age=cdk.Duration.hours(2),  # Optional: set the maxEventAge retry policy\n    retry_attempts=2\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Lambda;\n\n\nFunction fn = new Function(this, \"MyFunc\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromInline(\"exports.handler = handler.toString()\")\n});\n\nRule rule = new Rule(this, \"rule\", new RuleProps {\n    EventPattern = new EventPattern {\n        Source = new [] { \"aws.ec2\" }\n    }\n});\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.AddTarget(new LambdaFunction(fn, new LambdaFunctionProps {\n    DeadLetterQueue = queue,  // Optional: add a dead letter queue\n    MaxEventAge = Duration.Hours(2),  // Optional: set the maxEventAge retry policy\n    RetryAttempts = 2\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.lambda.*;\n\n\nFunction fn = Function.Builder.create(this, \"MyFunc\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromInline(\"exports.handler = handler.toString()\"))\n        .build();\n\nRule rule = Rule.Builder.create(this, \"rule\")\n        .eventPattern(EventPattern.builder()\n                .source(List.of(\"aws.ec2\"))\n                .build())\n        .build();\n\nQueue queue = new Queue(this, \"Queue\");\n\nrule.addTarget(LambdaFunction.Builder.create(fn)\n        .deadLetterQueue(queue) // Optional: add a dead letter queue\n        .maxEventAge(Duration.hours(2)) // Optional: set the maxEventAge retry policy\n        .retryAttempts(2)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as lambda from '@aws-cdk/aws-lambda';\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.LambdaFunctionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.LambdaFunction",
        "@aws-cdk/aws-events-targets.LambdaFunctionProps",
        "@aws-cdk/aws-events.EventPattern",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as lambda from '@aws-cdk/aws-lambda';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst fn = new lambda.Function(this, 'MyFunc', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromInline(`exports.handler = handler.toString()`),\n});\n\nconst rule = new events.Rule(this, 'rule', {\n  eventPattern: {\n    source: [\"aws.ec2\"],\n  },\n});\n\nconst queue = new sqs.Queue(this, 'Queue');\n\nrule.addTarget(new targets.LambdaFunction(fn, {\n  deadLetterQueue: queue, // Optional: add a dead letter queue\n  maxEventAge: cdk.Duration.hours(2), // Optional: set the maxEventAge retry policy\n  retryAttempts: 2, // Optional: set the max number of retry attempts\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "14": 1,
        "75": 33,
        "104": 3,
        "192": 1,
        "193": 4,
        "194": 11,
        "196": 3,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "01de53eb843000ab93179c334e0c5f01fabc88f6a502f4b34d494f9b29966f2c"
    },
    "f96e06064e3ea63aaa9a078ea23c0f211bbfe58c638b0448834ae1d78d179e2a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10))),\n    role=role\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) }),\n    Role = role\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .role(role)\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SfnStateMachine"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 47,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e31ea2a6c26e19107ff15745d0cd4830ffedba6d875ca952aa22de4fa2389e31"
    },
    "8432d1d2cd4985ed62079af3c5fab603a831bc7bbad288b02a4ee0b6a150becb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\nimport aws_cdk.aws_stepfunctions as sfn\n\n\nrule = events.Rule(self, \"Rule\",\n    schedule=events.Schedule.rate(cdk.Duration.minutes(1))\n)\n\ndlq = sqs.Queue(self, \"DeadLetterQueue\")\n\nrole = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"events.amazonaws.com\")\n)\nstate_machine = sfn.StateMachine(self, \"SM\",\n    definition=sfn.Wait(self, \"Hello\", time=sfn.WaitTime.duration(cdk.Duration.seconds(10))),\n    role=role\n)\n\nrule.add_target(targets.SfnStateMachine(state_machine,\n    input=events.RuleTargetInput.from_object({\"SomeParam\": \"SomeValue\"}),\n    dead_letter_queue=dlq\n))",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.StepFunctions;\n\n\nRule rule = new Rule(this, \"Rule\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Minutes(1))\n});\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"events.amazonaws.com\")\n});\nStateMachine stateMachine = new StateMachine(this, \"SM\", new StateMachineProps {\n    Definition = new Wait(this, \"Hello\", new WaitProps { Time = WaitTime.Duration(Duration.Seconds(10)) }),\n    Role = role\n});\n\nrule.AddTarget(new SfnStateMachine(stateMachine, new SfnStateMachineProps {\n    Input = RuleTargetInput.FromObject(new Dictionary<string, string> { { \"SomeParam\", \"SomeValue\" } }),\n    DeadLetterQueue = dlq\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.stepfunctions.*;\n\n\nRule rule = Rule.Builder.create(this, \"Rule\")\n        .schedule(Schedule.rate(Duration.minutes(1)))\n        .build();\n\nQueue dlq = new Queue(this, \"DeadLetterQueue\");\n\nRole role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"events.amazonaws.com\"))\n        .build();\nStateMachine stateMachine = StateMachine.Builder.create(this, \"SM\")\n        .definition(Wait.Builder.create(this, \"Hello\").time(WaitTime.duration(Duration.seconds(10))).build())\n        .role(role)\n        .build();\n\nrule.addTarget(SfnStateMachine.Builder.create(stateMachine)\n        .input(RuleTargetInput.fromObject(Map.of(\"SomeParam\", \"SomeValue\")))\n        .deadLetterQueue(dlq)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SfnStateMachineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SfnStateMachine",
        "@aws-cdk/aws-events-targets.SfnStateMachineProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromObject",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-sqs.IQueue",
        "@aws-cdk/aws-sqs.Queue",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps",
        "@aws-cdk/aws-stepfunctions.Wait",
        "@aws-cdk/aws-stepfunctions.WaitProps",
        "@aws-cdk/aws-stepfunctions.WaitTime",
        "@aws-cdk/aws-stepfunctions.WaitTime#duration",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/core.Duration#seconds"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as sfn from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\n\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\nimport * as sqs from '@aws-cdk/aws-sqs';\nimport * as cdk from '@aws-cdk/core';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst rule = new events.Rule(this, 'Rule', {\n  schedule: events.Schedule.rate(cdk.Duration.minutes(1)),\n});\n\nconst dlq = new sqs.Queue(this, 'DeadLetterQueue');\n\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('events.amazonaws.com'),\n});\nconst stateMachine = new sfn.StateMachine(this, 'SM', {\n  definition: new sfn.Wait(this, 'Hello', { time: sfn.WaitTime.duration(cdk.Duration.seconds(10)) }),\n  role,\n});\n\nrule.addTarget(new targets.SfnStateMachine(stateMachine, {\n  input: events.RuleTargetInput.fromObject({ SomeParam: 'SomeValue' }),\n  deadLetterQueue: dlq,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 9,
        "75": 47,
        "104": 5,
        "193": 6,
        "194": 18,
        "196": 6,
        "197": 7,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "e31ea2a6c26e19107ff15745d0cd4830ffedba6d875ca952aa22de4fa2389e31"
    },
    "5d220ddcbe5aa9f0155e0b03a651434f62f756220725a582a4414aeb94a94a45": {
      "translations": {
        "python": {
          "source": "# on_commit_rule is of type Rule\n# topic is of type Topic\n\n\non_commit_rule.add_target(targets.SnsTopic(topic,\n    message=events.RuleTargetInput.from_text(f\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.AddTarget(new SnsTopic(topic, new SnsTopicProps {\n    Message = RuleTargetInput.FromText($\"A commit was pushed to the repository {codecommit.ReferenceEvent.repositoryName} on branch {codecommit.ReferenceEvent.referenceName}\")\n}));",
          "version": "1"
        },
        "java": {
          "source": "Rule onCommitRule;\nTopic topic;\n\n\nonCommitRule.addTarget(SnsTopic.Builder.create(topic)\n        .message(RuleTargetInput.fromText(String.format(\"A commit was pushed to the repository %s on branch %s\", ReferenceEvent.getRepositoryName(), ReferenceEvent.getReferenceName())))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-events-targets.SnsTopicProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-events-targets.SnsTopic",
        "@aws-cdk/aws-events-targets.SnsTopicProps",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleTargetInput",
        "@aws-cdk/aws-events.RuleTargetInput#fromText",
        "@aws-cdk/aws-sns.ITopic"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const onCommitRule: events.Rule;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack, Duration } from '@aws-cdk/core';\nimport * as events from '@aws-cdk/aws-events';\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as ecs from '@aws-cdk/aws-ecs';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nonCommitRule.addTarget(new targets.SnsTopic(topic, {\n  message: events.RuleTargetInput.fromText(\n    `A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`\n  )\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n\n",
      "syntaxKindCounter": {
        "15": 1,
        "16": 1,
        "17": 1,
        "75": 21,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 8,
        "196": 2,
        "197": 1,
        "211": 1,
        "221": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cd59e1ea8abe3917c3c05f3d8a4e12b6275c66039dd638271185a739309ba2ce"
    }
  }
}
