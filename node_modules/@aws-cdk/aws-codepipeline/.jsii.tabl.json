{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "5fac1b539d56a150905432607a7d469bca187a04d35044382be575dfcbb0f844": {
      "translations": {
        "python": {
          "source": "# Construct an empty Pipeline\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\")",
          "version": "1"
        },
        "csharp": {
          "source": "// Construct an empty Pipeline\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\");",
          "version": "1"
        },
        "java": {
          "source": "// Construct an empty Pipeline\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\");",
          "version": "1"
        },
        "$": {
          "source": "// Construct an empty Pipeline\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Construct an empty Pipeline\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 3,
        "104": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "e2e4eb71627d0d476bf341274ab3f4beebaa52682a8f8fb34fd6119842d5389c"
    },
    "44105e65d59a02b965c3e94a77a2d59a8f39d3143ec6ba2a6ce52a0088428e10": {
      "translations": {
        "python": {
          "source": "# Give the Pipeline a nice, human-readable name\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\",\n    pipeline_name=\"MyPipeline\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Give the Pipeline a nice, human-readable name\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\", new PipelineProps {\n    PipelineName = \"MyPipeline\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// Give the Pipeline a nice, human-readable name\nPipeline pipeline = Pipeline.Builder.create(this, \"MyFirstPipeline\")\n        .pipelineName(\"MyPipeline\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Give the Pipeline a nice, human-readable name\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  pipelineName: 'MyPipeline',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 25
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Give the Pipeline a nice, human-readable name\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  pipelineName: 'MyPipeline',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "ab11edfbf95194b81ec65247bc4c53f33a8e147b1ff6ea9c42512049e33ec0b1"
    },
    "f26a57d39a111e5b3350c5e50bf1238539097d28c75d05a9dfb34fe89b86f3a5": {
      "translations": {
        "python": {
          "source": "# Don't create Customer Master Keys\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\",\n    cross_account_keys=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Don't create Customer Master Keys\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\", new PipelineProps {\n    CrossAccountKeys = false\n});",
          "version": "1"
        },
        "java": {
          "source": "// Don't create Customer Master Keys\nPipeline pipeline = Pipeline.Builder.create(this, \"MyFirstPipeline\")\n        .crossAccountKeys(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Don't create Customer Master Keys\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  crossAccountKeys: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 42
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Don't create Customer Master Keys\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  crossAccountKeys: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "91": 1,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "ab11edfbf95194b81ec65247bc4c53f33a8e147b1ff6ea9c42512049e33ec0b1"
    },
    "3f5fa4d98ba6a77c458523ecedca0bef56a82778a43a293bb35682adbe32a1b7": {
      "translations": {
        "python": {
          "source": "# Enable key rotation for the generated KMS key\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\",\n    # ...\n    enable_key_rotation=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Enable key rotation for the generated KMS key\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\", new PipelineProps {\n    // ...\n    EnableKeyRotation = true\n});",
          "version": "1"
        },
        "java": {
          "source": "// Enable key rotation for the generated KMS key\nPipeline pipeline = Pipeline.Builder.create(this, \"MyFirstPipeline\")\n        // ...\n        .enableKeyRotation(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Enable key rotation for the generated KMS key\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  // ...\n  enableKeyRotation: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 53
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Enable key rotation for the generated KMS key\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  // ...\n  enableKeyRotation: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "ab11edfbf95194b81ec65247bc4c53f33a8e147b1ff6ea9c42512049e33ec0b1"
    },
    "53928bc79224f01b776d3051fdc6108cbb80bfa95dbf65a2388e4ea97c641890": {
      "translations": {
        "python": {
          "source": "# Provide a Stage when creating a pipeline\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Source\",\n        actions=[]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Provide a Stage when creating a pipeline\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Source\",\n        Actions = new [] {  }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Provide a Stage when creating a pipeline\nPipeline pipeline = Pipeline.Builder.create(this, \"MyFirstPipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Source\")\n                .actions(List.of())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Provide a Stage when creating a pipeline\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [\n        // see below...\n      ],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 65
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Provide a Stage when creating a pipeline\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [\n        // see below...\n      ],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "192": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "ab11edfbf95194b81ec65247bc4c53f33a8e147b1ff6ea9c42512049e33ec0b1"
    },
    "12d4687d21523a676f509b5610c6b7c1d3d6f4406fa176ed6b8ed035c1065e93": {
      "translations": {
        "python": {
          "source": "# Append a Stage to an existing Pipeline\n# pipeline is of type Pipeline\n\nsource_stage = pipeline.add_stage(\n    stage_name=\"Source\",\n    actions=[]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Append a Stage to an existing Pipeline\nPipeline pipeline;\n\nIStage sourceStage = pipeline.AddStage(new StageOptions {\n    StageName = \"Source\",\n    Actions = new [] {  }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Append a Stage to an existing Pipeline\nPipeline pipeline;\n\nIStage sourceStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"Source\")\n        .actions(List.of())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Append a Stage to an existing Pipeline\ndeclare const pipeline: codepipeline.Pipeline;\nconst sourceStage = pipeline.addStage({\n  stageName: 'Source',\n  actions: [ // optional property\n    // see below...\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 81
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Append a Stage to an existing Pipeline\ndeclare const pipeline: codepipeline.Pipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst sourceStage = pipeline.addStage({\n  stageName: 'Source',\n  actions: [ // optional property\n    // see below...\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "723578236782baec64a680be4c28ce17fca6dddf08d5d636e4af001d3777a4c2"
    },
    "9278a26de27ae5a57108b76d4f32757e86f956d43e29cfbb34a487a8b8840394": {
      "translations": {
        "python": {
          "source": "# Insert a new Stage at an arbitrary point\n# pipeline is of type Pipeline\n# another_stage is of type IStage\n# yet_another_stage is of type IStage\n\n\nsome_stage = pipeline.add_stage(\n    stage_name=\"SomeStage\",\n    placement=codepipeline.StagePlacement(\n        # note: you can only specify one of the below properties\n        right_before=another_stage,\n        just_after=yet_another_stage\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Insert a new Stage at an arbitrary point\nPipeline pipeline;\nIStage anotherStage;\nIStage yetAnotherStage;\n\n\nIStage someStage = pipeline.AddStage(new StageOptions {\n    StageName = \"SomeStage\",\n    Placement = new StagePlacement {\n        // note: you can only specify one of the below properties\n        RightBefore = anotherStage,\n        JustAfter = yetAnotherStage\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Insert a new Stage at an arbitrary point\nPipeline pipeline;\nIStage anotherStage;\nIStage yetAnotherStage;\n\n\nIStage someStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"SomeStage\")\n        .placement(StagePlacement.builder()\n                // note: you can only specify one of the below properties\n                .rightBefore(anotherStage)\n                .justAfter(yetAnotherStage)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Insert a new Stage at an arbitrary point\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const anotherStage: codepipeline.IStage;\ndeclare const yetAnotherStage: codepipeline.IStage;\n\nconst someStage = pipeline.addStage({\n  stageName: 'SomeStage',\n  placement: {\n    // note: you can only specify one of the below properties\n    rightBefore: anotherStage,\n    justAfter: yetAnotherStage,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 94
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-codepipeline.StagePlacement"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Insert a new Stage at an arbitrary point\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const anotherStage: codepipeline.IStage;\ndeclare const yetAnotherStage: codepipeline.IStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst someStage = pipeline.addStage({\n  stageName: 'SomeStage',\n  placement: {\n    // note: you can only specify one of the below properties\n    rightBefore: anotherStage,\n    justAfter: yetAnotherStage,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e8bff34fc27729e40f2bbab32fcf9d055151eea49cedfec1b052efa89171a55f"
    },
    "0e2f1d7737d7cb21c3c5f9413590cf10777ae8927281d95d8615ab741617eeae": {
      "translations": {
        "python": {
          "source": "# Use the `IStage.addAction()` method to mutate an existing Stage.\n# source_stage is of type IStage\n# some_action is of type Action\n\nsource_stage.add_action(some_action)",
          "version": "1"
        },
        "csharp": {
          "source": "// Use the `IStage.addAction()` method to mutate an existing Stage.\nIStage sourceStage;\nAction someAction;\n\nsourceStage.AddAction(someAction);",
          "version": "1"
        },
        "java": {
          "source": "// Use the `IStage.addAction()` method to mutate an existing Stage.\nIStage sourceStage;\nAction someAction;\n\nsourceStage.addAction(someAction);",
          "version": "1"
        },
        "$": {
          "source": "// Use the `IStage.addAction()` method to mutate an existing Stage.\ndeclare const sourceStage: codepipeline.IStage;\ndeclare const someAction: codepipeline.Action;\nsourceStage.addAction(someAction);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 118
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Use the `IStage.addAction()` method to mutate an existing Stage.\ndeclare const sourceStage: codepipeline.IStage;\ndeclare const someAction: codepipeline.Action;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nsourceStage.addAction(someAction);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 2,
        "153": 2,
        "169": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "90ec03a30b12439d44657db56a3c91cbacbca1cca328c2f456ae6058707c6b79"
    },
    "ca5f0d22c2bb8cd5cb25da1a4047578336128af7d568562864691ddaf56e4f4d": {
      "translations": {
        "python": {
          "source": "# Make a custom CodePipeline Action\ncodepipeline.CustomActionRegistration(self, \"GenericGitSourceProviderResource\",\n    category=codepipeline.ActionCategory.SOURCE,\n    artifact_bounds=codepipeline.ActionArtifactBounds(min_inputs=0, max_inputs=0, min_outputs=1, max_outputs=1),\n    provider=\"GenericGitSource\",\n    version=\"1\",\n    entity_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    execution_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    action_properties=[codepipeline.CustomActionProperty(\n        name=\"Branch\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"Git branch to pull\",\n        type=\"String\"\n    ), codepipeline.CustomActionProperty(\n        name=\"GitUrl\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"SSH git clone URL\",\n        type=\"String\"\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nnew CustomActionRegistration(this, \"GenericGitSourceProviderResource\", new CustomActionRegistrationProps {\n    Category = ActionCategory.SOURCE,\n    ArtifactBounds = new ActionArtifactBounds { MinInputs = 0, MaxInputs = 0, MinOutputs = 1, MaxOutputs = 1 },\n    Provider = \"GenericGitSource\",\n    Version = \"1\",\n    EntityUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ExecutionUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ActionProperties = new [] { new CustomActionProperty {\n        Name = \"Branch\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"Git branch to pull\",\n        Type = \"String\"\n    }, new CustomActionProperty {\n        Name = \"GitUrl\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"SSH git clone URL\",\n        Type = \"String\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nCustomActionRegistration.Builder.create(this, \"GenericGitSourceProviderResource\")\n        .category(ActionCategory.SOURCE)\n        .artifactBounds(ActionArtifactBounds.builder().minInputs(0).maxInputs(0).minOutputs(1).maxOutputs(1).build())\n        .provider(\"GenericGitSource\")\n        .version(\"1\")\n        .entityUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .executionUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .actionProperties(List.of(CustomActionProperty.builder()\n                .name(\"Branch\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"Git branch to pull\")\n                .type(\"String\")\n                .build(), CustomActionProperty.builder()\n                .name(\"GitUrl\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"SSH git clone URL\")\n                .type(\"String\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory",
        "@aws-cdk/aws-codepipeline.ActionCategory#SOURCE",
        "@aws-cdk/aws-codepipeline.CustomActionRegistration",
        "@aws-cdk/aws-codepipeline.CustomActionRegistrationProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 11,
        "75": 30,
        "91": 6,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 25
      },
      "fqnsFingerprint": "d474fa557d82d9a8a3b91b1e0f61babcc9ff36a15422cd2182eb5089ae23c66a"
    },
    "8055ec17ba9fe6f0b415bfbdb20192d42005010e738ae316212c9577120ac355": {
      "translations": {
        "python": {
          "source": "# Deploy an imported S3 bucket from a different account\n# stage is of type IStage\n# input is of type Artifact\n\nstage.add_action(codepipeline_actions.S3DeployAction(\n    bucket=s3.Bucket.from_bucket_attributes(self, \"Bucket\",\n        account=\"123456789012\"\n    ),\n    input=input,\n    action_name=\"s3-deploy-action\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// Deploy an imported S3 bucket from a different account\nIStage stage;\nArtifact input;\n\nstage.AddAction(new S3DeployAction(new S3DeployActionProps {\n    Bucket = Bucket.FromBucketAttributes(this, \"Bucket\", new BucketAttributes {\n        Account = \"123456789012\"\n    }),\n    Input = input,\n    ActionName = \"s3-deploy-action\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Deploy an imported S3 bucket from a different account\nIStage stage;\nArtifact input;\n\nstage.addAction(S3DeployAction.Builder.create()\n        .bucket(Bucket.fromBucketAttributes(this, \"Bucket\", BucketAttributes.builder()\n                .account(\"123456789012\")\n                .build()))\n        .input(input)\n        .actionName(\"s3-deploy-action\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Deploy an imported S3 bucket from a different account\ndeclare const stage: codepipeline.IStage;\ndeclare const input: codepipeline.Artifact;\nstage.addAction(new codepipeline_actions.S3DeployAction({\n  bucket: s3.Bucket.fromBucketAttributes(this, 'Bucket', {\n    account: '123456789012',\n    // ...\n  }),\n  input: input,\n  actionName: 's3-deploy-action',\n  // ...\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 180
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Deploy an imported S3 bucket from a different account\ndeclare const stage: codepipeline.IStage;\ndeclare const input: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nstage.addAction(new codepipeline_actions.S3DeployAction({\n  bucket: s3.Bucket.fromBucketAttributes(this, 'Bucket', {\n    account: '123456789012',\n    // ...\n  }),\n  input: input,\n  actionName: 's3-deploy-action',\n  // ...\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "551291d57edba6ebc6a776196a50049c0dac45530794cc3a1b717935c3bb08d1"
    },
    "f6d2825212a27edb95e9707bf5774f7de947a9caf7f68338ce27f58d3104d13f": {
      "translations": {
        "python": {
          "source": "# Actions that don't accept a resource objet accept an explicit `account` parameter\n# stage is of type IStage\n# template_path is of type ArtifactPath\n\nstage.add_action(codepipeline_actions.CloudFormationCreateUpdateStackAction(\n    account=\"123456789012\",\n    template_path=template_path,\n    admin_permissions=False,\n    stack_name=Stack.of(self).stack_name,\n    action_name=\"cloudformation-create-update\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// Actions that don't accept a resource objet accept an explicit `account` parameter\nIStage stage;\nArtifactPath templatePath;\n\nstage.AddAction(new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    Account = \"123456789012\",\n    TemplatePath = templatePath,\n    AdminPermissions = false,\n    StackName = Stack.Of(this).StackName,\n    ActionName = \"cloudformation-create-update\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Actions that don't accept a resource objet accept an explicit `account` parameter\nIStage stage;\nArtifactPath templatePath;\n\nstage.addAction(CloudFormationCreateUpdateStackAction.Builder.create()\n        .account(\"123456789012\")\n        .templatePath(templatePath)\n        .adminPermissions(false)\n        .stackName(Stack.of(this).getStackName())\n        .actionName(\"cloudformation-create-update\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Actions that don't accept a resource objet accept an explicit `account` parameter\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  account: '123456789012',\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 197
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Actions that don't accept a resource objet accept an explicit `account` parameter\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  account: '123456789012',\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "91": 1,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3ef5bfe10760ad1004fde033c4b66d58850851a0164436e18d6a4776612ac916"
    },
    "f36fbc2d0fbb275e4177f3fe5875269fafebade4d8606afda7bea763f690572e": {
      "translations": {
        "python": {
          "source": "# Explicitly pass in a `role` when creating an action.\n# stage is of type IStage\n# template_path is of type ArtifactPath\n\nstage.add_action(codepipeline_actions.CloudFormationCreateUpdateStackAction(\n    template_path=template_path,\n    admin_permissions=False,\n    stack_name=Stack.of(self).stack_name,\n    action_name=\"cloudformation-create-update\",\n    # ...\n    role=iam.Role.from_role_arn(self, \"ActionRole\", \"...\")\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// Explicitly pass in a `role` when creating an action.\nIStage stage;\nArtifactPath templatePath;\n\nstage.AddAction(new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    TemplatePath = templatePath,\n    AdminPermissions = false,\n    StackName = Stack.Of(this).StackName,\n    ActionName = \"cloudformation-create-update\",\n    // ...\n    Role = Role.FromRoleArn(this, \"ActionRole\", \"...\")\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Explicitly pass in a `role` when creating an action.\nIStage stage;\nArtifactPath templatePath;\n\nstage.addAction(CloudFormationCreateUpdateStackAction.Builder.create()\n        .templatePath(templatePath)\n        .adminPermissions(false)\n        .stackName(Stack.of(this).getStackName())\n        .actionName(\"cloudformation-create-update\")\n        // ...\n        .role(Role.fromRoleArn(this, \"ActionRole\", \"...\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Explicitly pass in a `role` when creating an action.\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n  role: iam.Role.fromRoleArn(this, 'ActionRole', '...'),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 221
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.Role#fromRoleArn",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Explicitly pass in a `role` when creating an action.\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n  role: iam.Role.fromRoleArn(this, 'ActionRole', '...'),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 21,
        "91": 1,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8e38dd40f98def0ac445402c662eddcc859170887528dc2575bb42925a1b9669"
    },
    "75b11b915d913d5bdf324d863d35c8798b1e58e7889ff10402ec25a7cbaff320": {
      "translations": {
        "python": {
          "source": "# Deploy to an imported S3 bucket from a different Region.\n# stage is of type IStage\n# input is of type Artifact\n\nstage.add_action(codepipeline_actions.S3DeployAction(\n    bucket=s3.Bucket.from_bucket_attributes(self, \"Bucket\",\n        region=\"us-west-1\"\n    ),\n    input=input,\n    action_name=\"s3-deploy-action\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// Deploy to an imported S3 bucket from a different Region.\nIStage stage;\nArtifact input;\n\nstage.AddAction(new S3DeployAction(new S3DeployActionProps {\n    Bucket = Bucket.FromBucketAttributes(this, \"Bucket\", new BucketAttributes {\n        Region = \"us-west-1\"\n    }),\n    Input = input,\n    ActionName = \"s3-deploy-action\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Deploy to an imported S3 bucket from a different Region.\nIStage stage;\nArtifact input;\n\nstage.addAction(S3DeployAction.Builder.create()\n        .bucket(Bucket.fromBucketAttributes(this, \"Bucket\", BucketAttributes.builder()\n                .region(\"us-west-1\")\n                .build()))\n        .input(input)\n        .actionName(\"s3-deploy-action\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Deploy to an imported S3 bucket from a different Region.\ndeclare const stage: codepipeline.IStage;\ndeclare const input: codepipeline.Artifact;\nstage.addAction(new codepipeline_actions.S3DeployAction({\n  bucket: s3.Bucket.fromBucketAttributes(this, 'Bucket', {\n    region: 'us-west-1',\n    // ...\n  }),\n  input: input,\n  actionName: 's3-deploy-action',\n  // ...\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 241
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3DeployAction",
        "@aws-cdk/aws-codepipeline-actions.S3DeployActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Deploy to an imported S3 bucket from a different Region.\ndeclare const stage: codepipeline.IStage;\ndeclare const input: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nstage.addAction(new codepipeline_actions.S3DeployAction({\n  bucket: s3.Bucket.fromBucketAttributes(this, 'Bucket', {\n    region: 'us-west-1',\n    // ...\n  }),\n  input: input,\n  actionName: 's3-deploy-action',\n  // ...\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 18,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "551291d57edba6ebc6a776196a50049c0dac45530794cc3a1b717935c3bb08d1"
    },
    "8425fe0543551727dc36eaa8cdf8fe06adec4b34d75ac534f3741da9fcbbc7e9": {
      "translations": {
        "python": {
          "source": "# Actions that don't take an AWS resource will accept an explicit `region` parameter.\n# stage is of type IStage\n# template_path is of type ArtifactPath\n\nstage.add_action(codepipeline_actions.CloudFormationCreateUpdateStackAction(\n    template_path=template_path,\n    admin_permissions=False,\n    stack_name=Stack.of(self).stack_name,\n    action_name=\"cloudformation-create-update\",\n    # ...\n    region=\"us-west-1\"\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// Actions that don't take an AWS resource will accept an explicit `region` parameter.\nIStage stage;\nArtifactPath templatePath;\n\nstage.AddAction(new CloudFormationCreateUpdateStackAction(new CloudFormationCreateUpdateStackActionProps {\n    TemplatePath = templatePath,\n    AdminPermissions = false,\n    StackName = Stack.Of(this).StackName,\n    ActionName = \"cloudformation-create-update\",\n    // ...\n    Region = \"us-west-1\"\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Actions that don't take an AWS resource will accept an explicit `region` parameter.\nIStage stage;\nArtifactPath templatePath;\n\nstage.addAction(CloudFormationCreateUpdateStackAction.Builder.create()\n        .templatePath(templatePath)\n        .adminPermissions(false)\n        .stackName(Stack.of(this).getStackName())\n        .actionName(\"cloudformation-create-update\")\n        // ...\n        .region(\"us-west-1\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Actions that don't take an AWS resource will accept an explicit `region` parameter.\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n  region: 'us-west-1',\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 259
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateUpdateStackActionProps",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/core.Stack#of"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Actions that don't take an AWS resource will accept an explicit `region` parameter.\ndeclare const stage: codepipeline.IStage;\ndeclare const templatePath: codepipeline.ArtifactPath;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nstage.addAction(new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n  templatePath,\n  adminPermissions: false,\n  stackName: Stack.of(this).stackName,\n  actionName: 'cloudformation-create-update',\n  // ...\n  region: 'us-west-1',\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "91": 1,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "3ef5bfe10760ad1004fde033c4b66d58850851a0164436e18d6a4776612ac916"
    },
    "c5cd44b874c54c738ffbe264287102dd4c1c142327002506b8185d0cbef1f91a": {
      "translations": {
        "python": {
          "source": "# Supply replication buckets for the Pipeline instead of using the generated support stack\npipeline = codepipeline.Pipeline(self, \"MyFirstPipeline\",\n    # ...\n\n    cross_region_replication_buckets={\n        # note that a physical name of the replication Bucket must be known at synthesis time\n        \"us-west-1\": s3.Bucket.from_bucket_attributes(self, \"UsWest1ReplicationBucket\",\n            bucket_name=\"my-us-west-1-replication-bucket\",\n            # optional KMS key\n            encryption_key=kms.Key.from_key_arn(self, \"UsWest1ReplicationKey\", \"arn:aws:kms:us-west-1:123456789012:key/1234-5678-9012\")\n        )\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Supply replication buckets for the Pipeline instead of using the generated support stack\nPipeline pipeline = new Pipeline(this, \"MyFirstPipeline\", new PipelineProps {\n    // ...\n\n    CrossRegionReplicationBuckets = new Dictionary<string, IBucket> {\n        // note that a physical name of the replication Bucket must be known at synthesis time\n        { \"us-west-1\", Bucket.FromBucketAttributes(this, \"UsWest1ReplicationBucket\", new BucketAttributes {\n            BucketName = \"my-us-west-1-replication-bucket\",\n            // optional KMS key\n            EncryptionKey = Key.FromKeyArn(this, \"UsWest1ReplicationKey\", \"arn:aws:kms:us-west-1:123456789012:key/1234-5678-9012\")\n        }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Supply replication buckets for the Pipeline instead of using the generated support stack\nPipeline pipeline = Pipeline.Builder.create(this, \"MyFirstPipeline\")\n        // ...\n\n        .crossRegionReplicationBuckets(Map.of(\n                // note that a physical name of the replication Bucket must be known at synthesis time\n                \"us-west-1\", Bucket.fromBucketAttributes(this, \"UsWest1ReplicationBucket\", BucketAttributes.builder()\n                        .bucketName(\"my-us-west-1-replication-bucket\")\n                        // optional KMS key\n                        .encryptionKey(Key.fromKeyArn(this, \"UsWest1ReplicationKey\", \"arn:aws:kms:us-west-1:123456789012:key/1234-5678-9012\"))\n                        .build())))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Supply replication buckets for the Pipeline instead of using the generated support stack\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  // ...\n\n  crossRegionReplicationBuckets: {\n    // note that a physical name of the replication Bucket must be known at synthesis time\n    'us-west-1': s3.Bucket.fromBucketAttributes(this, 'UsWest1ReplicationBucket', {\n      bucketName: 'my-us-west-1-replication-bucket',\n      // optional KMS key\n      encryptionKey: kms.Key.fromKeyArn(this, 'UsWest1ReplicationKey',\n        'arn:aws:kms:us-west-1:123456789012:key/1234-5678-9012'\n      ),\n    }),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 283
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketAttributes",
        "@aws-cdk/aws-s3.BucketAttributes",
        "@aws-cdk/aws-s3.IBucket"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Supply replication buckets for the Pipeline instead of using the generated support stack\nconst pipeline = new codepipeline.Pipeline(this, 'MyFirstPipeline', {\n  // ...\n\n  crossRegionReplicationBuckets: {\n    // note that a physical name of the replication Bucket must be known at synthesis time\n    'us-west-1': s3.Bucket.fromBucketAttributes(this, 'UsWest1ReplicationBucket', {\n      bucketName: 'my-us-west-1-replication-bucket',\n      // optional KMS key\n      encryptionKey: kms.Key.fromKeyArn(this, 'UsWest1ReplicationKey',\n        'arn:aws:kms:us-west-1:123456789012:key/1234-5678-9012'\n      ),\n    }),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 12,
        "104": 3,
        "193": 3,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "d5d994b30b3a8be44ddfcca3d48d2f26c337938cd773d720e8cd3ddff34af943"
    },
    "1390d5791cde3c9c023e1ae277afd9692f7c350327eba250f6534ca83a12ed74": {
      "translations": {
        "python": {
          "source": "# Passing a replication bucket created in a different stack.\napp = App()\nreplication_stack = Stack(app, \"ReplicationStack\",\n    env=Environment(\n        region=\"us-west-1\"\n    )\n)\nkey = kms.Key(replication_stack, \"ReplicationKey\")\nreplication_bucket = s3.Bucket(replication_stack, \"ReplicationBucket\",\n    # like was said above - replication buckets need a set physical name\n    bucket_name=PhysicalName.GENERATE_IF_NEEDED,\n    encryption_key=key\n)\n\n# later...\ncodepipeline.Pipeline(replication_stack, \"Pipeline\",\n    cross_region_replication_buckets={\n        \"us-west-1\": replication_bucket\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = new Stack(app, \"ReplicationStack\", new StackProps {\n    Env = new Environment {\n        Region = \"us-west-1\"\n    }\n});\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = new Bucket(replicationStack, \"ReplicationBucket\", new BucketProps {\n    // like was said above - replication buckets need a set physical name\n    BucketName = PhysicalName.GENERATE_IF_NEEDED,\n    EncryptionKey = key\n});\n\n// later...\n// later...\nnew Pipeline(replicationStack, \"Pipeline\", new PipelineProps {\n    CrossRegionReplicationBuckets = new Dictionary<string, IBucket> {\n        { \"us-west-1\", replicationBucket }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Passing a replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = Stack.Builder.create(app, \"ReplicationStack\")\n        .env(Environment.builder()\n                .region(\"us-west-1\")\n                .build())\n        .build();\nKey key = new Key(replicationStack, \"ReplicationKey\");\nBucket replicationBucket = Bucket.Builder.create(replicationStack, \"ReplicationBucket\")\n        // like was said above - replication buckets need a set physical name\n        .bucketName(PhysicalName.GENERATE_IF_NEEDED)\n        .encryptionKey(key)\n        .build();\n\n// later...\n// later...\nPipeline.Builder.create(replicationStack, \"Pipeline\")\n        .crossRegionReplicationBuckets(Map.of(\n                \"us-west-1\", replicationBucket))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 309
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Passing a replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  // like was said above - replication buckets need a set physical name\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: key, // does not work!\n});\n\n// later...\nnew codepipeline.Pipeline(replicationStack, 'Pipeline', {\n  crossRegionReplicationBuckets: {\n    'us-west-1': replicationBucket,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 25,
        "193": 5,
        "194": 4,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 6
      },
      "fqnsFingerprint": "39c90f67c53cb41443baee258af71d2a0c5821f0c8aeed90002de1610b1e3ecb"
    },
    "e09b18dd3624c0c4f4481f59fdd2b6711978bc49f1f7a2599251dbe2bd8ab660": {
      "translations": {
        "python": {
          "source": "# Passing an encrypted replication bucket created in a different stack.\napp = App()\nreplication_stack = Stack(app, \"ReplicationStack\",\n    env=Environment(\n        region=\"us-west-1\"\n    )\n)\nkey = kms.Key(replication_stack, \"ReplicationKey\")\nalias = kms.Alias(replication_stack, \"ReplicationAlias\",\n    # aliasName is required\n    alias_name=PhysicalName.GENERATE_IF_NEEDED,\n    target_key=key\n)\nreplication_bucket = s3.Bucket(replication_stack, \"ReplicationBucket\",\n    bucket_name=PhysicalName.GENERATE_IF_NEEDED,\n    encryption_key=alias\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Passing an encrypted replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = new Stack(app, \"ReplicationStack\", new StackProps {\n    Env = new Environment {\n        Region = \"us-west-1\"\n    }\n});\nKey key = new Key(replicationStack, \"ReplicationKey\");\nAlias alias = new Alias(replicationStack, \"ReplicationAlias\", new AliasProps {\n    // aliasName is required\n    AliasName = PhysicalName.GENERATE_IF_NEEDED,\n    TargetKey = key\n});\nBucket replicationBucket = new Bucket(replicationStack, \"ReplicationBucket\", new BucketProps {\n    BucketName = PhysicalName.GENERATE_IF_NEEDED,\n    EncryptionKey = alias\n});",
          "version": "1"
        },
        "java": {
          "source": "// Passing an encrypted replication bucket created in a different stack.\nApp app = new App();\nStack replicationStack = Stack.Builder.create(app, \"ReplicationStack\")\n        .env(Environment.builder()\n                .region(\"us-west-1\")\n                .build())\n        .build();\nKey key = new Key(replicationStack, \"ReplicationKey\");\nAlias alias = Alias.Builder.create(replicationStack, \"ReplicationAlias\")\n        // aliasName is required\n        .aliasName(PhysicalName.GENERATE_IF_NEEDED)\n        .targetKey(key)\n        .build();\nBucket replicationBucket = Bucket.Builder.create(replicationStack, \"ReplicationBucket\")\n        .bucketName(PhysicalName.GENERATE_IF_NEEDED)\n        .encryptionKey(alias)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Passing an encrypted replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst alias = new kms.Alias(replicationStack, 'ReplicationAlias', {\n  // aliasName is required\n  aliasName: PhysicalName.GENERATE_IF_NEEDED,\n  targetKey: key,\n});\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: alias,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 340
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kms.Alias",
        "@aws-cdk/aws-kms.AliasProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.BucketProps",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.PhysicalName#GENERATE_IF_NEEDED",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Passing an encrypted replication bucket created in a different stack.\nconst app = new App();\nconst replicationStack = new Stack(app, 'ReplicationStack', {\n  env: {\n    region: 'us-west-1',\n  },\n});\nconst key = new kms.Key(replicationStack, 'ReplicationKey');\nconst alias = new kms.Alias(replicationStack, 'ReplicationAlias', {\n  // aliasName is required\n  aliasName: PhysicalName.GENERATE_IF_NEEDED,\n  targetKey: key,\n});\nconst replicationBucket = new s3.Bucket(replicationStack, 'ReplicationBucket', {\n  bucketName: PhysicalName.GENERATE_IF_NEEDED,\n  encryptionKey: alias,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 29,
        "193": 4,
        "194": 5,
        "197": 5,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 6
      },
      "fqnsFingerprint": "b686a4f3866ee288ff6efe3a913a51589cbede3145b7a5061aeec17224f94cc1"
    },
    "fb8459a0e639dc8a0716d74dc37318b4282da88110b1040b98b52b5311dc6ba2": {
      "translations": {
        "python": {
          "source": "# MyAction is some action type that produces variables, like EcrSourceAction\nmy_action = MyAction(\n    # ...\n    action_name=\"myAction\"\n)\nOtherAction(\n    # ...\n    config=my_action.variables.my_variable,\n    action_name=\"otherAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps {\n    // ...\n    ActionName = \"myAction\"\n});\nnew OtherAction(new OtherActionProps {\n    // ...\n    Config = myAction.Variables.MyVariable,\n    ActionName = \"otherAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps()\n        // ...\n        .actionName(\"myAction\")\n        );\nnew OtherAction(new OtherActionProps()\n        // ...\n        .config(myAction.getVariables().getMyVariable())\n        .actionName(\"otherAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 371
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "45daaa4526f37e043ab06dca805904324e8107ae984f478c11093568d0dabcc5"
    },
    "7215ba2537883c46522ef5ffda03290ca59796f07f82a2b35d54e9df04ed33ba": {
      "translations": {
        "python": {
          "source": "# MyAction is some action type that produces variables, like EcrSourceAction\nmy_action = MyAction(\n    # ...\n    variables_namespace=\"MyNamespace\",\n    action_name=\"myAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps {\n    // ...\n    VariablesNamespace = \"MyNamespace\",\n    ActionName = \"myAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps()\n        // ...\n        .variablesNamespace(\"MyNamespace\")\n        .actionName(\"myAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  variablesNamespace: 'MyNamespace',\n  actionName: 'myAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 388
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  variablesNamespace: 'MyNamespace',\n  actionName: 'myAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "193": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "45daaa4526f37e043ab06dca805904324e8107ae984f478c11093568d0dabcc5"
    },
    "ab59452a5debfdc622403f6a4ae3f467715321ce7877697cd49a205f4ac7c071": {
      "translations": {
        "python": {
          "source": "# OtherAction is some action type that produces variables, like EcrSourceAction\nOtherAction(\n    # ...\n    config=codepipeline.GlobalVariables.execution_id,\n    action_name=\"otherAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction(new OtherActionProps {\n    // ...\n    Config = GlobalVariables.ExecutionId,\n    ActionName = \"otherAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction(new OtherActionProps()\n        // ...\n        .config(GlobalVariables.executionId)\n        .actionName(\"otherAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction({\n  // ...\n  config: codepipeline.GlobalVariables.executionId,\n  actionName: 'otherAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory",
        "@aws-cdk/aws-codepipeline.GlobalVariables",
        "@aws-cdk/aws-codepipeline.GlobalVariables#executionId"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction({\n  // ...\n  config: codepipeline.GlobalVariables.executionId,\n  actionName: 'otherAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "cb5fc4d2cb5a0cb2347b9c61585afb4ddd7c8ee4fb63d73d5b12f2252f240dd7"
    },
    "7464f00ebfa66ff69fc5003053bedca0e9051774da279b59913bbd06c3cb2fd7": {
      "translations": {
        "python": {
          "source": "# A pipeline being used as a target for a CloudWatch event rule.\nimport aws_cdk.aws_events_targets as targets\nimport aws_cdk.aws_events as events\n\n# pipeline is of type Pipeline\n\n\n# kick off the pipeline every day\nrule = events.Rule(self, \"Daily\",\n    schedule=events.Schedule.rate(Duration.days(1))\n)\nrule.add_target(targets.CodePipeline(pipeline))",
          "version": "1"
        },
        "csharp": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nusing Amazon.CDK.AWS.Events.Targets;\nusing Amazon.CDK.AWS.Events;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = new Rule(this, \"Daily\", new RuleProps {\n    Schedule = Schedule.Rate(Duration.Days(1))\n});\nrule.AddTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "java": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport software.amazon.awscdk.services.events.targets.*;\nimport software.amazon.awscdk.services.events.*;\n\nPipeline pipeline;\n\n\n// kick off the pipeline every day\nRule rule = Rule.Builder.create(this, \"Daily\")\n        .schedule(Schedule.rate(Duration.days(1)))\n        .build();\nrule.addTarget(new CodePipeline(pipeline));",
          "version": "1"
        },
        "$": {
          "source": "// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\n\ndeclare const pipeline: codepipeline.Pipeline;\nrule.addTarget(new targets.CodePipeline(pipeline));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 422
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IPipeline",
        "@aws-cdk/aws-events-targets.CodePipeline",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.Rule",
        "@aws-cdk/aws-events.Rule#addTarget",
        "@aws-cdk/aws-events.RuleProps",
        "@aws-cdk/aws-events.Schedule",
        "@aws-cdk/aws-events.Schedule#rate",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// A pipeline being used as a target for a CloudWatch event rule.\nimport * as targets from '@aws-cdk/aws-events-targets';\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const pipeline: codepipeline.Pipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// kick off the pipeline every day\nconst rule = new events.Rule(this, 'Daily', {\n  schedule: events.Schedule.rate(Duration.days(1)),\n});\nrule.addTarget(new targets.CodePipeline(pipeline));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 6,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "ddc3de371bbcd2269d45d82577f8c70a0d478ef2f4da3d6f9ec4c5dbff6bda24"
    },
    "09979ca059bfcf562175c227c44e8b19198cb699670b24d9e907667e6c2c0170": {
      "translations": {
        "python": {
          "source": "# Define event rules for events emitted by the pipeline\nimport aws_cdk.aws_events as events\n\n# my_pipeline is of type Pipeline\n# my_stage is of type IStage\n# my_action is of type Action\n# target is of type IRuleTarget\n\nmy_pipeline.on_state_change(\"MyPipelineStateChange\", target=target)\nmy_stage.on_state_change(\"MyStageStateChange\", target)\nmy_action.on_state_change(\"MyActionStateChange\", target)",
          "version": "1"
        },
        "csharp": {
          "source": "// Define event rules for events emitted by the pipeline\nusing Amazon.CDK.AWS.Events;\n\nPipeline myPipeline;\nIStage myStage;\nAction myAction;\nIRuleTarget target;\n\nmyPipeline.OnStateChange(\"MyPipelineStateChange\", new OnEventOptions { Target = target });\nmyStage.OnStateChange(\"MyStageStateChange\", target);\nmyAction.OnStateChange(\"MyActionStateChange\", target);",
          "version": "1"
        },
        "java": {
          "source": "// Define event rules for events emitted by the pipeline\nimport software.amazon.awscdk.services.events.*;\n\nPipeline myPipeline;\nIStage myStage;\nAction myAction;\nIRuleTarget target;\n\nmyPipeline.onStateChange(\"MyPipelineStateChange\", OnEventOptions.builder().target(target).build());\nmyStage.onStateChange(\"MyStageStateChange\", target);\nmyAction.onStateChange(\"MyActionStateChange\", target);",
          "version": "1"
        },
        "$": {
          "source": "// Define event rules for events emitted by the pipeline\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const myPipeline: codepipeline.Pipeline;\ndeclare const myStage: codepipeline.IStage;\ndeclare const myAction: codepipeline.Action;\ndeclare const target: events.IRuleTarget;\nmyPipeline.onStateChange('MyPipelineStateChange', { target: target } );\nmyStage.onStateChange('MyStageStateChange', target);\nmyAction.onStateChange('MyActionStateChange', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 446
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Action#onStateChange",
        "@aws-cdk/aws-codepipeline.IStage#onStateChange",
        "@aws-cdk/aws-events.IRuleTarget",
        "@aws-cdk/aws-events.OnEventOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Define event rules for events emitted by the pipeline\nimport * as events from '@aws-cdk/aws-events';\n\ndeclare const myPipeline: codepipeline.Pipeline;\ndeclare const myStage: codepipeline.IStage;\ndeclare const myAction: codepipeline.Action;\ndeclare const target: events.IRuleTarget;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nmyPipeline.onStateChange('MyPipelineStateChange', { target: target } );\nmyStage.onStateChange('MyStageStateChange', target);\nmyAction.onStateChange('MyActionStateChange', target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 3,
        "196": 3,
        "225": 4,
        "226": 3,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f02caeebf2713675dc12b6ef32c191509a9de9893c9a85139caefed14931b078"
    },
    "f8a52fd095b3ea71dbe4373d99183ab660a38929140a0b352a7d4b6f80e38f8f": {
      "translations": {
        "python": {
          "source": "# Define CodeStar Notification rules for Pipelines\nimport aws_cdk.aws_chatbot as chatbot\n\n# pipeline is of type Pipeline\n\ntarget = chatbot.SlackChannelConfiguration(self, \"MySlackChannel\",\n    slack_channel_configuration_name=\"YOUR_CHANNEL_NAME\",\n    slack_workspace_id=\"YOUR_SLACK_WORKSPACE_ID\",\n    slack_channel_id=\"YOUR_SLACK_CHANNEL_ID\"\n)\nrule = pipeline.notify_on_execution_state_change(\"NotifyOnExecutionStateChange\", target)",
          "version": "1"
        },
        "csharp": {
          "source": "// Define CodeStar Notification rules for Pipelines\nusing Amazon.CDK.AWS.Chatbot;\n\nPipeline pipeline;\n\nSlackChannelConfiguration target = new SlackChannelConfiguration(this, \"MySlackChannel\", new SlackChannelConfigurationProps {\n    SlackChannelConfigurationName = \"YOUR_CHANNEL_NAME\",\n    SlackWorkspaceId = \"YOUR_SLACK_WORKSPACE_ID\",\n    SlackChannelId = \"YOUR_SLACK_CHANNEL_ID\"\n});\nINotificationRule rule = pipeline.NotifyOnExecutionStateChange(\"NotifyOnExecutionStateChange\", target);",
          "version": "1"
        },
        "java": {
          "source": "// Define CodeStar Notification rules for Pipelines\nimport software.amazon.awscdk.services.chatbot.*;\n\nPipeline pipeline;\n\nSlackChannelConfiguration target = SlackChannelConfiguration.Builder.create(this, \"MySlackChannel\")\n        .slackChannelConfigurationName(\"YOUR_CHANNEL_NAME\")\n        .slackWorkspaceId(\"YOUR_SLACK_WORKSPACE_ID\")\n        .slackChannelId(\"YOUR_SLACK_CHANNEL_ID\")\n        .build();\nINotificationRule rule = pipeline.notifyOnExecutionStateChange(\"NotifyOnExecutionStateChange\", target);",
          "version": "1"
        },
        "$": {
          "source": "// Define CodeStar Notification rules for Pipelines\nimport * as chatbot from '@aws-cdk/aws-chatbot';\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\n\ndeclare const pipeline: codepipeline.Pipeline;\nconst rule = pipeline.notifyOnExecutionStateChange('NotifyOnExecutionStateChange', target);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codepipeline"
        },
        "field": {
          "field": "markdown",
          "line": 464
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-chatbot.SlackChannelConfiguration",
        "@aws-cdk/aws-chatbot.SlackChannelConfigurationProps",
        "@aws-cdk/aws-codestarnotifications.INotificationRule",
        "@aws-cdk/aws-codestarnotifications.INotificationRuleTarget"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Define CodeStar Notification rules for Pipelines\nimport * as chatbot from '@aws-cdk/aws-chatbot';\n\ndeclare const pipeline: codepipeline.Pipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst target = new chatbot.SlackChannelConfiguration(this, 'MySlackChannel', {\n  slackChannelConfigurationName: 'YOUR_CHANNEL_NAME',\n  slackWorkspaceId: 'YOUR_SLACK_WORKSPACE_ID',\n  slackChannelId: 'YOUR_SLACK_CHANNEL_ID',\n});\nconst rule = pipeline.notifyOnExecutionStateChange('NotifyOnExecutionStateChange', target);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 14,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3bd44664e926f7cd171f55653d41fdce35c807ead6f3a78dcbad8cbb18c0ecbb"
    },
    "e3abface09389bd62780d7e9fc3eb4aca99dd247c99b49d2fb26e25ea08b2b8f": {
      "translations": {
        "python": {
          "source": "# create a pipeline\nimport aws_cdk.aws_codecommit as codecommit\n\n# add a source action to the stage\n# repo is of type Repository\n# source_artifact is of type Artifact\n\n\npipeline = codepipeline.Pipeline(self, \"Pipeline\")\n\n# add a stage\nsource_stage = pipeline.add_stage(stage_name=\"Source\")\nsource_stage.add_action(codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    output=source_artifact,\n    repository=repo\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// create a pipeline\nusing Amazon.CDK.AWS.CodeCommit;\n\n// add a source action to the stage\nRepository repo;\nArtifact sourceArtifact;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\n// add a stage\nIStage sourceStage = pipeline.AddStage(new StageOptions { StageName = \"Source\" });\nsourceStage.AddAction(new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Output = sourceArtifact,\n    Repository = repo\n}));",
          "version": "1"
        },
        "java": {
          "source": "// create a pipeline\nimport software.amazon.awscdk.services.codecommit.*;\n\n// add a source action to the stage\nRepository repo;\nArtifact sourceArtifact;\n\n\nPipeline pipeline = new Pipeline(this, \"Pipeline\");\n\n// add a stage\nIStage sourceStage = pipeline.addStage(StageOptions.builder().stageName(\"Source\").build());\nsourceStage.addAction(CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .output(sourceArtifact)\n        .repository(repo)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// create a pipeline\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\n// add a stage\nconst sourceStage = pipeline.addStage({ stageName: 'Source' });\n\n// add a source action to the stage\ndeclare const repo: codecommit.Repository;\ndeclare const sourceArtifact: codepipeline.Artifact;\nsourceStage.addAction(new codepipeline_actions.CodeCommitSourceAction({\nactionName: 'Source',\noutput: sourceArtifact,\nrepository: repo,\n}));\n\n// ... add more stages",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.Pipeline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// create a pipeline\nimport * as codecommit from '@aws-cdk/aws-codecommit';\n\n// add a source action to the stage\ndeclare const repo: codecommit.Repository;\ndeclare const sourceArtifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'Pipeline');\n\n// add a stage\nconst sourceStage = pipeline.addStage({ stageName: 'Source' });\nsourceStage.addAction(new codepipeline_actions.CodeCommitSourceAction({\nactionName: 'Source',\noutput: sourceArtifact,\nrepository: repo,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 23,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 2,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f7b8b87722169c337efac7fd39abc2ce4732d1c7b455dbed526a144e9d25d5cc"
    },
    "5da79a46b24c12456a21137b1380c8de06d102381960d512384dd7a96cf8b98f": {
      "translations": {
        "python": {
          "source": "# MyAction is some action type that produces variables, like EcrSourceAction\nmy_action = MyAction(\n    # ...\n    action_name=\"myAction\"\n)\nOtherAction(\n    # ...\n    config=my_action.variables.my_variable,\n    action_name=\"otherAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps {\n    // ...\n    ActionName = \"myAction\"\n});\nnew OtherAction(new OtherActionProps {\n    // ...\n    Config = myAction.Variables.MyVariable,\n    ActionName = \"otherAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps()\n        // ...\n        .actionName(\"myAction\")\n        );\nnew OtherAction(new OtherActionProps()\n        // ...\n        .config(myAction.getVariables().getMyVariable())\n        .actionName(\"otherAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.ActionArtifactBounds"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "45daaa4526f37e043ab06dca805904324e8107ae984f478c11093568d0dabcc5"
    },
    "ca80f56c7e22abe3c8c2278d77d208c852a499c075bb8a89d301257635f48666": {
      "translations": {
        "python": {
          "source": "# MyAction is some action type that produces variables, like EcrSourceAction\nmy_action = MyAction(\n    # ...\n    action_name=\"myAction\"\n)\nOtherAction(\n    # ...\n    config=my_action.variables.my_variable,\n    action_name=\"otherAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps {\n    // ...\n    ActionName = \"myAction\"\n});\nnew OtherAction(new OtherActionProps {\n    // ...\n    Config = myAction.Variables.MyVariable,\n    ActionName = \"otherAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nMyAction myAction = new MyAction(new MyActionProps()\n        // ...\n        .actionName(\"myAction\")\n        );\nnew OtherAction(new OtherActionProps()\n        // ...\n        .config(myAction.getVariables().getMyVariable())\n        .actionName(\"otherAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.ActionCategory"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// MyAction is some action type that produces variables, like EcrSourceAction\nconst myAction = new MyAction({\n  // ...\n  actionName: 'myAction',\n});\nnew OtherAction({\n  // ...\n  config: myAction.variables.myVariable,\n  actionName: 'otherAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "45daaa4526f37e043ab06dca805904324e8107ae984f478c11093568d0dabcc5"
    },
    "ac73a950f0e6c591245ad64390a0afdcdd42dc8f5081f29cf6c647fe53f0918d": {
      "translations": {
        "python": {
          "source": "# later:\n# project is of type PipelineProject\nlambda_invoke_action = codepipeline_actions.LambdaInvokeAction(\n    action_name=\"Lambda\",\n    lambda_=lambda_.Function(self, \"Func\",\n        runtime=lambda_.Runtime.NODEJS_12_X,\n        handler=\"index.handler\",\n        code=lambda_.Code.from_inline(\"\"\"\n                    const AWS = require('aws-sdk');\n\n                    exports.handler = async function(event, context) {\n                        const codepipeline = new AWS.CodePipeline();\n                        await codepipeline.putJobSuccessResult({\n                            jobId: event['CodePipeline.job'].id,\n                            outputVariables: {\n                                MY_VAR: \"some value\",\n                            },\n                        }).promise();\n                    }\n                \"\"\")\n    ),\n    variables_namespace=\"MyNamespace\"\n)\nsource_output = codepipeline.Artifact()\ncodepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    environment_variables={\n        \"MyVar\": codebuild.BuildEnvironmentVariable(\n            value=lambda_invoke_action.variable(\"MY_VAR\")\n        )\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// later:\nPipelineProject project;\nLambdaInvokeAction lambdaInvokeAction = new LambdaInvokeAction(new LambdaInvokeActionProps {\n    ActionName = \"Lambda\",\n    Lambda = new Function(this, \"Func\", new FunctionProps {\n        Runtime = Runtime.NODEJS_12_X,\n        Handler = \"index.handler\",\n        Code = Code.FromInline(@\"\n                const AWS = require('aws-sdk');\n\n                exports.handler = async function(event, context) {\n                    const codepipeline = new AWS.CodePipeline();\n                    await codepipeline.putJobSuccessResult({\n                        jobId: event['CodePipeline.job'].id,\n                        outputVariables: {\n                            MY_VAR: \"\"some value\"\",\n                        },\n                    }).promise();\n                }\n            \")\n    }),\n    VariablesNamespace = \"MyNamespace\"\n});\nArtifact sourceOutput = new Artifact();\nnew CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"MyVar\", new BuildEnvironmentVariable {\n            Value = lambdaInvokeAction.Variable(\"MY_VAR\")\n        } }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// later:\nPipelineProject project;\nLambdaInvokeAction lambdaInvokeAction = LambdaInvokeAction.Builder.create()\n        .actionName(\"Lambda\")\n        .lambda(Function.Builder.create(this, \"Func\")\n                .runtime(Runtime.NODEJS_12_X)\n                .handler(\"index.handler\")\n                .code(Code.fromInline(\"\\n        const AWS = require('aws-sdk');\\n\\n        exports.handler = async function(event, context) {\\n            const codepipeline = new AWS.CodePipeline();\\n            await codepipeline.putJobSuccessResult({\\n                jobId: event['CodePipeline.job'].id,\\n                outputVariables: {\\n                    MY_VAR: \\\"some value\\\",\\n                },\\n            }).promise();\\n        }\\n    \"))\n                .build())\n        .variablesNamespace(\"MyNamespace\")\n        .build();\nArtifact sourceOutput = new Artifact();\nCodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .environmentVariables(Map.of(\n                \"MyVar\", BuildEnvironmentVariable.builder()\n                        .value(lambdaInvokeAction.variable(\"MY_VAR\"))\n                        .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const lambdaInvokeAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: new lambda.Function(this, 'Func', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n    handler: 'index.handler',\n    code: lambda.Code.fromInline(`\n        const AWS = require('aws-sdk');\n\n        exports.handler = async function(event, context) {\n            const codepipeline = new AWS.CodePipeline();\n            await codepipeline.putJobSuccessResult({\n                jobId: event['CodePipeline.job'].id,\n                outputVariables: {\n                    MY_VAR: \"some value\",\n                },\n            }).promise();\n        }\n    `),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\n\n// later:\ndeclare const project: codebuild.PipelineProject;\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: lambdaInvokeAction.variable('MY_VAR'),\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.Artifact"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeAction#variable",
        "@aws-cdk/aws-codepipeline-actions.LambdaInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromInline",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\n// later:\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaInvokeAction = new codepipeline_actions.LambdaInvokeAction({\n  actionName: 'Lambda',\n  lambda: new lambda.Function(this, 'Func', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n    handler: 'index.handler',\n    code: lambda.Code.fromInline(`\n        const AWS = require('aws-sdk');\n\n        exports.handler = async function(event, context) {\n            const codepipeline = new AWS.CodePipeline();\n            await codepipeline.putJobSuccessResult({\n                jobId: event['CodePipeline.job'].id,\n                outputVariables: {\n                    MY_VAR: \"some value\",\n                },\n            }).promise();\n        }\n    `),\n  }),\n  variablesNamespace: 'MyNamespace', // optional - by default, a name will be generated for you\n});\nconst sourceOutput = new codepipeline.Artifact();\nnew codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  environmentVariables: {\n    MyVar: {\n      value: lambdaInvokeAction.variable('MY_VAR'),\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "14": 1,
        "75": 34,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 5,
        "194": 9,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 11,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a31ac26b240308b80fda27af7ea933dea7f037e026494bad2745dbc373ed2a5"
    },
    "05bfde50d30992e3485a478d4b0850749aedf38a17f3ec376540465d3c925ed3": {
      "translations": {
        "python": {
          "source": "# Source stage: read from repository\nrepo = codecommit.Repository(stack, \"TemplateRepo\",\n    repository_name=\"template-repo\"\n)\nsource_output = codepipeline.Artifact(\"SourceArtifact\")\nsource = cpactions.CodeCommitSourceAction(\n    action_name=\"Source\",\n    repository=repo,\n    output=source_output,\n    trigger=cpactions.CodeCommitTrigger.POLL\n)\nsource_stage = {\n    \"stage_name\": \"Source\",\n    \"actions\": [source]\n}\n\n# Deployment stage: create and deploy changeset with manual approval\nstack_name = \"OurStack\"\nchange_set_name = \"StagedChangeSet\"\n\nprod_stage = {\n    \"stage_name\": \"Deploy\",\n    \"actions\": [\n        cpactions.CloudFormationCreateReplaceChangeSetAction(\n            action_name=\"PrepareChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            admin_permissions=True,\n            template_path=source_output.at_path(\"template.yaml\"),\n            run_order=1\n        ),\n        cpactions.ManualApprovalAction(\n            action_name=\"ApproveChanges\",\n            run_order=2\n        ),\n        cpactions.CloudFormationExecuteChangeSetAction(\n            action_name=\"ExecuteChanges\",\n            stack_name=stack_name,\n            change_set_name=change_set_name,\n            run_order=3\n        )\n    ]\n}\n\ncodepipeline.Pipeline(stack, \"Pipeline\",\n    stages=[source_stage, prod_stage\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Source stage: read from repository\nRepository repo = new Repository(stack, \"TemplateRepo\", new RepositoryProps {\n    RepositoryName = \"template-repo\"\n});\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"Source\",\n    Repository = repo,\n    Output = sourceOutput,\n    Trigger = CodeCommitTrigger.POLL\n});\nIDictionary<string, object> sourceStage = new Dictionary<string, object> {\n    { \"stageName\", \"Source\" },\n    { \"actions\", new [] { source } }\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nstring stackName = \"OurStack\";\nstring changeSetName = \"StagedChangeSet\";\n\nIDictionary<string, object> prodStage = new Dictionary<string, object> {\n    { \"stageName\", \"Deploy\" },\n    { \"actions\", new [] {\n        new CloudFormationCreateReplaceChangeSetAction(new CloudFormationCreateReplaceChangeSetActionProps {\n            ActionName = \"PrepareChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            AdminPermissions = true,\n            TemplatePath = sourceOutput.AtPath(\"template.yaml\"),\n            RunOrder = 1\n        }),\n        new ManualApprovalAction(new ManualApprovalActionProps {\n            ActionName = \"ApproveChanges\",\n            RunOrder = 2\n        }),\n        new CloudFormationExecuteChangeSetAction(new CloudFormationExecuteChangeSetActionProps {\n            ActionName = \"ExecuteChanges\",\n            StackName = stackName,\n            ChangeSetName = changeSetName,\n            RunOrder = 3\n        }) } }\n};\n\nnew Pipeline(stack, \"Pipeline\", new PipelineProps {\n    Stages = new [] { sourceStage, prodStage }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Source stage: read from repository\nRepository repo = Repository.Builder.create(stack, \"TemplateRepo\")\n        .repositoryName(\"template-repo\")\n        .build();\nArtifact sourceOutput = new Artifact(\"SourceArtifact\");\nCodeCommitSourceAction source = CodeCommitSourceAction.Builder.create()\n        .actionName(\"Source\")\n        .repository(repo)\n        .output(sourceOutput)\n        .trigger(CodeCommitTrigger.POLL)\n        .build();\nMap<String, Object> sourceStage = Map.of(\n        \"stageName\", \"Source\",\n        \"actions\", List.of(source));\n\n// Deployment stage: create and deploy changeset with manual approval\nString stackName = \"OurStack\";\nString changeSetName = \"StagedChangeSet\";\n\nMap<String, Object> prodStage = Map.of(\n        \"stageName\", \"Deploy\",\n        \"actions\", List.of(\n            CloudFormationCreateReplaceChangeSetAction.Builder.create()\n                    .actionName(\"PrepareChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .adminPermissions(true)\n                    .templatePath(sourceOutput.atPath(\"template.yaml\"))\n                    .runOrder(1)\n                    .build(),\n            ManualApprovalAction.Builder.create()\n                    .actionName(\"ApproveChanges\")\n                    .runOrder(2)\n                    .build(),\n            CloudFormationExecuteChangeSetAction.Builder.create()\n                    .actionName(\"ExecuteChanges\")\n                    .stackName(stackName)\n                    .changeSetName(changeSetName)\n                    .runOrder(3)\n                    .build()));\n\nPipeline.Builder.create(stack, \"Pipeline\")\n        .stages(List.of(sourceStage, prodStage))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.ArtifactPath"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationCreateReplaceChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetAction",
        "@aws-cdk/aws-codepipeline-actions.CloudFormationExecuteChangeSetActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#POLL",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalAction",
        "@aws-cdk/aws-codepipeline-actions.ManualApprovalActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "import * as codecommit from '@aws-cdk/aws-codecommit';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as cdk from '@aws-cdk/core';\nimport * as cpactions from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-codepipeline-cloudformation');\n\n/// !show\n// Source stage: read from repository\nconst repo = new codecommit.Repository(stack, 'TemplateRepo', {\n  repositoryName: 'template-repo',\n});\nconst sourceOutput = new codepipeline.Artifact('SourceArtifact');\nconst source = new cpactions.CodeCommitSourceAction({\n  actionName: 'Source',\n  repository: repo,\n  output: sourceOutput,\n  trigger: cpactions.CodeCommitTrigger.POLL,\n});\nconst sourceStage = {\n  stageName: 'Source',\n  actions: [source],\n};\n\n// Deployment stage: create and deploy changeset with manual approval\nconst stackName = 'OurStack';\nconst changeSetName = 'StagedChangeSet';\n\nconst prodStage = {\n  stageName: 'Deploy',\n  actions: [\n    new cpactions.CloudFormationCreateReplaceChangeSetAction({\n      actionName: 'PrepareChanges',\n      stackName,\n      changeSetName,\n      adminPermissions: true,\n      templatePath: sourceOutput.atPath('template.yaml'),\n      runOrder: 1,\n    }),\n    new cpactions.ManualApprovalAction({\n      actionName: 'ApproveChanges',\n      runOrder: 2,\n    }),\n    new cpactions.CloudFormationExecuteChangeSetAction({\n      actionName: 'ExecuteChanges',\n      stackName,\n      changeSetName,\n      runOrder: 3,\n    }),\n  ],\n};\n\nnew codepipeline.Pipeline(stack, 'Pipeline', {\n  stages: [\n    sourceStage,\n    prodStage,\n  ],\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 55,
        "106": 1,
        "192": 3,
        "193": 8,
        "194": 10,
        "196": 1,
        "197": 7,
        "225": 7,
        "226": 1,
        "242": 7,
        "243": 7,
        "281": 18,
        "282": 4
      },
      "fqnsFingerprint": "025240e8db40fa7035df26f7a54aa1a6267f9d6f141168018cd30d3ea136c65d"
    },
    "411304cea5049e75d9d8ae9669c707349e000e4e373f1b2a79984ef566d8c766": {
      "translations": {
        "python": {
          "source": "# Make a custom CodePipeline Action\ncodepipeline.CustomActionRegistration(self, \"GenericGitSourceProviderResource\",\n    category=codepipeline.ActionCategory.SOURCE,\n    artifact_bounds=codepipeline.ActionArtifactBounds(min_inputs=0, max_inputs=0, min_outputs=1, max_outputs=1),\n    provider=\"GenericGitSource\",\n    version=\"1\",\n    entity_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    execution_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    action_properties=[codepipeline.CustomActionProperty(\n        name=\"Branch\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"Git branch to pull\",\n        type=\"String\"\n    ), codepipeline.CustomActionProperty(\n        name=\"GitUrl\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"SSH git clone URL\",\n        type=\"String\"\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nnew CustomActionRegistration(this, \"GenericGitSourceProviderResource\", new CustomActionRegistrationProps {\n    Category = ActionCategory.SOURCE,\n    ArtifactBounds = new ActionArtifactBounds { MinInputs = 0, MaxInputs = 0, MinOutputs = 1, MaxOutputs = 1 },\n    Provider = \"GenericGitSource\",\n    Version = \"1\",\n    EntityUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ExecutionUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ActionProperties = new [] { new CustomActionProperty {\n        Name = \"Branch\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"Git branch to pull\",\n        Type = \"String\"\n    }, new CustomActionProperty {\n        Name = \"GitUrl\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"SSH git clone URL\",\n        Type = \"String\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nCustomActionRegistration.Builder.create(this, \"GenericGitSourceProviderResource\")\n        .category(ActionCategory.SOURCE)\n        .artifactBounds(ActionArtifactBounds.builder().minInputs(0).maxInputs(0).minOutputs(1).maxOutputs(1).build())\n        .provider(\"GenericGitSource\")\n        .version(\"1\")\n        .entityUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .executionUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .actionProperties(List.of(CustomActionProperty.builder()\n                .name(\"Branch\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"Git branch to pull\")\n                .type(\"String\")\n                .build(), CustomActionProperty.builder()\n                .name(\"GitUrl\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"SSH git clone URL\")\n                .type(\"String\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.CustomActionRegistration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory",
        "@aws-cdk/aws-codepipeline.ActionCategory#SOURCE",
        "@aws-cdk/aws-codepipeline.CustomActionRegistration",
        "@aws-cdk/aws-codepipeline.CustomActionRegistrationProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 11,
        "75": 30,
        "91": 6,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 25
      },
      "fqnsFingerprint": "d474fa557d82d9a8a3b91b1e0f61babcc9ff36a15422cd2182eb5089ae23c66a"
    },
    "c7b9b3b70b0ae0f1e64b07fa7897be221aa1efd299b153605eb9a2140db4772b": {
      "translations": {
        "python": {
          "source": "# Make a custom CodePipeline Action\ncodepipeline.CustomActionRegistration(self, \"GenericGitSourceProviderResource\",\n    category=codepipeline.ActionCategory.SOURCE,\n    artifact_bounds=codepipeline.ActionArtifactBounds(min_inputs=0, max_inputs=0, min_outputs=1, max_outputs=1),\n    provider=\"GenericGitSource\",\n    version=\"1\",\n    entity_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    execution_url=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    action_properties=[codepipeline.CustomActionProperty(\n        name=\"Branch\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"Git branch to pull\",\n        type=\"String\"\n    ), codepipeline.CustomActionProperty(\n        name=\"GitUrl\",\n        required=True,\n        key=False,\n        secret=False,\n        queryable=False,\n        description=\"SSH git clone URL\",\n        type=\"String\"\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nnew CustomActionRegistration(this, \"GenericGitSourceProviderResource\", new CustomActionRegistrationProps {\n    Category = ActionCategory.SOURCE,\n    ArtifactBounds = new ActionArtifactBounds { MinInputs = 0, MaxInputs = 0, MinOutputs = 1, MaxOutputs = 1 },\n    Provider = \"GenericGitSource\",\n    Version = \"1\",\n    EntityUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ExecutionUrl = \"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\",\n    ActionProperties = new [] { new CustomActionProperty {\n        Name = \"Branch\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"Git branch to pull\",\n        Type = \"String\"\n    }, new CustomActionProperty {\n        Name = \"GitUrl\",\n        Required = true,\n        Key = false,\n        Secret = false,\n        Queryable = false,\n        Description = \"SSH git clone URL\",\n        Type = \"String\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Make a custom CodePipeline Action\n// Make a custom CodePipeline Action\nCustomActionRegistration.Builder.create(this, \"GenericGitSourceProviderResource\")\n        .category(ActionCategory.SOURCE)\n        .artifactBounds(ActionArtifactBounds.builder().minInputs(0).maxInputs(0).minOutputs(1).maxOutputs(1).build())\n        .provider(\"GenericGitSource\")\n        .version(\"1\")\n        .entityUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .executionUrl(\"https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html\")\n        .actionProperties(List.of(CustomActionProperty.builder()\n                .name(\"Branch\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"Git branch to pull\")\n                .type(\"String\")\n                .build(), CustomActionProperty.builder()\n                .name(\"GitUrl\")\n                .required(true)\n                .key(false)\n                .secret(false)\n                .queryable(false)\n                .description(\"SSH git clone URL\")\n                .type(\"String\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.CustomActionRegistrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory",
        "@aws-cdk/aws-codepipeline.ActionCategory#SOURCE",
        "@aws-cdk/aws-codepipeline.CustomActionRegistration",
        "@aws-cdk/aws-codepipeline.CustomActionRegistrationProps"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Make a custom CodePipeline Action\nnew codepipeline.CustomActionRegistration(this, 'GenericGitSourceProviderResource', {\n  category: codepipeline.ActionCategory.SOURCE,\n  artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1 },\n  provider: 'GenericGitSource',\n  version: '1',\n  entityUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  executionUrl: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html',\n  actionProperties: [\n    {\n      name: 'Branch',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'Git branch to pull',\n      type: 'String',\n    },\n    {\n      name: 'GitUrl',\n      required: true,\n      key: false,\n      secret: false,\n      queryable: false,\n      description: 'SSH git clone URL',\n      type: 'String',\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 11,
        "75": 30,
        "91": 6,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 4,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 25
      },
      "fqnsFingerprint": "d474fa557d82d9a8a3b91b1e0f61babcc9ff36a15422cd2182eb5089ae23c66a"
    },
    "3665f04637d1cfea6911e6b30788702250fe2d322ebd1d21b4c92bfe953214f6": {
      "translations": {
        "python": {
          "source": "# OtherAction is some action type that produces variables, like EcrSourceAction\nOtherAction(\n    # ...\n    config=codepipeline.GlobalVariables.execution_id,\n    action_name=\"otherAction\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction(new OtherActionProps {\n    // ...\n    Config = GlobalVariables.ExecutionId,\n    ActionName = \"otherAction\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction(new OtherActionProps()\n        // ...\n        .config(GlobalVariables.executionId)\n        .actionName(\"otherAction\")\n        );",
          "version": "1"
        },
        "$": {
          "source": "// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction({\n  // ...\n  config: codepipeline.GlobalVariables.executionId,\n  actionName: 'otherAction',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.GlobalVariables"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ActionArtifactBounds",
        "@aws-cdk/aws-codepipeline.ActionCategory",
        "@aws-cdk/aws-codepipeline.GlobalVariables",
        "@aws-cdk/aws-codepipeline.GlobalVariables#executionId"
      ],
      "fullSource": "import { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\n\ninterface MyActionProps {\n  variablesNamespace?: string;\n  actionName: string;\n}\n\nclass MyAction extends codepipeline.Action {\n  public variables: { [key: string]: string };\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: MyActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n    this.variables = { 'myVariable': 'var' };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\ninterface OtherActionProps {\n  config: string;\n  actionName: string;\n}\n\nclass OtherAction extends codepipeline.Action {\n  protected readonly providedActionProperties: codepipeline.ActionProperties; \n\n  constructor(props: OtherActionProps) {\n    super();\n    this.providedActionProperties = {\n      ...props,\n      category: codepipeline.ActionCategory.SOURCE,\n      provider: 'Fake',\n      artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 4 },\n    };\n  }\n\n  public bound(_scope: Construct, _stage: codepipeline.IStage, _options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    return {};\n  }\n}\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// OtherAction is some action type that produces variables, like EcrSourceAction\nnew OtherAction({\n  // ...\n  config: codepipeline.GlobalVariables.executionId,\n  actionName: 'otherAction',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "193": 1,
        "194": 2,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "cb5fc4d2cb5a0cb2347b9c61585afb4ddd7c8ee4fb63d73d5b12f2252f240dd7"
    },
    "57cc15ea1bf68faac5305d8942a5810c638eb69bf33c288132fc82473f6fb486": {
      "translations": {
        "python": {
          "source": "# project is of type PipelineProject\n\nrepository = codecommit.Repository(self, \"MyRepository\",\n    repository_name=\"MyRepository\"\n)\nproject = codebuild.PipelineProject(self, \"MyProject\")\n\nsource_output = codepipeline.Artifact()\nsource_action = codepipeline_actions.CodeCommitSourceAction(\n    action_name=\"CodeCommit\",\n    repository=repository,\n    output=source_output\n)\nbuild_action = codepipeline_actions.CodeBuildAction(\n    action_name=\"CodeBuild\",\n    project=project,\n    input=source_output,\n    outputs=[codepipeline.Artifact()],  # optional\n    execute_batch_build=True,  # optional, defaults to false\n    combine_batch_build_artifacts=True\n)\n\ncodepipeline.Pipeline(self, \"MyPipeline\",\n    stages=[codepipeline.StageProps(\n        stage_name=\"Source\",\n        actions=[source_action]\n    ), codepipeline.StageProps(\n        stage_name=\"Build\",\n        actions=[build_action]\n    )\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "PipelineProject project;\n\nRepository repository = new Repository(this, \"MyRepository\", new RepositoryProps {\n    RepositoryName = \"MyRepository\"\n});\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = new CodeCommitSourceAction(new CodeCommitSourceActionProps {\n    ActionName = \"CodeCommit\",\n    Repository = repository,\n    Output = sourceOutput\n});\nCodeBuildAction buildAction = new CodeBuildAction(new CodeBuildActionProps {\n    ActionName = \"CodeBuild\",\n    Project = project,\n    Input = sourceOutput,\n    Outputs = new [] { new Artifact() },  // optional\n    ExecuteBatchBuild = true,  // optional, defaults to false\n    CombineBatchBuildArtifacts = true\n});\n\nnew Pipeline(this, \"MyPipeline\", new PipelineProps {\n    Stages = new [] { new StageProps {\n        StageName = \"Source\",\n        Actions = new [] { sourceAction }\n    }, new StageProps {\n        StageName = \"Build\",\n        Actions = new [] { buildAction }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "PipelineProject project;\n\nRepository repository = Repository.Builder.create(this, \"MyRepository\")\n        .repositoryName(\"MyRepository\")\n        .build();\nPipelineProject project = new PipelineProject(this, \"MyProject\");\n\nArtifact sourceOutput = new Artifact();\nCodeCommitSourceAction sourceAction = CodeCommitSourceAction.Builder.create()\n        .actionName(\"CodeCommit\")\n        .repository(repository)\n        .output(sourceOutput)\n        .build();\nCodeBuildAction buildAction = CodeBuildAction.Builder.create()\n        .actionName(\"CodeBuild\")\n        .project(project)\n        .input(sourceOutput)\n        .outputs(List.of(new Artifact())) // optional\n        .executeBatchBuild(true) // optional, defaults to false\n        .combineBatchBuildArtifacts(true)\n        .build();\n\nPipeline.Builder.create(this, \"MyPipeline\")\n        .stages(List.of(StageProps.builder()\n                .stageName(\"Source\")\n                .actions(List.of(sourceAction))\n                .build(), StageProps.builder()\n                .stageName(\"Build\")\n                .actions(List.of(buildAction))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const project: codebuild.PipelineProject;\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.PipelineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/aws-codebuild.PipelineProject",
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.RepositoryProps",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildAction",
        "@aws-cdk/aws-codepipeline-actions.CodeBuildActionProps",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceAction",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitSourceActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.PipelineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const project: codebuild.PipelineProject;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst repository = new codecommit.Repository(this, 'MyRepository', {\n  repositoryName: 'MyRepository',\n});\nconst project = new codebuild.PipelineProject(this, 'MyProject');\n\nconst sourceOutput = new codepipeline.Artifact();\nconst sourceAction = new codepipeline_actions.CodeCommitSourceAction({\n  actionName: 'CodeCommit',\n  repository,\n  output: sourceOutput,\n});\nconst buildAction = new codepipeline_actions.CodeBuildAction({\n  actionName: 'CodeBuild',\n  project,\n  input: sourceOutput,\n  outputs: [new codepipeline.Artifact()], // optional\n  executeBatchBuild: true, // optional, defaults to false\n  combineBatchBuildArtifacts: true, // optional, defaults to false\n});\n\nnew codepipeline.Pipeline(this, 'MyPipeline', {\n  stages: [\n    {\n      stageName: 'Source',\n      actions: [sourceAction],\n    },\n    {\n      stageName: 'Build',\n      actions: [buildAction],\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 41,
        "104": 3,
        "106": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 6,
        "194": 7,
        "197": 7,
        "225": 6,
        "226": 1,
        "242": 6,
        "243": 6,
        "281": 13,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "b8f42034ec524340c6aaea7a41b6f36edf207673b585520a6a42ce3c2bac4c71"
    },
    "c359731718b76438d15bd11f9a0c768a16c33b54a877a41028b0ae5793932e37": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_stepfunctions as stepfunctions\n\n\npipeline = codepipeline.Pipeline(self, \"MyPipeline\")\ninput_artifact = codepipeline.Artifact()\nstart_state = stepfunctions.Pass(self, \"StartState\")\nsimple_state_machine = stepfunctions.StateMachine(self, \"SimpleStateMachine\",\n    definition=start_state\n)\nstep_function_action = codepipeline_actions.StepFunctionInvokeAction(\n    action_name=\"Invoke\",\n    state_machine=simple_state_machine,\n    state_machine_input=codepipeline_actions.StateMachineInput.file_path(input_artifact.at_path(\"assets/input.json\"))\n)\npipeline.add_stage(\n    stage_name=\"StepFunctions\",\n    actions=[step_function_action]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.StepFunctions;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = new StateMachine(this, \"SimpleStateMachine\", new StateMachineProps {\n    Definition = startState\n});\nStepFunctionInvokeAction stepFunctionAction = new StepFunctionInvokeAction(new StepFunctionsInvokeActionProps {\n    ActionName = \"Invoke\",\n    StateMachine = simpleStateMachine,\n    StateMachineInput = StateMachineInput.FilePath(inputArtifact.AtPath(\"assets/input.json\"))\n});\npipeline.AddStage(new StageOptions {\n    StageName = \"StepFunctions\",\n    Actions = new [] { stepFunctionAction }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.stepfunctions.*;\n\n\nPipeline pipeline = new Pipeline(this, \"MyPipeline\");\nArtifact inputArtifact = new Artifact();\nPass startState = new Pass(this, \"StartState\");\nStateMachine simpleStateMachine = StateMachine.Builder.create(this, \"SimpleStateMachine\")\n        .definition(startState)\n        .build();\nStepFunctionInvokeAction stepFunctionAction = StepFunctionInvokeAction.Builder.create()\n        .actionName(\"Invoke\")\n        .stateMachine(simpleStateMachine)\n        .stateMachineInput(StateMachineInput.filePath(inputArtifact.atPath(\"assets/input.json\")))\n        .build();\npipeline.addStage(StageOptions.builder()\n        .stageName(\"StepFunctions\")\n        .actions(List.of(stepFunctionAction))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.StageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput",
        "@aws-cdk/aws-codepipeline-actions.StateMachineInput#filePath",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionInvokeAction",
        "@aws-cdk/aws-codepipeline-actions.StepFunctionsInvokeActionProps",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.Artifact#atPath",
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/aws-codepipeline.Pipeline",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-stepfunctions.IChainable",
        "@aws-cdk/aws-stepfunctions.IStateMachine",
        "@aws-cdk/aws-stepfunctions.Pass",
        "@aws-cdk/aws-stepfunctions.StateMachine",
        "@aws-cdk/aws-stepfunctions.StateMachineProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as stepfunctions from '@aws-cdk/aws-stepfunctions';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Arn, Construct, Duration, SecretValue, Stack } from '@aws-cdk/core';\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codedeploy = require('@aws-cdk/aws-codedeploy');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport codepipeline_actions = require('@aws-cdk/aws-codepipeline-actions');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport iam = require('@aws-cdk/aws-iam');\nimport lambda = require('@aws-cdk/aws-lambda');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new codepipeline.Pipeline(this, 'MyPipeline');\nconst inputArtifact = new codepipeline.Artifact();\nconst startState = new stepfunctions.Pass(this, 'StartState');\nconst simpleStateMachine  = new stepfunctions.StateMachine(this, 'SimpleStateMachine', {\n  definition: startState,\n});\nconst stepFunctionAction = new codepipeline_actions.StepFunctionInvokeAction({\n  actionName: 'Invoke',\n  stateMachine: simpleStateMachine,\n  stateMachineInput: codepipeline_actions.StateMachineInput.filePath(inputArtifact.atPath('assets/input.json')),\n});\npipeline.addStage({\n  stageName: 'StepFunctions',\n  actions: [stepFunctionAction],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 32,
        "104": 3,
        "192": 1,
        "193": 3,
        "194": 9,
        "196": 3,
        "197": 5,
        "225": 5,
        "226": 1,
        "242": 5,
        "243": 5,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "0fe1c8c7664ea5c1f54e2b01645e650c4459644840f8e37259483fb0d773303c"
    },
    "6d4e9f8e1f7ce803ce05b29d076b77fd19faa97786c49b2c1a9f86b172a4b7ed": {
      "translations": {
        "python": {
          "source": "# Insert a new Stage at an arbitrary point\n# pipeline is of type Pipeline\n# another_stage is of type IStage\n# yet_another_stage is of type IStage\n\n\nsome_stage = pipeline.add_stage(\n    stage_name=\"SomeStage\",\n    placement=codepipeline.StagePlacement(\n        # note: you can only specify one of the below properties\n        right_before=another_stage,\n        just_after=yet_another_stage\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "// Insert a new Stage at an arbitrary point\nPipeline pipeline;\nIStage anotherStage;\nIStage yetAnotherStage;\n\n\nIStage someStage = pipeline.AddStage(new StageOptions {\n    StageName = \"SomeStage\",\n    Placement = new StagePlacement {\n        // note: you can only specify one of the below properties\n        RightBefore = anotherStage,\n        JustAfter = yetAnotherStage\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Insert a new Stage at an arbitrary point\nPipeline pipeline;\nIStage anotherStage;\nIStage yetAnotherStage;\n\n\nIStage someStage = pipeline.addStage(StageOptions.builder()\n        .stageName(\"SomeStage\")\n        .placement(StagePlacement.builder()\n                // note: you can only specify one of the below properties\n                .rightBefore(anotherStage)\n                .justAfter(yetAnotherStage)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// Insert a new Stage at an arbitrary point\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const anotherStage: codepipeline.IStage;\ndeclare const yetAnotherStage: codepipeline.IStage;\n\nconst someStage = pipeline.addStage({\n  stageName: 'SomeStage',\n  placement: {\n    // note: you can only specify one of the below properties\n    rightBefore: anotherStage,\n    justAfter: yetAnotherStage,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codepipeline.StagePlacement"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-codepipeline.Pipeline#addStage",
        "@aws-cdk/aws-codepipeline.StageOptions",
        "@aws-cdk/aws-codepipeline.StagePlacement"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// Insert a new Stage at an arbitrary point\ndeclare const pipeline: codepipeline.Pipeline;\ndeclare const anotherStage: codepipeline.IStage;\ndeclare const yetAnotherStage: codepipeline.IStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { App, Duration, PhysicalName, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as kms from '@aws-cdk/aws-kms';\n\nclass Context extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst someStage = pipeline.addStage({\n  stageName: 'SomeStage',\n  placement: {\n    // note: you can only specify one of the below properties\n    rightBefore: anotherStage,\n    justAfter: yetAnotherStage,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "e8bff34fc27729e40f2bbab32fcf9d055151eea49cedfec1b052efa89171a55f"
    }
  }
}
