"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichAction = void 0;
const core_1 = require("@aws-cdk/core");
/**
 * Helper routines to work with Actions
 *
 * Can't put these on Action themselves since we only have an interface
 * and every library would need to reimplement everything (there is no
 * `ActionBase`).
 *
 * So here go the members that should have gone onto the Action class
 * but can't.
 *
 * It was probably my own idea but I don't want it anymore:
 * https://github.com/aws/aws-cdk/issues/10393
 */
class RichAction {
    constructor(action, pipeline) {
        this.action = action;
        this.pipeline = pipeline;
        this.actionProperties = action.actionProperties;
    }
    bind(scope, stage, options) {
        return this.action.bind(scope, stage, options);
    }
    onStateChange(name, target, options) {
        return this.action.onStateChange(name, target, options);
    }
    get isCrossRegion() {
        return !actionDimensionSameAsPipelineDimension(this.effectiveRegion, this.pipeline.env.region);
    }
    get isCrossAccount() {
        return !actionDimensionSameAsPipelineDimension(this.effectiveAccount, this.pipeline.env.account);
    }
    /**
     * Returns the Stack of the resource backing this action
     * if they belong to the same environment.
     * Returns `undefined` if either this action is not backed by a resource,
     * or if the resource does not belong to the same env as its Stack
     * (which can happen for imported resources).
     */
    get resourceStack() {
        const actionResource = this.actionProperties.resource;
        if (!actionResource) {
            return undefined;
        }
        const actionResourceStack = core_1.Stack.of(actionResource);
        const actionResourceStackEnv = {
            region: actionResourceStack.region,
            account: actionResourceStack.account,
        };
        return sameEnv(actionResource.env, actionResourceStackEnv) ? actionResourceStack : undefined;
    }
    /**
     * The region this action wants to execute in.
     * `undefined` means it wants to execute in the same region as the pipeline.
     */
    get effectiveRegion() {
        var _a, _b;
        return (_b = (_a = this.action.actionProperties.resource) === null || _a === void 0 ? void 0 : _a.env.region) !== null && _b !== void 0 ? _b : this.action.actionProperties.region;
    }
    /**
     * The account this action wants to execute in.
     * `undefined` means it wants to execute in the same account as the pipeline.
     */
    get effectiveAccount() {
        var _a, _b, _c, _d, _e;
        return (_e = (_b = (_a = this.action.actionProperties.role) === null || _a === void 0 ? void 0 : _a.env.account) !== null && _b !== void 0 ? _b : (_d = (_c = this.action.actionProperties) === null || _c === void 0 ? void 0 : _c.resource) === null || _d === void 0 ? void 0 : _d.env.account) !== null && _e !== void 0 ? _e : this.action.actionProperties.account;
    }
}
exports.RichAction = RichAction;
function actionDimensionSameAsPipelineDimension(actionDim, pipelineDim) {
    // if the action's dimension is `undefined`,
    // it means it is in the same region/account as the pipeline
    if (!actionDim) {
        return true;
    }
    // if the action's region/account is AWS::Region/AWS::AccountId,
    // we assume it's also in the same region/account as the pipeline
    if (core_1.Token.isUnresolved(actionDim)) {
        return true;
    }
    // here, we know the action's dimension is explicitly set;
    // in this case, it must be equal to the pipeline's dimension
    // for the action to be considered in the same region/account
    return core_1.Token.compareStrings(actionDim, pipelineDim) === core_1.TokenComparison.SAME;
}
/**
 * Whether the two envs represent the same environment
 */
function sameEnv(env1, env2) {
    return sameEnvDimension(env1.region, env2.region)
        && sameEnvDimension(env1.account, env2.account);
}
/**
 * Whether two string probably contain the same environment dimension (region or account)
 *
 * Used to compare either accounts or regions, and also returns true if both
 * are unresolved (in which case both are expted to be "current region" or "current account").
 */
function sameEnvDimension(dim1, dim2) {
    return [core_1.TokenComparison.SAME, core_1.TokenComparison.BOTH_UNRESOLVED].includes(core_1.Token.compareStrings(dim1, dim2));
}
//# sourceMappingURL=data:application/json;base64,