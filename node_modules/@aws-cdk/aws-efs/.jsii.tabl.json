{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "a772434accd85381391fa0d8b3f24e5a2be57af18012c293c4c2b6f2ffb752d4": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "98107cab9c9a7c12454f9fd101042676bc50f229858aa112857627c4d45bd8c8"
    },
    "278568058d6b07835d5f9cef86885954d12d96e86b1bf82727ddb26c7d8b1445": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\n\n\nimported_file_system = efs.FileSystem.from_file_system_attributes(self, \"existingFS\",\n    file_system_id=\"fs-12345678\",  # You can also use fileSystemArn instead of fileSystemId.\n    security_group=ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-123456789\",\n        allow_all_outbound=False\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\n\n\nIFileSystem importedFileSystem = FileSystem.FromFileSystemAttributes(this, \"existingFS\", new FileSystemAttributes {\n    FileSystemId = \"fs-12345678\",  // You can also use fileSystemArn instead of fileSystemId.\n    SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-123456789\", new SecurityGroupImportOptions {\n        AllowAllOutbound = false\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\n\n\nIFileSystem importedFileSystem = FileSystem.fromFileSystemAttributes(this, \"existingFS\", FileSystemAttributes.builder()\n        .fileSystemId(\"fs-12345678\") // You can also use fileSystemArn instead of fileSystemId.\n        .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-123456789\", SecurityGroupImportOptions.builder()\n                .allowAllOutbound(false)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "91": 1,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6632245d7e6a090dfe267cba2a45840993d591def09a01b721d4a248154d6d46"
    },
    "fb2b2b311d521c231e47b6f415a595f625d90e58812a9b06da3a25eacd535624": {
      "translations": {
        "python": {
          "source": "role = iam.Role(self, \"Role\",\n    assumed_by=iam.AnyPrincipal()\n)\n\nfile_system.grant(role, \"elasticfilesystem:ClientWrite\")",
          "version": "1"
        },
        "csharp": {
          "source": "var role = new iam.Role(this, \"Role\", new Struct {\n    AssumedBy = new iam.AnyPrincipal()\n});\n\nfileSystem.Grant(role, \"elasticfilesystem:ClientWrite\");",
          "version": "1"
        },
        "java": {
          "source": "Object role = Role.Builder.create(this, \"Role\")\n        .assumedBy(new AnyPrincipal())\n        .build();\n\nfileSystem.grant(role, \"elasticfilesystem:ClientWrite\");",
          "version": "1"
        },
        "$": {
          "source": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\n\nfileSystem.grant(role, 'elasticfilesystem:ClientWrite');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 67
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.AnyPrincipal(),\n});\n\nfileSystem.grant(role, 'elasticfilesystem:ClientWrite');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "719ff256574e2c27c5408bea97419af9eaae7ed64e90279653e61a10f63a3706"
    },
    "959a03813e1f3758e242911ad0c2e3a6706b06a6b20a16ba42d47a35b1cd1706": {
      "translations": {
        "python": {
          "source": "file_system.add_access_point(\"AccessPoint\")",
          "version": "1"
        },
        "csharp": {
          "source": "fileSystem.AddAccessPoint(\"AccessPoint\");",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.addAccessPoint(\"AccessPoint\");",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.addAccessPoint('AccessPoint');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 85
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.addAccessPoint('AccessPoint');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "82c8db2611c5b33860b56de0e01b05e3a5d1ce60fd946aa08c418f635ccc618c"
    },
    "4659017467eb18c8887c3c0487744479dc70c4394454fabea94586cc2b5a9ffb": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "b64e268e06d0198f33746c8be43793ce59ee9f8b17dbb61d2e955e58bcaf97fe"
    },
    "4419d2862f929cbb8312b28ac326a2004619cb1de9c622acfd2b8646111c5056": {
      "translations": {
        "python": {
          "source": "file_system.connections.allow_default_port_from(instance)",
          "version": "1"
        },
        "csharp": {
          "source": "fileSystem.Connections.AllowDefaultPortFrom(instance);",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 122
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-efs.FileSystem#connections"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.connections.allowDefaultPortFrom(instance);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 4,
        "194": 2,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "6bab7a99f590e77091592847d016bf5d7b3438a51e62757d176a065b7f04e93f"
    },
    "6999e6072a357d6f3e2e1079b5b416f307155165f7a26b0ccd637ffd692de334": {
      "translations": {
        "python": {
          "source": "file_system.connections.allow_default_port_from(instance)\n\ninstance.user_data.add_commands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + file_system.file_system_id, \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(self).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\")",
          "version": "1"
        },
        "csharp": {
          "source": "fileSystem.Connections.AllowDefaultPortFrom(instance);\n\ninstance.UserData.AddCommands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + fileSystem.FileSystemId, \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.Of(this).Region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\");",
          "version": "1"
        },
        "java": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\", \"yum upgrade -y\", \"yum install -y amazon-efs-utils\", \"yum install -y nfs-utils\", \"file_system_id_1=\" + fileSystem.getFileSystemId(), \"efs_mount_point_1=/mnt/efs/fs1\", \"mkdir -p \\\"${efs_mount_point_1}\\\"\", \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" + \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).getRegion() + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\", \"mount -a -t efs,nfs4 defaults\");",
          "version": "1"
        },
        "$": {
          "source": "fileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\",    // Ubuntu: apt-get -y update\n  \"yum upgrade -y\",                                 // Ubuntu: apt-get -y upgrade\n  \"yum install -y amazon-efs-utils\",                // Ubuntu: apt-get -y install amazon-efs-utils\n  \"yum install -y nfs-utils\",                       // Ubuntu: apt-get -y install nfs-common\n  \"file_system_id_1=\" + fileSystem.fileSystemId,\n  \"efs_mount_point_1=/mnt/efs/fs1\",\n  \"mkdir -p \\\"${efs_mount_point_1}\\\"\",\n  \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" +\n  \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\",\n  \"mount -a -t efs,nfs4 defaults\");",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 135
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.AmazonLinuxGeneration",
        "@aws-cdk/aws-ec2.Connections#allowDefaultPortFrom",
        "@aws-cdk/aws-ec2.IConnectable",
        "@aws-cdk/aws-ec2.IMachineImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Instance#userData",
        "@aws-cdk/aws-ec2.InstanceType",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.UserData#addCommands",
        "@aws-cdk/aws-efs.FileSystem#connections",
        "@aws-cdk/aws-efs.FileSystem#fileSystemId",
        "@aws-cdk/core.Stack#of",
        "@aws-cdk/core.Stack#region"
      ],
      "fullSource": "// Fixture with file system and an EC2 instance created in a VPC\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'VPC');\n\n    const fileSystem = new efs.FileSystem(this, 'FileSystem', {\n      vpc,\n    });\n\n    const instance = new ec2.Instance(this, 'instance', {\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.LARGE),\n      machineImage: new ec2.AmazonLinuxImage({\n        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2\n      }),\n      vpc,\n      vpcSubnets: {\n        subnetType: ec2.SubnetType.PUBLIC,\n      }\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\nfileSystem.connections.allowDefaultPortFrom(instance);\n\ninstance.userData.addCommands(\"yum check-update -y\",    // Ubuntu: apt-get -y update\n  \"yum upgrade -y\",                                 // Ubuntu: apt-get -y upgrade\n  \"yum install -y amazon-efs-utils\",                // Ubuntu: apt-get -y install amazon-efs-utils\n  \"yum install -y nfs-utils\",                       // Ubuntu: apt-get -y install nfs-common\n  \"file_system_id_1=\" + fileSystem.fileSystemId,\n  \"efs_mount_point_1=/mnt/efs/fs1\",\n  \"mkdir -p \\\"${efs_mount_point_1}\\\"\",\n  \"test -f \\\"/sbin/mount.efs\\\" && echo \\\"${file_system_id_1}:/ ${efs_mount_point_1} efs defaults,_netdev\\\" >> /etc/fstab || \" +\n  \"echo \\\"${file_system_id_1}.efs.\" + Stack.of(this).region + \".amazonaws.com:/ ${efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\\\" >> /etc/fstab\",\n  \"mount -a -t efs,nfs4 defaults\");\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 11,
        "39": 4,
        "75": 12,
        "104": 1,
        "194": 7,
        "196": 3,
        "209": 4,
        "226": 2
      },
      "fqnsFingerprint": "4653c3508ec23d301ffca02662a01e724310dc5ae036e37f593b2833316373b7"
    },
    "c8925a6de7608f98510d41ee0aac7c52ca9c153d619cd351c990aaa6341cd8a5": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"EfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    removal_policy=RemovalPolicy.DESTROY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"EfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    RemovalPolicy = RemovalPolicy.DESTROY\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"EfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .removalPolicy(RemovalPolicy.DESTROY)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem =  new efs.FileSystem(this, 'EfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  removalPolicy: RemovalPolicy.DESTROY\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-efs"
        },
        "field": {
          "field": "markdown",
          "line": 159
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/core.RemovalPolicy",
        "@aws-cdk/core.RemovalPolicy#DESTROY"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem =  new efs.FileSystem(this, 'EfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  removalPolicy: RemovalPolicy.DESTROY\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 2,
        "193": 1,
        "194": 3,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "19e6ea65fb3d94e223fe24b3011c2f9d8f9f56129f93d0a9b59d850c298dd0f6"
    },
    "5771841d6e8afe278ee6285823cae4175b553a39df2a760eebd131f47febff8f": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPoint"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "b64e268e06d0198f33746c8be43793ce59ee9f8b17dbb61d2e955e58bcaf97fe"
    },
    "d1caf5d84f39228b86f10e740265878ffde9d9a9f44b47dcdbe9b17bb9b00bb5": {
      "translations": {
        "python": {
          "source": "efs.AccessPoint.from_access_point_attributes(self, \"ap\",\n    access_point_id=\"fsap-1293c4d9832fo0912\",\n    file_system=efs.FileSystem.from_file_system_attributes(self, \"efs\",\n        file_system_id=\"fs-099d3e2f\",\n        security_group=ec2.SecurityGroup.from_security_group_id(self, \"sg\", \"sg-51530134\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "AccessPoint.FromAccessPointAttributes(this, \"ap\", new AccessPointAttributes {\n    AccessPointId = \"fsap-1293c4d9832fo0912\",\n    FileSystem = FileSystem.FromFileSystemAttributes(this, \"efs\", new FileSystemAttributes {\n        FileSystemId = \"fs-099d3e2f\",\n        SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"sg\", \"sg-51530134\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "AccessPoint.fromAccessPointAttributes(this, \"ap\", AccessPointAttributes.builder()\n        .accessPointId(\"fsap-1293c4d9832fo0912\")\n        .fileSystem(FileSystem.fromFileSystemAttributes(this, \"efs\", FileSystemAttributes.builder()\n                .fileSystemId(\"fs-099d3e2f\")\n                .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"sg\", \"sg-51530134\"))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "efs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPointAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPoint#fromAccessPointAttributes",
        "@aws-cdk/aws-efs.AccessPointAttributes",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nefs.AccessPoint.fromAccessPointAttributes(this, 'ap', {\n  accessPointId: 'fsap-1293c4d9832fo0912',\n  fileSystem: efs.FileSystem.fromFileSystemAttributes(this, 'efs', {\n    fileSystemId: 'fs-099d3e2f',\n    securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'sg', 'sg-51530134'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 13,
        "104": 3,
        "193": 2,
        "194": 6,
        "196": 3,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "b64e268e06d0198f33746c8be43793ce59ee9f8b17dbb61d2e955e58bcaf97fe"
    },
    "4a96ff7fced5cea739232c581c40e333200ee6babbfeee474c2320f3fe30af47": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.AccessPointOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "aabbd369bf2d81352ca546961deed8d10ef565b7638f4b3c3945c8d990e6aa0b"
    },
    "c6540ee8f51bf964ace3b77207df98a1916156425812c759c03ba2caf702e6b6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.Acl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "aabbd369bf2d81352ca546961deed8d10ef565b7638f4b3c3945c8d990e6aa0b"
    },
    "88e7326fb3ad27e13c63b8d9643e2f96779df80d816f418e01e6f38a20e44857": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystem"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "98107cab9c9a7c12454f9fd101042676bc50f229858aa112857627c4d45bd8c8"
    },
    "6205b9e09219b88ca3fc7f9f01f30e595b1707b2a695cd42150b468e2b37385e": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_iam as iam\n\n\nimported_file_system = efs.FileSystem.from_file_system_attributes(self, \"existingFS\",\n    file_system_id=\"fs-12345678\",  # You can also use fileSystemArn instead of fileSystemId.\n    security_group=ec2.SecurityGroup.from_security_group_id(self, \"SG\", \"sg-123456789\",\n        allow_all_outbound=False\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.IAM;\n\n\nIFileSystem importedFileSystem = FileSystem.FromFileSystemAttributes(this, \"existingFS\", new FileSystemAttributes {\n    FileSystemId = \"fs-12345678\",  // You can also use fileSystemArn instead of fileSystemId.\n    SecurityGroup = SecurityGroup.FromSecurityGroupId(this, \"SG\", \"sg-123456789\", new SecurityGroupImportOptions {\n        AllowAllOutbound = false\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.iam.*;\n\n\nIFileSystem importedFileSystem = FileSystem.fromFileSystemAttributes(this, \"existingFS\", FileSystemAttributes.builder()\n        .fileSystemId(\"fs-12345678\") // You can also use fileSystemArn instead of fileSystemId.\n        .securityGroup(SecurityGroup.fromSecurityGroupId(this, \"SG\", \"sg-123456789\", SecurityGroupImportOptions.builder()\n                .allowAllOutbound(false)\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as iam from '@aws-cdk/aws-iam';\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystemAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.ISecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup",
        "@aws-cdk/aws-ec2.SecurityGroup#fromSecurityGroupId",
        "@aws-cdk/aws-ec2.SecurityGroupImportOptions",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#fromFileSystemAttributes",
        "@aws-cdk/aws-efs.FileSystemAttributes",
        "@aws-cdk/aws-efs.IFileSystem"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as iam from '@aws-cdk/aws-iam';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst importedFileSystem = efs.FileSystem.fromFileSystemAttributes(this, 'existingFS', {\n  fileSystemId: 'fs-12345678', // You can also use fileSystemArn instead of fileSystemId.\n  securityGroup: ec2.SecurityGroup.fromSecurityGroupId(this, 'SG', 'sg-123456789', {\n    allowAllOutbound: false,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 11,
        "91": 1,
        "104": 2,
        "193": 2,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6632245d7e6a090dfe267cba2a45840993d591def09a01b721d4a248154d6d46"
    },
    "2f3963d30115c3fe5fdc1d50117cdfe819f9b85ee515c692c91e7142dd849a68": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.FileSystemProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "98107cab9c9a7c12454f9fd101042676bc50f229858aa112857627c4d45bd8c8"
    },
    "c3cad97febceaa93c5a3541d570d59c1855a3e3dac3532434046dd9a95324638": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.LifecyclePolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "98107cab9c9a7c12454f9fd101042676bc50f229858aa112857627c4d45bd8c8"
    },
    "114914ef707b88ad69ce07af567072e9123d9137efb5a37c507c144eb5317bc5": {
      "translations": {
        "python": {
          "source": "file_system = efs.FileSystem(self, \"MyEfsFileSystem\",\n    vpc=ec2.Vpc(self, \"VPC\"),\n    lifecycle_policy=efs.LifecyclePolicy.AFTER_14_DAYS,  # files are not transitioned to infrequent access (IA) storage by default\n    performance_mode=efs.PerformanceMode.GENERAL_PURPOSE,  # default\n    out_infrequent_access_policy=efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "FileSystem fileSystem = new FileSystem(this, \"MyEfsFileSystem\", new FileSystemProps {\n    Vpc = new Vpc(this, \"VPC\"),\n    LifecyclePolicy = LifecyclePolicy.AFTER_14_DAYS,  // files are not transitioned to infrequent access (IA) storage by default\n    PerformanceMode = PerformanceMode.GENERAL_PURPOSE,  // default\n    OutInfrequentAccessPolicy = OutOfInfrequentAccessPolicy.AFTER_1_ACCESS\n});",
          "version": "1"
        },
        "java": {
          "source": "FileSystem fileSystem = FileSystem.Builder.create(this, \"MyEfsFileSystem\")\n        .vpc(new Vpc(this, \"VPC\"))\n        .lifecyclePolicy(LifecyclePolicy.AFTER_14_DAYS) // files are not transitioned to infrequent access (IA) storage by default\n        .performanceMode(PerformanceMode.GENERAL_PURPOSE) // default\n        .outInfrequentAccessPolicy(OutOfInfrequentAccessPolicy.AFTER_1_ACCESS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.PerformanceMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.LifecyclePolicy",
        "@aws-cdk/aws-efs.LifecyclePolicy#AFTER_14_DAYS",
        "@aws-cdk/aws-efs.PerformanceMode",
        "@aws-cdk/aws-efs.PerformanceMode#GENERAL_PURPOSE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as efs from '@aws-cdk/aws-efs';\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst fileSystem = new efs.FileSystem(this, 'MyEfsFileSystem', {\n  vpc: new ec2.Vpc(this, 'VPC'),\n  lifecyclePolicy: efs.LifecyclePolicy.AFTER_14_DAYS, // files are not transitioned to infrequent access (IA) storage by default\n  performanceMode: efs.PerformanceMode.GENERAL_PURPOSE, // default\n  outInfrequentAccessPolicy: efs.OutOfInfrequentAccessPolicy.AFTER_1_ACCESS, // files are not transitioned back from (infrequent access) IA to primary storage by default\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 18,
        "104": 2,
        "193": 1,
        "194": 8,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "98107cab9c9a7c12454f9fd101042676bc50f229858aa112857627c4d45bd8c8"
    },
    "0687bba2b16070d8e837d11344d6c8eb038203a45a98842aa56b3055d0a06e1d": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_efs as efs\n\n\n# create a new VPC\nvpc = ec2.Vpc(self, \"VPC\")\n\n# create a new Amazon EFS filesystem\nfile_system = efs.FileSystem(self, \"Efs\", vpc=vpc)\n\n# create a new access point from the filesystem\naccess_point = file_system.add_access_point(\"AccessPoint\",\n    # set /export/lambda as the root of the access point\n    path=\"/export/lambda\",\n    # as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    create_acl=efs.Acl(\n        owner_uid=\"1001\",\n        owner_gid=\"1001\",\n        permissions=\"750\"\n    ),\n    # enforce the POSIX identity so lambda function will access with this identity\n    posix_user=efs.PosixUser(\n        uid=\"1001\",\n        gid=\"1001\"\n    )\n)\n\nfn = lambda_.Function(self, \"MyLambda\",\n    # mount the access point to /mnt/msg in the lambda runtime environment\n    filesystem=lambda_.FileSystem.from_efs_access_point(access_point, \"/mnt/msg\"),\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset(path.join(__dirname, \"lambda-handler\")),\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.EFS;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = new FileSystem(this, \"Efs\", new FileSystemProps { Vpc = vpc });\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.AddAccessPoint(\"AccessPoint\", new AccessPointOptions {\n    // set /export/lambda as the root of the access point\n    Path = \"/export/lambda\",\n    // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n    CreateAcl = new Acl {\n        OwnerUid = \"1001\",\n        OwnerGid = \"1001\",\n        Permissions = \"750\"\n    },\n    // enforce the POSIX identity so lambda function will access with this identity\n    PosixUser = new PosixUser {\n        Uid = \"1001\",\n        Gid = \"1001\"\n    }\n});\n\nFunction fn = new Function(this, \"MyLambda\", new FunctionProps {\n    // mount the access point to /mnt/msg in the lambda runtime environment\n    Filesystem = FileSystem.FromEfsAccessPoint(accessPoint, \"/mnt/msg\"),\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset(Join(__dirname, \"lambda-handler\")),\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.efs.*;\n\n\n// create a new VPC\nVpc vpc = new Vpc(this, \"VPC\");\n\n// create a new Amazon EFS filesystem\nFileSystem fileSystem = FileSystem.Builder.create(this, \"Efs\").vpc(vpc).build();\n\n// create a new access point from the filesystem\nAccessPoint accessPoint = fileSystem.addAccessPoint(\"AccessPoint\", AccessPointOptions.builder()\n        // set /export/lambda as the root of the access point\n        .path(\"/export/lambda\")\n        // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n        .createAcl(Acl.builder()\n                .ownerUid(\"1001\")\n                .ownerGid(\"1001\")\n                .permissions(\"750\")\n                .build())\n        // enforce the POSIX identity so lambda function will access with this identity\n        .posixUser(PosixUser.builder()\n                .uid(\"1001\")\n                .gid(\"1001\")\n                .build())\n        .build());\n\nFunction fn = Function.Builder.create(this, \"MyLambda\")\n        // mount the access point to /mnt/msg in the lambda runtime environment\n        .filesystem(FileSystem.fromEfsAccessPoint(accessPoint, \"/mnt/msg\"))\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset(join(__dirname, \"lambda-handler\")))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-efs.PosixUser"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-efs.AccessPoint",
        "@aws-cdk/aws-efs.AccessPointOptions",
        "@aws-cdk/aws-efs.Acl",
        "@aws-cdk/aws-efs.FileSystem",
        "@aws-cdk/aws-efs.FileSystem#addAccessPoint",
        "@aws-cdk/aws-efs.FileSystemProps",
        "@aws-cdk/aws-efs.IAccessPoint",
        "@aws-cdk/aws-efs.PosixUser",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.FileSystem",
        "@aws-cdk/aws-lambda.FileSystem#fromEfsAccessPoint",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as efs from '@aws-cdk/aws-efs';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport * as path from 'path';\nimport { Construct } from 'constructs';\nimport { DockerImage, RemovalPolicy, Stack } from '@aws-cdk/core';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// create a new VPC\nconst vpc = new ec2.Vpc(this, 'VPC');\n\n// create a new Amazon EFS filesystem\nconst fileSystem = new efs.FileSystem(this, 'Efs', { vpc });\n\n// create a new access point from the filesystem\nconst accessPoint = fileSystem.addAccessPoint('AccessPoint', {\n  // set /export/lambda as the root of the access point\n  path: '/export/lambda',\n  // as /export/lambda does not exist in a new efs filesystem, the efs will create the directory with the following createAcl\n  createAcl: {\n    ownerUid: '1001',\n    ownerGid: '1001',\n    permissions: '750',\n  },\n  // enforce the POSIX identity so lambda function will access with this identity\n  posixUser: {\n    uid: '1001',\n    gid: '1001',\n  },\n});\n\nconst fn = new lambda.Function(this, 'MyLambda', {\n  // mount the access point to /mnt/msg in the lambda runtime environment\n  filesystem: lambda.FileSystem.fromEfsAccessPoint(accessPoint, '/mnt/msg'),\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler')),\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 41,
        "104": 3,
        "193": 5,
        "194": 11,
        "196": 4,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "aabbd369bf2d81352ca546961deed8d10ef565b7638f4b3c3945c8d990e6aa0b"
    }
  }
}
