{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "7a8e829560bc98622515804c45f71caff8e6316fbf694dd891d06b76b8177752": {
      "translations": {
        "python": {
          "source": "kinesis.Stream(self, \"MyFirstStream\",\n    stream_name=\"my-awesome-stream\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Stream(this, \"MyFirstStream\", new StreamProps {\n    StreamName = \"my-awesome-stream\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Stream.Builder.create(this, \"MyFirstStream\")\n        .streamName(\"my-awesome-stream\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new kinesis.Stream(this, 'MyFirstStream', {\n  streamName: 'my-awesome-stream',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 36
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew kinesis.Stream(this, 'MyFirstStream', {\n  streamName: 'my-awesome-stream',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "a0559586a24671eca4a49bc596d450c6edeeb5a4ee6b28b9a98706dc3f86787c"
    },
    "764991d691384eac6e83b3ec10e59f59dad9a279c935427ea2039ec62bb6fe11": {
      "translations": {
        "python": {
          "source": "kinesis.Stream(self, \"MyFirstStream\",\n    stream_name=\"my-awesome-stream\",\n    shard_count=3,\n    retention_period=Duration.hours(48)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Stream(this, \"MyFirstStream\", new StreamProps {\n    StreamName = \"my-awesome-stream\",\n    ShardCount = 3,\n    RetentionPeriod = Duration.Hours(48)\n});",
          "version": "1"
        },
        "java": {
          "source": "Stream.Builder.create(this, \"MyFirstStream\")\n        .streamName(\"my-awesome-stream\")\n        .shardCount(3)\n        .retentionPeriod(Duration.hours(48))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new kinesis.Stream(this, 'MyFirstStream', {\n  streamName: 'my-awesome-stream',\n  shardCount: 3,\n  retentionPeriod: Duration.hours(48),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 46
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew kinesis.Stream(this, 'MyFirstStream', {\n  streamName: 'my-awesome-stream',\n  shardCount: 3,\n  retentionPeriod: Duration.hours(48),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "acd3536818aad26eaf7b1f952b164dc90c46bde70557df7db0264ccc099841dd"
    },
    "1afc55c5385fd75075444d5d557d280021a3a024b679ac8c80c0bc62daa22630": {
      "translations": {
        "python": {
          "source": "kinesis.Stream(self, \"MyEncryptedStream\")",
          "version": "1"
        },
        "csharp": {
          "source": "new Stream(this, \"MyEncryptedStream\");",
          "version": "1"
        },
        "java": {
          "source": "new Stream(this, \"MyEncryptedStream\");",
          "version": "1"
        },
        "$": {
          "source": "new kinesis.Stream(this, 'MyEncryptedStream');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 61
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew kinesis.Stream(this, 'MyEncryptedStream');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "104": 1,
        "194": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "d663810be9b5e09b84995cc91781a066a923892e0cc606368421f9126ec4e705"
    },
    "964091ab222920b832d17bce21eec4deb214f3c80ff0a29f918ef241ca3be35a": {
      "translations": {
        "python": {
          "source": "kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});",
          "version": "1"
        },
        "java": {
          "source": "Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 68
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e96ff9a0b46d15a9c669aa8138921d089a76e687d541800c25a7af0bf997d360"
    },
    "6952645fd52ee8e84a142ea4a997da6e1658aad7f55277219b0b84c63d25af8c": {
      "translations": {
        "python": {
          "source": "key = kms.Key(self, \"MyKey\")\n\nkinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nnew Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS,\n    EncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nStream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 76
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b314afc3b019ba2e1eaf22212e341eb14d9023a24f26aa63a2c416b9ee0cce54"
    },
    "a4a5cf833d14a9461cb00d7bbdacb46aa456b56f2b0c6c71bdde52de3d717f68": {
      "translations": {
        "python": {
          "source": "imported_stream = kinesis.Stream.from_stream_arn(self, \"ImportedStream\", \"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\")",
          "version": "1"
        },
        "csharp": {
          "source": "IStream importedStream = Stream.FromStreamArn(this, \"ImportedStream\", \"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\");",
          "version": "1"
        },
        "java": {
          "source": "IStream importedStream = Stream.fromStreamArn(this, \"ImportedStream\", \"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\");",
          "version": "1"
        },
        "$": {
          "source": "const importedStream = kinesis.Stream.fromStreamArn(this, 'ImportedStream',\n  'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 91
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.IStream",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.Stream#fromStreamArn"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedStream = kinesis.Stream.fromStreamArn(this, 'ImportedStream',\n  'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "5c1e3df59eb57752e54b72ad47bf618ac20afdf9c1e8f5062a0090992bca2d17"
    },
    "3b107a62c48ee65c1d8b605bd2203574ee31b2855ee0e87be3c0928e2f812c34": {
      "translations": {
        "python": {
          "source": "imported_stream = kinesis.Stream.from_stream_attributes(self, \"ImportedEncryptedStream\",\n    stream_arn=\"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\",\n    encryption_key=kms.Key.from_key_arn(self, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IStream importedStream = Stream.FromStreamAttributes(this, \"ImportedEncryptedStream\", new StreamAttributes {\n    StreamArn = \"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\",\n    EncryptionKey = Key.FromKeyArn(this, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\")\n});",
          "version": "1"
        },
        "java": {
          "source": "IStream importedStream = Stream.fromStreamAttributes(this, \"ImportedEncryptedStream\", StreamAttributes.builder()\n        .streamArn(\"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\")\n        .encryptionKey(Key.fromKeyArn(this, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const importedStream = kinesis.Stream.fromStreamAttributes(this, 'ImportedEncryptedStream', {\n  streamArn: 'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n  encryptionKey: kms.Key.fromKeyArn(this, 'key',\n    'arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012',\n  ),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 99
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.IStream",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.Stream#fromStreamAttributes",
        "@aws-cdk/aws-kinesis.StreamAttributes",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedStream = kinesis.Stream.fromStreamAttributes(this, 'ImportedEncryptedStream', {\n  streamArn: 'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n  encryptionKey: kms.Key.fromKeyArn(this, 'key',\n    'arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012',\n  ),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "faff69f2db2aec68a0771aafc3108fa2cb7a7a46d3812a4587f2be969a0f7fce"
    },
    "5762618d2098ed7ec62714a341ebc964a6054dc5ab39deddbac495279a8fa64e": {
      "translations": {
        "python": {
          "source": "lambda_role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\"),\n    description=\"Example role...\"\n)\n\nstream = kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)\n\n# give lambda permissions to read stream\nstream.grant_read(lambda_role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role lambdaRole = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\"),\n    Description = \"Example role...\"\n});\n\nStream stream = new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});\n\n// give lambda permissions to read stream\nstream.GrantRead(lambdaRole);",
          "version": "1"
        },
        "java": {
          "source": "Role lambdaRole = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .description(\"Example role...\")\n        .build();\n\nStream stream = Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "1"
        },
        "$": {
          "source": "const lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 123
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to read stream\nstream.grantRead(lambdaRole);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8997ed804d64d31bf650abb8ffaf49344ce26f8655fd382cd52d36a2be447624"
    },
    "93f0650a984349efe1d10cf6fe6b6ddf79543623b0fb7d1728b7c64d92e16bbb": {
      "translations": {
        "python": {
          "source": "lambda_role = iam.Role(self, \"Role\",\n    assumed_by=iam.ServicePrincipal(\"lambda.amazonaws.com\"),\n    description=\"Example role...\"\n)\n\nstream = kinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS\n)\n\n# give lambda permissions to write to stream\nstream.grant_write(lambda_role)",
          "version": "1"
        },
        "csharp": {
          "source": "Role lambdaRole = new Role(this, \"Role\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"lambda.amazonaws.com\"),\n    Description = \"Example role...\"\n});\n\nStream stream = new Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS\n});\n\n// give lambda permissions to write to stream\nstream.GrantWrite(lambdaRole);",
          "version": "1"
        },
        "java": {
          "source": "Role lambdaRole = Role.Builder.create(this, \"Role\")\n        .assumedBy(new ServicePrincipal(\"lambda.amazonaws.com\"))\n        .description(\"Example role...\")\n        .build();\n\nStream stream = Stream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .build();\n\n// give lambda permissions to write to stream\nstream.grantWrite(lambdaRole);",
          "version": "1"
        },
        "$": {
          "source": "const lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to write to stream\nstream.grantWrite(lambdaRole);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 150
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambdaRole = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n  description: 'Example role...',\n});\n\nconst stream = new kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n});\n\n// give lambda permissions to write to stream\nstream.grantWrite(lambdaRole);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 2,
        "193": 2,
        "194": 6,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "8997ed804d64d31bf650abb8ffaf49344ce26f8655fd382cd52d36a2be447624"
    },
    "c64831e02df83a83338f306cd78797020f835f508f8e53aea4a96c9f9d8d8a68": {
      "translations": {
        "python": {
          "source": "user = iam.User(self, \"MyUser\")\n\nstream = kinesis.Stream(self, \"MyStream\")\n\n# give my user permissions to list shards\nstream.grant(user, \"kinesis:ListShards\")",
          "version": "1"
        },
        "csharp": {
          "source": "User user = new User(this, \"MyUser\");\n\nStream stream = new Stream(this, \"MyStream\");\n\n// give my user permissions to list shards\nstream.Grant(user, \"kinesis:ListShards\");",
          "version": "1"
        },
        "java": {
          "source": "User user = new User(this, \"MyUser\");\n\nStream stream = new Stream(this, \"MyStream\");\n\n// give my user permissions to list shards\nstream.grant(user, \"kinesis:ListShards\");",
          "version": "1"
        },
        "$": {
          "source": "const user = new iam.User(this, 'MyUser');\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\n// give my user permissions to list shards\nstream.grant(user, 'kinesis:ListShards');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 174
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.User",
        "@aws-cdk/aws-kinesis.Stream"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst user = new iam.User(this, 'MyUser');\n\nconst stream = new kinesis.Stream(this, 'MyStream');\n\n// give my user permissions to list shards\nstream.grant(user, 'kinesis:ListShards');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "867392823b30e893dd644f3471a9d93da0cefc5300b65f0d90a82ab596fcf2bf"
    },
    "d7f995ae9af5446a7413f8cd18e3a5d4b45a381e27ebe6188d21345c8196995d": {
      "translations": {
        "python": {
          "source": "stream = kinesis.Stream(self, \"MyStream\")\n\n# Using base metric method passing the metric name\nstream.metric(\"GetRecords.Success\")\n\n# using pre-defined metric method\nstream.metric_get_records_success()\n\n# using pre-defined and overriding the statistic\nstream.metric_get_records_success(statistic=\"Maximum\")",
          "version": "1"
        },
        "csharp": {
          "source": "Stream stream = new Stream(this, \"MyStream\");\n\n// Using base metric method passing the metric name\nstream.Metric(\"GetRecords.Success\");\n\n// using pre-defined metric method\nstream.MetricGetRecordsSuccess();\n\n// using pre-defined and overriding the statistic\nstream.MetricGetRecordsSuccess(new MetricOptions { Statistic = \"Maximum\" });",
          "version": "1"
        },
        "java": {
          "source": "Stream stream = new Stream(this, \"MyStream\");\n\n// Using base metric method passing the metric name\nstream.metric(\"GetRecords.Success\");\n\n// using pre-defined metric method\nstream.metricGetRecordsSuccess();\n\n// using pre-defined and overriding the statistic\nstream.metricGetRecordsSuccess(MetricOptions.builder().statistic(\"Maximum\").build());",
          "version": "1"
        },
        "$": {
          "source": "const stream = new kinesis.Stream(this, 'MyStream');\n\n// Using base metric method passing the metric name\nstream.metric('GetRecords.Success');\n\n// using pre-defined metric method\nstream.metricGetRecordsSuccess();\n\n// using pre-defined and overriding the statistic\nstream.metricGetRecordsSuccess({ statistic: 'Maximum' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-kinesis"
        },
        "field": {
          "field": "markdown",
          "line": 187
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.MetricOptions",
        "@aws-cdk/aws-kinesis.Stream"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst stream = new kinesis.Stream(this, 'MyStream');\n\n// Using base metric method passing the metric name\nstream.metric('GetRecords.Success');\n\n// using pre-defined metric method\nstream.metricGetRecordsSuccess();\n\n// using pre-defined and overriding the statistic\nstream.metricGetRecordsSuccess({ statistic: 'Maximum' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "3eb6473c59ef2e37365eb99cc931d57e23c6a5b3e7675ec6b2ceca34762608d9"
    },
    "d1160cd1474c92f6d12426709e6fae0f438db455f723cb076adb781951474f17": {
      "translations": {
        "python": {
          "source": "key = kms.Key(self, \"MyKey\")\n\nkinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nnew Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS,\n    EncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nStream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-kinesis.Stream"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b314afc3b019ba2e1eaf22212e341eb14d9023a24f26aa63a2c416b9ee0cce54"
    },
    "b059fb84b5082da8989759dec3be8f3ff74ba539405baf9881f3b7241ecc9e6a": {
      "translations": {
        "python": {
          "source": "imported_stream = kinesis.Stream.from_stream_attributes(self, \"ImportedEncryptedStream\",\n    stream_arn=\"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\",\n    encryption_key=kms.Key.from_key_arn(self, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IStream importedStream = Stream.FromStreamAttributes(this, \"ImportedEncryptedStream\", new StreamAttributes {\n    StreamArn = \"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\",\n    EncryptionKey = Key.FromKeyArn(this, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\")\n});",
          "version": "1"
        },
        "java": {
          "source": "IStream importedStream = Stream.fromStreamAttributes(this, \"ImportedEncryptedStream\", StreamAttributes.builder()\n        .streamArn(\"arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j\")\n        .encryptionKey(Key.fromKeyArn(this, \"key\", \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const importedStream = kinesis.Stream.fromStreamAttributes(this, 'ImportedEncryptedStream', {\n  streamArn: 'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n  encryptionKey: kms.Key.fromKeyArn(this, 'key',\n    'arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012',\n  ),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-kinesis.StreamAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.IStream",
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.Stream#fromStreamAttributes",
        "@aws-cdk/aws-kinesis.StreamAttributes",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.Key#fromKeyArn"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedStream = kinesis.Stream.fromStreamAttributes(this, 'ImportedEncryptedStream', {\n  streamArn: 'arn:aws:kinesis:us-east-2:123456789012:stream/f3j09j2230j',\n  encryptionKey: kms.Key.fromKeyArn(this, 'key',\n    'arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012',\n  ),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 2,
        "193": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "faff69f2db2aec68a0771aafc3108fa2cb7a7a46d3812a4587f2be969a0f7fce"
    },
    "2558180ab783c823c6c3e71d2a5a10bd20ab777445609d3eaffd17830f90145f": {
      "translations": {
        "python": {
          "source": "key = kms.Key(self, \"MyKey\")\n\nkinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nnew Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS,\n    EncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nStream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-kinesis.StreamEncryption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b314afc3b019ba2e1eaf22212e341eb14d9023a24f26aa63a2c416b9ee0cce54"
    },
    "cf0f5a54a7455e18c763e28a185568d0fc4ee3a2789b16effaa995370ffb8ef4": {
      "translations": {
        "python": {
          "source": "key = kms.Key(self, \"MyKey\")\n\nkinesis.Stream(self, \"MyEncryptedStream\",\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nnew Stream(this, \"MyEncryptedStream\", new StreamProps {\n    Encryption = StreamEncryption.KMS,\n    EncryptionKey = key\n});",
          "version": "1"
        },
        "java": {
          "source": "Key key = new Key(this, \"MyKey\");\n\nStream.Builder.create(this, \"MyEncryptedStream\")\n        .encryption(StreamEncryption.KMS)\n        .encryptionKey(key)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-kinesis.StreamProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-kinesis.Stream",
        "@aws-cdk/aws-kinesis.StreamEncryption",
        "@aws-cdk/aws-kinesis.StreamEncryption#KMS",
        "@aws-cdk/aws-kinesis.StreamProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';  \nimport * as kinesis from '@aws-cdk/aws-kinesis';\nimport * as kms from '@aws-cdk/aws-kms';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {           \n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst key = new kms.Key(this, 'MyKey');\n\nnew kinesis.Stream(this, 'MyEncryptedStream', {\n  encryption: kinesis.StreamEncryption.KMS,\n  encryptionKey: key,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 4,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "b314afc3b019ba2e1eaf22212e341eb14d9023a24f26aa63a2c416b9ee0cce54"
    }
  }
}
