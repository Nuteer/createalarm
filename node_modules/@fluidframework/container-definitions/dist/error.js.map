{"version":3,"file":"error.js","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAIH;;GAEG;AACH,IAAY,kBAyBP;AAzBL,WAAY,kBAAkB;IAC1B;;OAEG;IACH,mDAA6B,CAAA;IAE7B;;OAEG;IACH,yDAAmC,CAAA;IAEnC;;OAEG;IACH,iEAA2C,CAAA;IAE3C;;OAEG;IACH,iEAA2C,CAAA;IAE3C;;OAEG;IACF,+CAAyB,CAAA;AAC1B,CAAC,EAzBO,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAyBzB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITelemetryProperties } from \"@fluidframework/common-definitions\";\n\n/**\n * Different error types the Container may report out to the Host\n */\nexport enum ContainerErrorType {\n    /**\n     * Some error, most likely an exception caught by runtime and propagated to container as critical error\n     */\n    genericError = \"genericError\",\n\n    /**\n     * Throttling error from server. Server is busy and is asking not to reconnect for some time\n     */\n    throttlingError = \"throttlingError\",\n\n    /**\n     * Data loss error detected by Container / DeltaManager. Likely points to storage issue.\n     */\n    dataCorruptionError = \"dataCorruptionError\",\n\n    /**\n     * Error encountered when processing an operation. May correlate with data corruption.\n     */\n    dataProcessingError = \"dataProcessingError\",\n\n    /**\n     * Error indicating an API is being used improperly resulting in an invalid operation.\n     */\n     usageError = \"usageError\",\n    }\n\n/**\n * Base interface for all errors and warnings at container level\n */\nexport interface IErrorBase extends Partial<Error> {\n    /** errorType is a union of error types from\n     * - container\n     * - runtime\n     * - drivers\n     */\n    readonly errorType: string;\n\n    /**\n     * See Error.message\n     * Privacy Note - This is a freeform string that we may not control in all cases (e.g. a dependency throws an error)\n     * If there are known cases where this contains privacy-sensitive data it will be tagged and included in the result\n     * of getTelemetryProperties. When logging, consider fetching it that way rather than straight from this field.\n     */\n    readonly message: string;\n    /** See Error.name */\n    readonly name?: string;\n    /** See Error.stack */\n    readonly stack?: string;\n    /**\n     * Returns all properties of this error object that are either safe to log\n     * or explicitly tagged as containing privacy-sensitive data.\n     */\n    getTelemetryProperties?(): ITelemetryProperties;\n}\n\n/**\n * Represents warnings raised on container.\n */\nexport interface ContainerWarning extends IErrorBase {\n    /**\n     * Whether this error has already been logged. Used to avoid logging errors twice.\n     * Default is false.\n     */\n    logged?: boolean;\n}\n\n/**\n * Represents errors raised on container.\n */\nexport type ICriticalContainerError = IErrorBase;\n\n/**\n * Generic wrapper for an unrecognized/uncategorized error object\n */\nexport interface IGenericError extends IErrorBase {\n    readonly errorType: ContainerErrorType.genericError;\n    error?: any;\n}\n\n/**\n * Error indicating an API is being used improperly resulting in an invalid operation.\n */\n export interface IUsageError extends IErrorBase {\n    readonly errorType: ContainerErrorType.usageError;\n}\n\n/**\n * Warning emitted when requests to storage are being throttled\n */\nexport interface IThrottlingWarning extends IErrorBase {\n    readonly errorType: ContainerErrorType.throttlingError;\n    readonly retryAfterSeconds: number;\n}\n"]}