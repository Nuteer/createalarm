{"version":3,"file":"validate0.42.0.js","sourceRoot":"","sources":["../../../src/test/types/validate0.42.0.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n/*\n * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n * Generated by fluid-type-validator in @fluidframework/build-tools.\n */\nimport * as old from \"@fluidframework/driver-definitions-0.42.0\";\nimport * as current from \"../../index\";\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_DriverError\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_DriverError():\n    old.DriverError;\ndeclare function use_current_TypeAliasDeclaration_DriverError(\n    use: current.DriverError);\nuse_current_TypeAliasDeclaration_DriverError(\n    get_old_TypeAliasDeclaration_DriverError());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_DriverError\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_DriverError():\n    current.DriverError;\ndeclare function use_old_TypeAliasDeclaration_DriverError(\n    use: old.DriverError);\nuse_old_TypeAliasDeclaration_DriverError(\n    get_current_TypeAliasDeclaration_DriverError());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_DriverErrorType\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_DriverErrorType():\n    old.DriverErrorType;\ndeclare function use_current_EnumDeclaration_DriverErrorType(\n    use: current.DriverErrorType);\nuse_current_EnumDeclaration_DriverErrorType(\n    get_old_EnumDeclaration_DriverErrorType());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_DriverErrorType\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_DriverErrorType():\n    current.DriverErrorType;\ndeclare function use_old_EnumDeclaration_DriverErrorType(\n    use: old.DriverErrorType);\nuse_old_EnumDeclaration_DriverErrorType(\n    get_current_EnumDeclaration_DriverErrorType());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_DriverHeader\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_DriverHeader():\n    old.DriverHeader;\ndeclare function use_current_EnumDeclaration_DriverHeader(\n    use: current.DriverHeader);\nuse_current_EnumDeclaration_DriverHeader(\n    get_old_EnumDeclaration_DriverHeader());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_DriverHeader\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_DriverHeader():\n    current.DriverHeader;\ndeclare function use_old_EnumDeclaration_DriverHeader(\n    use: old.DriverHeader);\nuse_old_EnumDeclaration_DriverHeader(\n    get_current_EnumDeclaration_DriverHeader());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_DriverPreCheckInfo\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_DriverPreCheckInfo():\n    old.DriverPreCheckInfo;\ndeclare function use_current_InterfaceDeclaration_DriverPreCheckInfo(\n    use: current.DriverPreCheckInfo);\nuse_current_InterfaceDeclaration_DriverPreCheckInfo(\n    get_old_InterfaceDeclaration_DriverPreCheckInfo());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_DriverPreCheckInfo\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_DriverPreCheckInfo():\n    current.DriverPreCheckInfo;\ndeclare function use_old_InterfaceDeclaration_DriverPreCheckInfo(\n    use: old.DriverPreCheckInfo);\nuse_old_InterfaceDeclaration_DriverPreCheckInfo(\n    get_current_InterfaceDeclaration_DriverPreCheckInfo());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IAuthorizationError\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IAuthorizationError():\n    old.IAuthorizationError;\ndeclare function use_current_InterfaceDeclaration_IAuthorizationError(\n    use: current.IAuthorizationError);\nuse_current_InterfaceDeclaration_IAuthorizationError(\n    get_old_InterfaceDeclaration_IAuthorizationError());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IAuthorizationError\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IAuthorizationError():\n    current.IAuthorizationError;\ndeclare function use_old_InterfaceDeclaration_IAuthorizationError(\n    use: old.IAuthorizationError);\nuse_old_InterfaceDeclaration_IAuthorizationError(\n    get_current_InterfaceDeclaration_IAuthorizationError());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDeltasFetchResult\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDeltasFetchResult():\n    old.IDeltasFetchResult;\ndeclare function use_current_InterfaceDeclaration_IDeltasFetchResult(\n    use: current.IDeltasFetchResult);\nuse_current_InterfaceDeclaration_IDeltasFetchResult(\n    get_old_InterfaceDeclaration_IDeltasFetchResult());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDeltasFetchResult\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDeltasFetchResult():\n    current.IDeltasFetchResult;\ndeclare function use_old_InterfaceDeclaration_IDeltasFetchResult(\n    use: old.IDeltasFetchResult);\nuse_old_InterfaceDeclaration_IDeltasFetchResult(\n    get_current_InterfaceDeclaration_IDeltasFetchResult());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDeltaStorageService\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDeltaStorageService():\n    old.IDeltaStorageService;\ndeclare function use_current_InterfaceDeclaration_IDeltaStorageService(\n    use: current.IDeltaStorageService);\nuse_current_InterfaceDeclaration_IDeltaStorageService(\n    get_old_InterfaceDeclaration_IDeltaStorageService());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDeltaStorageService\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDeltaStorageService():\n    current.IDeltaStorageService;\ndeclare function use_old_InterfaceDeclaration_IDeltaStorageService(\n    use: old.IDeltaStorageService);\nuse_old_InterfaceDeclaration_IDeltaStorageService(\n    get_current_InterfaceDeclaration_IDeltaStorageService());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaConnection\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentDeltaConnection():\n    old.IDocumentDeltaConnection;\ndeclare function use_current_InterfaceDeclaration_IDocumentDeltaConnection(\n    use: current.IDocumentDeltaConnection);\nuse_current_InterfaceDeclaration_IDocumentDeltaConnection(\n    get_old_InterfaceDeclaration_IDocumentDeltaConnection());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaConnection\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentDeltaConnection():\n    current.IDocumentDeltaConnection;\ndeclare function use_old_InterfaceDeclaration_IDocumentDeltaConnection(\n    use: old.IDocumentDeltaConnection);\nuse_old_InterfaceDeclaration_IDocumentDeltaConnection(\n    // @ts-expect-error compatibility expected to be broken\n    get_current_InterfaceDeclaration_IDocumentDeltaConnection());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaConnectionEvents\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents():\n    old.IDocumentDeltaConnectionEvents;\ndeclare function use_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents(\n    use: current.IDocumentDeltaConnectionEvents);\nuse_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents(\n    get_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaConnectionEvents\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents():\n    current.IDocumentDeltaConnectionEvents;\ndeclare function use_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents(\n    use: old.IDocumentDeltaConnectionEvents);\nuse_old_InterfaceDeclaration_IDocumentDeltaConnectionEvents(\n    get_current_InterfaceDeclaration_IDocumentDeltaConnectionEvents());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaStorageService\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentDeltaStorageService():\n    old.IDocumentDeltaStorageService;\ndeclare function use_current_InterfaceDeclaration_IDocumentDeltaStorageService(\n    use: current.IDocumentDeltaStorageService);\nuse_current_InterfaceDeclaration_IDocumentDeltaStorageService(\n    get_old_InterfaceDeclaration_IDocumentDeltaStorageService());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentDeltaStorageService\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentDeltaStorageService():\n    current.IDocumentDeltaStorageService;\ndeclare function use_old_InterfaceDeclaration_IDocumentDeltaStorageService(\n    use: old.IDocumentDeltaStorageService);\nuse_old_InterfaceDeclaration_IDocumentDeltaStorageService(\n    get_current_InterfaceDeclaration_IDocumentDeltaStorageService());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentService\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentService():\n    old.IDocumentService;\ndeclare function use_current_InterfaceDeclaration_IDocumentService(\n    use: current.IDocumentService);\nuse_current_InterfaceDeclaration_IDocumentService(\n    get_old_InterfaceDeclaration_IDocumentService());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentService\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentService():\n    current.IDocumentService;\ndeclare function use_old_InterfaceDeclaration_IDocumentService(\n    use: old.IDocumentService);\nuse_old_InterfaceDeclaration_IDocumentService(\n    // @ts-expect-error compatibility expected to be broken\n    get_current_InterfaceDeclaration_IDocumentService());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentServiceFactory\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentServiceFactory():\n    old.IDocumentServiceFactory;\ndeclare function use_current_InterfaceDeclaration_IDocumentServiceFactory(\n    use: current.IDocumentServiceFactory);\nuse_current_InterfaceDeclaration_IDocumentServiceFactory(\n    get_old_InterfaceDeclaration_IDocumentServiceFactory());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentServiceFactory\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentServiceFactory():\n    current.IDocumentServiceFactory;\ndeclare function use_old_InterfaceDeclaration_IDocumentServiceFactory(\n    use: old.IDocumentServiceFactory);\nuse_old_InterfaceDeclaration_IDocumentServiceFactory(\n    // @ts-expect-error compatibility expected to be broken\n    get_current_InterfaceDeclaration_IDocumentServiceFactory());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentServicePolicies\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentServicePolicies():\n    old.IDocumentServicePolicies;\ndeclare function use_current_InterfaceDeclaration_IDocumentServicePolicies(\n    use: current.IDocumentServicePolicies);\nuse_current_InterfaceDeclaration_IDocumentServicePolicies(\n    get_old_InterfaceDeclaration_IDocumentServicePolicies());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentServicePolicies\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentServicePolicies():\n    current.IDocumentServicePolicies;\ndeclare function use_old_InterfaceDeclaration_IDocumentServicePolicies(\n    use: old.IDocumentServicePolicies);\nuse_old_InterfaceDeclaration_IDocumentServicePolicies(\n    get_current_InterfaceDeclaration_IDocumentServicePolicies());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentStorageService\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentStorageService():\n    old.IDocumentStorageService;\ndeclare function use_current_InterfaceDeclaration_IDocumentStorageService(\n    use: current.IDocumentStorageService);\nuse_current_InterfaceDeclaration_IDocumentStorageService(\n    get_old_InterfaceDeclaration_IDocumentStorageService());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentStorageService\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentStorageService():\n    current.IDocumentStorageService;\ndeclare function use_old_InterfaceDeclaration_IDocumentStorageService(\n    use: old.IDocumentStorageService);\nuse_old_InterfaceDeclaration_IDocumentStorageService(\n    get_current_InterfaceDeclaration_IDocumentStorageService());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentStorageServicePolicies\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentStorageServicePolicies():\n    old.IDocumentStorageServicePolicies;\ndeclare function use_current_InterfaceDeclaration_IDocumentStorageServicePolicies(\n    use: current.IDocumentStorageServicePolicies);\nuse_current_InterfaceDeclaration_IDocumentStorageServicePolicies(\n    get_old_InterfaceDeclaration_IDocumentStorageServicePolicies());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDocumentStorageServicePolicies\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentStorageServicePolicies():\n    current.IDocumentStorageServicePolicies;\ndeclare function use_old_InterfaceDeclaration_IDocumentStorageServicePolicies(\n    use: old.IDocumentStorageServicePolicies);\nuse_old_InterfaceDeclaration_IDocumentStorageServicePolicies(\n    get_current_InterfaceDeclaration_IDocumentStorageServicePolicies());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverBasicError\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDriverBasicError():\n    old.IDriverBasicError;\ndeclare function use_current_InterfaceDeclaration_IDriverBasicError(\n    use: current.IDriverBasicError);\nuse_current_InterfaceDeclaration_IDriverBasicError(\n    get_old_InterfaceDeclaration_IDriverBasicError());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverBasicError\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDriverBasicError():\n    current.IDriverBasicError;\ndeclare function use_old_InterfaceDeclaration_IDriverBasicError(\n    use: old.IDriverBasicError);\nuse_old_InterfaceDeclaration_IDriverBasicError(\n    get_current_InterfaceDeclaration_IDriverBasicError());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverErrorBase\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDriverErrorBase():\n    old.IDriverErrorBase;\ndeclare function use_current_InterfaceDeclaration_IDriverErrorBase(\n    use: current.IDriverErrorBase);\nuse_current_InterfaceDeclaration_IDriverErrorBase(\n    get_old_InterfaceDeclaration_IDriverErrorBase());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverErrorBase\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDriverErrorBase():\n    current.IDriverErrorBase;\ndeclare function use_old_InterfaceDeclaration_IDriverErrorBase(\n    use: old.IDriverErrorBase);\nuse_old_InterfaceDeclaration_IDriverErrorBase(\n    get_current_InterfaceDeclaration_IDriverErrorBase());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverHeader\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDriverHeader():\n    old.IDriverHeader;\ndeclare function use_current_InterfaceDeclaration_IDriverHeader(\n    use: current.IDriverHeader);\nuse_current_InterfaceDeclaration_IDriverHeader(\n    get_old_InterfaceDeclaration_IDriverHeader());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IDriverHeader\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDriverHeader():\n    current.IDriverHeader;\ndeclare function use_old_InterfaceDeclaration_IDriverHeader(\n    use: old.IDriverHeader);\nuse_old_InterfaceDeclaration_IDriverHeader(\n    get_current_InterfaceDeclaration_IDriverHeader());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IFluidResolvedUrl\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidResolvedUrl():\n    old.IFluidResolvedUrl;\ndeclare function use_current_InterfaceDeclaration_IFluidResolvedUrl(\n    use: current.IFluidResolvedUrl);\nuse_current_InterfaceDeclaration_IFluidResolvedUrl(\n    get_old_InterfaceDeclaration_IFluidResolvedUrl());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IFluidResolvedUrl\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidResolvedUrl():\n    current.IFluidResolvedUrl;\ndeclare function use_old_InterfaceDeclaration_IFluidResolvedUrl(\n    use: old.IFluidResolvedUrl);\nuse_old_InterfaceDeclaration_IFluidResolvedUrl(\n    get_current_InterfaceDeclaration_IFluidResolvedUrl());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IGenericNetworkError\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IGenericNetworkError():\n    old.IGenericNetworkError;\ndeclare function use_current_InterfaceDeclaration_IGenericNetworkError(\n    use: current.IGenericNetworkError);\nuse_current_InterfaceDeclaration_IGenericNetworkError(\n    get_old_InterfaceDeclaration_IGenericNetworkError());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IGenericNetworkError\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IGenericNetworkError():\n    current.IGenericNetworkError;\ndeclare function use_old_InterfaceDeclaration_IGenericNetworkError(\n    use: old.IGenericNetworkError);\nuse_old_InterfaceDeclaration_IGenericNetworkError(\n    get_current_InterfaceDeclaration_IGenericNetworkError());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_IResolvedUrl\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_IResolvedUrl():\n    old.IResolvedUrl;\ndeclare function use_current_TypeAliasDeclaration_IResolvedUrl(\n    use: current.IResolvedUrl);\nuse_current_TypeAliasDeclaration_IResolvedUrl(\n    get_old_TypeAliasDeclaration_IResolvedUrl());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_IResolvedUrl\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_IResolvedUrl():\n    current.IResolvedUrl;\ndeclare function use_old_TypeAliasDeclaration_IResolvedUrl(\n    use: old.IResolvedUrl);\nuse_old_TypeAliasDeclaration_IResolvedUrl(\n    get_current_TypeAliasDeclaration_IResolvedUrl());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IResolvedUrlBase\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IResolvedUrlBase():\n    old.IResolvedUrlBase;\ndeclare function use_current_InterfaceDeclaration_IResolvedUrlBase(\n    use: current.IResolvedUrlBase);\nuse_current_InterfaceDeclaration_IResolvedUrlBase(\n    get_old_InterfaceDeclaration_IResolvedUrlBase());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IResolvedUrlBase\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IResolvedUrlBase():\n    current.IResolvedUrlBase;\ndeclare function use_old_InterfaceDeclaration_IResolvedUrlBase(\n    use: old.IResolvedUrlBase);\nuse_old_InterfaceDeclaration_IResolvedUrlBase(\n    get_current_InterfaceDeclaration_IResolvedUrlBase());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IStream\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IStream():\n    old.IStream<any>;\ndeclare function use_current_InterfaceDeclaration_IStream(\n    use: current.IStream<any>);\nuse_current_InterfaceDeclaration_IStream(\n    get_old_InterfaceDeclaration_IStream());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IStream\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IStream():\n    current.IStream<any>;\ndeclare function use_old_InterfaceDeclaration_IStream(\n    use: old.IStream<any>);\nuse_old_InterfaceDeclaration_IStream(\n    get_current_InterfaceDeclaration_IStream());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_IStreamResult\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_IStreamResult():\n    old.IStreamResult<any>;\ndeclare function use_current_TypeAliasDeclaration_IStreamResult(\n    use: current.IStreamResult<any>);\nuse_current_TypeAliasDeclaration_IStreamResult(\n    get_old_TypeAliasDeclaration_IStreamResult());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"TypeAliasDeclaration_IStreamResult\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_IStreamResult():\n    current.IStreamResult<any>;\ndeclare function use_old_TypeAliasDeclaration_IStreamResult(\n    use: old.IStreamResult<any>);\nuse_old_TypeAliasDeclaration_IStreamResult(\n    get_current_TypeAliasDeclaration_IStreamResult());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_ISummaryContext\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryContext():\n    old.ISummaryContext;\ndeclare function use_current_InterfaceDeclaration_ISummaryContext(\n    use: current.ISummaryContext);\nuse_current_InterfaceDeclaration_ISummaryContext(\n    get_old_InterfaceDeclaration_ISummaryContext());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_ISummaryContext\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryContext():\n    current.ISummaryContext;\ndeclare function use_old_InterfaceDeclaration_ISummaryContext(\n    use: old.ISummaryContext);\nuse_old_InterfaceDeclaration_ISummaryContext(\n    get_current_InterfaceDeclaration_ISummaryContext());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IThrottlingWarning\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IThrottlingWarning():\n    old.IThrottlingWarning;\ndeclare function use_current_InterfaceDeclaration_IThrottlingWarning(\n    use: current.IThrottlingWarning);\nuse_current_InterfaceDeclaration_IThrottlingWarning(\n    get_old_InterfaceDeclaration_IThrottlingWarning());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IThrottlingWarning\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IThrottlingWarning():\n    current.IThrottlingWarning;\ndeclare function use_old_InterfaceDeclaration_IThrottlingWarning(\n    use: old.IThrottlingWarning);\nuse_old_InterfaceDeclaration_IThrottlingWarning(\n    get_current_InterfaceDeclaration_IThrottlingWarning());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IUrlResolver\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IUrlResolver():\n    old.IUrlResolver;\ndeclare function use_current_InterfaceDeclaration_IUrlResolver(\n    use: current.IUrlResolver);\nuse_current_InterfaceDeclaration_IUrlResolver(\n    get_old_InterfaceDeclaration_IUrlResolver());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IUrlResolver\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IUrlResolver():\n    current.IUrlResolver;\ndeclare function use_old_InterfaceDeclaration_IUrlResolver(\n    use: old.IUrlResolver);\nuse_old_InterfaceDeclaration_IUrlResolver(\n    get_current_InterfaceDeclaration_IUrlResolver());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IWebResolvedUrl\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IWebResolvedUrl():\n    old.IWebResolvedUrl;\ndeclare function use_current_InterfaceDeclaration_IWebResolvedUrl(\n    use: current.IWebResolvedUrl);\nuse_current_InterfaceDeclaration_IWebResolvedUrl(\n    get_old_InterfaceDeclaration_IWebResolvedUrl());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"InterfaceDeclaration_IWebResolvedUrl\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IWebResolvedUrl():\n    current.IWebResolvedUrl;\ndeclare function use_old_InterfaceDeclaration_IWebResolvedUrl(\n    use: old.IWebResolvedUrl);\nuse_old_InterfaceDeclaration_IWebResolvedUrl(\n    get_current_InterfaceDeclaration_IWebResolvedUrl());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_LoaderCachingPolicy\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_LoaderCachingPolicy():\n    old.LoaderCachingPolicy;\ndeclare function use_current_EnumDeclaration_LoaderCachingPolicy(\n    use: current.LoaderCachingPolicy);\nuse_current_EnumDeclaration_LoaderCachingPolicy(\n    get_old_EnumDeclaration_LoaderCachingPolicy());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.42.0:\n* \"EnumDeclaration_LoaderCachingPolicy\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_LoaderCachingPolicy():\n    current.LoaderCachingPolicy;\ndeclare function use_old_EnumDeclaration_LoaderCachingPolicy(\n    use: old.LoaderCachingPolicy);\nuse_old_EnumDeclaration_LoaderCachingPolicy(\n    get_current_EnumDeclaration_LoaderCachingPolicy());\n"]}