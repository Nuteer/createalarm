{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n// Examples of known categories, however category can be any string for extensibility\nexport type TelemetryEventCategory = \"generic\" | \"error\" | \"performance\";\n\n// Logging entire objects is considered extremely dangerous from a telemetry point of view because people\n// can easily add fields to objects that shouldn't be logged and not realize it's going to be logged.\n// General best practice is to explicitly log the fields you care about from objects\nexport type TelemetryEventPropertyType = string | number | boolean | undefined;\n\n/**\n * A property to be logged to telemetry containing both the value and a tag. Tags are generic strings that can be used\n * to mark pieces of information that should be organized or handled differently by loggers in various first or third\n * party scenarios. For example, tags are used to mark PII that should not be stored in logs.\n */\nexport interface ITaggedTelemetryPropertyType {\n    value: TelemetryEventPropertyType,\n    tag: string,\n}\nexport interface ITelemetryProperties {\n    [index: string]: TelemetryEventPropertyType | ITaggedTelemetryPropertyType;\n}\n\n/**\n * Base interface for logging telemetry statements.\n * Can contain any number of properties that get serialized as json payload.\n * @param category - category of the event, like \"error\", \"performance\", \"generic\", etc.\n * @param eventName - name of the event.\n */\nexport interface ITelemetryBaseEvent extends ITelemetryProperties {\n    category: string;\n    eventName: string;\n}\n\n/**\n * Interface to output telemetry events.\n * Implemented by hosting app / loader\n */\nexport interface ITelemetryBaseLogger {\n    /**\n     * An optional boolean which indicates to the user of this interface that tags (i.e. `ITaggedTelemetryPropertyType`\n     * objects) are in use. Eventually this will be a required property, but this is a stopgap that allows older hosts\n     * to continue to pass through telemetry without trouble (this property will simply show up undefined), while our\n     * current logger implementation in `telmetry-utils` handles tags in a separate manner.\n     */\n    supportsTags?: true;\n    send(event: ITelemetryBaseEvent): void;\n}\n\n/**\n * Informational (non-error) telemetry event\n * Maps to category = \"generic\"\n */\nexport interface ITelemetryGenericEvent extends ITelemetryProperties {\n    eventName: string;\n    category?: TelemetryEventCategory;\n}\n\n/**\n * Error telemetry event.\n * Maps to category = \"error\"\n */\n export interface ITelemetryErrorEvent extends ITelemetryProperties {\n    eventName: string;\n}\n\n/**\n * Performance telemetry event.\n * Maps to category = \"performance\"\n */\nexport interface ITelemetryPerformanceEvent extends ITelemetryGenericEvent {\n    duration?: number; // Duration of event (optional)\n}\n\n/**\n * An error object that supports exporting its properties to be logged to telemetry\n */\nexport interface ILoggingError extends Error {\n    /** Return all properties from this object that should be logged to telemetry */\n    getTelemetryProperties(): ITelemetryProperties;\n}\n\n/**\n * ITelemetryLogger interface contains various helper telemetry methods,\n * encoding in one place schemas for various types of Fluid telemetry events.\n * Creates sub-logger that appends properties to all events\n */\nexport interface ITelemetryLogger extends ITelemetryBaseLogger {\n    /**\n     * Actual implementation that sends telemetry event\n     * Implemented by derived classes\n     * @param event - Telemetry event to send over\n     */\n    send(event: ITelemetryBaseEvent): void;\n\n    /**\n     * Send information telemetry event\n     * @param event - Event to send\n     * @param error - optional error object to log\n     */\n    sendTelemetryEvent(event: ITelemetryGenericEvent, error?: any): void;\n\n    /**\n     * Send error telemetry event\n     * @param event - Event to send\n     */\n    sendErrorEvent(event: ITelemetryErrorEvent, error?: any): void;\n\n    /**\n     * Send performance telemetry event\n     * @param event - Event to send\n     */\n    sendPerformanceEvent(event: ITelemetryPerformanceEvent, error?: any): void;\n}\n"]}