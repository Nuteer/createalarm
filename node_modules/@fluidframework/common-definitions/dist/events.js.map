{"version":3,"file":"events.js","sourceRoot":"","sources":["../src/events.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport interface IEvent {\n    // the event emitter polyfill and the node event emitter have different event types:\n    // string | symbol vs. string | number\n    // so for our typing we'll contrain to string, so we work with both\n    (event: string, listener: (...args: any[]) => void);\n}\n\nexport interface IErrorEvent extends IEvent {\n    (event: \"error\", listener: (message: any) => void);\n}\n\nexport interface IEventProvider<TEvent extends IEvent> {\n    readonly on: IEventTransformer<this, TEvent>;\n    readonly once: IEventTransformer<this, TEvent>;\n    readonly off: IEventTransformer<this, TEvent>;\n}\n\n/**\n * Allow an interface to extend an interfaces that already extends an IEventProvider\n *``` typescript\n * interface AEvents extends IEvent{\n *  (event: \"a-event\",listener: (a: number)=>void);\n * }\n * interface A extends IEventProvider<AEvents>{\n *  a: object;\n * }\n *\n * interface BEvents extends IEvent{\n *  (event: \"b-event\",listener: (b: string)=>void);\n * }\n * interface B extends ExtendEventProvider<AEvents, A, BEvents>{\n *  b: boolean;\n * };\n *```\n * interface B will now extend interface A and it's events\n *\n */\nexport type ExtendEventProvider<\n    TBaseEvent extends IEvent,\n    TBase extends IEventProvider<TBaseEvent>,\n    TEvent extends TBaseEvent> =\n        Omit<Omit<Omit<TBase,\"on\">,\"once\">,\"off\"> & IEventProvider<TBaseEvent> & IEventProvider<TEvent>;\n\n// These types handle replaceing IEventThisPlaceHolder with this, so we can\n// support polymorphic this. For instance if an event wanted to be:\n// (event: \"some-event\", listener:(target: this)=>void)\n//\n// it should be writtern as\n// (event: \"some-event\", listener:(target: IEventThisPlaceHolder)=>void)\n//\n// and IEventThisPlaceHolder will be replaced with this.\n// This is all consumers of these types need to know.\n\n// This is the place holder type that should be used instead of this in events\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type IEventThisPlaceHolder = { thisPlaceHolder: \"thisPlaceHolder\" };\n\n// This does the type replacement by changing types of IEventThisPlaceHolder to TThis\nexport type ReplaceIEventThisPlaceHolder<L extends any[], TThis> =\n    L extends any[] ? { [K in keyof L]: L[K] extends IEventThisPlaceHolder ? TThis : L[K] } : L;\n\n// this transforms the event overload by replacing IEventThisPlaceHolder with TThis in the event listener arguments\n// and having the overload return TTHis as well\nexport type TransformedEvent<TThis, E, A extends any[]> =\n    (event: E, listener: (...args: ReplaceIEventThisPlaceHolder<A, TThis>) => void) => TThis;\n\n// This type is a conditional type for transforming all the overloads provides in TEvent.\n// Due to limitations of the typescript typing system, we need to handle each number of overload individually.\n// It currently supports the max of 15 event overloads which is more than we use anywhere.\n// At more than 15 overloads we start to hit TS2589. If we need to move beyond 15 we should evaluate\n// using a mapped type pattern like {\"event\":(listenerArgs)=>void}\n//\nexport type IEventTransformer<TThis, TEvent extends IEvent> =\n    TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: infer E10, listener: (...args: infer A10) => void),\n        (event: infer E11, listener: (...args: infer A11) => void),\n        (event: infer E12, listener: (...args: infer A12) => void),\n        (event: infer E13, listener: (...args: infer A13) => void),\n        (event: infer E14, listener: (...args: infer A14) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9> & TransformedEvent<TThis, E10, A10> & TransformedEvent<TThis, E11, A11> &\n    TransformedEvent<TThis, E12, A12> & TransformedEvent<TThis, E13, A13> & TransformedEvent<TThis, E14, A14>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: infer E10, listener: (...args: infer A10) => void),\n        (event: infer E11, listener: (...args: infer A11) => void),\n        (event: infer E12, listener: (...args: infer A12) => void),\n        (event: infer E13, listener: (...args: infer A13) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9> & TransformedEvent<TThis, E10, A10> & TransformedEvent<TThis, E11, A11> &\n    TransformedEvent<TThis, E12, A12> & TransformedEvent<TThis, E13, A13>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: infer E10, listener: (...args: infer A10) => void),\n        (event: infer E11, listener: (...args: infer A11) => void),\n        (event: infer E12, listener: (...args: infer A12) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9> & TransformedEvent<TThis, E10, A10> & TransformedEvent<TThis, E11, A11> &\n    TransformedEvent<TThis, E12, A12>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: infer E10, listener: (...args: infer A10) => void),\n        (event: infer E11, listener: (...args: infer A11) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9> & TransformedEvent<TThis, E10, A10> & TransformedEvent<TThis, E11, A11>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: infer E10, listener: (...args: infer A10) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9> & TransformedEvent<TThis, E10, A10>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: infer E9, listener: (...args: infer A9) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8> &\n    TransformedEvent<TThis, E9, A9>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: infer E8, listener: (...args: infer A8) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7> & TransformedEvent<TThis, E8, A8>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: infer E7, listener: (...args: infer A7) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6> & TransformedEvent<TThis, E7, A7>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: infer E6, listener: (...args: infer A6) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5> &\n    TransformedEvent<TThis, E6, A6>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: infer E5, listener: (...args: infer A5) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4> & TransformedEvent<TThis, E5, A5>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: infer E4, listener: (...args: infer A4) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3> & TransformedEvent<TThis, E4, A4>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: infer E3, listener: (...args: infer A3) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2> &\n    TransformedEvent<TThis, E3, A3>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: infer E2, listener: (...args: infer A2) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1> & TransformedEvent<TThis, E2, A2>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: infer E1, listener: (...args: infer A1) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0> & TransformedEvent<TThis, E1, A1>\n    : TEvent extends\n    {\n        (event: infer E0, listener: (...args: infer A0) => void),\n        (event: string, listener: (...args: any[]) => void),\n    }\n    ? TransformedEvent<TThis, E0, A0>\n    : TransformedEvent<TThis, string, any[]>;\n"]}