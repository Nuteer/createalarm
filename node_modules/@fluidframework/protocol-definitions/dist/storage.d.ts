/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */
export interface IDocumentAttributes {
    /**
     * Sequence number at which the snapshot was taken
     */
    sequenceNumber: number;
    /**
     * Minimum sequence number when the snapshot was taken
     */
    minimumSequenceNumber: number;
    /**
     * Term number at which the snapshot was taken
     */
    term: number | undefined;
}
export declare enum FileMode {
    File = "100644",
    Executable = "100755",
    Directory = "040000",
    Commit = "160000",
    Symlink = "120000"
}
/**
 * Raw blob stored within the tree
 */
export interface IBlob {
    contents: string;
    encoding: "utf-8" | "base64";
}
export interface IAttachment {
    id: string;
}
export interface ICreateBlobResponse {
    id: string;
    /**
     * @deprecated This will be removed in future.
     */
    url: string;
}
/**
 * A tree entry wraps a path with a type of node
 */
export declare type ITreeEntry = {
    path: string;
    mode: FileMode;
} & ({
    type: TreeEntry.Blob;
    value: IBlob;
} | {
    type: TreeEntry.Commit;
    value: string;
} | {
    type: TreeEntry.Tree;
    value: ITree;
} | {
    type: TreeEntry.Attachment;
    value: IAttachment;
});
/**
 * Type of entries that can be stored in a tree
 */
export declare enum TreeEntry {
    Blob = "Blob",
    Commit = "Commit",
    Tree = "Tree",
    Attachment = "Attachment"
}
export interface ITree {
    entries: ITreeEntry[];
    id?: string;
    unreferenced?: true;
}
export interface ISnapshotTree {
    id?: string;
    blobs: {
        [path: string]: string;
    };
    commits: {
        [path: string]: string;
    };
    trees: {
        [path: string]: ISnapshotTree;
    };
    unreferenced?: true;
}
export interface ISnapshotTreeEx extends ISnapshotTree {
    id: string;
    trees: {
        [path: string]: ISnapshotTreeEx;
    };
}
/**
 * Represents a version of the snapshot of a data store
 */
export interface IVersion {
    id: string;
    treeId: string;
    date?: string;
}
//# sourceMappingURL=storage.d.ts.map