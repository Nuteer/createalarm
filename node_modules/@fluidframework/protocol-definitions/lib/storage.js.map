{"version":3,"file":"storage.js","sourceRoot":"","sources":["../src/storage.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAmBH,MAAM,CAAN,IAAY,QAMX;AAND,WAAY,QAAQ;IAChB,2BAAe,CAAA;IACf,iCAAqB,CAAA;IACrB,gCAAoB,CAAA;IACpB,6BAAiB,CAAA;IACjB,8BAAkB,CAAA;AACtB,CAAC,EANW,QAAQ,KAAR,QAAQ,QAMnB;AAiDD;;GAEG;AACH,MAAM,CAAN,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,0BAAa,CAAA;IACb,8BAAiB,CAAA;IACjB,0BAAa,CAAA;IACb,sCAAyB,CAAA;AAC7B,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport interface IDocumentAttributes {\n    /**\n     * Sequence number at which the snapshot was taken\n     */\n    sequenceNumber: number;\n\n    /**\n     * Minimum sequence number when the snapshot was taken\n     */\n    minimumSequenceNumber: number;\n\n    /**\n     * Term number at which the snapshot was taken\n     */\n    term: number | undefined;\n}\n\nexport enum FileMode {\n    File = \"100644\",\n    Executable = \"100755\",\n    Directory = \"040000\",\n    Commit = \"160000\",\n    Symlink = \"120000\",\n}\n\n/**\n * Raw blob stored within the tree\n */\nexport interface IBlob {\n    // Contents of the blob\n    contents: string;\n\n    // The encoding of the contents string\n    encoding: \"utf-8\" | \"base64\";\n}\n\nexport interface IAttachment {\n    id: string;\n}\n\nexport interface ICreateBlobResponse {\n    id: string;\n    /**\n     * @deprecated This will be removed in future.\n     */\n    url: string;\n}\n\n/**\n * A tree entry wraps a path with a type of node\n */\nexport type ITreeEntry = {\n    // Path to the object\n    path: string;\n    // The file mode; one of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree),\n    // 160000 for submodule (commit), or 120000 for a blob that specifies the path of a symlink\n    mode: FileMode;\n} & (\n{\n    type: TreeEntry.Blob;\n    value: IBlob;\n} | {\n    type: TreeEntry.Commit;\n    value: string;\n} | {\n    type: TreeEntry.Tree;\n    value: ITree;\n} | {\n    type: TreeEntry.Attachment;\n    value: IAttachment;\n});\n\n/**\n * Type of entries that can be stored in a tree\n */\nexport enum TreeEntry {\n    Blob = \"Blob\",\n    Commit = \"Commit\",\n    Tree = \"Tree\",\n    Attachment = \"Attachment\",\n}\n\nexport interface ITree {\n    entries: ITreeEntry[];\n    // Unique ID representing all entries in the tree. Can be used to optimize snapshotting in the case\n    // it is known that the ITree has already been created and stored\n    id?: string;\n    // Indicates that this tree is unreferenced. If this is not present, the tree is considered referenced.\n    unreferenced?: true;\n}\n\nexport interface ISnapshotTree {\n    id? : string;\n    blobs: { [path: string]: string };\n    // TODO: Commits should be removed from here to ISnapshotTreeEx once ODSP snapshots move away from commits\n    commits: { [path: string]: string };\n    trees: { [path: string]: ISnapshotTree };\n    // Indicates that this tree is unreferenced. If this is not present, the tree is considered referenced.\n    unreferenced?: true;\n}\n\nexport interface ISnapshotTreeEx extends ISnapshotTree {\n    id: string;\n    trees: { [path: string]: ISnapshotTreeEx };\n}\n\n/**\n * Represents a version of the snapshot of a data store\n */\nexport interface IVersion {\n    // Version ID\n    id: string;\n\n    // Tree ID for this version of the snapshot\n    treeId: string;\n\n    // Time when snapshot was generated.\n    // ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ\n    date?: string;\n}\n"]}