{"version":3,"file":"validate0.1024.0.js","sourceRoot":"","sources":["../../../src/test/types/validate0.1024.0.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n/*\n * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n * Generated by fluid-type-validator in @fluidframework/build-tools.\n */\nimport * as old from \"@fluidframework/protocol-definitions-0.1024.0\";\nimport * as current from \"../../index\";\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ConnectionMode\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_ConnectionMode():\n    old.ConnectionMode;\ndeclare function use_current_TypeAliasDeclaration_ConnectionMode(\n    use: current.ConnectionMode);\nuse_current_TypeAliasDeclaration_ConnectionMode(\n    get_old_TypeAliasDeclaration_ConnectionMode());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ConnectionMode\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_ConnectionMode():\n    current.ConnectionMode;\ndeclare function use_old_TypeAliasDeclaration_ConnectionMode(\n    use: old.ConnectionMode);\nuse_old_TypeAliasDeclaration_ConnectionMode(\n    get_current_TypeAliasDeclaration_ConnectionMode());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_FileMode\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_FileMode():\n    old.FileMode;\ndeclare function use_current_EnumDeclaration_FileMode(\n    use: current.FileMode);\nuse_current_EnumDeclaration_FileMode(\n    get_old_EnumDeclaration_FileMode());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_FileMode\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_FileMode():\n    current.FileMode;\ndeclare function use_old_EnumDeclaration_FileMode(\n    use: old.FileMode);\nuse_old_EnumDeclaration_FileMode(\n    get_current_EnumDeclaration_FileMode());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IActorClient\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IActorClient():\n    old.IActorClient;\ndeclare function use_current_InterfaceDeclaration_IActorClient(\n    use: current.IActorClient);\nuse_current_InterfaceDeclaration_IActorClient(\n    get_old_InterfaceDeclaration_IActorClient());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IActorClient\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IActorClient():\n    current.IActorClient;\ndeclare function use_old_InterfaceDeclaration_IActorClient(\n    use: old.IActorClient);\nuse_old_InterfaceDeclaration_IActorClient(\n    get_current_InterfaceDeclaration_IActorClient());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_IApprovedProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_IApprovedProposal():\n    old.IApprovedProposal;\ndeclare function use_current_TypeAliasDeclaration_IApprovedProposal(\n    use: current.IApprovedProposal);\nuse_current_TypeAliasDeclaration_IApprovedProposal(\n    get_old_TypeAliasDeclaration_IApprovedProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_IApprovedProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_IApprovedProposal():\n    current.IApprovedProposal;\ndeclare function use_old_TypeAliasDeclaration_IApprovedProposal(\n    use: old.IApprovedProposal);\nuse_old_TypeAliasDeclaration_IApprovedProposal(\n    get_current_TypeAliasDeclaration_IApprovedProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IAttachment\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IAttachment():\n    old.IAttachment;\ndeclare function use_current_InterfaceDeclaration_IAttachment(\n    use: current.IAttachment);\nuse_current_InterfaceDeclaration_IAttachment(\n    get_old_InterfaceDeclaration_IAttachment());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IAttachment\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IAttachment():\n    current.IAttachment;\ndeclare function use_old_InterfaceDeclaration_IAttachment(\n    use: old.IAttachment);\nuse_old_InterfaceDeclaration_IAttachment(\n    get_current_InterfaceDeclaration_IAttachment());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IBlob\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IBlob():\n    old.IBlob;\ndeclare function use_current_InterfaceDeclaration_IBlob(\n    use: current.IBlob);\nuse_current_InterfaceDeclaration_IBlob(\n    // @ts-expect-error compatibility expected to be broken\n    get_old_InterfaceDeclaration_IBlob());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IBlob\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IBlob():\n    current.IBlob;\ndeclare function use_old_InterfaceDeclaration_IBlob(\n    use: old.IBlob);\nuse_old_InterfaceDeclaration_IBlob(\n    get_current_InterfaceDeclaration_IBlob());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IBranchOrigin\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IBranchOrigin():\n    old.IBranchOrigin;\ndeclare function use_current_InterfaceDeclaration_IBranchOrigin(\n    use: current.IBranchOrigin);\nuse_current_InterfaceDeclaration_IBranchOrigin(\n    get_old_InterfaceDeclaration_IBranchOrigin());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IBranchOrigin\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IBranchOrigin():\n    current.IBranchOrigin;\ndeclare function use_old_InterfaceDeclaration_IBranchOrigin(\n    use: old.IBranchOrigin);\nuse_old_InterfaceDeclaration_IBranchOrigin(\n    get_current_InterfaceDeclaration_IBranchOrigin());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ICapabilities\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ICapabilities():\n    old.ICapabilities;\ndeclare function use_current_InterfaceDeclaration_ICapabilities(\n    use: current.ICapabilities);\nuse_current_InterfaceDeclaration_ICapabilities(\n    get_old_InterfaceDeclaration_ICapabilities());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ICapabilities\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ICapabilities():\n    current.ICapabilities;\ndeclare function use_old_InterfaceDeclaration_ICapabilities(\n    use: old.ICapabilities);\nuse_old_InterfaceDeclaration_ICapabilities(\n    get_current_InterfaceDeclaration_ICapabilities());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClient\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IClient():\n    old.IClient;\ndeclare function use_current_InterfaceDeclaration_IClient(\n    use: current.IClient);\nuse_current_InterfaceDeclaration_IClient(\n    get_old_InterfaceDeclaration_IClient());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClient\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IClient():\n    current.IClient;\ndeclare function use_old_InterfaceDeclaration_IClient(\n    use: old.IClient);\nuse_old_InterfaceDeclaration_IClient(\n    get_current_InterfaceDeclaration_IClient());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientConfiguration\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IClientConfiguration():\n    old.IClientConfiguration;\ndeclare function use_current_InterfaceDeclaration_IClientConfiguration(\n    use: current.IClientConfiguration);\nuse_current_InterfaceDeclaration_IClientConfiguration(\n    get_old_InterfaceDeclaration_IClientConfiguration());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientConfiguration\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IClientConfiguration():\n    current.IClientConfiguration;\ndeclare function use_old_InterfaceDeclaration_IClientConfiguration(\n    use: old.IClientConfiguration);\nuse_old_InterfaceDeclaration_IClientConfiguration(\n    get_current_InterfaceDeclaration_IClientConfiguration());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientDetails\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IClientDetails():\n    old.IClientDetails;\ndeclare function use_current_InterfaceDeclaration_IClientDetails(\n    use: current.IClientDetails);\nuse_current_InterfaceDeclaration_IClientDetails(\n    get_old_InterfaceDeclaration_IClientDetails());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientDetails\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IClientDetails():\n    current.IClientDetails;\ndeclare function use_old_InterfaceDeclaration_IClientDetails(\n    use: old.IClientDetails);\nuse_old_InterfaceDeclaration_IClientDetails(\n    get_current_InterfaceDeclaration_IClientDetails());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientJoin\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IClientJoin():\n    old.IClientJoin;\ndeclare function use_current_InterfaceDeclaration_IClientJoin(\n    use: current.IClientJoin);\nuse_current_InterfaceDeclaration_IClientJoin(\n    get_old_InterfaceDeclaration_IClientJoin());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IClientJoin\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IClientJoin():\n    current.IClientJoin;\ndeclare function use_old_InterfaceDeclaration_IClientJoin(\n    use: old.IClientJoin);\nuse_old_InterfaceDeclaration_IClientJoin(\n    get_current_InterfaceDeclaration_IClientJoin());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ICommittedProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_ICommittedProposal():\n    old.ICommittedProposal;\ndeclare function use_current_TypeAliasDeclaration_ICommittedProposal(\n    use: current.ICommittedProposal);\nuse_current_TypeAliasDeclaration_ICommittedProposal(\n    get_old_TypeAliasDeclaration_ICommittedProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ICommittedProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_ICommittedProposal():\n    current.ICommittedProposal;\ndeclare function use_old_TypeAliasDeclaration_ICommittedProposal(\n    use: old.ICommittedProposal);\nuse_old_TypeAliasDeclaration_ICommittedProposal(\n    get_current_TypeAliasDeclaration_ICommittedProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IConnect\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IConnect():\n    old.IConnect;\ndeclare function use_current_InterfaceDeclaration_IConnect(\n    use: current.IConnect);\nuse_current_InterfaceDeclaration_IConnect(\n    get_old_InterfaceDeclaration_IConnect());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IConnect\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IConnect():\n    current.IConnect;\ndeclare function use_old_InterfaceDeclaration_IConnect(\n    use: old.IConnect);\nuse_old_InterfaceDeclaration_IConnect(\n    get_current_InterfaceDeclaration_IConnect());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IConnected\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IConnected():\n    old.IConnected;\ndeclare function use_current_InterfaceDeclaration_IConnected(\n    use: current.IConnected);\nuse_current_InterfaceDeclaration_IConnected(\n    get_old_InterfaceDeclaration_IConnected());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IConnected\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IConnected():\n    current.IConnected;\ndeclare function use_old_InterfaceDeclaration_IConnected(\n    use: old.IConnected);\nuse_old_InterfaceDeclaration_IConnected(\n    get_current_InterfaceDeclaration_IConnected());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ICreateBlobResponse\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ICreateBlobResponse():\n    old.ICreateBlobResponse;\ndeclare function use_current_InterfaceDeclaration_ICreateBlobResponse(\n    use: current.ICreateBlobResponse);\nuse_current_InterfaceDeclaration_ICreateBlobResponse(\n    get_old_InterfaceDeclaration_ICreateBlobResponse());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ICreateBlobResponse\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ICreateBlobResponse():\n    current.ICreateBlobResponse;\ndeclare function use_old_InterfaceDeclaration_ICreateBlobResponse(\n    use: old.ICreateBlobResponse);\nuse_old_InterfaceDeclaration_ICreateBlobResponse(\n    get_current_InterfaceDeclaration_ICreateBlobResponse());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentAttributes\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentAttributes():\n    old.IDocumentAttributes;\ndeclare function use_current_InterfaceDeclaration_IDocumentAttributes(\n    use: current.IDocumentAttributes);\nuse_current_InterfaceDeclaration_IDocumentAttributes(\n    get_old_InterfaceDeclaration_IDocumentAttributes());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentAttributes\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentAttributes():\n    current.IDocumentAttributes;\ndeclare function use_old_InterfaceDeclaration_IDocumentAttributes(\n    use: old.IDocumentAttributes);\nuse_old_InterfaceDeclaration_IDocumentAttributes(\n    // @ts-expect-error compatibility expected to be broken\n    get_current_InterfaceDeclaration_IDocumentAttributes());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentMessage():\n    old.IDocumentMessage;\ndeclare function use_current_InterfaceDeclaration_IDocumentMessage(\n    use: current.IDocumentMessage);\nuse_current_InterfaceDeclaration_IDocumentMessage(\n    get_old_InterfaceDeclaration_IDocumentMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentMessage():\n    current.IDocumentMessage;\ndeclare function use_old_InterfaceDeclaration_IDocumentMessage(\n    use: old.IDocumentMessage);\nuse_old_InterfaceDeclaration_IDocumentMessage(\n    get_current_InterfaceDeclaration_IDocumentMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentSystemMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IDocumentSystemMessage():\n    old.IDocumentSystemMessage;\ndeclare function use_current_InterfaceDeclaration_IDocumentSystemMessage(\n    use: current.IDocumentSystemMessage);\nuse_current_InterfaceDeclaration_IDocumentSystemMessage(\n    get_old_InterfaceDeclaration_IDocumentSystemMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IDocumentSystemMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IDocumentSystemMessage():\n    current.IDocumentSystemMessage;\ndeclare function use_old_InterfaceDeclaration_IDocumentSystemMessage(\n    use: old.IDocumentSystemMessage);\nuse_old_InterfaceDeclaration_IDocumentSystemMessage(\n    get_current_InterfaceDeclaration_IDocumentSystemMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IHelpMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IHelpMessage():\n    old.IHelpMessage;\ndeclare function use_current_InterfaceDeclaration_IHelpMessage(\n    use: current.IHelpMessage);\nuse_current_InterfaceDeclaration_IHelpMessage(\n    get_old_InterfaceDeclaration_IHelpMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IHelpMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IHelpMessage():\n    current.IHelpMessage;\ndeclare function use_old_InterfaceDeclaration_IHelpMessage(\n    use: old.IHelpMessage);\nuse_old_InterfaceDeclaration_IHelpMessage(\n    get_current_InterfaceDeclaration_IHelpMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_INack\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_INack():\n    old.INack;\ndeclare function use_current_InterfaceDeclaration_INack(\n    use: current.INack);\nuse_current_InterfaceDeclaration_INack(\n    get_old_InterfaceDeclaration_INack());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_INack\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_INack():\n    current.INack;\ndeclare function use_old_InterfaceDeclaration_INack(\n    use: old.INack);\nuse_old_InterfaceDeclaration_INack(\n    get_current_InterfaceDeclaration_INack());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_INackContent\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_INackContent():\n    old.INackContent;\ndeclare function use_current_InterfaceDeclaration_INackContent(\n    use: current.INackContent);\nuse_current_InterfaceDeclaration_INackContent(\n    get_old_InterfaceDeclaration_INackContent());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_INackContent\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_INackContent():\n    current.INackContent;\ndeclare function use_old_InterfaceDeclaration_INackContent(\n    use: old.INackContent);\nuse_old_InterfaceDeclaration_INackContent(\n    get_current_InterfaceDeclaration_INackContent());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IPendingProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IPendingProposal():\n    old.IPendingProposal;\ndeclare function use_current_InterfaceDeclaration_IPendingProposal(\n    use: current.IPendingProposal);\nuse_current_InterfaceDeclaration_IPendingProposal(\n    get_old_InterfaceDeclaration_IPendingProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IPendingProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IPendingProposal():\n    current.IPendingProposal;\ndeclare function use_old_InterfaceDeclaration_IPendingProposal(\n    use: old.IPendingProposal);\nuse_old_InterfaceDeclaration_IPendingProposal(\n    get_current_InterfaceDeclaration_IPendingProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProcessMessageResult\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProcessMessageResult():\n    old.IProcessMessageResult;\ndeclare function use_current_InterfaceDeclaration_IProcessMessageResult(\n    use: current.IProcessMessageResult);\nuse_current_InterfaceDeclaration_IProcessMessageResult(\n    get_old_InterfaceDeclaration_IProcessMessageResult());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProcessMessageResult\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProcessMessageResult():\n    current.IProcessMessageResult;\ndeclare function use_old_InterfaceDeclaration_IProcessMessageResult(\n    use: old.IProcessMessageResult);\nuse_old_InterfaceDeclaration_IProcessMessageResult(\n    get_current_InterfaceDeclaration_IProcessMessageResult());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProposal():\n    old.IProposal;\ndeclare function use_current_InterfaceDeclaration_IProposal(\n    use: current.IProposal);\nuse_current_InterfaceDeclaration_IProposal(\n    get_old_InterfaceDeclaration_IProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProposal():\n    current.IProposal;\ndeclare function use_old_InterfaceDeclaration_IProposal(\n    use: old.IProposal);\nuse_old_InterfaceDeclaration_IProposal(\n    get_current_InterfaceDeclaration_IProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProtocolState\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProtocolState():\n    old.IProtocolState;\ndeclare function use_current_InterfaceDeclaration_IProtocolState(\n    use: current.IProtocolState);\nuse_current_InterfaceDeclaration_IProtocolState(\n    get_old_InterfaceDeclaration_IProtocolState());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IProtocolState\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProtocolState():\n    current.IProtocolState;\ndeclare function use_old_InterfaceDeclaration_IProtocolState(\n    use: old.IProtocolState);\nuse_old_InterfaceDeclaration_IProtocolState(\n    get_current_InterfaceDeclaration_IProtocolState());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IQueueMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IQueueMessage():\n    old.IQueueMessage;\ndeclare function use_current_InterfaceDeclaration_IQueueMessage(\n    use: current.IQueueMessage);\nuse_current_InterfaceDeclaration_IQueueMessage(\n    get_old_InterfaceDeclaration_IQueueMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IQueueMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IQueueMessage():\n    current.IQueueMessage;\ndeclare function use_old_InterfaceDeclaration_IQueueMessage(\n    use: old.IQueueMessage);\nuse_old_InterfaceDeclaration_IQueueMessage(\n    get_current_InterfaceDeclaration_IQueueMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IQuorum\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IQuorum():\n    old.IQuorum;\ndeclare function use_current_InterfaceDeclaration_IQuorum(\n    use: current.IQuorum);\nuse_current_InterfaceDeclaration_IQuorum(\n    // @ts-expect-error compatibility expected to be broken\n    get_old_InterfaceDeclaration_IQuorum());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IQuorum\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IQuorum():\n    current.IQuorum;\ndeclare function use_old_InterfaceDeclaration_IQuorum(\n    use: old.IQuorum);\nuse_old_InterfaceDeclaration_IQuorum(\n    get_current_InterfaceDeclaration_IQuorum());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"RemovedInterfaceDeclaration_IQuorumEvents\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IQuorumEvents():\n    old.IQuorumEvents;\ndeclare function use_current_RemovedInterfaceDeclaration_IQuorumEvents(\n    use: current.IQuorumEvents);\nuse_current_RemovedInterfaceDeclaration_IQuorumEvents(\n    get_old_InterfaceDeclaration_IQuorumEvents());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"RemovedInterfaceDeclaration_IQuorumEvents\": {\"backCompat\": false}\n*/\ndeclare function get_current_RemovedInterfaceDeclaration_IQuorumEvents():\n    current.IQuorumEvents;\ndeclare function use_old_InterfaceDeclaration_IQuorumEvents(\n    use: old.IQuorumEvents);\nuse_old_InterfaceDeclaration_IQuorumEvents(\n    get_current_RemovedInterfaceDeclaration_IQuorumEvents());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedClient\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISequencedClient():\n    old.ISequencedClient;\ndeclare function use_current_InterfaceDeclaration_ISequencedClient(\n    use: current.ISequencedClient);\nuse_current_InterfaceDeclaration_ISequencedClient(\n    get_old_InterfaceDeclaration_ISequencedClient());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedClient\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISequencedClient():\n    current.ISequencedClient;\ndeclare function use_old_InterfaceDeclaration_ISequencedClient(\n    use: old.ISequencedClient);\nuse_old_InterfaceDeclaration_ISequencedClient(\n    get_current_InterfaceDeclaration_ISequencedClient());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentAugmentedMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage():\n    old.ISequencedDocumentAugmentedMessage;\ndeclare function use_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(\n    use: current.ISequencedDocumentAugmentedMessage);\nuse_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(\n    get_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentAugmentedMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage():\n    current.ISequencedDocumentAugmentedMessage;\ndeclare function use_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(\n    use: old.ISequencedDocumentAugmentedMessage);\nuse_old_InterfaceDeclaration_ISequencedDocumentAugmentedMessage(\n    get_current_InterfaceDeclaration_ISequencedDocumentAugmentedMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISequencedDocumentMessage():\n    old.ISequencedDocumentMessage;\ndeclare function use_current_InterfaceDeclaration_ISequencedDocumentMessage(\n    use: current.ISequencedDocumentMessage);\nuse_current_InterfaceDeclaration_ISequencedDocumentMessage(\n    get_old_InterfaceDeclaration_ISequencedDocumentMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISequencedDocumentMessage():\n    current.ISequencedDocumentMessage;\ndeclare function use_old_InterfaceDeclaration_ISequencedDocumentMessage(\n    use: old.ISequencedDocumentMessage);\nuse_old_InterfaceDeclaration_ISequencedDocumentMessage(\n    get_current_InterfaceDeclaration_ISequencedDocumentMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentSystemMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISequencedDocumentSystemMessage():\n    old.ISequencedDocumentSystemMessage;\ndeclare function use_current_InterfaceDeclaration_ISequencedDocumentSystemMessage(\n    use: current.ISequencedDocumentSystemMessage);\nuse_current_InterfaceDeclaration_ISequencedDocumentSystemMessage(\n    get_old_InterfaceDeclaration_ISequencedDocumentSystemMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISequencedDocumentSystemMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISequencedDocumentSystemMessage():\n    current.ISequencedDocumentSystemMessage;\ndeclare function use_old_InterfaceDeclaration_ISequencedDocumentSystemMessage(\n    use: old.ISequencedDocumentSystemMessage);\nuse_old_InterfaceDeclaration_ISequencedDocumentSystemMessage(\n    get_current_InterfaceDeclaration_ISequencedDocumentSystemMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ISequencedProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_ISequencedProposal():\n    old.ISequencedProposal;\ndeclare function use_current_TypeAliasDeclaration_ISequencedProposal(\n    use: current.ISequencedProposal);\nuse_current_TypeAliasDeclaration_ISequencedProposal(\n    get_old_TypeAliasDeclaration_ISequencedProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ISequencedProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_ISequencedProposal():\n    current.ISequencedProposal;\ndeclare function use_old_TypeAliasDeclaration_ISequencedProposal(\n    use: old.ISequencedProposal);\nuse_old_TypeAliasDeclaration_ISequencedProposal(\n    get_current_TypeAliasDeclaration_ISequencedProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IServerError\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IServerError():\n    old.IServerError;\ndeclare function use_current_InterfaceDeclaration_IServerError(\n    use: current.IServerError);\nuse_current_InterfaceDeclaration_IServerError(\n    get_old_InterfaceDeclaration_IServerError());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IServerError\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IServerError():\n    current.IServerError;\ndeclare function use_old_InterfaceDeclaration_IServerError(\n    use: old.IServerError);\nuse_old_InterfaceDeclaration_IServerError(\n    get_current_InterfaceDeclaration_IServerError());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISignalClient\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISignalClient():\n    old.ISignalClient;\ndeclare function use_current_InterfaceDeclaration_ISignalClient(\n    use: current.ISignalClient);\nuse_current_InterfaceDeclaration_ISignalClient(\n    get_old_InterfaceDeclaration_ISignalClient());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISignalClient\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISignalClient():\n    current.ISignalClient;\ndeclare function use_old_InterfaceDeclaration_ISignalClient(\n    use: old.ISignalClient);\nuse_old_InterfaceDeclaration_ISignalClient(\n    get_current_InterfaceDeclaration_ISignalClient());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISignalMessage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISignalMessage():\n    old.ISignalMessage;\ndeclare function use_current_InterfaceDeclaration_ISignalMessage(\n    use: current.ISignalMessage);\nuse_current_InterfaceDeclaration_ISignalMessage(\n    get_old_InterfaceDeclaration_ISignalMessage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISignalMessage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISignalMessage():\n    current.ISignalMessage;\ndeclare function use_old_InterfaceDeclaration_ISignalMessage(\n    use: old.ISignalMessage);\nuse_old_InterfaceDeclaration_ISignalMessage(\n    get_current_InterfaceDeclaration_ISignalMessage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISnapshotTree\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISnapshotTree():\n    old.ISnapshotTree;\ndeclare function use_current_InterfaceDeclaration_ISnapshotTree(\n    use: current.ISnapshotTree);\nuse_current_InterfaceDeclaration_ISnapshotTree(\n    get_old_InterfaceDeclaration_ISnapshotTree());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISnapshotTree\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISnapshotTree():\n    current.ISnapshotTree;\ndeclare function use_old_InterfaceDeclaration_ISnapshotTree(\n    use: old.ISnapshotTree);\nuse_old_InterfaceDeclaration_ISnapshotTree(\n    get_current_InterfaceDeclaration_ISnapshotTree());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISnapshotTreeEx\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISnapshotTreeEx():\n    old.ISnapshotTreeEx;\ndeclare function use_current_InterfaceDeclaration_ISnapshotTreeEx(\n    use: current.ISnapshotTreeEx);\nuse_current_InterfaceDeclaration_ISnapshotTreeEx(\n    get_old_InterfaceDeclaration_ISnapshotTreeEx());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISnapshotTreeEx\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISnapshotTreeEx():\n    current.ISnapshotTreeEx;\ndeclare function use_old_InterfaceDeclaration_ISnapshotTreeEx(\n    use: old.ISnapshotTreeEx);\nuse_old_InterfaceDeclaration_ISnapshotTreeEx(\n    get_current_InterfaceDeclaration_ISnapshotTreeEx());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAck\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryAck():\n    old.ISummaryAck;\ndeclare function use_current_InterfaceDeclaration_ISummaryAck(\n    use: current.ISummaryAck);\nuse_current_InterfaceDeclaration_ISummaryAck(\n    get_old_InterfaceDeclaration_ISummaryAck());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAck\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryAck():\n    current.ISummaryAck;\ndeclare function use_old_InterfaceDeclaration_ISummaryAck(\n    use: old.ISummaryAck);\nuse_old_InterfaceDeclaration_ISummaryAck(\n    get_current_InterfaceDeclaration_ISummaryAck());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAttachment\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryAttachment():\n    old.ISummaryAttachment;\ndeclare function use_current_InterfaceDeclaration_ISummaryAttachment(\n    use: current.ISummaryAttachment);\nuse_current_InterfaceDeclaration_ISummaryAttachment(\n    get_old_InterfaceDeclaration_ISummaryAttachment());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAttachment\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryAttachment():\n    current.ISummaryAttachment;\ndeclare function use_old_InterfaceDeclaration_ISummaryAttachment(\n    use: old.ISummaryAttachment);\nuse_old_InterfaceDeclaration_ISummaryAttachment(\n    get_current_InterfaceDeclaration_ISummaryAttachment());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAuthor\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryAuthor():\n    old.ISummaryAuthor;\ndeclare function use_current_InterfaceDeclaration_ISummaryAuthor(\n    use: current.ISummaryAuthor);\nuse_current_InterfaceDeclaration_ISummaryAuthor(\n    get_old_InterfaceDeclaration_ISummaryAuthor());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryAuthor\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryAuthor():\n    current.ISummaryAuthor;\ndeclare function use_old_InterfaceDeclaration_ISummaryAuthor(\n    use: old.ISummaryAuthor);\nuse_old_InterfaceDeclaration_ISummaryAuthor(\n    get_current_InterfaceDeclaration_ISummaryAuthor());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryBlob\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryBlob():\n    old.ISummaryBlob;\ndeclare function use_current_InterfaceDeclaration_ISummaryBlob(\n    use: current.ISummaryBlob);\nuse_current_InterfaceDeclaration_ISummaryBlob(\n    get_old_InterfaceDeclaration_ISummaryBlob());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryBlob\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryBlob():\n    current.ISummaryBlob;\ndeclare function use_old_InterfaceDeclaration_ISummaryBlob(\n    use: old.ISummaryBlob);\nuse_old_InterfaceDeclaration_ISummaryBlob(\n    get_current_InterfaceDeclaration_ISummaryBlob());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryCommitter\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryCommitter():\n    old.ISummaryCommitter;\ndeclare function use_current_InterfaceDeclaration_ISummaryCommitter(\n    use: current.ISummaryCommitter);\nuse_current_InterfaceDeclaration_ISummaryCommitter(\n    get_old_InterfaceDeclaration_ISummaryCommitter());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryCommitter\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryCommitter():\n    current.ISummaryCommitter;\ndeclare function use_old_InterfaceDeclaration_ISummaryCommitter(\n    use: old.ISummaryCommitter);\nuse_old_InterfaceDeclaration_ISummaryCommitter(\n    get_current_InterfaceDeclaration_ISummaryCommitter());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryConfiguration\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryConfiguration():\n    old.ISummaryConfiguration;\ndeclare function use_current_InterfaceDeclaration_ISummaryConfiguration(\n    use: current.ISummaryConfiguration);\nuse_current_InterfaceDeclaration_ISummaryConfiguration(\n    get_old_InterfaceDeclaration_ISummaryConfiguration());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryConfiguration\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryConfiguration():\n    current.ISummaryConfiguration;\ndeclare function use_old_InterfaceDeclaration_ISummaryConfiguration(\n    use: old.ISummaryConfiguration);\nuse_old_InterfaceDeclaration_ISummaryConfiguration(\n    get_current_InterfaceDeclaration_ISummaryConfiguration());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryContent\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryContent():\n    old.ISummaryContent;\ndeclare function use_current_InterfaceDeclaration_ISummaryContent(\n    use: current.ISummaryContent);\nuse_current_InterfaceDeclaration_ISummaryContent(\n    get_old_InterfaceDeclaration_ISummaryContent());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryContent\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryContent():\n    current.ISummaryContent;\ndeclare function use_old_InterfaceDeclaration_ISummaryContent(\n    use: old.ISummaryContent);\nuse_old_InterfaceDeclaration_ISummaryContent(\n    get_current_InterfaceDeclaration_ISummaryContent());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryHandle():\n    old.ISummaryHandle;\ndeclare function use_current_InterfaceDeclaration_ISummaryHandle(\n    use: current.ISummaryHandle);\nuse_current_InterfaceDeclaration_ISummaryHandle(\n    get_old_InterfaceDeclaration_ISummaryHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryHandle():\n    current.ISummaryHandle;\ndeclare function use_old_InterfaceDeclaration_ISummaryHandle(\n    use: old.ISummaryHandle);\nuse_old_InterfaceDeclaration_ISummaryHandle(\n    get_current_InterfaceDeclaration_ISummaryHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryNack\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryNack():\n    old.ISummaryNack;\ndeclare function use_current_InterfaceDeclaration_ISummaryNack(\n    use: current.ISummaryNack);\nuse_current_InterfaceDeclaration_ISummaryNack(\n    get_old_InterfaceDeclaration_ISummaryNack());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryNack\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryNack():\n    current.ISummaryNack;\ndeclare function use_old_InterfaceDeclaration_ISummaryNack(\n    use: old.ISummaryNack);\nuse_old_InterfaceDeclaration_ISummaryNack(\n    get_current_InterfaceDeclaration_ISummaryNack());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryProposal\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryProposal():\n    old.ISummaryProposal;\ndeclare function use_current_InterfaceDeclaration_ISummaryProposal(\n    use: current.ISummaryProposal);\nuse_current_InterfaceDeclaration_ISummaryProposal(\n    get_old_InterfaceDeclaration_ISummaryProposal());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryProposal\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryProposal():\n    current.ISummaryProposal;\ndeclare function use_old_InterfaceDeclaration_ISummaryProposal(\n    use: old.ISummaryProposal);\nuse_old_InterfaceDeclaration_ISummaryProposal(\n    get_current_InterfaceDeclaration_ISummaryProposal());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryTokenClaims\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryTokenClaims():\n    old.ISummaryTokenClaims;\ndeclare function use_current_InterfaceDeclaration_ISummaryTokenClaims(\n    use: current.ISummaryTokenClaims);\nuse_current_InterfaceDeclaration_ISummaryTokenClaims(\n    get_old_InterfaceDeclaration_ISummaryTokenClaims());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryTokenClaims\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryTokenClaims():\n    current.ISummaryTokenClaims;\ndeclare function use_old_InterfaceDeclaration_ISummaryTokenClaims(\n    use: old.ISummaryTokenClaims);\nuse_old_InterfaceDeclaration_ISummaryTokenClaims(\n    get_current_InterfaceDeclaration_ISummaryTokenClaims());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryTree\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISummaryTree():\n    old.ISummaryTree;\ndeclare function use_current_InterfaceDeclaration_ISummaryTree(\n    use: current.ISummaryTree);\nuse_current_InterfaceDeclaration_ISummaryTree(\n    get_old_InterfaceDeclaration_ISummaryTree());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ISummaryTree\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISummaryTree():\n    current.ISummaryTree;\ndeclare function use_old_InterfaceDeclaration_ISummaryTree(\n    use: old.ISummaryTree);\nuse_old_InterfaceDeclaration_ISummaryTree(\n    get_current_InterfaceDeclaration_ISummaryTree());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenClaims\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ITokenClaims():\n    old.ITokenClaims;\ndeclare function use_current_InterfaceDeclaration_ITokenClaims(\n    use: current.ITokenClaims);\nuse_current_InterfaceDeclaration_ITokenClaims(\n    get_old_InterfaceDeclaration_ITokenClaims());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenClaims\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ITokenClaims():\n    current.ITokenClaims;\ndeclare function use_old_InterfaceDeclaration_ITokenClaims(\n    use: old.ITokenClaims);\nuse_old_InterfaceDeclaration_ITokenClaims(\n    get_current_InterfaceDeclaration_ITokenClaims());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenProvider\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ITokenProvider():\n    old.ITokenProvider;\ndeclare function use_current_InterfaceDeclaration_ITokenProvider(\n    use: current.ITokenProvider);\nuse_current_InterfaceDeclaration_ITokenProvider(\n    get_old_InterfaceDeclaration_ITokenProvider());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenProvider\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ITokenProvider():\n    current.ITokenProvider;\ndeclare function use_old_InterfaceDeclaration_ITokenProvider(\n    use: old.ITokenProvider);\nuse_old_InterfaceDeclaration_ITokenProvider(\n    get_current_InterfaceDeclaration_ITokenProvider());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenService\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ITokenService():\n    old.ITokenService;\ndeclare function use_current_InterfaceDeclaration_ITokenService(\n    use: current.ITokenService);\nuse_current_InterfaceDeclaration_ITokenService(\n    get_old_InterfaceDeclaration_ITokenService());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITokenService\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ITokenService():\n    current.ITokenService;\ndeclare function use_old_InterfaceDeclaration_ITokenService(\n    use: old.ITokenService);\nuse_old_InterfaceDeclaration_ITokenService(\n    get_current_InterfaceDeclaration_ITokenService());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITrace\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ITrace():\n    old.ITrace;\ndeclare function use_current_InterfaceDeclaration_ITrace(\n    use: current.ITrace);\nuse_current_InterfaceDeclaration_ITrace(\n    get_old_InterfaceDeclaration_ITrace());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITrace\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ITrace():\n    current.ITrace;\ndeclare function use_old_InterfaceDeclaration_ITrace(\n    use: old.ITrace);\nuse_old_InterfaceDeclaration_ITrace(\n    get_current_InterfaceDeclaration_ITrace());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITree\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ITree():\n    old.ITree;\ndeclare function use_current_InterfaceDeclaration_ITree(\n    use: current.ITree);\nuse_current_InterfaceDeclaration_ITree(\n    // @ts-expect-error compatibility expected to be broken\n    get_old_InterfaceDeclaration_ITree());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_ITree\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ITree():\n    current.ITree;\ndeclare function use_old_InterfaceDeclaration_ITree(\n    use: old.ITree);\nuse_old_InterfaceDeclaration_ITree(\n    get_current_InterfaceDeclaration_ITree());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ITreeEntry\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_ITreeEntry():\n    old.ITreeEntry;\ndeclare function use_current_TypeAliasDeclaration_ITreeEntry(\n    use: current.ITreeEntry);\nuse_current_TypeAliasDeclaration_ITreeEntry(\n    // @ts-expect-error compatibility expected to be broken\n    get_old_TypeAliasDeclaration_ITreeEntry());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_ITreeEntry\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_ITreeEntry():\n    current.ITreeEntry;\ndeclare function use_old_TypeAliasDeclaration_ITreeEntry(\n    use: old.ITreeEntry);\nuse_old_TypeAliasDeclaration_ITreeEntry(\n    get_current_TypeAliasDeclaration_ITreeEntry());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IUploadedSummaryDetails\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IUploadedSummaryDetails():\n    old.IUploadedSummaryDetails;\ndeclare function use_current_InterfaceDeclaration_IUploadedSummaryDetails(\n    use: current.IUploadedSummaryDetails);\nuse_current_InterfaceDeclaration_IUploadedSummaryDetails(\n    get_old_InterfaceDeclaration_IUploadedSummaryDetails());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IUploadedSummaryDetails\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IUploadedSummaryDetails():\n    current.IUploadedSummaryDetails;\ndeclare function use_old_InterfaceDeclaration_IUploadedSummaryDetails(\n    use: old.IUploadedSummaryDetails);\nuse_old_InterfaceDeclaration_IUploadedSummaryDetails(\n    get_current_InterfaceDeclaration_IUploadedSummaryDetails());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IUser\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IUser():\n    old.IUser;\ndeclare function use_current_InterfaceDeclaration_IUser(\n    use: current.IUser);\nuse_current_InterfaceDeclaration_IUser(\n    get_old_InterfaceDeclaration_IUser());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IUser\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IUser():\n    current.IUser;\ndeclare function use_old_InterfaceDeclaration_IUser(\n    use: old.IUser);\nuse_old_InterfaceDeclaration_IUser(\n    get_current_InterfaceDeclaration_IUser());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IVersion\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IVersion():\n    old.IVersion;\ndeclare function use_current_InterfaceDeclaration_IVersion(\n    use: current.IVersion);\nuse_current_InterfaceDeclaration_IVersion(\n    get_old_InterfaceDeclaration_IVersion());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"InterfaceDeclaration_IVersion\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IVersion():\n    current.IVersion;\ndeclare function use_old_InterfaceDeclaration_IVersion(\n    use: old.IVersion);\nuse_old_InterfaceDeclaration_IVersion(\n    get_current_InterfaceDeclaration_IVersion());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_MessageType\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_MessageType():\n    old.MessageType;\ndeclare function use_current_EnumDeclaration_MessageType(\n    use: current.MessageType);\nuse_current_EnumDeclaration_MessageType(\n    get_old_EnumDeclaration_MessageType());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_MessageType\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_MessageType():\n    current.MessageType;\ndeclare function use_old_EnumDeclaration_MessageType(\n    use: old.MessageType);\nuse_old_EnumDeclaration_MessageType(\n    get_current_EnumDeclaration_MessageType());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_NackErrorType\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_NackErrorType():\n    old.NackErrorType;\ndeclare function use_current_EnumDeclaration_NackErrorType(\n    use: current.NackErrorType);\nuse_current_EnumDeclaration_NackErrorType(\n    get_old_EnumDeclaration_NackErrorType());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_NackErrorType\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_NackErrorType():\n    current.NackErrorType;\ndeclare function use_old_EnumDeclaration_NackErrorType(\n    use: old.NackErrorType);\nuse_old_EnumDeclaration_NackErrorType(\n    get_current_EnumDeclaration_NackErrorType());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_ScopeType\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_ScopeType():\n    old.ScopeType;\ndeclare function use_current_EnumDeclaration_ScopeType(\n    use: current.ScopeType);\nuse_current_EnumDeclaration_ScopeType(\n    get_old_EnumDeclaration_ScopeType());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_ScopeType\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_ScopeType():\n    current.ScopeType;\ndeclare function use_old_EnumDeclaration_ScopeType(\n    use: old.ScopeType);\nuse_old_EnumDeclaration_ScopeType(\n    get_current_EnumDeclaration_ScopeType());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryObject\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_SummaryObject():\n    old.SummaryObject;\ndeclare function use_current_TypeAliasDeclaration_SummaryObject(\n    use: current.SummaryObject);\nuse_current_TypeAliasDeclaration_SummaryObject(\n    get_old_TypeAliasDeclaration_SummaryObject());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryObject\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_SummaryObject():\n    current.SummaryObject;\ndeclare function use_old_TypeAliasDeclaration_SummaryObject(\n    use: old.SummaryObject);\nuse_old_TypeAliasDeclaration_SummaryObject(\n    get_current_TypeAliasDeclaration_SummaryObject());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryTree\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_SummaryTree():\n    old.SummaryTree;\ndeclare function use_current_TypeAliasDeclaration_SummaryTree(\n    use: current.SummaryTree);\nuse_current_TypeAliasDeclaration_SummaryTree(\n    get_old_TypeAliasDeclaration_SummaryTree());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryTree\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_SummaryTree():\n    current.SummaryTree;\ndeclare function use_old_TypeAliasDeclaration_SummaryTree(\n    use: old.SummaryTree);\nuse_old_TypeAliasDeclaration_SummaryTree(\n    get_current_TypeAliasDeclaration_SummaryTree());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"RemovedEnumDeclaration_SummaryType\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_SummaryType():\n    old.SummaryType;\ndeclare function use_current_RemovedEnumDeclaration_SummaryType(\n    use: current.SummaryType);\nuse_current_RemovedEnumDeclaration_SummaryType(\n    get_old_EnumDeclaration_SummaryType());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"RemovedEnumDeclaration_SummaryType\": {\"backCompat\": false}\n*/\ndeclare function get_current_RemovedEnumDeclaration_SummaryType():\n    current.SummaryType;\ndeclare function use_old_EnumDeclaration_SummaryType(\n    use: old.SummaryType);\nuse_old_EnumDeclaration_SummaryType(\n    get_current_RemovedEnumDeclaration_SummaryType());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryTypeNoHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_TypeAliasDeclaration_SummaryTypeNoHandle():\n    old.SummaryTypeNoHandle;\ndeclare function use_current_TypeAliasDeclaration_SummaryTypeNoHandle(\n    use: current.SummaryTypeNoHandle);\nuse_current_TypeAliasDeclaration_SummaryTypeNoHandle(\n    get_old_TypeAliasDeclaration_SummaryTypeNoHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"TypeAliasDeclaration_SummaryTypeNoHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_TypeAliasDeclaration_SummaryTypeNoHandle():\n    current.SummaryTypeNoHandle;\ndeclare function use_old_TypeAliasDeclaration_SummaryTypeNoHandle(\n    use: old.SummaryTypeNoHandle);\nuse_old_TypeAliasDeclaration_SummaryTypeNoHandle(\n    get_current_TypeAliasDeclaration_SummaryTypeNoHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_TreeEntry\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_EnumDeclaration_TreeEntry():\n    old.TreeEntry;\ndeclare function use_current_EnumDeclaration_TreeEntry(\n    use: current.TreeEntry);\nuse_current_EnumDeclaration_TreeEntry(\n    get_old_EnumDeclaration_TreeEntry());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.1024.0:\n* \"EnumDeclaration_TreeEntry\": {\"backCompat\": false}\n*/\ndeclare function get_current_EnumDeclaration_TreeEntry():\n    current.TreeEntry;\ndeclare function use_old_EnumDeclaration_TreeEntry(\n    use: old.TreeEntry);\nuse_old_EnumDeclaration_TreeEntry(\n    get_current_EnumDeclaration_TreeEntry());\n"]}