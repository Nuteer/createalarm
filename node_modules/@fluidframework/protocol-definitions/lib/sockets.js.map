{"version":3,"file":"sockets.js","sourceRoot":"","sources":["../src/sockets.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ConnectionMode, IClient, ISignalClient } from \"./clients\";\nimport { IClientConfiguration } from \"./config\";\nimport { ISequencedDocumentMessage, ISignalMessage } from \"./protocol\";\nimport { ITokenClaims } from \"./tokens\";\n\n/**\n * Message sent to connect to the given document\n */\nexport interface IConnect {\n    /**\n     *  The tenant ID for the document\n     */\n    tenantId: string;\n\n    /**\n     * The document that is being connected to\n     */\n    id: string;\n\n    /**\n     * Authorization token\n     */\n    token: string | null;\n\n    /**\n     * Type of the client trying to connect\n     */\n    client: IClient;\n\n    /**\n     * Semver list of protocol versions supported by the client ordered in priority of use\n     */\n    versions: string[];\n\n    /**\n     * Connection mode of client.\n     */\n    mode: ConnectionMode;\n\n    /**\n     * An optional nonce used during connection to identify connection attempts\n     */\n    nonce?: string;\n\n    /**\n     * Represents the version of document at client. It should match the version on server\n     * for connection to be successful.\n     */\n    epoch?: string;\n\n    /**\n     * A list of optional features that client supports.\n     * Features supported might be service specific.\n     * If we have standardized features across all services, they need to be exposed in more structured way.\n     */\n    supportedFeatures?: Record<string, any>;\n\n    /**\n     * Properties that client can send to server to tell info about client environment. These are a bunch of properties\n     * separated by \";\" which server can log to better understand client environment etc.\n     * Format: \"prop1:val1;prop2:val2;prop3:val3\"\n    */\n    relayUserAgent?: string,\n}\n\n/**\n * Message sent to indicate a client has connected to the server\n */\nexport interface IConnected {\n    /**\n     * Claims for the client\n     */\n    claims: ITokenClaims;\n\n    /**\n     * The client who is sending the message\n     */\n    clientId: string;\n\n    /**\n     * Whether or not this is an existing document\n     */\n    existing: boolean;\n\n    /**\n     * Maximum size of a message before chunking is required\n     */\n    maxMessageSize: number;\n\n    /**\n     * Messages sent during the connection\n     */\n    initialMessages: ISequencedDocumentMessage[];\n\n    /**\n     * Signals sent during the connection\n     */\n    initialSignals: ISignalMessage[];\n\n    /**\n     * Prior clients already connected.\n     */\n    initialClients: ISignalClient[];\n\n    /**\n     * Protocol version selected by the server to communicate with the client\n     */\n    version: string;\n\n    /**\n     * List of protocol versions supported by the server\n     */\n    supportedVersions: string[];\n\n    /**\n     * Configuration details provided by the service\n     */\n    serviceConfiguration: IClientConfiguration;\n\n    /**\n     * Connection mode of client.\n     */\n    mode: ConnectionMode;\n\n    /**\n     * An optional nonce used during connection to identify connection attempts\n     */\n    nonce?: string;\n\n    /**\n     * Last known sequence number to ordering service at the time of connection\n     * It may lap actual last sequence number (quite a bit, if container  is very active).\n     * But it's best information for client to figure out how far it is behind, at least\n     * for \"read\" connections. \"write\" connections may use own \"join\" op to similar information,\n     * that is likely to be more up-to-date.\n     */\n    checkpointSequenceNumber?: number;\n\n    /**\n     * Represents the version of document at server.\n     */\n    epoch?: string;\n\n    /**\n     * A list of optional features that ordering service supports.\n     * Features supported might be service specific.\n     * If we have standardized features across all services, they need to be exposed in more structured way.\n     */\n    supportedFeatures?: Record<string, any>;\n\n    /**\n     * The time the client connected\n     */\n    timestamp?: number;\n\n    /**\n     * Properties that server can send to client to tell info about node that client is connected to. For ex, for spo\n     * it could contain info like build version, environment, region etc. These properties can be logged by client\n     * to better understand server environment etc. and use it in case error occurs.\n     * Format: \"prop1:val1;prop2:val2;prop3:val3\"\n     */\n    relayServiceAgent?: string,\n}\n"]}