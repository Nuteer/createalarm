{"version":3,"file":"validate0.39.8.js","sourceRoot":"","sources":["../../../src/test/types/validate0.39.8.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n/*\n * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n * Generated by fluid-type-validator in @fluidframework/build-tools.\n */\nimport * as old from \"@fluidframework/core-interfaces-0.39.8\";\nimport * as current from \"../../index\";\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetails\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidCodeDetails():\n    old.IFluidCodeDetails;\ndeclare function use_current_InterfaceDeclaration_IFluidCodeDetails(\n    use: current.IFluidCodeDetails);\nuse_current_InterfaceDeclaration_IFluidCodeDetails(\n    get_old_InterfaceDeclaration_IFluidCodeDetails());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetails\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidCodeDetails():\n    current.IFluidCodeDetails;\ndeclare function use_old_InterfaceDeclaration_IFluidCodeDetails(\n    use: old.IFluidCodeDetails);\nuse_old_InterfaceDeclaration_IFluidCodeDetails(\n    get_current_InterfaceDeclaration_IFluidCodeDetails());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidCodeDetailsComparer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidCodeDetailsComparer():\n    typeof old.IFluidCodeDetailsComparer;\ndeclare function use_current_VariableDeclaration_IFluidCodeDetailsComparer(\n    use: typeof current.IFluidCodeDetailsComparer);\nuse_current_VariableDeclaration_IFluidCodeDetailsComparer(\n    get_old_VariableDeclaration_IFluidCodeDetailsComparer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidCodeDetailsComparer\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidCodeDetailsComparer():\n    typeof current.IFluidCodeDetailsComparer;\ndeclare function use_old_VariableDeclaration_IFluidCodeDetailsComparer(\n    use: typeof old.IFluidCodeDetailsComparer);\nuse_old_VariableDeclaration_IFluidCodeDetailsComparer(\n    get_current_VariableDeclaration_IFluidCodeDetailsComparer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetailsComparer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidCodeDetailsComparer():\n    old.IFluidCodeDetailsComparer;\ndeclare function use_current_InterfaceDeclaration_IFluidCodeDetailsComparer(\n    use: current.IFluidCodeDetailsComparer);\nuse_current_InterfaceDeclaration_IFluidCodeDetailsComparer(\n    get_old_InterfaceDeclaration_IFluidCodeDetailsComparer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetailsComparer\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidCodeDetailsComparer():\n    current.IFluidCodeDetailsComparer;\ndeclare function use_old_InterfaceDeclaration_IFluidCodeDetailsComparer(\n    use: old.IFluidCodeDetailsComparer);\nuse_old_InterfaceDeclaration_IFluidCodeDetailsComparer(\n    get_current_InterfaceDeclaration_IFluidCodeDetailsComparer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetailsConfig\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidCodeDetailsConfig():\n    old.IFluidCodeDetailsConfig;\ndeclare function use_current_InterfaceDeclaration_IFluidCodeDetailsConfig(\n    use: current.IFluidCodeDetailsConfig);\nuse_current_InterfaceDeclaration_IFluidCodeDetailsConfig(\n    get_old_InterfaceDeclaration_IFluidCodeDetailsConfig());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidCodeDetailsConfig\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidCodeDetailsConfig():\n    current.IFluidCodeDetailsConfig;\ndeclare function use_old_InterfaceDeclaration_IFluidCodeDetailsConfig(\n    use: old.IFluidCodeDetailsConfig);\nuse_old_InterfaceDeclaration_IFluidCodeDetailsConfig(\n    get_current_InterfaceDeclaration_IFluidCodeDetailsConfig());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidConfiguration\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidConfiguration():\n    typeof old.IFluidConfiguration;\ndeclare function use_current_VariableDeclaration_IFluidConfiguration(\n    use: typeof current.IFluidConfiguration);\nuse_current_VariableDeclaration_IFluidConfiguration(\n    get_old_VariableDeclaration_IFluidConfiguration());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidConfiguration\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidConfiguration():\n    typeof current.IFluidConfiguration;\ndeclare function use_old_VariableDeclaration_IFluidConfiguration(\n    use: typeof old.IFluidConfiguration);\nuse_old_VariableDeclaration_IFluidConfiguration(\n    get_current_VariableDeclaration_IFluidConfiguration());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidConfiguration\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidConfiguration():\n    old.IFluidConfiguration;\ndeclare function use_current_InterfaceDeclaration_IFluidConfiguration(\n    use: current.IFluidConfiguration);\nuse_current_InterfaceDeclaration_IFluidConfiguration(\n    get_old_InterfaceDeclaration_IFluidConfiguration());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidConfiguration\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidConfiguration():\n    current.IFluidConfiguration;\ndeclare function use_old_InterfaceDeclaration_IFluidConfiguration(\n    use: old.IFluidConfiguration);\nuse_old_InterfaceDeclaration_IFluidConfiguration(\n    get_current_InterfaceDeclaration_IFluidConfiguration());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidHandle():\n    typeof old.IFluidHandle;\ndeclare function use_current_VariableDeclaration_IFluidHandle(\n    use: typeof current.IFluidHandle);\nuse_current_VariableDeclaration_IFluidHandle(\n    get_old_VariableDeclaration_IFluidHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidHandle():\n    typeof current.IFluidHandle;\ndeclare function use_old_VariableDeclaration_IFluidHandle(\n    use: typeof old.IFluidHandle);\nuse_old_VariableDeclaration_IFluidHandle(\n    get_current_VariableDeclaration_IFluidHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidHandle():\n    old.IFluidHandle;\ndeclare function use_current_InterfaceDeclaration_IFluidHandle(\n    use: current.IFluidHandle);\nuse_current_InterfaceDeclaration_IFluidHandle(\n    get_old_InterfaceDeclaration_IFluidHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidHandle():\n    current.IFluidHandle;\ndeclare function use_old_InterfaceDeclaration_IFluidHandle(\n    use: old.IFluidHandle);\nuse_old_InterfaceDeclaration_IFluidHandle(\n    get_current_InterfaceDeclaration_IFluidHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidHandleContext\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidHandleContext():\n    typeof old.IFluidHandleContext;\ndeclare function use_current_VariableDeclaration_IFluidHandleContext(\n    use: typeof current.IFluidHandleContext);\nuse_current_VariableDeclaration_IFluidHandleContext(\n    get_old_VariableDeclaration_IFluidHandleContext());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidHandleContext\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidHandleContext():\n    typeof current.IFluidHandleContext;\ndeclare function use_old_VariableDeclaration_IFluidHandleContext(\n    use: typeof old.IFluidHandleContext);\nuse_old_VariableDeclaration_IFluidHandleContext(\n    get_current_VariableDeclaration_IFluidHandleContext());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidHandleContext\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidHandleContext():\n    old.IFluidHandleContext;\ndeclare function use_current_InterfaceDeclaration_IFluidHandleContext(\n    use: current.IFluidHandleContext);\nuse_current_InterfaceDeclaration_IFluidHandleContext(\n    get_old_InterfaceDeclaration_IFluidHandleContext());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidHandleContext\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidHandleContext():\n    current.IFluidHandleContext;\ndeclare function use_old_InterfaceDeclaration_IFluidHandleContext(\n    use: old.IFluidHandleContext);\nuse_old_InterfaceDeclaration_IFluidHandleContext(\n    get_current_InterfaceDeclaration_IFluidHandleContext());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidLoadable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidLoadable():\n    typeof old.IFluidLoadable;\ndeclare function use_current_VariableDeclaration_IFluidLoadable(\n    use: typeof current.IFluidLoadable);\nuse_current_VariableDeclaration_IFluidLoadable(\n    get_old_VariableDeclaration_IFluidLoadable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidLoadable\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidLoadable():\n    typeof current.IFluidLoadable;\ndeclare function use_old_VariableDeclaration_IFluidLoadable(\n    use: typeof old.IFluidLoadable);\nuse_old_VariableDeclaration_IFluidLoadable(\n    get_current_VariableDeclaration_IFluidLoadable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidLoadable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidLoadable():\n    old.IFluidLoadable;\ndeclare function use_current_InterfaceDeclaration_IFluidLoadable(\n    use: current.IFluidLoadable);\nuse_current_InterfaceDeclaration_IFluidLoadable(\n    get_old_InterfaceDeclaration_IFluidLoadable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidLoadable\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidLoadable():\n    current.IFluidLoadable;\ndeclare function use_old_InterfaceDeclaration_IFluidLoadable(\n    use: old.IFluidLoadable);\nuse_old_InterfaceDeclaration_IFluidLoadable(\n    get_current_InterfaceDeclaration_IFluidLoadable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidObject\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidObject():\n    old.IFluidObject;\ndeclare function use_current_InterfaceDeclaration_IFluidObject(\n    use: current.IFluidObject);\nuse_current_InterfaceDeclaration_IFluidObject(\n    get_old_InterfaceDeclaration_IFluidObject());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidObject\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidObject():\n    current.IFluidObject;\ndeclare function use_old_InterfaceDeclaration_IFluidObject(\n    use: old.IFluidObject);\nuse_old_InterfaceDeclaration_IFluidObject(\n    get_current_InterfaceDeclaration_IFluidObject());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidPackage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidPackage():\n    old.IFluidPackage;\ndeclare function use_current_InterfaceDeclaration_IFluidPackage(\n    use: current.IFluidPackage);\nuse_current_InterfaceDeclaration_IFluidPackage(\n    get_old_InterfaceDeclaration_IFluidPackage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidPackage\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidPackage():\n    current.IFluidPackage;\ndeclare function use_old_InterfaceDeclaration_IFluidPackage(\n    use: old.IFluidPackage);\nuse_old_InterfaceDeclaration_IFluidPackage(\n    get_current_InterfaceDeclaration_IFluidPackage());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidPackageEnvironment\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidPackageEnvironment():\n    old.IFluidPackageEnvironment;\ndeclare function use_current_InterfaceDeclaration_IFluidPackageEnvironment(\n    use: current.IFluidPackageEnvironment);\nuse_current_InterfaceDeclaration_IFluidPackageEnvironment(\n    get_old_InterfaceDeclaration_IFluidPackageEnvironment());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidPackageEnvironment\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidPackageEnvironment():\n    current.IFluidPackageEnvironment;\ndeclare function use_old_InterfaceDeclaration_IFluidPackageEnvironment(\n    use: old.IFluidPackageEnvironment);\nuse_old_InterfaceDeclaration_IFluidPackageEnvironment(\n    get_current_InterfaceDeclaration_IFluidPackageEnvironment());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidRouter\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidRouter():\n    typeof old.IFluidRouter;\ndeclare function use_current_VariableDeclaration_IFluidRouter(\n    use: typeof current.IFluidRouter);\nuse_current_VariableDeclaration_IFluidRouter(\n    get_old_VariableDeclaration_IFluidRouter());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidRouter\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidRouter():\n    typeof current.IFluidRouter;\ndeclare function use_old_VariableDeclaration_IFluidRouter(\n    use: typeof old.IFluidRouter);\nuse_old_VariableDeclaration_IFluidRouter(\n    get_current_VariableDeclaration_IFluidRouter());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidRouter\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidRouter():\n    old.IFluidRouter;\ndeclare function use_current_InterfaceDeclaration_IFluidRouter(\n    use: current.IFluidRouter);\nuse_current_InterfaceDeclaration_IFluidRouter(\n    get_old_InterfaceDeclaration_IFluidRouter());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidRouter\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidRouter():\n    current.IFluidRouter;\ndeclare function use_old_InterfaceDeclaration_IFluidRouter(\n    use: old.IFluidRouter);\nuse_old_InterfaceDeclaration_IFluidRouter(\n    get_current_InterfaceDeclaration_IFluidRouter());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidRunnable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidRunnable():\n    typeof old.IFluidRunnable;\ndeclare function use_current_VariableDeclaration_IFluidRunnable(\n    use: typeof current.IFluidRunnable);\nuse_current_VariableDeclaration_IFluidRunnable(\n    get_old_VariableDeclaration_IFluidRunnable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidRunnable\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidRunnable():\n    typeof current.IFluidRunnable;\ndeclare function use_old_VariableDeclaration_IFluidRunnable(\n    use: typeof old.IFluidRunnable);\nuse_old_VariableDeclaration_IFluidRunnable(\n    get_current_VariableDeclaration_IFluidRunnable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidRunnable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidRunnable():\n    old.IFluidRunnable;\ndeclare function use_current_InterfaceDeclaration_IFluidRunnable(\n    use: current.IFluidRunnable);\nuse_current_InterfaceDeclaration_IFluidRunnable(\n    get_old_InterfaceDeclaration_IFluidRunnable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidRunnable\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidRunnable():\n    current.IFluidRunnable;\ndeclare function use_old_InterfaceDeclaration_IFluidRunnable(\n    use: old.IFluidRunnable);\nuse_old_InterfaceDeclaration_IFluidRunnable(\n    get_current_InterfaceDeclaration_IFluidRunnable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidSerializer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_IFluidSerializer():\n    typeof old.IFluidSerializer;\ndeclare function use_current_VariableDeclaration_IFluidSerializer(\n    use: typeof current.IFluidSerializer);\nuse_current_VariableDeclaration_IFluidSerializer(\n    get_old_VariableDeclaration_IFluidSerializer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_IFluidSerializer\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_IFluidSerializer():\n    typeof current.IFluidSerializer;\ndeclare function use_old_VariableDeclaration_IFluidSerializer(\n    use: typeof old.IFluidSerializer);\nuse_old_VariableDeclaration_IFluidSerializer(\n    get_current_VariableDeclaration_IFluidSerializer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidSerializer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IFluidSerializer():\n    old.IFluidSerializer;\ndeclare function use_current_InterfaceDeclaration_IFluidSerializer(\n    use: current.IFluidSerializer);\nuse_current_InterfaceDeclaration_IFluidSerializer(\n    get_old_InterfaceDeclaration_IFluidSerializer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IFluidSerializer\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IFluidSerializer():\n    current.IFluidSerializer;\ndeclare function use_old_InterfaceDeclaration_IFluidSerializer(\n    use: old.IFluidSerializer);\nuse_old_InterfaceDeclaration_IFluidSerializer(\n    get_current_InterfaceDeclaration_IFluidSerializer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidCodeDetailsComparer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():\n    old.IProvideFluidCodeDetailsComparer;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(\n    use: current.IProvideFluidCodeDetailsComparer);\nuse_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(\n    get_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidCodeDetailsComparer\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer():\n    current.IProvideFluidCodeDetailsComparer;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(\n    use: old.IProvideFluidCodeDetailsComparer);\nuse_old_InterfaceDeclaration_IProvideFluidCodeDetailsComparer(\n    get_current_InterfaceDeclaration_IProvideFluidCodeDetailsComparer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidConfiguration\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidConfiguration():\n    old.IProvideFluidConfiguration;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidConfiguration(\n    use: current.IProvideFluidConfiguration);\nuse_current_InterfaceDeclaration_IProvideFluidConfiguration(\n    get_old_InterfaceDeclaration_IProvideFluidConfiguration());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidConfiguration\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidConfiguration():\n    current.IProvideFluidConfiguration;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidConfiguration(\n    use: old.IProvideFluidConfiguration);\nuse_old_InterfaceDeclaration_IProvideFluidConfiguration(\n    get_current_InterfaceDeclaration_IProvideFluidConfiguration());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidHandle():\n    old.IProvideFluidHandle;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidHandle(\n    use: current.IProvideFluidHandle);\nuse_current_InterfaceDeclaration_IProvideFluidHandle(\n    get_old_InterfaceDeclaration_IProvideFluidHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidHandle():\n    current.IProvideFluidHandle;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidHandle(\n    use: old.IProvideFluidHandle);\nuse_old_InterfaceDeclaration_IProvideFluidHandle(\n    get_current_InterfaceDeclaration_IProvideFluidHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidHandleContext\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidHandleContext():\n    old.IProvideFluidHandleContext;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidHandleContext(\n    use: current.IProvideFluidHandleContext);\nuse_current_InterfaceDeclaration_IProvideFluidHandleContext(\n    get_old_InterfaceDeclaration_IProvideFluidHandleContext());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidHandleContext\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidHandleContext():\n    current.IProvideFluidHandleContext;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidHandleContext(\n    use: old.IProvideFluidHandleContext);\nuse_old_InterfaceDeclaration_IProvideFluidHandleContext(\n    get_current_InterfaceDeclaration_IProvideFluidHandleContext());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidLoadable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidLoadable():\n    old.IProvideFluidLoadable;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidLoadable(\n    use: current.IProvideFluidLoadable);\nuse_current_InterfaceDeclaration_IProvideFluidLoadable(\n    get_old_InterfaceDeclaration_IProvideFluidLoadable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidLoadable\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidLoadable():\n    current.IProvideFluidLoadable;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidLoadable(\n    use: old.IProvideFluidLoadable);\nuse_old_InterfaceDeclaration_IProvideFluidLoadable(\n    get_current_InterfaceDeclaration_IProvideFluidLoadable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidRouter\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidRouter():\n    old.IProvideFluidRouter;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidRouter(\n    use: current.IProvideFluidRouter);\nuse_current_InterfaceDeclaration_IProvideFluidRouter(\n    get_old_InterfaceDeclaration_IProvideFluidRouter());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidRouter\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidRouter():\n    current.IProvideFluidRouter;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidRouter(\n    use: old.IProvideFluidRouter);\nuse_old_InterfaceDeclaration_IProvideFluidRouter(\n    get_current_InterfaceDeclaration_IProvideFluidRouter());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidRunnable\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidRunnable():\n    old.IProvideFluidRunnable;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidRunnable(\n    use: current.IProvideFluidRunnable);\nuse_current_InterfaceDeclaration_IProvideFluidRunnable(\n    get_old_InterfaceDeclaration_IProvideFluidRunnable());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidRunnable\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidRunnable():\n    current.IProvideFluidRunnable;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidRunnable(\n    use: old.IProvideFluidRunnable);\nuse_old_InterfaceDeclaration_IProvideFluidRunnable(\n    get_current_InterfaceDeclaration_IProvideFluidRunnable());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidSerializer\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IProvideFluidSerializer():\n    old.IProvideFluidSerializer;\ndeclare function use_current_InterfaceDeclaration_IProvideFluidSerializer(\n    use: current.IProvideFluidSerializer);\nuse_current_InterfaceDeclaration_IProvideFluidSerializer(\n    get_old_InterfaceDeclaration_IProvideFluidSerializer());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IProvideFluidSerializer\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IProvideFluidSerializer():\n    current.IProvideFluidSerializer;\ndeclare function use_old_InterfaceDeclaration_IProvideFluidSerializer(\n    use: old.IProvideFluidSerializer);\nuse_old_InterfaceDeclaration_IProvideFluidSerializer(\n    get_current_InterfaceDeclaration_IProvideFluidSerializer());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IRequest\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IRequest():\n    old.IRequest;\ndeclare function use_current_InterfaceDeclaration_IRequest(\n    use: current.IRequest);\nuse_current_InterfaceDeclaration_IRequest(\n    get_old_InterfaceDeclaration_IRequest());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IRequest\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IRequest():\n    current.IRequest;\ndeclare function use_old_InterfaceDeclaration_IRequest(\n    use: old.IRequest);\nuse_old_InterfaceDeclaration_IRequest(\n    get_current_InterfaceDeclaration_IRequest());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IRequestHeader\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IRequestHeader():\n    old.IRequestHeader;\ndeclare function use_current_InterfaceDeclaration_IRequestHeader(\n    use: current.IRequestHeader);\nuse_current_InterfaceDeclaration_IRequestHeader(\n    get_old_InterfaceDeclaration_IRequestHeader());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IRequestHeader\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IRequestHeader():\n    current.IRequestHeader;\ndeclare function use_old_InterfaceDeclaration_IRequestHeader(\n    use: old.IRequestHeader);\nuse_old_InterfaceDeclaration_IRequestHeader(\n    get_current_InterfaceDeclaration_IRequestHeader());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IResponse\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_IResponse():\n    old.IResponse;\ndeclare function use_current_InterfaceDeclaration_IResponse(\n    use: current.IResponse);\nuse_current_InterfaceDeclaration_IResponse(\n    get_old_InterfaceDeclaration_IResponse());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_IResponse\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_IResponse():\n    current.IResponse;\ndeclare function use_old_InterfaceDeclaration_IResponse(\n    use: old.IResponse);\nuse_old_InterfaceDeclaration_IResponse(\n    get_current_InterfaceDeclaration_IResponse());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_ISerializedHandle\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_InterfaceDeclaration_ISerializedHandle():\n    old.ISerializedHandle;\ndeclare function use_current_InterfaceDeclaration_ISerializedHandle(\n    use: current.ISerializedHandle);\nuse_current_InterfaceDeclaration_ISerializedHandle(\n    get_old_InterfaceDeclaration_ISerializedHandle());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"InterfaceDeclaration_ISerializedHandle\": {\"backCompat\": false}\n*/\ndeclare function get_current_InterfaceDeclaration_ISerializedHandle():\n    current.ISerializedHandle;\ndeclare function use_old_InterfaceDeclaration_ISerializedHandle(\n    use: old.ISerializedHandle);\nuse_old_InterfaceDeclaration_ISerializedHandle(\n    get_current_InterfaceDeclaration_ISerializedHandle());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_isFluidCodeDetails\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_isFluidCodeDetails():\n    typeof old.isFluidCodeDetails;\ndeclare function use_current_VariableDeclaration_isFluidCodeDetails(\n    use: typeof current.isFluidCodeDetails);\nuse_current_VariableDeclaration_isFluidCodeDetails(\n    get_old_VariableDeclaration_isFluidCodeDetails());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_isFluidCodeDetails\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_isFluidCodeDetails():\n    typeof current.isFluidCodeDetails;\ndeclare function use_old_VariableDeclaration_isFluidCodeDetails(\n    use: typeof old.isFluidCodeDetails);\nuse_old_VariableDeclaration_isFluidCodeDetails(\n    get_current_VariableDeclaration_isFluidCodeDetails());\n\n/*\n* Validate forward compat by using old type in place of current type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_isFluidPackage\": {\"forwardCompat\": false}\n*/\ndeclare function get_old_VariableDeclaration_isFluidPackage():\n    typeof old.isFluidPackage;\ndeclare function use_current_VariableDeclaration_isFluidPackage(\n    use: typeof current.isFluidPackage);\nuse_current_VariableDeclaration_isFluidPackage(\n    get_old_VariableDeclaration_isFluidPackage());\n\n/*\n* Validate back compat by using current type in place of old type\n* If breaking change required, add in package.json under typeValidation.broken.0.39.8:\n* \"VariableDeclaration_isFluidPackage\": {\"backCompat\": false}\n*/\ndeclare function get_current_VariableDeclaration_isFluidPackage():\n    typeof current.isFluidPackage;\ndeclare function use_old_VariableDeclaration_isFluidPackage(\n    use: typeof old.isFluidPackage);\nuse_old_VariableDeclaration_isFluidPackage(\n    get_current_VariableDeclaration_isFluidPackage());\n"]}